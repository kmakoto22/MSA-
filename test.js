var Bb = Backbone,
    Bbc = Backbone.Collection,
    Bbm = Backbone.Model,
    Hb = Handlebars;
(function(b) {
    var k = p3.module("shared/task"),
        c = p3.module("LMS/assignment"),
        e = p3.module("gradebook"),
        l = p3.module("LMS/topic"),
        i = p3.module("LMS/roster"),
        j = p3.module("schedule"),
        h = p3.module("report"),
        f = p3.module("grading"),
        a = p3.module("LMS/shared/academiccalendar"),
        g = p3.module("LMS/groupPageEdit"),
        d = p3.module("faculty/courserecommendations");
    b.Data = {};
    b.Pages = [{
        Id: 1,
        ContentId: 433,
        Label: "Bulletin board",
        RoutePage: "bulletinboard",
        IconClass: "p3icon-page",
        HTMLID: "bulletin-board-btn",
        LinkId: "bulletin-board-link",
        Display: function(m) {
            var n = new g.Vs.LayoutView({
                sectionId: b.Data.sectionId,
                leadSectionId: b.Data.leadSectionId,
                content: b.Data.contentTypes,
                userHasFullAccess: b.Data.userHasFullAccess,
                isOwner: b.Data.IsOwner,
                isManager: b.Data.isManager,
                associationId: 1,
                contextLabelId: 2,
                preview: false,
                layoutId: b.Data.layoutId,
                pendingInd: false
            });
            p3.rV(n, m, true)
        },
        LinkType: "app",
        Active: true
    }, {
        Id: 2,
        ContentId: 386,
        Label: "Topics",
        RoutePage: "topics",
        IconClass: "p3icon-topics",
        HTMLID: "topics-btn",
        LinkId: "topics-link",
        Display: function(m) {
            p3.rV(new l.Vs.TopicManageView({
                sectionId: b.Data.sectionId,
                leadSectionId: b.Data.leadSectionId,
                active: true,
                future: false,
                expired: false,
                userHasFullAccess: b.Data.userHasFullAccess,
                isOwner: b.Data.IsOwner,
                isManager: b.Data.isManager,
                content: b.Data.contentTypes,
                levelNum: b.Data.levelNum || -1,
                durationId: b.Data.durationId,
                schoolYearLabel: b.Data.schoolYear,
                contextLabelId: 2,
                studentId: b.Data.studentId
            }), m, true)
        },
        LinkType: "app",
        Active: false
    }, {
        Id: 3,
        ContentId: 58,
        Label: "Assignments",
        RoutePage: "assignments",
        IconClass: "p3icon-assignments",
        HTMLID: "assignments-btn",
        LinkId: "assignments-link",
        Display: function(n) {
            var m = function() {
                var o = p3.Data.Context.getSelectedPersona().Id;
                if (o === 3 || o === 5 || o === 6 || o === 20 || o === 24) {
                    p3.rV(new c.Vs.ClassAssignmentView({
                        sectionId: b.Data.sectionId,
                        leadSectionId: b.Data.leadSectionId,
                        userHasFullAccess: b.Data.userHasFullAccess,
                        isOwner: b.Data.IsOwner,
                        isManager: b.Data.isManager,
                        content: b.Data.contentTypes
                    }), n, true)
                } else {
                    if (o === 2 || o === 1) {
                        p3.rV(new c.Vs.ClassAssignmentStudentView({
                            sectionId: b.Data.sectionId,
                            leadSectionId: b.Data.leadSectionId,
                            studentId: b.Data.studentId
                        }), n, true)
                    }
                }
            };
            h.loadReportList2(m, m)
        },
        LinkType: "app",
        Active: false
    }, {
        Id: 4,
        ContentId: 118,
        Label: "Gradebook",
        RoutePage: "gradebook",
        IconClass: "p3icon-gradebook",
        HTMLID: "grade-book-btn",
        LinkId: "grade-book-link",
        Display: function(m) {
            e.Us.OpenGradebook(b.Data.leadSectionId)
        },
        LinkType: "app",
        Active: false
    }, {
        Id: 5,
        ContentId: 87,
        Label: "Schedule",
        RoutePage: "schedule",
        IconClass: "p3icon-schedule",
        HTMLID: "schedule-btn",
        LinkId: "schedule-link",
        Display: function(m) {
            p3.rV(new j.Vs.MySchedule({
                data: aP + "DataDirect/ScheduleListSection/?format=json&sectionId=" + b.Data.leadSectionId + "&viewerPersonaId=" + p3.Data.Context.getSelectedPersona().Id,
                scheduleSectionId: b.Data.leadSectionId
            }), m, false)
        },
        LinkType: "app",
        Active: false
    }, {
        Id: 6,
        ContentId: 120,
        Label: "Grading",
        RoutePage: "grading",
        IconClass: "p3icon-grading",
        HTMLID: "grading-btn",
        LinkId: "grading-link",
        Display: function(m) {
            p3.rV(new f.Vs.LayoutView({
                sectionId: b.Data.leadSectionId,
                nonLeadsectionId: b.Data.sectionId
            }), m, true)
        },
        LinkType: "app",
        Active: false
    }, {
        Id: 7,
        ContentId: 434,
        Label: "Roster",
        RoutePage: "roster",
        IconClass: "p3icon-roster",
        HTMLID: "roster-btn",
        LinkId: "roster-link",
        Display: function(m) {
            p3.rV(new i.Vs.RosterView({
                sectionId: b.Data.sectionId,
                leadSectionId: b.Data.leadSectionId,
                durationId: b.Data.durationId,
                associationId: 1,
                enableSearch: true,
                isOwner: b.Data.IsOwner
            }), m, true)
        },
        LinkType: "app",
        Active: false
    }, {
        Id: 8,
        ContentId: 45,
        Label: "Calendar",
        RoutePage: "calendar",
        Hidden: true,
        Display: function(m) {
            p3.rV(new a.Vs.Calendar({
                leadSectionId: b.Data.leadSectionId,
                isOwner: b.Data.IsOwner,
                isManager: b.Data.isManager,
                hasFullAccess: b.Data.userHasFullAccess,
                schoolYear: b.Data.schoolYear,
                containerName: b.Data.containerName
            }), m, true)
        },
        LinkType: "app",
        Active: false
    }, {
        Id: 9,
        ContentId: 111,
        Label: "Course recommendations",
        RoutePage: "courserecommendations",
        IconClass: "p3icon-courseRequest",
        Display: function(m) {
            p3.rV(new d.Vs.LayoutView({
                sectionId: b.Data.leadSectionId,
                sectionName: b.Data.className
            }), m, true)
        },
        LinkType: "app",
        Active: false
    }, {
        Id: 10,
        ContentId: 440,
        Label: "Mastery overview",
        RoutePage: "",
        IconClass: "p3icon-masteryoverview",
        Link: "/lms-competency/mastery-overview/[sectionId]/[studentId]",
        LinkType: "spa",
        Active: false
    }];
    b.Ms.Section = Bbm.extend({
        url: function() {
            return ""
        }
    });
    b.Cs.Section = Bbc.extend({
        model: b.Ms.Section,
        initialize: function(m, n) {
            this.sectionId = n.sectionId || 0
        },
        url: function() {
            return aP + "datadirect/SectionInfoView/?format=json&sectionId=" + this.sectionId + "&associationId=1"
        }
    });
    b.Ms.Content = Bbm.extend({
        idAttribute: "ContentId",
        url: function() {
            return ""
        }
    });
    b.Cs.Content = Bbc.extend({
        model: b.Ms.Content,
        initialize: function(m, n) {
            this.sectionId = n.sectionId || 0;
            this.leadSectionId = n.leadSectionId || 0
        },
        url: function() {
            return aP + "datadirect/GroupPossibleContentGet/?format=json&leadSectionId=" + this.leadSectionId
        }
    });
    b.Data = {};
    b.Data.leadSectionId = 0;
    b.Data.durationId = 0;
    b.Data.sectionId = 0;
    b.Data.contentTypes = null;
    b.Data.MainViewRendered = false;
    b.Data.RenderedSectionId = 0;
    b.Data.teacherId = 0;
    b.Data.schoolYear = "";
    b.Data.containerName = "Calendar";
    b.Vs.MainClassView = Bb.View.extend({
        template: "academicclass/academicclassmainview.template.html",
        initialize: function(m) {
            this.Containers = {};
            if (m) {
                b.Data.sectionId = b.Data.RenderedSectionId = this.SectionId = m.SectionId
            } else {
                b.Data.sectionId = b.Data.RenderedSectionId = this.SectionId = 0
            }
            b.Data.MainViewRendered = true
        },
        dispose: function() {
            b.Data.MainViewRendered = false
        },
        render: function(m) {
            var n = this;
            p3.fT(n.template, function(p) {
                n.$el.html(p({}));
                $(m).html(n.el);
                n.Containers.Navigation = $("#academicclassnavmenu");
                n.Containers.MainContent = $("#academicclassmaincontainer");
                var o = new b.Cs.Section({}, {
                    sectionId: n.SectionId
                });
                p3.rV(new b.Vs.NavigationView({
                    ParentView: n,
                    collection: o
                }), n.Containers.Navigation, false);
                o.fetch({
                    error: function() {
                        p3.displayError("Error loading section information")
                    }
                })
            })
        }
    });
    b.Vs.NavigationView = Bb.View.extend({
        template: "academicclass/academicclassnavigationmenu.template.html",
        initialize: function(m) {
            this.collection.bind("reset change", this.renderTemplate, this);
            this.Containers = {};
            if (m) {
                this.ParentView = m.ParentView
            }
            this.enableScrollNav()
        },
        dispose: function() {
            this.disableScrollNav()
        },
        renderTemplate: function() {
            var J = this,
                H, u, G, v, n, F, r, B, C, A, z, s, I, w, x, y, q, E, m, t, p = false,
                o, D = [];
            J.collection.each(function(K) {
                if (K.get("Id") === parseInt(b.Data.sectionId, 10)) {
                    H = K.get("Teacher");
                    u = K.get("GroupName");
                    v = K.get("Identifier");
                    if (K.get("Block") !== "Random") {
                        n = K.get("Block")
                    }
                    F = K.get("Room");
                    r = K.get("Duration");
                    s = K.get("DurationId");
                    q = K.get("Description");
                    B = K.get("Level");
                    C = K.get("LevelNum");
                    G = K.get("SchoolYear");
                    if (K.get("Length") === 1) {
                        A = "1 Term"
                    } else {
                        A = K.get("Length") + " Terms"
                    }
                    H = K.get("Teacher");
                    z = K.get("LeadSectionId");
                    x = K.get("IsOwner");
                    w = K.get("IsManager");
                    I = K.get("TeacherId");
                    y = K.get("LayoutId")
                }
            });
            b.Data.className = u;
            b.Data.IsOwner = x;
            b.Data.leadSectionId = z;
            b.Data.durationId = s;
            b.Data.teacherId = I;
            b.Data.levelNum = C;
            b.Data.schoolYear = G;
            E = p3.Data.Context.getSelectedPersona().Id;
            b.Data.isManager = w;
            b.Data.userHasFullAccess = (E === 3 && b.Data.IsOwner) || b.Data.isManager;
            b.Data.layoutId = y;
            if (H !== "" || v || n || F || r || s || q || B || A) {
                p = true
            }
            o = new b.Cs.Content({}, {
                sectionId: b.Data.sectionId,
                leadSectionId: b.Data.leadSectionId
            });
            o.fetch({
                error: function() {
                    p3.displayError("Error loading available content")
                },
                success: function() {
                    b.Data.contentTypes = o;
                    o.each(function(M) {
                        var L = M.get("ContentId"),
                            N = true,
                            P, O = _.find(b.Pages, function(Q) {
                                return Q.ContentId === L
                            });
                        N = M.get("ShowContentType");
                        if (L === 111 && !p3.Data.Context.findByTaskId(53483) && N) {
                            N = false
                        }
                        if (N & L === 386) {
                            N = b.Data.userHasFullAccess || M.get("EditorAccess");
                            if (!N) {
                                P = new l.Cs.Topic({}, {
                                    sectionId: 0,
                                    leadSectionId: b.Data.leadSectionId,
                                    active: true,
                                    future: false,
                                    expired: false
                                });
                                P.fetch({
                                    async: false,
                                    success: function() {
                                        if (P.length > 0) {
                                            N = true
                                        }
                                    },
                                    error: function() {
                                        p3.displayError("Error loading topics")
                                    }
                                })
                            }
                        }
                        if (O && N) {
                            if (O.LinkType === "spa") {
                                t = (p3.Config.SkySPAUrl || "") + O.Link.replace("[sectionId]", b.Data.sectionId).replace("[studentId]", (b.Data.studentId || 0))
                            } else {
                                t = k.Us.getUrlById(1853, b.Data.sectionId + "/" + (b.Data.studentId || 0) + "/" + O.RoutePage)
                            }
                            D.push({
                                sort: O.Id,
                                title: O.Label,
                                iconClass: O.IconClass,
                                status: O.Active ? "active" : "inactive",
                                link: t,
                                pId: O.Id,
                                HTMLID: O.HTMLID,
                                LinkId: O.LinkId
                            });
                            O.Enabled = true;
                            if (L === 58) {
                                O = _.find(b.Pages, function(Q) {
                                    return Q.ContentId === 45
                                });
                                if (O) {
                                    O.Enabled = true
                                }
                            }
                        } else {
                            if (O) {
                                O.Enabled = false
                            }
                        }
                    });
                    D = _.sortBy(D, "sort");
                    p3.fT(J.template, function(L) {
                        J.$el.html(L({
                            Info: p,
                            Teacher: H,
                            GroupName: u,
                            Identifier: v,
                            Block: n,
                            Room: F,
                            Duration: r,
                            Level: B,
                            Length: A,
                            Description: q,
                            navigationItems: D
                        }))
                    });
                    var K = _.find(b.Pages, function(L) {
                        return L.Active
                    });
                    if (K && K.Enabled) {
                        K.Display($("#academicclassmaincontainer"))
                    }
                }
            });
            return this
        },
        events: {
            "click #section-description-toggle": "toggleDescription",
            "click [data-pid]": "switchTab"
        },
        render: function(m) {
            $(m).append(this.el);
            return this
        },
        toggleDescription: function(n) {
            var m = $("#section-description-content");
            if (m) {
                if (m.filter(":visible").length) {
                    m.hide(400)
                } else {
                    m.show(400)
                }
            }
            return false
        },
        switchTab: function(m) {
            if ($(m.currentTarget).attr("data-pid") === "4") {
                _.find(b.Pages, function(n) {
                    return n.Id === 4
                }).Display();
                return false
            }
        },
        enableScrollNav: function(o) {
            var n = $(document),
                m = $(".subnavbar"),
                p = m.length && m.offset().top - 101;

            function q() {
                if (m.length === 0) {
                    m = $(".subnavbar");
                    p = m.length && m.offset().top - 101
                }
                var s = n.scrollTop(),
                    r = m.hasClass("subnavbar-fixed");
                if (s >= p && !r) {
                    m.addClass("subnavbar-fixed")
                } else {
                    if (s <= p && r) {
                        m.removeClass("subnavbar-fixed")
                    }
                }
            }
            n.on("scroll", q)
        },
        disableScrollNav: function(n) {
            var m = $(document);
            m.off("scroll")
        }
    });
    b.Us.LoadPage = function(m, p, o) {
        b.Data.studentId = p || undefined;
        p3.loadingIcon("#academicclassmaincontainer");
        var n;
        _.each(b.Pages, function(q) {
            if (q.RoutePage.toLowerCase() === o.toLowerCase()) {
                q.Active = true;
                n = q
            } else {
                q.Active = false
            }
        });
        if (!b.Data.MainViewRendered || b.Data.RenderedSectionId !== m) {
            p3.renderMainPage(new b.Vs.MainClassView({
                SectionId: m
            }))
        } else {
            if (n && n.Enabled) {
                n.Display($("#academicclassmaincontainer"));
                b.Us.SwitchTabs(n)
            }
        }
    };
    b.Us.SwitchTabs = function(n) {
        var m = $(".nav-tabs").children();
        $.each(m, function() {
            var o = $(this);
            if (o.data("pid") === n.Id || (n.Id === 8 && o.data("pid") === 3)) {
                o.removeClass("inactive");
                o.addClass("active")
            } else {
                if (o.hasClass("active")) {
                    o.removeClass("active");
                    o.addClass("inactive")
                }
            }
        })
    };
    p3.router().route("academicclass/:id", "academicclass", function(m) {
        if (m.indexOf("&pk=") > -1) {
            m = m.substring(4)
        }
        b.Us.LoadPage(m, p3.Data.Context.get("UserInfo").UserId, "bulletinboard")
    });
    p3.router().route("academicclass/:id/:studentId/:page", "academicclasspage", b.Us.LoadPage)
}(p3.module("LMS/academicclass")));
(function(a) {
    var d = p3.module("cms/shared/download"),
        c = p3.module("shared/datepicker"),
        f = p3.module("cms/shared/grouppublish"),
        e = p3.module("shared/fileselection"),
        b = p3.Us.Culture;
    a.Ms.AcademicContent = Bbm.extend({
        idAttribute: "Id",
        url: function() {
            return ""
        }
    });
    a.Cs.AcademicContent = Bbc.extend({
        model: a.Ms.AcademicContent,
        initialize: function(g, h) {
            this.sectionId = h.sectionId || 0;
            this.leadSectionId = h.leadSectionId || 0;
            this.contentId = h.contentId;
            this.active = h.active;
            this.future = h.future;
            this.expired = h.expired
        },
        url: function() {
            var g = "";
            switch (this.contentId) {
                case 78:
                    g = "syllabus";
                    break;
                case 79:
                    g = "gradingrubric";
                    break;
                case 80:
                    g = "expectation";
                    break
            }
            return aP + g + "/forsection/" + this.leadSectionId + "/?format=json&active=" + this.active + "&future=" + this.future + "&expired=" + this.expired
        }
    });
    a.Ms.AcademicContentIndex = Bbm.extend({
        idAttribute: "Id",
        url: function() {
            return ""
        }
    });
    a.Cs.AcademicContentIndex = Bbc.extend({
        model: a.Ms.AcademicContentIndex,
        initialize: function(g, h) {
            this.Id = h.Id || 0;
            this.contentId = h.contentId || 0
        },
        url: function() {
            var g = "";
            switch (this.contentId) {
                case "78":
                    g = "SyllabusIndexGet";
                    break;
                case "79":
                    g = "GradingRubricIndexGet";
                    break;
                case "80":
                    g = "ExpectationIndexGet";
                    break
            }
            return aP + "datadirect/" + g + "/?format=json&Id=" + this.Id
        }
    });
    a.Ms.AcademicContentSave = Bbm.extend({
        idAttribute: "Id",
        url: function() {
            var h = "",
                g = "";
            if (this.get("Id") === 0) {
                h = "create"
            } else {
                h = "update"
            }
            switch (this.get("contentId")) {
                case 78:
                    g = "syllabus";
                    break;
                case 79:
                    g = "gradingrubric";
                    break;
                case 80:
                    g = "expectation";
                    break
            }
            return aP + g + "/" + h + "/?format=json"
        }
    });
    a.Ms.AcademicContentDelete = Bbm.extend({
        idAttribute: "Id",
        url: function() {
            var g = "";
            switch (this.get("contentId")) {
                case "78":
                    g = "syllabus";
                    break;
                case "79":
                    g = "gradingrubric";
                    break;
                case "80":
                    g = "expectation";
                    break
            }
            return aP + g + "/delete/" + this.get("Id") + "/?format=json&filename=" + this.get("FileName") + "&sectionId=" + this.get("SectionId")
        }
    });
    a.Vs.AcademicContentView = Bb.View.extend({
        template: "classpage/basecontent.template.html",
        events: {
            "click input": "refreshContent",
            "click .academic-edit-button": "openEditModal",
            "click .academic-content-add": "openAddModal",
            "click .academic-delete-button": "openDeleteModal",
            "click #syll-show-all": "toggleItems",
            "click #grad-show-all": "toggleItems",
            "click #expe-show-all": "toggleItems"
        },
        renderTemplate: function() {
            var i = this,
                g = i.collection.length > 0,
                j = false,
                h = -1;
            if (g) {
                i.collection.each(function(k) {
                    h += 1;
                    k.set("index", h);
                    if (h < 3) {
                        k.set("hide", false)
                    } else {
                        k.set("hide", true)
                    }
                })
            }
            if (i.collection.length > 3) {
                j = true
            }
            if (i.options.groupPageEdit) {
                i.template = "grouppage/academiccontent.manage.template.html"
            }
            p3.fT(i.template, function(k) {
                i.$el.html(k({
                    collection: i.collection.toJSON(),
                    header: i.options.header,
                    manageTask: i.options.manageTask,
                    haveData: g,
                    prefix: i.options.prefix,
                    viewMode: i.options.editMode === false,
                    active: i.options.active,
                    future: i.options.future,
                    expired: i.options.expired,
                    contentId: i.options.contentId,
                    canEdit: i.options.canEdit,
                    showViewAll: j,
                    expanded: i.options.expanded,
                    customHeader: i.options.customHeader
                }))
            })
        },
        initialize: function() {
            this.collection.bind("reset", this.renderTemplate, this)
        },
        render: function(g) {
            $(g).append(this.el)
        },
        refreshContent: function() {
            a.Us.refreshContent(true, 0, this.collection.leadSectionId, this)
        },
        openEditModal: function(i) {
            var l = this,
                k = i.currentTarget.attributes.getNamedItem("data-id").value,
                g = i.currentTarget.attributes.getNamedItem("data-contentid").value,
                h = l.collection.get(k),
                j = new a.Cs.AcademicContentIndex({}, {
                    Id: k,
                    contentId: g
                });
            j.fetch({
                success: function() {
                    j.each(function(n) {
                        n.set("ContextLabelId", 2)
                    });
                    var m = new a.Cs.AcademicContent({}, {
                        Id: k,
                        contentId: g
                    });
                    m = f.Us.buildPublishGroupList(l.options.sections, j, 2);
                    l.showDialog(k, h, m)
                },
                error: function() {
                    p3.displayError("Error loading academic content index")
                }
            });
            return false
        },
        openAddModal: function(h) {
            var g = new a.Ms.AcademicContent({
                Id: 0,
                FileName: ""
            });
            this.showDialog(0, g, this.options.sections);
            return false
        },
        openDeleteModal: function(j) {
            var m = this,
                l = j.currentTarget.attributes.getNamedItem("data-id").value,
                i = m.collection.get(l),
                h = j.currentTarget.attributes.getNamedItem("data-contentid").value,
                k = new a.Cs.AcademicContentIndex({}, {
                    Id: l,
                    contentId: h
                }),
                g = "";
            switch (this.contentId) {
                case "78":
                    g = "Syllabus";
                    break;
                case "79":
                    g = "Grading Rubric";
                    break;
                case "80":
                    g = "Expectations";
                    break
            }
            k.fetch({
                success: function() {
                    var n = k.length > 1;
                    p3.rV(new a.Vs.AcademicContentDeleteView({
                        groups: k,
                        showRadios: n,
                        contentView: m,
                        Id: l,
                        FileName: i.get("Attachment"),
                        Content: g,
                        contentId: h
                    }), p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal, {})
                },
                error: function() {
                    p3.displayError("Error loading academic content index")
                }
            });
            return false
        },
        showDialog: function(h, g, j) {
            var k = this,
                i = b.getDateString(b.localDateTime());
            p3.rV(new a.Vs.AcademicContentEditView({
                Id: h,
                contentItem: g,
                leadSectionId: k.options.leadSectionId,
                sections: j,
                defaultDate: i,
                contentView: k
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        },
        toggleItems: function(h) {
            var j = h.currentTarget.id,
                g = "",
                i = false;
            switch (j) {
                case "syll-show-all":
                    g = ".syll-region.initial-hide";
                    break;
                case "grad-show-all":
                    g = ".grad-region.initial-hide";
                    break;
                case "expe-show-all":
                    g = ".expe-region.initial-hide";
                    break
            }
            if ($("#" + j).hasClass("show-data")) {
                i = true;
                $("#" + j).removeClass("show-data").addClass("hide-data").html("Show Less");
                $(g).show()
            } else {
                $("#" + j).removeClass("hide-data").addClass("show-data").html("Show All");
                $(g).hide()
            }
            this.options.expanded = i;
            this.trigger("showAll", i)
        }
    });
    a.Vs.AcademicContentEditView = Bb.View.extend({
        template: "academiccontent/academiccontent.edit.template.html",
        events: {
            "click #btnSaveContent": "startContentSave",
            "click #btnSaveAddContent": "startContentSave",
            "change #tb-content-title": "removeValidation",
            "click #btnRemoveFile": "removeFile",
            initPlugins: "initializePlugins",
            templateDone: "renderGroups"
        },
        initialize: function(g) {
            p3.Layout.Containers.Modal.on("hide.contentEdit", function() {
                if (tinyMCE !== undefined) {
                    tinyMCE.execCommand("mceRemoveControl", false, "fldDescription")
                }
                p3.Layout.Containers.Modal.off("hide.contentEdit")
            });
            _.bindAll(this, "finishContentSave", "reflectProcessing")
        },
        dispose: function() {
            var g = tinyMCE.get("fldDescription");
            if (g) {
                g.remove()
            }
        },
        render: function(g) {
            var h = this;
            $(g).append(this.el);
            h.fileSelectionController = new e.Ms.Controller({
                GoogleDriveAllowed: true,
                GoogleLinksPermitted: false,
                ReplaceFile: true,
                VisibleFileLimit: true,
                ReflectProcessingCallback: h.reflectProcessing,
                UniqueId: 1
            });
            h.fileSelectionController.loadSettings(function() {
                h.renderTemplate()
            })
        },
        renderTemplate: function() {
            var g = this;
            p3.fT(g.template, function(k) {
                var h, i = "",
                    j;
                if (g.options.sections.length > 0) {
                    g.options.sections.each(function(l) {
                        if (g.options.contentItem.get("Id") > 0) {
                            if (l.get("IsSelected")) {
                                var m;
                                if (l.get("PublishDate")) {
                                    m = l.get("PublishDate").split(" ");
                                    l.set("PublishDate", m[0])
                                }
                                if (l.get("ExpireDate")) {
                                    m = l.get("ExpireDate").split(" ");
                                    l.set("ExpireDate", m[0])
                                }
                            }
                        }
                    })
                }
                switch (g.options.contentView.options.contentId) {
                    case 78:
                        i = "Syllabus";
                        break;
                    case 79:
                        i = "Grading Rubric";
                        break;
                    case 80:
                        i = "Expectations";
                        break
                }
                g.$el.html(k({
                    Id: g.options.Id,
                    contentItem: g.options.contentItem.toJSON(),
                    groups: g.options.sections.toJSON(),
                    defaultDate: g.options.defaultDate,
                    Header: i
                }));
                j = (g.options.Id > 0);
                g.groupView = new f.Vs.PublishView({
                    groups: g.options.sections,
                    showPublish: true,
                    showExpire: true,
                    isEdit: j,
                    contentId: g.options.contentView.options.contentId,
                    defaultDate: g.options.defaultDate
                });
                if (j && g.options.contentItem.get("Attachment").length > 0) {
                    h = new e.Ms.File();
                    h.populateWithExistingFile(g.options.contentItem.get("Attachment"), 0, 1);
                    g.fileSelectionController.Files.push(h)
                }
                e.Us.RenderFileSelection(g.fileSelectionController, g.$(".fs-input-container"), g.$(".fs-output-container"), g);
                g.$el.trigger($.Event("initPlugins"));
                g.$el.trigger($.Event("templateDone"))
            })
        },
        renderGroups: function() {
            var g = this;
            p3.rV(g.groupView, $("#groups-container"), true);
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        initializePlugins: function(g) {
            var h = this;
            window.setTimeout(function() {
                p3.showHtmlEditor("fldDescription", p3.Us.Enum.HtmlEditorCategories.FULLFONT, false, undefined, p3.Us.Enum.HtmlEditorEncoding.NUMERIC)
            }, 200);
            c.Us.LoadPreSelDatePickers(h.options.sections.toJSON())
        },
        removeValidation: function(g) {
            $(".content-title").removeClass("error")
        },
        reflectProcessing: function(g) {
            var h = this;
            if (g) {
                h.$("#btnSaveContent").button("loading");
                h.$("#btnSaveAddContent").button("loading");
                h.$("div.alert-error").remove()
            } else {
                h.$("#btnSaveContent").button("reset");
                h.$("#btnSaveAddContent").button("reset")
            }
        },
        startContentSave: function(g) {
            var k = this,
                j = true,
                i = "",
                h = tinyMCE.get("fldDescription");
            if (h) {
                h.save()
            }
            k.addNew = (g.target.id === "btnSaveAddContent");
            k.groups = [];
            k.saveModel = new a.Ms.AcademicContentSave({
                Id: k.options.Id,
                contentId: k.options.contentView.options.contentId
            });
            k.fileSelectionController.beginProcessing();
            if ($("#tb-content-title").val().length === 0) {
                j = false;
                $(".content-title").addClass("error")
            }
            if (j) {
                j = k.groupView.getSelectedGroupArray();
                if (j) {
                    k.groups = k.groupView.selectedArray
                } else {
                    i = k.groupView.errorMessage
                }
            }
            if (j) {
                k.fileSelectionController.requestFiles(k.finishContentSave)
            } else {
                if (i.length > 0) {
                    p3.Us.InfoMessage.ErrorBox(i, ".modal-body", false)
                }
                k.fileSelectionController.endProcessing()
            }
        },
        finishContentSave: function(m, g) {
            var n = this,
                l = "",
                i, j, h, k;
            if (!m) {
                l = "Error processing the file attachment"
            } else {
                if (g.length > 0 && g.models[0].getFileAdded() === true) {
                    i = g.models[0].getTempFileName();
                    h = i.lastIndexOf(".");
                    n.saveModel.set("Attachment", i);
                    n.saveModel.set("AttachmentExtension", i.substring(h));
                    if (!p3.Data.fileTypes) {
                        k = new d.Cs.FileTypes({}, {});
                        p3.Data.fileTypes = k;
                        k.fetch({
                            async: false,
                            error: function() {
                                p3.displayError("Error loading filetypes")
                            }
                        })
                    }
                    j = p3.Data.fileTypes.get(n.saveModel.get("AttachmentExtension"));
                    if (j) {
                        n.saveModel.set("SaveAttachment", true);
                        n.saveModel.set("OriginalAttachment", n.options.contentItem.get("Attachment"))
                    } else {
                        p3.Us.InfoMessage.ErrorBox("The selected file type is not valid", ".modal-body", true);
                        m = false
                    }
                } else {
                    if (g.length === 0) {
                        if (n.options.contentItem.get("Attachment")) {
                            n.saveModel.set("DeleteAttachment", true);
                            n.saveModel.set("Attachment", n.options.contentItem.get("Attachment"))
                        }
                    }
                }
            }
            if (m) {
                n.saveModel.set({
                    ShortDescription: $("#tb-content-title").val(),
                    Description: $("#fldDescription").val(),
                    Groups: n.groups
                });
                n.saveModel.save({}, {
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error saving Academic Content")
                    },
                    success: function() {
                        if (n.addNew) {
                            var o = new a.Ms.AcademicContent({
                                    Id: 0,
                                    contentId: n.saveModel.get("contentId")
                                }),
                                p = b.getDateString(b.localDateTime());
                            p3.rV(new a.Vs.AcademicContentEditView({
                                Id: 0,
                                contentItem: o,
                                leadSectionId: n.options.contentView.collection.leadSectionId,
                                sections: n.options.contentView.options.sections,
                                defaultDate: p,
                                contentView: n.options.contentView
                            }), p3.Layout.Containers.Modal, true);
                            c.Us.initialize(".dp-non-pre-pop");
                            p3.showHtmlEditor("fldDescription", p3.Us.Enum.HtmlEditorCategories.FULLFONT, false, undefined, p3.Us.Enum.HtmlEditorEncoding.NUMERIC);
                            p3.setModalHeight(p3.Layout.Containers.Modal)
                        } else {
                            p3.showModal(p3.Layout.Containers.Modal, "hide")
                        }
                        a.Us.refreshContent(true, 0, n.options.contentView.collection.leadSectionId, n.options.contentView)
                    }
                })
            } else {
                if (l.length > 0) {
                    p3.Us.InfoMessage.ErrorBox(l, ".modal-body", false)
                }
                n.fileSelectionController.endProcessing()
            }
            return false
        }
    });
    a.Vs.AcademicContentDeleteView = Bb.View.extend({
        template: "classpage/content.delete.template.html",
        events: {
            "click #btnConfirm": "deleteContent"
        },
        renderTemplate: function() {
            var h = this,
                g;
            h.options.groups.each(function(i) {
                if (i.get("SectionId") === parseInt(h.options.contentView.collection.leadSectionId, 10)) {
                    g = i.get("GroupName")
                }
            });
            p3.fT(h.template, function(i) {
                h.$el.html(i({
                    group: h.options.groups.toJSON(),
                    showRadios: h.options.showRadios,
                    sectionName: g,
                    Content: h.options.Content,
                    primaryGroup: false
                }))
            })
        },
        render: function(g) {
            this.renderTemplate();
            $(g).append(this.el)
        },
        deleteContent: function(h) {
            $("#btnConfirm").button("loading");
            var j = this,
                i = 0,
                g;
            if (j.options.showRadios) {
                if ($("#rdo_remove").is(":checked")) {
                    i = j.options.contentView.collection.leadSectionId
                }
            }
            g = new a.Ms.AcademicContentDelete({
                Id: this.options.Id,
                contentId: this.options.contentId,
                SectionId: i,
                FileName: j.options.FileName
            });
            g.destroy({
                error: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    p3.displayError("Error deleting content")
                },
                success: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    a.Us.refreshContent(true, 0, j.options.contentView.collection.leadSectionId, j.options.contentView)
                }
            });
            return false
        }
    });
    a.Us.refreshContent = function(j, o, n, p) {
        var l = false,
            g = false,
            m = false,
            k = false,
            i = p.options.contentId,
            h;
        if (p.options.groupPageEdit) {
            g = p.collection.active;
            m = p.collection.future;
            k = p.collection.expired
        } else {
            g = true
        }
        if (j === false || g || m || k) {
            l = true
        }
        h = new a.Cs.AcademicContent({}, {
            sectionId: o,
            leadSectionId: n,
            contentId: i,
            active: g,
            future: m,
            expired: k
        });
        p.options.editMode = j;
        p.options.active = g;
        p.options.future = m;
        p.options.expired = k;
        if (l) {
            h.fetch({
                success: function() {
                    p.collection = h;
                    p.renderTemplate();
                    if (j) {
                        $(".academic-edit-button").show();
                        $(".academic-delete-button").show()
                    }
                }
            })
        } else {
            h.remove(h.at(0));
            p.collection = h;
            p.renderTemplate()
        }
    }
}(p3.module("lms/academiccontent")));
(function(a) {
    var b = p3.module("LMS/groupPageEdit");
    p3.router().route("activitypageedit/:sectionId/:leadSectionId", "activitypageedit", function(d, c) {
        p3.setTitle("Edit Bulletinboard");
        b.Us.loadPageEditor(c, d, 8, 24)
    })
}(p3.module("LMS/activitybulletinboard")));
(function(a) {
    var d = p3.module("shared/task"),
        e = p3.module("LMS/topic"),
        c = p3.module("LMS/roster"),
        b = p3.module("LMS/groupPageEdit");
    a.Data = {};
    a.Pages = [{
        Id: 1,
        ContentId: 433,
        Label: "Bulletin Board",
        RoutePage: "bulletinboard",
        IconClass: "p3icon-page",
        HTMLID: "bulletin-board-btn",
        LinkId: "bulletin-board-link",
        Display: function(f) {
            var g = new b.Vs.LayoutView({
                sectionId: a.Data.sectionId,
                leadSectionId: a.Data.leadSectionId,
                content: a.Data.contentTypes,
                userHasFullAccess: a.Data.userHasFullAccess,
                isOwner: a.Data.IsOwner,
                isManager: a.Data.isManager,
                associationId: 8,
                contextLabelId: 24,
                preview: false,
                layoutId: a.Data.layoutId,
                pendingInd: false
            });
            p3.rV(g, f, true)
        },
        Active: true
    }, {
        Id: 2,
        ContentId: 386,
        Label: "Topics",
        RoutePage: "topics",
        IconClass: "p3icon-topics",
        HTMLID: "topics-btn",
        LinkId: "topics-link",
        Display: function(f) {
            p3.rV(new e.Vs.TopicManageView({
                sectionId: a.Data.sectionId,
                leadSectionId: a.Data.leadSectionId,
                active: true,
                future: false,
                expired: false,
                userHasFullAccess: a.Data.userHasFullAccess,
                isOwner: a.Data.IsOwner,
                isManager: a.Data.isManager,
                content: a.Data.contentTypes,
                levelNum: a.Data.levelNum || -1,
                durationId: a.Data.durationId,
                schoolYearLabel: a.Data.schoolYear,
                contextLabelId: 24
            }), f, true)
        },
        Active: false
    }, {
        Id: 3,
        ContentId: 434,
        Label: "Roster",
        RoutePage: "roster",
        IconClass: "p3icon-roster",
        HTMLID: "roster-btn",
        LinkId: "roster-link",
        Display: function(f) {
            p3.rV(new c.Vs.RosterView({
                sectionId: a.Data.sectionId,
                leadSectionId: a.Data.leadSectionId,
                durationId: a.Data.durationId,
                associationId: 8,
                isOwner: a.Data.IsOwner,
                enableSearch: true,
                disableLearningProfiles: true
            }), f, true)
        },
        Active: false
    }];
    a.Cs.Section = Bbc.extend({
        initialize: function(f, g) {
            this.sectionId = g.sectionId || 0
        },
        url: function() {
            return aP + "datadirect/SectionInfoView/?format=json&sectionId=" + this.sectionId + "&associationId=8"
        }
    });
    a.Ms.Content = Bbm.extend({
        idAttribute: "ContentId",
        url: function() {
            return ""
        }
    });
    a.Cs.Content = Bbc.extend({
        model: a.Ms.Content,
        initialize: function(f, g) {
            this.sectionId = g.sectionId || 0;
            this.leadSectionId = g.leadSectionId || 0
        },
        url: function() {
            return aP + "datadirect/GroupPossibleContentGet/?format=json&leadSectionId=" + this.leadSectionId
        }
    });
    a.Data = {};
    a.Data.leadSectionId = 0;
    a.Data.durationId = 0;
    a.Data.sectionId = 0;
    a.Data.contentTypes = null;
    a.Data.MainViewRendered = false;
    a.Data.RenderedSectionId = 0;
    a.Data.schoolYear = "";
    a.Vs.MainGroupView = Bb.View.extend({
        template: "activitygroup/activitygroupmainview.template.html",
        initialize: function(f) {
            this.Containers = {};
            if (f) {
                a.Data.sectionId = a.Data.RenderedSectionId = this.SectionId = f.SectionId
            } else {
                a.Data.sectionId = a.Data.RenderedSectionId = this.SectionId = 0
            }
            a.Data.MainViewRendered = true
        },
        dispose: function() {
            a.Data.MainViewRendered = false
        },
        render: function(f) {
            var g = this;
            p3.fT(g.template, function(i) {
                g.$el.html(i({}));
                $(f).html(g.el);
                g.Containers.Navigation = $("#activitypagenavmenu");
                g.Containers.MainContent = $("#activitypagecontainer");
                var h = new a.Cs.Section({}, {
                    sectionId: g.SectionId
                });
                p3.rV(new a.Vs.NavigationView({
                    ParentView: g,
                    collection: h
                }), g.Containers.Navigation, false);
                h.fetch({
                    error: function() {
                        p3.displayError("Error loading section information")
                    }
                })
            })
        }
    });
    a.Vs.NavigationView = Bb.View.extend({
        template: "activitygroup/activitygroupnavigationmenu.template.html",
        initialize: function(f) {
            this.collection.bind("reset change", this.renderTemplate, this);
            this.Containers = {};
            if (f) {
                this.ParentView = f.ParentView
            }
            this.enableScrollNav()
        },
        dispose: function() {
            this.disableScrollNav()
        },
        renderTemplate: function() {
            var w = this,
                k, u, i, r, s, q, p, j, m, n, h, o, g = false,
                f, t = [],
                l = true,
                v;
            w.collection.each(function(x) {
                if (x.get("Id") === parseInt(a.Data.sectionId, 10)) {
                    k = x.get("GroupName");
                    i = x.get("Duration");
                    j = x.get("DurationId");
                    h = x.get("Description");
                    r = x.get("Level");
                    s = x.get("LevelNum");
                    u = x.get("SchoolYear");
                    if (x.get("Length")) {
                        if (x.get("Length") === 1) {
                            q = "1 Term"
                        } else {
                            q = x.get("Length") + " Terms"
                        }
                    }
                    p = x.get("LeadSectionId");
                    n = x.get("IsOwner");
                    m = x.get("IsManager");
                    o = x.get("LayoutId")
                }
            });
            a.Data.IsOwner = n;
            a.Data.leadSectionId = p;
            a.Data.durationId = j;
            a.Data.levelNum = s;
            a.Data.schoolYear = u;
            a.Data.isManager = m;
            a.Data.userHasFullAccess = a.Data.IsOwner || a.Data.isManager;
            a.Data.layoutId = o;
            if (i || j || h || r || q) {
                g = true
            }
            f = new a.Cs.Content({}, {
                sectionId: a.Data.sectionId,
                leadSectionId: a.Data.leadSectionId
            });
            f.fetch({
                error: function() {
                    p3.displayError("Error loading available content")
                },
                success: function() {
                    var x;
                    a.Data.contentTypes = f;
                    f.each(function(z) {
                        var y = z.get("ContentId");
                        x = _.find(a.Pages, function(A) {
                            return A.ContentId === y
                        });
                        l = z.get("ShowContentType");
                        if (l & y === 386) {
                            l = a.Data.userHasFullAccess || z.get("EditorAccess");
                            if (!l) {
                                v = new e.Cs.Topic({}, {
                                    sectionId: 0,
                                    leadSectionId: a.Data.leadSectionId,
                                    active: true,
                                    future: false,
                                    expired: false
                                });
                                v.fetch({
                                    async: false,
                                    success: function() {
                                        if (v.length > 0) {
                                            l = true
                                        }
                                    },
                                    error: function() {
                                        p3.displayError("Error loading topics")
                                    }
                                })
                            }
                        }
                        if (x && l) {
                            t.push({
                                sort: x.Id,
                                title: x.Label,
                                iconClass: x.IconClass,
                                status: x.Active ? "active" : "inactive",
                                link: d.Us.getUrlById(23139, a.Data.sectionId + "/" + x.RoutePage),
                                pId: x.Id,
                                HTMLID: x.HTMLID,
                                LinkId: x.LinkId
                            });
                            x.Enabled = true
                        } else {
                            if (x) {
                                x.Enabled = false
                            }
                        }
                    });
                    x = undefined;
                    t = _.sortBy(t, "sort");
                    p3.fT(w.template, function(y) {
                        w.$el.html(y({
                            Info: g,
                            GroupName: k,
                            Duration: i,
                            Level: r,
                            Length: q,
                            Description: h,
                            navigationItems: t
                        }))
                    });
                    x = _.find(a.Pages, function(y) {
                        return y.Active
                    });
                    if (x && x.Enabled) {
                        x.Display($("#activitypagecontainer"))
                    }
                }
            });
            return this
        },
        events: {
            "click #section-description-toggle": "toggleDescription",
            "click [data-pid]": "switchTab"
        },
        render: function(f) {
            $(f).append(this.el);
            return this
        },
        toggleDescription: function() {
            var f = $("#section-description-content");
            if (f && f.filter(":visible").length) {
                f.hide(400)
            } else {
                f.show(400)
            }
            return false
        },
        switchTab: function(f) {
            if ($(f.currentTarget).attr("data-pid") === "4") {
                _.find(a.Pages, function(g) {
                    return g.Id === 4
                }).Display();
                return false
            }
        },
        enableScrollNav: function() {
            var g = $(document),
                f = $(".subnavbar"),
                i = f.length && f.offset().top - 101,
                h = false;

            function j() {
                if (f.length === 0) {
                    f = $(".subnavbar");
                    i = f.length && f.offset().top - 101
                }
                var k = g.scrollTop();
                h = f.hasClass("subnavbar-fixed");
                if (k >= i && !h) {
                    f.addClass("subnavbar-fixed")
                } else {
                    if (k <= i && h) {
                        f.removeClass("subnavbar-fixed")
                    }
                }
            }
            g.on("scroll", j)
        },
        disableScrollNav: function() {
            var f = $(document);
            f.off("scroll")
        }
    });
    a.Us.LoadPage = function(f, h) {
        p3.loadingIcon("#activitypagecontainer");
        var g;
        _.each(a.Pages, function(i) {
            if (i.RoutePage.toLowerCase() === h.toLowerCase()) {
                i.Active = true;
                g = i
            } else {
                i.Active = false
            }
        });
        if (!a.Data.MainViewRendered || a.Data.RenderedSectionId !== f) {
            p3.renderMainPage(new a.Vs.MainGroupView({
                SectionId: f
            }))
        } else {
            if (g && g.Enabled) {
                g.Display($("#activitypagecontainer"));
                a.Us.SwitchTabs(g)
            }
        }
    };
    a.Us.SwitchTabs = function(g) {
        var f = $(".nav-tabs").children();
        $.each(f, function() {
            var h = $(this);
            if (h.data("pid") === g.Id || (g.Id === 8 && h.data("pid") === 3)) {
                h.removeClass("inactive");
                h.addClass("active")
            } else {
                if (h.hasClass("active")) {
                    h.removeClass("active");
                    h.addClass("inactive")
                }
            }
        })
    };
    p3.router().route("activitypage/:id", "activitypage", function(f) {
        if (f.indexOf("&pk=") > -1) {
            f = f.substring(4)
        }
        a.Us.LoadPage(f, p3.Data.Context.get("UserInfo").UserId, "bulletinboard")
    });
    p3.router().route("activitypage/:id/:page", "activitypage", function(f, g) {
        a.Us.LoadPage(f, g)
    })
}(p3.module("LMS/activitygroup")));
(function(a) {
    var b = p3.module("LMS/groupPageEdit");
    p3.router().route("advisorypageedit/:sectionId/:leadSectionId", "advisorypageedit", function(d, c) {
        p3.setTitle("Edit Bulletinboard");
        b.Us.loadPageEditor(c, d, 9, 22)
    })
}(p3.module("LMS/advisorybulletinboard")));
(function(a) {
    var f = p3.module("shared/mediaviewer"),
        e = p3.module("cms/shared/media"),
        b = p3.module("LMS/assignment"),
        c = p3.Us.Culture,
        g = p3.Us.Tools,
        d = p3.Us.InfoMessageLibrary;
    a.Ms.Assessment = Bbm.extend({
        idAttribute: "AssessmentId",
        urlRoot: "assessment/crud"
    });
    a.Cs.AssessmentQuestionTypes = Bbc.extend({
        model: Bbm,
        url: "DataDirect/AssessmentMaterialsGet"
    });
    a.Ms.AssessmentResult = Bbm.extend({
        idAttribute: "AssessmentResultId",
        urlRoot: "assessmentresult/crud"
    });
    a.Ms.AssessmentFacultyResult = Bbm.extend({
        idAttribute: "AssessmentResultId",
        urlRoot: "assessmentresult/StudentResultGet"
    });
    a.Ms.AssessmentCanTake = Bbm.extend({
        urlRoot: "assessment/cantake"
    });
    a.Ms.AssessmentRoster = Bbm.extend({
        idAttribute: "user_id"
    });
    a.Cs.AssessmentRoster = Bbc.extend({
        model: a.Ms.AssessmentRoster,
        url: "DataDirect/AssessmentRosterGet"
    });
    a.Ms.BulkCommit = Bbm.extend({
        url: function() {
            return aP + "assessmentresult/bulksubmit/?format=json&assignmentIndexId=" + this.get("assignmentIndexId")
        }
    });
    a.Ms.AssessmentBreakdown = Bbm.extend({
        url: "assessmentresult/BreakdownGet"
    });
    a.Ms.AlbumGet = Bbm.extend({
        url: function() {
            return aP + "datadirect/assessmentalbumget?format=json&assignmentId=" + this.get("assignmentId") + "&contentId=" + this.get("contentId")
        }
    });
    a.Ms.Album = Bbm.extend({
        idAttribute: "album_id"
    });
    a.Cs.Album = Bbc.extend({
        model: a.Ms.Album,
        url: "DataDirect/AssessmentAlbumsGet"
    });
    a.Ms.AssessmentGet = Bbm.extend({
        idAttribute: "AssessmentId",
        urlRoot: "assessment/takeAssessment/"
    });
    a.Ms.AssessmentStudentReview = Bbm.extend({
        idAttribute: "AssessmentId",
        urlRoot: "assessment/reviewAssessment/"
    });
    a.Cs.StudentInfo = Bbc.extend({
        url: function() {
            return aP + "datadirect/ParentStudentUserInfo/"
        }
    });
    a.Ms.AssessmentReviewCheck = Bbm.extend({
        url: "DataDirect/AssessmentReviewCheck"
    });
    a.Ms.AssessmentPause = Bbm.extend({
        url: "assessmentresult/PauseAssessments"
    });
    a.Vs.EditDetail = Bb.View.extend({
        template: "assessment/assessment.detail.edit.template.html",
        initialize: function() {
            this.Containers = {};
            this.options.editMode = this.options.editMode || "content";
            this.locked = this.options.locked;
            if (b.Data.currentLeadSectionId) {
                a.Data.currentLeadSectionId = b.Data.currentLeadSectionId
            }
        },
        dispose: function() {
            var h, i;
            p3.closeFixedSidebar();
            p3.closeFixedFooter();
            for (h in tinyMCE.editors) {
                if (tinyMCE.editors.hasOwnProperty(h)) {
                    i = tinyMCE.editors[h];
                    if (i.editorId.indexOf("question-text-") > -1) {
                        tinyMCE.editors[h].remove()
                    }
                }
            }
            if (a.Data.currentLeadSectionId) {
                b.Data.currentLeadSectionId = undefined;
                a.Data.currentLeadSectionId = undefined
            }
        },
        render: function(h) {
            var i = this;
            $(h).html(i.el);
            p3.fT(i.template, function(j) {
                i.$el.html(j({}));
                i.Containers.WorkspaceWrap = $(".assessment-page-wrap");
                i.Containers.Workspace = $("#assessment-workspace");
                i.assignment = new b.Ms.Assignment();
                i.assignment.set("AssignmentId", i.options.assignmentId);
                i.assignment.fetch({
                    error: function() {
                        p3.displayError("Error loading assignment")
                    },
                    success: function(m, n) {
                        var l = i.assignment.get("AssessmentId");
                        var k = new a.Ms.Assessment({
                            AssessmentId: l,
                            AssignmentId: i.options.assignmentId
                        });
                        i.assessment = k;
                        if (l > 0) {
                            k.fetch({
                                async: false,
                                data: {
                                    assessmentId: l
                                }
                            })
                        }
                        i.renderSidebar();
                        i.renderBuilder();
                        i.renderFooter()
                    }
                })
            })
        },
        renderSidebar: function() {
            var h = this;
            h.sidebarView = new a.Vs.Sidebar({
                assignment: h.assignment,
                parentView: h,
                assessment: h.assessment,
                assignmentId: h.options.assignmentId,
                assignmentIndexId: h.options.assignmentIndexId,
                locked: h.locked
            });
            p3.renderFixedSidebar(h.sidebarView)
        },
        renderBuilder: function() {
            var i = this;
            var h = new a.Vs.Builder({
                assessment: i.assessment,
                assignment: i.assignment,
                assignmentIndexId: i.options.assignmentIndexId,
                locked: i.locked
            });
            p3.rV(h, i.Containers.Workspace, true);
            i.builder = h
        },
        renderFooter: function() {
            var k = this,
                j = 0,
                i = 0;
            if (k.assessment.get("Questions")) {
                j = k.assessment.get("Questions").length;
                if (k.assignment.get("MaxScoreInd") == 0) {
                    i = a.Us.getPointsAssigned(k.assessment.get("Questions"))
                }
            }
            var h = new a.Vs.Footer({
                assignmentId: k.options.assignmentId,
                questionCount: j,
                pointsPer: k.assignment.get("MaxScoreInd") == 0,
                totalPoints: k.assignment.get("MaxScore"),
                pointsAssigned: i
            });
            p3.renderFixedFooter(h)
        }
    });
    a.Vs.Footer = Bb.View.extend({
        template: "assessment/assessment.footer.template.html",
        render: function(h) {
            var i = this;
            $(h).html(i.el);
            i.renderTemplate()
        },
        renderTemplate: function() {
            var h = this;
            p3.fT(h.template, function(i) {
                h.$el.html(i({
                    assignmentId: h.options.assignmentId,
                    questionCount: h.options.questionCount,
                    pointsAssigned: h.options.pointsAssigned,
                    pointsPer: h.options.pointsPer,
                    totalPoints: h.options.totalPoints
                }))
            })
        }
    });
    a.Vs.Sidebar = Bb.View.extend({
        template: "assessment/assessment.sidebar.template.html",
        className: "workspace-sidebar",
        events: {
            "click #edit-settings-button": "showEditSettings",
            "click .backlink": "doBack"
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(h) {
            var i = this;
            $(h).html(i.el);
            i.renderTemplate()
        },
        renderTemplate: function() {
            var i = this;
            var h = new a.Cs.AssessmentQuestionTypes();
            h.fetch({
                success: function() {
                    p3.fT(i.template, function(j) {
                        i.$el.html(j({
                            Name: i.options.assignment.get("ShortDescription"),
                            QuestionTypes: h.toJSON()
                        }));
                        if (i.options.locked) {
                            $(".pages-layout-draggable").children().attr("disabled", "disabled")
                        }
                    })
                },
                error: function() {
                    p3.displayError("Error loading question types.")
                }
            })
        },
        updateView: function() {
            var j = this,
                i = "unlimited";
            if (j.options.assignment.get("TimeToComplete") > 0) {
                i = j.options.assignment.get("TimeToComplete")
            }
            $("#assignment-name").html(j.options.assignment.get("ShortDescription"));
            $("#assessment-name").html(j.options.assignment.get("ShortDescription"));
            $("#time-span").html(i);
            $("#start-string").html(a.Us.getStartString(j.options.assignment, j.options.assignmentIndexId));
            var h = !j.options.assignment.get("MaxScoreInd");
            if (h) {
                $("#points-display").show();
                $("#total-points").html(j.options.assignment.get("MaxScore"));
                $("#points-assigned").html(a.Us.getPointsAssigned(j.options.assessment.get("Questions")))
            } else {
                $("#points-display").hide()
            }
            j.options.parentView.builder.renderQuestions()
        },
        showEditSettings: function(h) {
            h.preventDefault();
            var j = this;
            if (a.Data.currentLeadSectionId) {
                b.Data.currentLeadSectionId = a.Data.currentLeadSectionId
            }
            var i = b.Us.AddAssessmentView(j.options.assignment);
            if (i !== undefined) {
                i.on("saveAssessment", function(k, l) {
                    j.options.assignment.fetch({
                        error: function() {
                            p3.displayError("Error loading assignment")
                        },
                        success: function(m, n) {
                            j.updateView();
                            j.options.parentView.assignment = l
                        }
                    })
                })
            }
        },
        doBack: function() {
            window.history.back()
        }
    });
    a.Vs.Builder = Bb.View.extend({
        template: "assessment/assessment.builder.template.html",
        events: {
            "click li.assess-tab": "switchPane",
            "change .question-text-box": "textChange",
            "change .points-box": "integerBoxChange",
            "change .max-character-box": "integerBoxChange",
            "change .fillin-answer-box": "textChange",
            "change .answer-box": "textChange",
            "click .correct-button": "correctChange",
            "click .delete-answer-button": "deleteAnswer",
            "click .add-answer-button": "addAnswer",
            "click .delete-question-button": "deleteQuestion",
            "click .edit-type-button": "editorTypeChange",
            "click .result-setting-btn": "resultSettingChange",
            "click .add-embed-link": "addEmbed",
            "click .edit-embed-link": "editEmbed",
            "click .add-photo-link": "addPhoto",
            "click .edit-photo-link": "editPhoto",
            "click .add-audio-link": "addAudio",
            "click .edit-audio-link": "editAudio"
        },
        initialize: function(h) {
            this.Containers = {};
            this.assignment = h.assignment;
            this.assessment = h.assessment
        },
        dispose: function() {
            var h = tinyMCE.get("description-box");
            if (h) {
                h.remove();
                h = null
            }
        },
        render: function(h) {
            var i = this;
            $(h).html(i.el);
            i.renderTemplate()
        },
        renderTemplate: function() {
            var h = this;
            p3.fT(h.template, function(l) {
                var k = "unlimited",
                    i = 0,
                    j;
                if (h.assignment.get("TimeToComplete") > 0) {
                    k = h.assignment.get("TimeToComplete")
                }
                j = h.assessment.get("AssessmentDescription");
                if (j && j.length > 0) {
                    i = j.length
                }
                h.$el.html(l({
                    Name: h.assignment.get("ShortDescription"),
                    Chars: i,
                    Time: k,
                    Description: j,
                    assessment: h.assessment.toJSON(),
                    StartString: a.Us.getStartString(h.assignment, h.options.assignmentIndexId),
                    locked: h.options.locked
                }));
                h.Containers.QuestionContainer = $("#question-container");
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                    window.setTimeout(function() {
                        if (!h.options.locked) {
                            h.initDraggable();
                            h.initSortable()
                        }
                        h.checkAlbumStatus();
                        h.renderQuestions();
                        p3.showHtmlEditor("description-box", p3.Us.Enum.HtmlEditorCategories.FULL, false, function() {
                            var m = tinyMCE.get("description-box");
                            if (m !== undefined) {
                                m.onSetContent.add(function(p, o) {
                                    var n = p.getContent();
                                    if (n.length > 2000) {
                                        $("#assess-description-count").addClass("badge-error")
                                    } else {
                                        $("#assess-description-count").removeClass("badge-error");
                                        h.saveDescription(n)
                                    }
                                    $("#assess-description-count").html(n.length)
                                });
                                m.onChange.add(function(p, o) {
                                    var n = p.getContent();
                                    if (n.length > 2000) {
                                        $("#assess-description-count").addClass("badge-error")
                                    } else {
                                        $("#assess-description-count").removeClass("badge-error");
                                        h.saveDescription(n)
                                    }
                                    $("#assess-description-count").html(n.length)
                                });
                                m.onKeyUp.add(function(p, o) {
                                    var n = p.getContent();
                                    if (n.length > 2000) {
                                        $("#assess-description-count").addClass("badge-error")
                                    } else {
                                        $("#assess-description-count").removeClass("badge-error")
                                    }
                                    $("#assess-description-count").html(n.length)
                                })
                            } else {
                                p3.log("error TinyMCE not loaded yet.")
                            }
                        }, p3.Us.Enum.HtmlEditorEncoding.NUMERIC)
                    }, 400)
                })
            })
        },
        checkAlbumStatus: function() {
            var i = this,
                h = new a.Cs.Album();
            i.albums = h;
            h.fetch({
                async: false,
                data: {
                    assignmentId: i.assignment.get("AssignmentId")
                },
                success: function() {
                    var n = i.assessment.get("Questions"),
                        l = "",
                        k = 0,
                        m, j;
                    if (n) {
                        for (m = 0; m < n.length; m++) {
                            if (n[m].AlbumId > 0) {
                                j = h.get(n[m].AlbumId);
                                if (j !== undefined) {
                                    if (j.get("num_files") > j.get("files_processed")) {
                                        n[m].AlbumLocked = true
                                    }
                                } else {
                                    k = k + 1;
                                    if (l.length > 0) {
                                        l = l + ", "
                                    }
                                    l = l + "ID=" + n[m].AlbumId + "(Q=" + m + ")"
                                }
                            }
                        }
                        if (k > 0) {
                            p3.displayError("Error loading assessment albums (" + k + ")")
                        }
                    }
                },
                error: function() {
                    p3.displayError("Error loading assessment albums")
                }
            })
        },
        saveDescription: function(h) {
            var i = this;
            if (h.length > 0 || i.assessment.get("AssessmentId") > 0) {
                i.assessment.set("AssessmentDescription", h);
                i.assessment.save({}, {
                    success: function() {
                        $("#assess-preview-btn").show()
                    },
                    error: function() {
                        p3.displayError("Error saving assessment")
                    }
                })
            }
        },
        resultSettingChange: function(h) {
            var i = this;
            switch (h.currentTarget.id) {
                case "btn-show-time-on":
                    i.assessment.set("ShowTime", true);
                    break;
                case "btn-show-time-off":
                    i.assessment.set("ShowTime", false);
                    break;
                case "btn-show-score-on":
                    i.assessment.set("ShowScore", true);
                    $("#btn-score-only-on").removeAttr("disabled");
                    $("#btn-show-answers-on").removeAttr("disabled");
                    break;
                case "btn-show-score-off":
                    i.assessment.set({
                        ShowScore: false,
                        ShowAnswers: false,
                        ScoreOnly: false
                    });
                    $("#btn-score-only-off").addClass("active");
                    $("#btn-score-only-on").removeClass("active");
                    $("#btn-score-only-on").attr("disabled", "disabled");
                    $("#btn-show-answers-off").addClass("active");
                    $("#btn-show-answers-on").removeClass("active");
                    $("#btn-show-answers-on").attr("disabled", "disabled");
                    break;
                case "btn-show-again-on":
                    i.assessment.set("ShowTryAgain", true);
                    break;
                case "btn-show-again-off":
                    i.assessment.set("ShowTryAgain", false);
                    break;
                case "btn-show-answers-on":
                    i.assessment.set("ShowAnswers", true);
                    break;
                case "btn-show-answers-off":
                    i.assessment.set("ShowAnswers", false);
                    break;
                case "btn-show-complete-on":
                    i.assessment.set("ShowOnComplete", true);
                    $(".result-setting-btn").removeAttr("disabled");
                    $("#btn-score-only-on").attr("disabled", "disabled");
                    $("#btn-show-answers-on").attr("disabled", "disabled");
                    break;
                case "btn-show-complete-off":
                    i.assessment.set({
                        ShowOnComplete: false,
                        ShowTime: false,
                        ShowScore: false,
                        ShowTryAgain: false,
                        ShowAnswers: false,
                        RestrictResults: false,
                        ScoreOnly: false
                    });
                    $(".result-setting-btn").attr("disabled", "disabled");
                    $(".result-setting-btn.btn-denied").addClass("active");
                    $(".result-setting-btn.btn-approve").removeClass("active");
                    $("#btn-show-complete-off").removeAttr("disabled");
                    $("#btn-show-complete-on").removeAttr("disabled");
                    break;
                case "btn-restrict-results-on":
                    i.assessment.set("RestrictResults", true);
                    break;
                case "btn-restrict-results-off":
                    i.assessment.set("RestrictResults", false);
                    break;
                case "btn-score-only-on":
                    i.assessment.set("ScoreOnly", true);
                    break;
                case "btn-score-only-off":
                    i.assessment.set("ScoreOnly", false);
                    break
            }
            i.assessment.save({}, {
                success: function() {
                    $("#assess-preview-btn").show()
                },
                error: function() {
                    p3.displayError("Error saving assessment")
                }
            })
        },
        switchPane: function(h) {
            $("div.tab-pane").removeClass("active");
            switch (h.target.id) {
                case "intro-tab":
                    $("#intro-pane").addClass("active");
                    break;
                case "question-tab":
                    $("#question-pane").addClass("active");
                    break;
                case "results-tab":
                    $("#results-pane").addClass("active");
                    break
            }
        },
        initDraggable: function() {
            $(".pages-layout-draggable-content").draggable({
                connectToSortable: "#question-container",
                placeholder: "pages-layout-placeholder",
                forcePlaceholderSize: true,
                tolerance: "pointer",
                helper: "clone",
                delay: 300,
                appendTo: "body"
            }).disableSelection()
        },
        initSortable: function() {
            var h = this;
            $("#question-container").sortable({
                items: ".question-region",
                handle: ".question-header-region",
                placeholder: "pages-layout-placeholder",
                forcePlaceholderSize: true,
                tolerance: "pointer",
                delay: 300,
                sort: function(l, n) {
                    var i = $("html, body"),
                        j = $(window),
                        k = j.scrollTop() + j.height(),
                        m = n.placeholder.offset().top;
                    if ((m - 250) < j.scrollTop()) {
                        i.stop().animate({
                            scrollTop: (m - 150)
                        }, "slow")
                    } else {
                        if ((m + 150) > k) {
                            i.stop().animate({
                                scrollTop: (m + 50)
                            }, "slow")
                        }
                    }
                },
                stop: function(k, o) {
                    var i = $(o.item),
                        m = i.data("id"),
                        n = i.index(),
                        l, j = [];
                    if (i.hasClass("workspace-draggable-item")) {
                        if ($(".question-region").length == 0) {
                            n = 0
                        }
                        _.defer(function() {
                            i.remove()
                        });
                        l = h.getQuestionOrder(n, false);
                        if (m == 4) {
                            j.push({
                                SortOrder: 1,
                                Description: "True"
                            });
                            j.push({
                                SortOrder: 2,
                                Description: "False"
                            })
                        }
                        if (m == 3) {
                            j.push({
                                SortOrder: 1
                            });
                            j.push({
                                SortOrder: 2
                            });
                            j.push({
                                SortOrder: 3
                            })
                        }
                        h.clearEditor();
                        l.push({
                            QuestionTypeId: m,
                            SortOrder: n,
                            QuestionType: a.Us.getQuestionTypeName(m),
                            Answers: j
                        });
                        h.saveQuestions(l, true);
                        h.updateQuestionCount()
                    } else {
                        h.clearEditor();
                        l = h.getQuestionOrder(-1, true);
                        h.saveQuestions(l, true)
                    }
                }
            })
        },
        clearEditor: function() {
            var h, i;
            if (tinyMCE === undefined) {
                return
            }
            for (h in tinyMCE.editors) {
                if (tinyMCE.editors.hasOwnProperty(h)) {
                    i = tinyMCE.editors[h];
                    if (i.editorId.indexOf("question-text-") > -1) {
                        tinyMCE.editors[h].save();
                        tinyMCE.editors[h].remove()
                    }
                }
            }
        },
        getQuestionOrder: function(l, p) {
            var o = [],
                m = -1,
                q = -1,
                r = this,
                n = r.assessment.get("Questions"),
                h = 0,
                j = 0,
                k;
            $(".question-region").each(function(w, x) {
                q = $(x).data("type");
                h = $(x).data("album");
                j = $(x).data("content");
                var z = 0,
                    y = 0,
                    v = "",
                    i = [],
                    B = false,
                    t = "",
                    u = "";
                if (w == l) {
                    m += 2
                } else {
                    m += 1
                }
                if (r.assignment.get("MaxScoreInd") == 0) {
                    z = $(x).find(".points-box").val()
                }
                if (q == 1) {
                    y = $(x).find(".max-character-box").val();
                    B = $(x).find(".use-editor-button").hasClass("active")
                }
                if (q == 2) {
                    v = $(x).find(".fillin-answer-box").val()
                }
                if (q == 3 || q == 4) {
                    $(x).find(".answer-container").each(function(D, C) {
                        i.push({
                            SortOrder: D,
                            Description: $(C).find(".answer-box").val(),
                            IsCorrect: $(C).find(".correct-button").hasClass("active")
                        })
                    })
                }
                if ($(x).find(".edit-embed-link")) {
                    var A = $(x).find(".edit-embed-link").data("sort");
                    $(x).find(".edit-embed-link").data("sort", m);
                    for (k = 0; k < n.length; k++) {
                        if (n[k].SortOrder == A) {
                            t = n[k].Embed;
                            u = n[k].EmbedTitle;
                            break
                        }
                    }
                }
                if (!p) {
                    var s = tinyMCE.get($(x).find(".question-text-box").attr("id"));
                    if (s) {
                        s.save()
                    }
                }
                o.push({
                    QuestionTypeId: q,
                    QuestionType: a.Us.getQuestionTypeName(q),
                    Description: $(x).find(".question-text-box").val() || $(x).find(".question-text-box").html(),
                    Points: z,
                    CharacterLimit: y,
                    PossibleAnswers: v,
                    SortOrder: m,
                    UseEditor: B,
                    Answers: i,
                    Embed: t,
                    EmbedTitle: u,
                    ContentId: j,
                    AlbumId: h
                })
            });
            return o
        },
        saveQuestions: function(h, i) {
            var j = this;
            j.assessment.set({
                Questions: h
            });
            j.assessment.save({}, {
                error: function() {
                    p3.displayError("Error saving questions")
                },
                success: function() {
                    if (i) {
                        j.checkAlbumStatus();
                        j.renderQuestions()
                    }
                }
            })
        },
        renderQuestions: function() {
            var i = this;
            var h = new a.Vs.QuestionView({
                questions: i.assessment.get("Questions"),
                assignment: i.assignment,
                parentView: i,
                locked: i.options.locked
            });
            p3.rV(h, i.Containers.QuestionContainer, true)
        },
        textChange: function(h) {
            this.saveQuestions(this.getQuestionOrder(-1, false), false)
        },
        integerBoxChange: function(i) {
            var h = $(i.currentTarget);
            h.removeClass("box-validate");
            if (/^\d*(\.\d{1,})?$/.test(h.val())) {
                this.saveQuestions(this.getQuestionOrder(-1, false), false);
                if (h.hasClass("points-box")) {
                    $("#points-assigned").html(a.Us.getPointsAssigned(this.assessment.get("Questions")))
                }
            } else {
                h.addClass("box-validate");
                h.val("")
            }
        },
        correctChange: function(j) {
            var i = $(j.currentTarget);
            if (i.hasClass("active")) {
                i.removeClass("active")
            } else {
                if (!i.hasClass("multi")) {
                    var h = i.parentsUntil(".question-region");
                    h.find(".correct-button.active").removeClass("active")
                }
                i.addClass("active")
            }
            this.saveQuestions(this.getQuestionOrder(-1, false), false)
        },
        editorTypeChange: function(i) {
            var h = $(i.currentTarget);
            h.parent().find(".edit-type-button.active").removeClass("active");
            h.addClass("active");
            this.saveQuestions(this.getQuestionOrder(-1, false), false)
        },
        deleteAnswer: function(i) {
            var h = $(i.currentTarget);
            h.parent().parent().remove();
            this.saveQuestions(this.getQuestionOrder(-1, false), false)
        },
        addAnswer: function(i) {
            var h = $(i.currentTarget);
            h.parent().siblings(".answer-wrapper").append('<div class="row answer-container" style="margin:0px 0px 0px 20px"><div class="col-md-8"><input class="answer-box form-control" type="text" placeholder="Answer" style="width:100%;"/></div><div class="col-md-4"><button type="button" class="btn btn-default btn-sm btn-approve correct-button multi" style="margin:0px 10px 3px 5px"><i class="fa fa-check"></i> Correct</button>&nbsp;<span class="delete-answer-button" style="cursor:pointer;"><i class="fa fa-trash"></i></span></div></div>');
            this.saveQuestions(this.getQuestionOrder(-1, false), false)
        },
        deleteQuestion: function(k) {
            var l = this,
                i = $(k.currentTarget),
                h = i.closest(".question-region");
            if (h.data("album") > 0) {
                var j = new e.Ms.AlbumDelete({
                    Id: h.data("album"),
                    groupId: 0,
                    option: 1,
                    contextValue: l.assignment.get("AssignmentId"),
                    contentId: h.data("content"),
                    contextLabelId: 5
                });
                j.destroy({
                    error: function() {
                        p3.displayError("Error deleting Album")
                    }
                })
            }
            h.remove();
            this.saveQuestions(this.getQuestionOrder(-1, false), true);
            l.updateQuestionCount();
            if (!l.assignment.get("MaxScoreInd")) {
                $("#points-assigned").html(a.Us.getPointsAssigned(l.assessment.get("Questions")))
            }
        },
        addEmbed: function(j) {
            var m = this,
                h = $(j.currentTarget),
                l = h.data("sort"),
                i = '<i class="fa fa-pencil"></i> Edit Embed';
            $(".question-media.open").removeClass("open");
            var k = new a.Vs.EmbedView({
                mode: "Add",
                embed: "",
                embedTitle: ""
            });
            p3.rV(k, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            k.on("embedSaved", function(p, n) {
                var o = m.assessment.get("Questions");
                o[l].Embed = n;
                o[l].EmbedTitle = p;
                m.saveQuestions(o, false);
                h.closest(".question-media").html('<button class="btn btn-default btn-sm edit-media edit-embed-link" data-sort="' + l + '">' + i + "</button>");
                p3.showModal(p3.Layout.Containers.Modal, "hide")
            });
            return false
        },
        editEmbed: function(j) {
            var n = this,
                h = $(j.currentTarget),
                m = h.data("sort"),
                i = h.prop("disabled");
            if (!i) {
                var l = n.assessment.get("Questions");
                var k = new a.Vs.EmbedView({
                    mode: "Edit",
                    embed: l[m].Embed,
                    embedTitle: l[m].EmbedTitle
                });
                p3.rV(k, p3.Layout.Containers.Modal, true);
                p3.showModal(p3.Layout.Containers.Modal);
                k.on("embedSaved", function(p, o) {
                    l[m].Embed = o;
                    l[m].EmbedTitle = p;
                    n.saveQuestions(l, false);
                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                })
            }
            return false
        },
        addPhoto: function(j) {
            var n = this,
                h = $(j.currentTarget),
                m = h.data("sort");
            var l = n.assessment.get("Questions");
            var i = new Bbm({
                topicContentId: 0,
                shortDescription: "",
                longDescription: "",
                Url: "",
                FileName: ""
            });
            $(".question-media.open").removeClass("open");
            var k = e.Us.showAssessmentPhotoDialog(0, i, n.assignment.get("AssignmentId"));
            k.on("photoSaved", function() {
                p3.showModal(p3.Layout.Containers.Modal, "hide");
                var o = new a.Ms.AlbumGet({
                    assignmentId: n.assignment.get("AssignmentId"),
                    contentId: 31
                });
                o.fetch({
                    async: false,
                    success: function() {
                        l[m].AlbumId = o.get("album_id");
                        l[m].ContentId = 31;
                        n.saveQuestions(l, true)
                    },
                    error: function() {
                        p3.displayError("Error getting content index")
                    }
                })
            })
        },
        editPhoto: function(l) {
            var n = this,
                h = $(l.currentTarget),
                i = h.data("album"),
                k = h.prop("disabled");
            if (!k) {
                var j = new Bbm({
                    topicContentId: 0,
                    shortDescription: "",
                    longDescription: "",
                    Url: "",
                    FileName: ""
                });
                var m = e.Us.showAssessmentPhotoDialog(i, j, n.assignment.get("AssignmentId"));
                m.on("photoSaved", function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                })
            }
        },
        addAudio: function(k) {
            var n = this,
                h = $(k.currentTarget),
                m = h.data("sort");
            var l = n.assessment.get("Questions");
            var j = new Bbm({
                topicContentId: 0,
                shortDescription: "",
                longDescription: "",
                Url: "",
                FileName: ""
            });
            $(".question-media.open").removeClass("open");
            var i = e.Us.showAssessmentAudioDialog(0, j, n.assignment.get("AssignmentId"));
            i.on("audioSaved", function() {
                p3.showModal(p3.Layout.Containers.Modal, "hide");
                var o = new a.Ms.AlbumGet({
                    assignmentId: n.assignment.get("AssignmentId"),
                    contentId: 165
                });
                o.fetch({
                    async: false,
                    success: function() {
                        l[m].AlbumId = o.get("album_id");
                        l[m].ContentId = 165;
                        n.saveQuestions(l, true)
                    },
                    error: function() {
                        p3.displayError("Error getting content index")
                    }
                })
            })
        },
        editAudio: function(m) {
            var n = this,
                h = $(m.currentTarget),
                i = h.data("album"),
                l = h.prop("disabled");
            if (!l) {
                var k = new Bbm({
                    topicContentId: 0,
                    shortDescription: "",
                    longDescription: "",
                    Url: "",
                    FileName: ""
                });
                var j = e.Us.showAssessmentAudioDialog(i, k, n.assignment.get("AssignmentId"));
                j.on("audioSaved", function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                })
            }
        },
        updateQuestionCount: function() {
            $("#question-counter").html(this.assessment.get("Questions").length)
        }
    });
    a.Vs.QuestionView = Bb.View.extend({
        template: "assessment/assessment.question.template.html",
        events: {
            "click #intro-toggle": "toggleIntro",
            "click #intro-collapse": "toggleIntro",
            'click span[id*="question-text-"]': "showEditor"
        },
        render: function(h) {
            var i = this;
            $(h).html(i.el);
            i.renderTemplate()
        },
        renderTemplate: function() {
            var h = this;
            p3.fT(h.template, function(j) {
                var i = false;
                if (h.options.questions && h.options.questions.length) {
                    i = true
                }
                h.$el.html(j({
                    questions: h.options.questions,
                    MaxScoreInd: h.options.assignment.get("MaxScoreInd"),
                    haveQuestions: i
                }));
                if (h.options.locked) {
                    $("#question-container :input").attr("disabled", "disabled");
                    $(".delete-question-button").hide();
                    $(".delete-answer-button").hide();
                    $(".add-answer-button").hide();
                    $(".question-text-box").hide();
                    $(".question-text-locked").show()
                }
            })
        },
        toggleIntro: function(h) {
            $("#intro").collapse("toggle");
            return false
        },
        showEditor: function(h) {
            var l = this,
                j, k;
            if (h.currentTarget.id.indexOf("_parent") === -1) {
                for (j in tinyMCE.editors) {
                    if (tinyMCE.editors.hasOwnProperty(j)) {
                        k = tinyMCE.editors[j];
                        if (k.editorId.indexOf("question-text-") > -1) {
                            tinyMCE.editors[j].save();
                            tinyMCE.editors[j].remove();
                            l.options.parentView.saveQuestions(l.options.parentView.getQuestionOrder(-1, false), false)
                        }
                    }
                }
                tinyMCE.execCommand("mceAddControl", false, h.currentTarget.id);
                var i = tinyMCE.get(h.currentTarget.id);
                if (i !== undefined) {
                    i.focus();
                    i.onChange.add(function() {
                        l.options.parentView.saveQuestions(l.options.parentView.getQuestionOrder(-1, false), false)
                    });
                    i.onSetContent.add(function() {
                        l.options.parentView.saveQuestions(l.options.parentView.getQuestionOrder(-1, false), false)
                    })
                }
            }
        }
    });
    a.Vs.EmbedView = Bb.View.extend({
        template: "assessment/assessment.embed.template.html",
        events: {
            "click #btnSaveWidget": "doSave"
        },
        initialize: function(h) {
            this.mode = h.mode || "Add";
            this.embed = h.embed || "";
            this.embedTitle = h.embedTitle || ""
        },
        render: function(h) {
            $(h).append(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var h = this;
            p3.fT(h.template, function(i) {
                h.$el.html(i({
                    Mode: h.mode,
                    Embed: h.embed,
                    EmbedTitle: h.embedTitle
                }));
                $("#embed-text").height(110)
            })
        },
        doSave: function(i) {
            var l = this;
            var j = l.$("#embed-title").val(),
                h = l.$("#embed-text").val(),
                k = true;
            $("#btnSaveWidget").button("loading");
            if (typeof j !== "string" || j === "") {
                l.$("#embed-title").closest(".control-group").addClass("error");
                k = false
            } else {
                l.$("#embed-title").closest(".control-group").removeClass("error")
            }
            if (typeof h !== "string" || h === "") {
                l.$("#embed-text").closest(".control-group").addClass("error");
                k = false
            } else {
                l.$("#embed-text").closest(".control-group").removeClass("error")
            }
            if (k) {
                l.trigger("embedSaved", j, h)
            } else {
                $("#btnSaveWidget").button("reset");
                $("#btnSaveAddWidget").button("reset")
            }
            return false
        }
    });
    a.Vs.Take = Bb.View.extend({
        template: "assessment/assessment.take.template.html",
        events: {
            "click #begin-button": "beginAssessment",
            "click #submit-all-button": "submitAllClick",
            "click #save-all-for-later-button": "saveForLaterClick"
        },
        initialize: function() {
            this.Containers = {};
            this.preview = this.options.preview || false;
            this.resume = this.options.resume || false;
            this.currentQuestion = 0
        },
        dispose: function() {
            var h = this;
            $("#site-main").addClass("container");
            $("body").removeClass("graniteCountertop");
            if (h.assessTimer) {
                window.clearInterval(h.assessTimer);
                h.assessTimer = null;
                if (!h.preview) {
                    h.saveResults(false)
                }
            }
        },
        render: function(i) {
            var j = this;
            $(i).html(j.el);
            var h = new a.Cs.Album();
            j.albums = h;
            h.fetch({
                async: false,
                data: {
                    assignmentId: j.options.assignmentId
                },
                success: function() {
                    var k = "/ftpimages/" + p3.Data.SchoolContext.get("SchoolInfo").SchoolId + "/";
                    h.each(function(l) {
                        switch (l.get("content_id")) {
                            case 165:
                                if (l.get("thumb_filename")) {
                                    l.set("filename", k + "audio/" + l.get("thumb_filename"))
                                } else {
                                    l.set("filename", "//libs-e1.myschoolapp.com/style1/icons/audioDefault.png")
                                }
                                break;
                            case 167:
                                l.set("filename", k + "video/" + l.get("thumb_filename"));
                                break;
                            case 31:
                                l.set("filename", k + "photo/" + l.get("filename"));
                                break
                        }
                    })
                },
                error: function() {
                    p3.displayError("Error loading assessment albums")
                }
            });
            j.assignment = new b.Ms.AssignmentGet();
            j.assignment.set("AssignmentId", j.options.assignmentId);
            j.assignment.fetch({
                error: function() {
                    p3.displayError("Error loading assignment")
                },
                success: function(m, n) {
                    j.assessmentId = j.assignment.get("AssessmentId");
                    var k;
                    if (j.preview) {
                        k = new a.Ms.Assessment({
                            AssessmentId: j.assessmentId,
                            AssignmentId: j.options.assignmentId
                        })
                    } else {
                        k = new a.Ms.AssessmentGet({
                            AssessmentId: j.assessmentId,
                            AssignmentId: j.options.assignmentId
                        })
                    }
                    j.assessment = k;
                    if (j.assessmentId > 0) {
                        var l = false;
                        if (!j.preview) {
                            var o = new a.Ms.AssessmentCanTake();
                            o.fetch({
                                async: false,
                                data: {
                                    assessmentId: j.assessmentId,
                                    assignmentIndexId: j.options.assignmentIndexId
                                },
                                success: function(p, q) {
                                    l = q
                                },
                                error: function() {
                                    p3.displayError("Error validating student for assessment")
                                }
                            })
                        } else {
                            l = true
                        }
                        if (l) {
                            if (j.resume) {
                                j.getExistingResults()
                            }
                            k.fetch({
                                data: {
                                    assessmentId: j.assessmentId,
                                    assignmentIndexId: j.options.assignmentIndexId
                                },
                                error: function() {
                                    p3.displayError("Error loading assessment")
                                },
                                success: function() {
                                    k.set("AssessmentDescription", k.get("AssessmentDescription").replace(/[\n\r]/g, "<br />"));
                                    var q = "";
                                    if (j.assignment.get("TimeToComplete") > 0) {
                                        var p = j.assignment.get("TimeToComplete") * 60000;
                                        if (j.resume) {
                                            j.existingMilliseconds = (j.result.get("SavedMilliseconds") || 0);
                                            p -= j.existingMilliseconds
                                        }
                                        q = a.Us.getTimeDisplayForMilliseconds(p)
                                    }
                                    p3.fT(j.template, function(r) {
                                        j.$el.html(r({
                                            assignment: j.assignment.toJSON(),
                                            assessment: k.toJSON(),
                                            canTake: true,
                                            timeRemaining: q,
                                            preview: j.preview
                                        }));
                                        j.Containers.Questions = $("#question-container");
                                        window.setTimeout(function() {
                                            $("#site-main").removeClass("container");
                                            $("body").addClass("graniteCountertop")
                                        }, 100)
                                    })
                                }
                            })
                        } else {
                            p3.fT(j.template, function(p) {
                                j.$el.html(p({
                                    canTake: false
                                }));
                                window.setTimeout(function() {
                                    $("#site-main").removeClass("container");
                                    $("body").addClass("graniteCountertop")
                                }, 100)
                            })
                        }
                    }
                }
            })
        },
        getAsessment: function() {
            var h = this;
            h.assessment.fetch({
                data: {
                    assessmentId: h.assessmentId,
                    assignmentIndexId: h.options.assignmentIndexId
                },
                error: function() {
                    p3.displayError("Error loading assessment")
                },
                async: false,
                success: function() {
                    if (!h.resume) {
                        h.getResults()
                    }
                }
            })
        },
        beginAssessment: function(k) {
            var q = this,
                p = [],
                l, o, j, m;
            q.startTime = new Date();
            if (!q.resume) {
                q.result = new a.Ms.AssessmentResult();
                q.result.set({
                    AssessmentId: q.assessmentId,
                    AssignmentId: q.options.assignmentId,
                    AssignmentIndexId: q.options.assignmentIndexId,
                    Responses: p
                });
                if (!q.preview) {
                    j = q.assessment.get("QuestionCount") || 1;
                    for (m = 0; m < j; m++) {
                        p.push({
                            SortOrder: m,
                            ResponseOrder: m,
                            Response: ""
                        })
                    }
                    q.saveResults(false);
                    if (q.assignment.get("SaveForLater")) {
                        p3.enterConfirmMode({
                            Message: "This assessment has not been submitted. If you wish to resume later press Cancel and then select 'Save For Later', otherwise you will not be able to resume later. Are you sure you wish to leave this page?"
                        })
                    } else {
                        p3.enterConfirmMode({
                            Message: "This assessment has not been submitted. You will not be able to resume it later. Are you sure you wish to leave this page?"
                        })
                    }
                }
            } else {
                if (!q.preview) {
                    p3.enterConfirmMode({
                        Message: "This assessment has not been submitted. If you wish to resume later press Cancel and then select 'Save For Later', otherwise you will not be able to resume later. Are you sure you wish to leave this page?"
                    })
                }
            }
            q.getAsessment();
            q.startTime = new Date();
            $("#intro-container").hide();
            $("#question-container").show();
            var n = q.result.get("Responses");
            if (q.assignment.get("QuestionsTogether")) {
                for (l = 0; l < n.length; l++) {
                    o = new a.Vs.TakeQuestion({
                        question: n[l],
                        showFooter: false,
                        showPrevious: false,
                        showNext: false,
                        number: l + 1,
                        preview: q.preview,
                        albums: q.albums
                    });
                    p3.rV(o, q.Containers.Questions, false);
                    q.handleResponse(o)
                }
                $("#submit-container").show()
            } else {
                this.currentQuestion = 0;
                o = new a.Vs.TakeQuestion({
                    question: n[0],
                    showFooter: true,
                    showPrevious: false,
                    showNext: n.length > 1,
                    number: 1,
                    preview: q.preview,
                    albums: q.albums,
                    showSaveForLater: q.assignment.get("SaveForLater")
                });
                p3.rV(o, q.Containers.Questions, true);
                o.on("moveNext", function() {
                    q.moveNext()
                });
                o.on("submitAssessment", function() {
                    q.submitAssessment()
                });
                o.on("responseRecorded", function(r, i) {
                    q.updateResponse(r, i);
                    if (!q.preview) {
                        q.saveResults(false)
                    }
                });
                o.on("saveForLater", function() {
                    q.saveAssessmentForLater()
                })
            }
            if (q.assignment.get("TimeToComplete") > 0) {
                q.textResized = false;
                if (q.assessTimer) {
                    window.clearInterval(q.assessTimer);
                    q.assessTimer = null
                }
                var h = q.assignment.get("TimeToComplete") * 60000;
                if (q.resume) {
                    q.existingMilliseconds = (q.result.get("SavedMilliseconds") || 0);
                    h -= q.existingMilliseconds
                }
                q.endTime = new Date(q.startTime.getTime() + h);
                q.assessTimer = window.setInterval(function() {
                    var s = new Date();
                    if (s >= q.endTime) {
                        window.clearInterval(q.assessTimer);
                        q.assessTimer = null;
                        q.result.set("SubmitResults", true);
                        q.saveResults(true)
                    } else {
                        var t = new Date(a.Us.getOffsetFromReferenceDate(q.endTime.getTime() - s.getTime())),
                            i = t.getHours(),
                            r = t.getMinutes(),
                            u = t.getSeconds(),
                            v = "";
                        if (i > 0) {
                            v = i + ":"
                        }
                        if (r > 0 || i > 0) {
                            if (r > 0) {
                                if (i > 0 && r < 10) {
                                    v += "0"
                                }
                                v += r
                            } else {
                                v += "00"
                            }
                        }
                        v += ":";
                        if (u < 10) {
                            v += "0"
                        }
                        v += u;
                        $("#timer-display").html(v);
                        if (i < 1 && r < 1 && !q.textResized) {
                            q.textResized = true;
                            $("#timer-display").animate({
                                fontSize: "24px"
                            }, 1000);
                            $("#timer-display").css("color", "#b94a48")
                        }
                    }
                }, 1000)
            }
        },
        handleResponse: function(h) {
            var i = this;
            h.on("responseRecorded", function(k, j) {
                i.updateResponse(k, j);
                if (!i.preview) {
                    i.saveResults(false)
                }
            })
        },
        moveNext: function() {
            var h = this;
            h.destroyJPlayers();
            if (h.currentQuestion + 1 < h.result.get("Responses").length) {
                h.currentQuestion += 1;
                h.outputCurrentQuestion();
                $(window).scrollTop(0)
            }
            if (!h.preview) {
                h.saveResults(false)
            }
        },
        movePrevious: function() {
            var h = this;
            h.destroyJPlayers();
            if (h.currentQuestion - 1 >= 0) {
                h.currentQuestion -= 1;
                h.outputCurrentQuestion();
                $(window).scrollTop(0)
            }
            if (!h.preview) {
                h.saveResults(false)
            }
        },
        destroyJPlayers: function() {
            if ($(".jp-jplayer").length > 0) {
                $(".jp-jplayer").each(function(h, i) {
                    $("#" + i.id).jPlayer("destroy")
                })
            }
        },
        outputCurrentQuestion: function() {
            var j = this;
            var h = j.result.get("Responses");
            var i = new a.Vs.TakeQuestion({
                question: h[j.currentQuestion],
                showFooter: true,
                showPrevious: j.currentQuestion > 0,
                showNext: j.currentQuestion < h.length - 1,
                number: j.currentQuestion + 1,
                preview: j.preview,
                albums: j.albums,
                showSaveForLater: j.assignment.get("SaveForLater")
            });
            p3.rV(i, j.Containers.Questions, true);
            i.on("moveNext", function() {
                j.moveNext()
            });
            i.on("movePrevious", function() {
                j.movePrevious()
            });
            i.on("submitAssessment", function() {
                j.submitAssessment()
            });
            i.on("responseRecorded", function(l, k) {
                j.updateResponse(l, k);
                if (!j.preview) {
                    j.saveResults(false)
                }
            });
            i.on("saveForLater", function() {
                j.saveAssessmentForLater()
            })
        },
        submitAssessment: function() {
            var h = this;
            p3.showConfirm("Submit Assessment", "Are you sure you want to submit this assessment?", null, function() {
                h.result.set("SubmitResults", true);
                p3.exitConfirmMode();
                h.saveResults(false)
            })
        },
        saveAssessmentForLater: function() {
            var h = this;
            p3.showConfirm("Save For Later", "Are you sure you want to save and exit this assessment? You will be able to resume later.", null, function() {
                h.result.set("SaveForLater", true);
                p3.exitConfirmMode();
                h.saveResults(false)
            })
        },
        submitAllClick: function(h) {
            var i = this;
            if ($(".box-validate").length == 0) {
                i.submitAssessment()
            }
        },
        saveForLaterClick: function(h) {
            var i = this;
            if ($(".box-validate").length == 0) {
                i.saveAssessmentForLater()
            }
        },
        getResults: function() {
            var n = this;
            var h;
            var l = n.assessment.get("Questions"),
                k = [];
            if (n.assignment.get("RandomizeQuestions")) {
                var m, j = l.length;
                for (h = 0; h < j; h++) {
                    m = Math.floor((Math.random() * (l.length - 1)));
                    l[m].ResponseOrder = h + 1;
                    k.push(l[m]);
                    l.splice(m, 1)
                }
            } else {
                for (h = 0; h < l.length; h++) {
                    l[h].ResponseOrder = h;
                    k.push(l[h])
                }
            }
            n.result.set("Responses", k)
        },
        getExistingResults: function() {
            var i = this;
            var h = new a.Ms.AssessmentResult();
            h.fetch({
                async: false,
                data: {
                    assessmentId: i.assessmentId,
                    assignmentIndexId: i.options.assignmentIndexId,
                    assessmentResultId: 0,
                    doSort: false,
                    userId: p3.Data.Context.get("UserInfo").UserId
                },
                success: function() {
                    h.set({
                        AssignmentId: i.options.assignmentId,
                        AssignmentIndexId: i.options.assignmentIndexId,
                        SaveForLater: false
                    })
                },
                error: function() {
                    p3.displayError("Error loading results")
                }
            });
            i.result = h
        },
        saveResults: function(n) {
            var o = this,
                l = 0,
                m = 0;
            var k = new Date(),
                h, j;
            if (n) {
                h = new Date(a.Us.getOffsetFromReferenceDate(o.assignment.get("TimeToComplete") * 60000))
            } else {
                h = new Date(a.Us.getOffsetFromReferenceDate(k.getTime() - o.startTime.getTime() + (o.existingMilliseconds || 0)))
            }
            if (o.preview) {
                o.result.urlRoot = "assessmentresult/preview"
            }
            if (o.assessment) {
                l = o.assessment.get("QuestionCount") || 0
            }
            if (o.result) {
                if (o.result.get("Responses")) {
                    m = o.result.get("Responses").length || 0
                }
            }
            if ((l > 0 || m > 0) && (l !== m)) {
                p3.displayError("Assessment error. The number of questions does not match the number of responses.")
            } else {
                o.result.save({
                    UserId: p3.Data.Context.get("UserInfo").UserId,
                    ResultTime: h.getHours() + ":" + h.getMinutes() + ":" + h.getSeconds() + "." + h.getMilliseconds(),
                    IsPreview: o.preview
                }, {
                    async: false,
                    success: function() {
                        if (o.result.get("SubmitResults")) {
                            if (o.assessTimer) {
                                window.clearInterval(o.assessTimer);
                                o.assessTimer = null
                            }
                            if (o.assessment.get("ShowOnComplete")) {
                                if (o.preview) {
                                    $("#submit-container").hide();
                                    $("#student-back-btn").show();
                                    if (o.assignment.get("MaxScoreInd") == 1) {
                                        var p = o.result.get("Responses");
                                        for (j = 0; j < p.length; j++) {
                                            p[j].Points = Math.round(p[j].Points * 100) / 100
                                        }
                                    }
                                    var q = new a.Vs.StudentResults({
                                        result: o.result,
                                        assessment: o.assessment,
                                        maxScore: o.assignment.get("MaxScore"),
                                        onComplete: true,
                                        assignment: o.assignment
                                    });
                                    p3.rV(q, o.Containers.Questions, true)
                                } else {
                                    if (o.assessment.get("RestrictResults")) {
                                        var i = new a.Ms.AssessmentReviewCheck();
                                        i.fetch({
                                            data: {
                                                assessmentId: o.assessment.get("AssessmentId"),
                                                assignmentIndexId: o.options.assignmentIndexId
                                            },
                                            error: function() {
                                                p3.displayError("Error checking assessment review status")
                                            },
                                            success: function() {
                                                if (i.get("assessment_locked")) {
                                                    window.history.go(-1)
                                                } else {
                                                    p3.router().navigate("#assessmentdetail/" + o.options.assignmentId + "/" + o.options.assignmentIndexId + "/0/" + p3.Data.Context.get("UserInfo").UserId + "/1", true)
                                                }
                                            }
                                        })
                                    } else {
                                        p3.router().navigate("#assessmentdetail/" + o.options.assignmentId + "/" + o.options.assignmentIndexId + "/0/" + p3.Data.Context.get("UserInfo").UserId + "/1", true)
                                    }
                                }
                            } else {
                                window.history.go(-1)
                            }
                            if (n) {
                                p3.displayError("Your time has expired.")
                            }
                        } else {
                            if (o.result.get("SaveForLater")) {
                                if (!o.Navigated) {
                                    o.Navigated = true;
                                    window.history.go(-1)
                                }
                            }
                        }
                    },
                    error: function() {
                        p3.displayError("Error saving results")
                    }
                })
            }
        },
        updateResponse: function(k, j) {
            var n = this;
            var l = n.result.get("Responses"),
                h;
            l[j].Response = k;
            switch (l[j].QuestionTypeId) {
                case 3:
                    var m = [];
                    if (k.toString().length > 0) {
                        m = k.toString().split(",")
                    }
                    for (h = 0; h < l[j].Answers.length; h++) {
                        if (m.indexOf(h.toString()) > -1) {
                            l[j].Answers[h].Selected = true
                        } else {
                            l[j].Answers[h].Selected = false
                        }
                    }
                    break;
                case 4:
                    if (k == 0) {
                        l[j].Answers[0].Selected = true
                    } else {
                        l[j].Answers[0].Selected = false
                    }
                    if (k == 1) {
                        l[j].Answers[1].Selected = true
                    } else {
                        l[j].Answers[1].Selected = false
                    }
                    break
            }
            n.result.set("Responses", l)
        }
    });
    a.Vs.TakeQuestion = Bb.View.extend({
        events: {
            "click #next-question-button": "moveNext",
            "click #previous-link": "movePrevious",
            "click #submit-button": "submitAssessment",
            "click .answer-button": "handleRadioClick",
            "keyup .essay-area": "updateCharacterCounter",
            "click .media-cover": "showMedia",
            "click .save-for-later-button": "saveForLater"
        },
        initialize: function() {
            this.question = this.options.question;
            this.showFooter = this.options.showFooter;
            this.showPrevious = this.options.showPrevious;
            this.showNext = this.options.showNext;
            this.number = this.options.number;
            this.preview = this.options.preview;
            this.albums = this.options.albums
        },
        dispose: function() {
            var h = tinyMCE.get("essay-answer-");
            if (h) {
                h.remove();
                h = null
            }
        },
        render: function(j) {
            var o = this,
                l = "",
                m = 0,
                k;
            $(j).append(o.el);
            switch (o.question.QuestionTypeId) {
                case 1:
                    o.template = "assessment/assessment.essay.template.html";
                    m = o.question.CharacterLimit;
                    break;
                case 2:
                    o.template = "assessment/assessment.fillin.template.html";
                    if (o.question.Description && o.question.Description.indexOf("_________") == -1) {
                        o.question.Description = o.question.Description.replace("_", "_________")
                    }
                    break;
                case 3:
                    o.template = "assessment/assessment.multi.template.html";
                    var n = [];
                    if (o.question.Response != null && o.question.Response.toString().length > 0) {
                        n = o.question.Response.toString().split(",")
                    }
                    for (k = 0; k < o.question.Answers.length; k++) {
                        o.question.Answers[k].Index = k;
                        if (n.indexOf(k.toString()) > -1) {
                            o.question.Answers[k].Selected = true
                        } else {
                            o.question.Answers[k].Selected = false
                        }
                    }
                    if (o.question.Checkboxes) {
                        l = "p3icon-check";
                        o.singleAnswer = false
                    } else {
                        l = "p3icon-radioOff";
                        o.singleAnswer = true
                    }
                    break;
                case 4:
                    o.template = "assessment/assessment.truefalse.template.html";
                    o.singleAnswer = true;
                    o.question.Answers[0].Index = 0;
                    if (o.question.Response != null && o.question.Response.toString().length > 0 && o.question.Response == 0) {
                        o.question.Answers[0].Selected = true
                    } else {
                        o.question.Answers[0].Selected = false
                    }
                    o.question.Answers[1].Index = 1;
                    if (o.question.Response != null && o.question.Response.toString().length > 0 && o.question.Response == 1) {
                        o.question.Answers[1].Selected = true
                    } else {
                        o.question.Answers[1].Selected = false
                    }
                    break
            }
            if (o.question.AlbumId > 0) {
                var h = o.albums.get(o.question.AlbumId);
                if (h) {
                    o.question.FileCount = h.get("num_files");
                    o.question.ProcessedCount = h.get("files_processed");
                    o.question.CoverFile = h.get("filename")
                }
            }
            p3.fT(o.template, function(i) {
                o.$el.html(i({
                    question: o.question,
                    showFooter: o.showFooter,
                    showPrevious: o.showPrevious,
                    showNext: o.showNext,
                    number: o.number,
                    icon: l,
                    maxChars: m,
                    showSaveForLater: o.options.showSaveForLater
                }));
                if (o.question.ContentId == 165) {
                    o.renderAudio(o.question.AlbumId)
                }
                if (o.question.UseEditor) {
                    p3.showHtmlEditor("essay-answer-" + o.number, p3.Us.Enum.HtmlEditorCategories.FULL, false, function() {
                        var p = tinyMCE.get("essay-answer-" + o.number);
                        if (p !== undefined) {
                            if (o.question.CharacterLimit) {
                                o.$(".characterCounter").html(p.save().length);
                                if (p.save().length > o.question.CharacterLimit) {
                                    o.$(".characterCounter").addClass("badge-important")
                                } else {
                                    o.$(".characterCounter").removeClass("badge-important")
                                }
                            }
                            p.onChange.add(function(s, r) {
                                var t = true;
                                if (o.question.CharacterLimit) {
                                    var q = s.getContent().length;
                                    o.$(".characterCounter").html(q);
                                    if (q > o.question.CharacterLimit) {
                                        o.$(".characterCounter").addClass("badge-important");
                                        o.$(".wContainer").addClass("box-validate");
                                        t = false
                                    } else {
                                        o.$(".characterCounter").removeClass("badge-important");
                                        o.$(".wContainer").removeClass("box-validate")
                                    }
                                }
                                if (t) {
                                    o.trigger("responseRecorded", s.getContent(), o.number - 1)
                                }
                            });
                            p.onKeyUp.add(function(s, r) {
                                if (o.question.CharacterLimit) {
                                    var q = s.getContent().length;
                                    o.$(".characterCounter").html(q);
                                    if (q > o.question.CharacterLimit) {
                                        o.$(".characterCounter").addClass("badge-important")
                                    } else {
                                        o.$(".characterCounter").removeClass("badge-important")
                                    }
                                }
                            });
                            p.onSetContent.add(function(s, r) {
                                var t = true;
                                if (o.question.CharacterLimit) {
                                    var q = s.getContent().length;
                                    o.$(".characterCounter").html(q);
                                    if (q > o.question.CharacterLimit) {
                                        o.$(".characterCounter").addClass("badge-important");
                                        o.$(".wContainer").addClass("box-validate");
                                        t = false
                                    } else {
                                        o.$(".characterCounter").removeClass("badge-important");
                                        o.$(".wContainer").removeClass("box-validate")
                                    }
                                }
                                if (t) {
                                    o.trigger("responseRecorded", s.getContent(), o.number - 1)
                                }
                            })
                        }
                    }, p3.Us.Enum.HtmlEditorEncoding.NUMERIC)
                }
                $("#answer-box-" + o.number).bind("change", function(p) {
                    o.trigger("responseRecorded", $("#answer-box-" + o.number).val(), o.number - 1)
                });
                $("#essay-answer-" + o.number).bind("change", function(p) {
                    o.trigger("responseRecorded", $("#essay-answer-" + o.number).val(), o.number - 1)
                });
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.MathJax, function() {
                    MathJax.Hub.Queue(["Typeset", MathJax.Hub])
                })
            })
        },
        moveNext: function(h) {
            if ($(".box-validate").length == 0) {
                this.trigger("moveNext")
            }
            return false
        },
        movePrevious: function(h) {
            if ($(".box-validate").length == 0) {
                this.trigger("movePrevious")
            }
            return false
        },
        submitAssessment: function(h) {
            var i = this;
            if ($(".box-validate").length == 0) {
                i.trigger("submitAssessment")
            }
        },
        saveForLater: function(h) {
            var i = this;
            if ($(".box-validate").length == 0) {
                i.trigger("saveForLater")
            }
        },
        handleRadioClick: function(j) {
            var l = this;
            var i = $(j.currentTarget),
                h;
            if (l.singleAnswer) {
                h = i.parentsUntil("#question-container");
                h.find(".answer-button.active").removeClass("active");
                l.trigger("responseRecorded", i.data("index"), l.number - 1)
            } else {
                var k = "";
                if (!i.hasClass("active")) {
                    k = i.data("index").toString()
                }
                h = i.parentsUntil("#question-container");
                h.find(".answer-button.active").each(function(m, n) {
                    if ($(n).data("index") != i.data("index")) {
                        if (k.length > 0) {
                            k += ","
                        }
                        k += $(n).data("index").toString()
                    }
                });
                l.trigger("responseRecorded", k, l.number - 1)
            }
        },
        updateCharacterCounter: function(h) {
            var i = this;
            if (i.question.CharacterLimit) {
                h.stopPropagation();
                h.preventDefault();
                $("#counter-" + i.number).html($(h.currentTarget).val().length);
                if ($(h.currentTarget).val().length > i.question.CharacterLimit) {
                    $("#counter-" + i.number).addClass("badge-important")
                } else {
                    $("#counter-" + i.number).removeClass("badge-important")
                }
            }
        },
        showMedia: function(k) {
            var h = $(k.target).attr("data-album"),
                j = $(k.target).attr("data-content"),
                i = "";
            switch (j) {
                case "31":
                    i = "photo";
                    break;
                case "165":
                    i = "audio";
                    break;
                case "167":
                    i = "video";
                    break;
                default:
                    break
            }
            f.Us.showModal(h, i);
            return false
        },
        renderAudio: function(h) {
            var j = this;
            var i = new f.Cs.Medias();
            i.fetch({
                data: {
                    albumId: h,
                    logView: true
                },
                success: function() {
                    var l = 0;
                    i.each(function(m) {
                        m.set({
                            index: l,
                            number: l + 1
                        }, {
                            silent: true
                        });
                        if (!m.get("title")) {
                            m.set({
                                title: "Track " + (l + 1)
                            }, {
                                silent: true
                            })
                        }
                        m.set("number", j.number + "_" + m.get("number").toString());
                        j.allowDownload = m.get("allow_download");
                        l += 1
                    });
                    var k = new f.Vs.Audio({
                        collection: i,
                        itemIndex: 1,
                        isAssessment: true
                    });
                    p3.rV(k, "#audio-player-" + j.number, true);
                    window.setTimeout(function() {
                        $(".jp-title").css("color", "black");
                        $(".jp-pause").css("line-height", "24px !important")
                    }, 100)
                },
                error: function() {
                    p3.displayError("Error loading audio")
                }
            })
        }
    });
    a.Vs.StudentResults = Bb.View.extend({
        template: "assessment/assessment.student.results.template.html",
        events: {
            "click #retake-button": "startRetake",
            "click #BackButton": "goBack",
            "click .comment-link": "toggleComment"
        },
        initialize: function() {
            this.onComplete = this.options.onComplete
        },
        dispose: function() {
            if (!this.onComplete) {
                $("#site-main").addClass("container");
                $("body").removeClass("graniteCountertop")
            }
        },
        render: function(h) {
            var i = this;
            $(h).html(i.el);
            i.renderTemplate()
        },
        renderTemplate: function() {
            var h = this;
            p3.fT(h.template, function(u) {
                var l = 0,
                    n = 0,
                    q = 0,
                    p = 0,
                    r = h.options.result.get("Responses"),
                    m, o, k;
                if (r) {
                    for (m = 0; m < r.length; m++) {
                        switch (r[m].Correct) {
                            case 0:
                                n += 1;
                                break;
                            case 1:
                                l += 1;
                                break;
                            case 2:
                                q += 1;
                                break;
                            case 3:
                                p += 1;
                                break
                        }
                        r[m].DisplayOrder = m + 1;
                        if (r[m].QuestionTypeId == 3 || r[m].QuestionTypeId == 4) {
                            for (o = 0; o < r[m].Answers.length; o++) {
                                k = r[m].Answers[o];
                                if (k.IsCorrect && (k.Selected || h.options.assessment.get("ShowAnswers"))) {
                                    k.iconClass = "p3icon-ok"
                                } else {
                                    if (k.Selected) {
                                        k.iconClass = "p3icon-delete"
                                    } else {
                                        k.iconClass = "p3icon-radioOff"
                                    }
                                }
                            }
                        }
                        if (r[m].Comment) {
                            r[m].Comment = r[m].Comment.replace(/[\n\r]/g, "<br />")
                        }
                    }
                }
                var t = a.Us.getTimeDisplayForMilliseconds(h.options.result.get("SavedMilliseconds"));
                var s = "";
                if (h.options.assignment) {
                    s = h.options.assignment.get("ShortDescription")
                }
                h.$el.html(u({
                    result: h.options.result.toJSON(),
                    correct: l,
                    incorrect: n,
                    pending: q,
                    partial: p,
                    assessment: h.options.assessment.toJSON(),
                    maxScore: h.options.maxScore,
                    onComplete: h.onComplete,
                    timeTaken: t,
                    shortDescription: s,
                    publishGrade: h.options.assignment.get("PublishGrade") || !h.options.assignment.get("IncGradeBook")
                }));
                if (!h.onComplete) {
                    window.setTimeout(function() {
                        $("body").addClass("graniteCountertop")
                    }, 100)
                }
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.MathJax, function() {
                    MathJax.Hub.Queue(["Typeset", MathJax.Hub])
                })
            })
        },
        startRetake: function(h) {
            var i = this;
            p3.renderMainPage(new a.Vs.Take({
                assignmentId: i.options.result.get("AssignmentId"),
                assignmentIndexId: i.options.result.get("AssignmentIndexId"),
                preview: false,
                resume: false
            }))
        },
        goBack: function(i) {
            var h = -1;
            if (this.options.take) {
                h = -2
            }
            window.history.go(h)
        },
        toggleComment: function(i) {
            var h = $(i.currentTarget),
                j = h.data("order");
            $("#comment" + j).toggle();
            return false
        }
    });
    a.Vs.PrintResults = Bb.View.extend({
        template: "assessment/assessment.print.results.template.html",
        render: function(h) {
            var i = this;
            $(h).html(i.el);
            i.renderTemplate()
        },
        renderTemplate: function() {
            var m = this,
                k, l, h;
            p3.fT(m.template, function(x) {
                var i = 0,
                    n = 0,
                    q = 0,
                    p = 0,
                    r = m.options.result.get("Responses"),
                    j, v;
                for (k = 0; k < r.length; k++) {
                    switch (r[k].Correct) {
                        case 0:
                            n += 1;
                            break;
                        case 1:
                            i += 1;
                            break;
                        case 2:
                            q += 1;
                            break;
                        case 3:
                            p += 1;
                            break
                    }
                    r[k].DisplayOrder = k + 1;
                    if (r[k].QuestionTypeId == 3 || r[k].QuestionTypeId == 4) {
                        for (l = 0; l < r[k].Answers.length; l++) {
                            h = r[k].Answers[l];
                            if (h.IsCorrect) {
                                h.iconClass = "p3icon-ok"
                            } else {
                                if (h.Selected) {
                                    h.iconClass = "p3icon-delete"
                                } else {
                                    h.iconClass = "p3icon-radioOff"
                                }
                            }
                        }
                    }
                    if (r[k].Comment) {
                        r[k].Comment = r[k].Comment.replace(/[\n\r]/g, "<br />")
                    }
                }
                var w = a.Us.getTimeDisplayForMilliseconds(m.options.result.get("SavedMilliseconds"));
                var t = "";
                if (m.options.assignment) {
                    t = m.options.assignment.get("ShortDescription");
                    var s = m.options.assignment.get("SectionLinks"),
                        o = m.options.result.get("AssignmentIndexId");
                    for (k = 0; k < s.length; k++) {
                        if (s[k].AssignmentIndexId == o) {
                            j = s[k].Section.Name;
                            break
                        }
                    }
                }
                var u = new a.Cs.StudentInfo();
                u.fetch({
                    async: false,
                    data: {
                        userId: m.options.studentId
                    },
                    error: function() {
                        p3.displayError("Error loading user information")
                    },
                    success: function() {
                        v = u.models[0].get("fullname")
                    }
                });
                m.$el.html(x({
                    result: m.options.result.toJSON(),
                    correct: i,
                    incorrect: n,
                    pending: q,
                    partial: p,
                    assessment: m.options.assessment.toJSON(),
                    maxScore: m.options.maxScore,
                    onComplete: m.onComplete,
                    timeTaken: w,
                    shortDescription: t,
                    course: j,
                    studentName: v
                }));
                if (!m.onComplete) {
                    window.setTimeout(function() {
                        $("body").addClass("graniteCountertop")
                    }, 100)
                }
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.MathJax, function() {
                    MathJax.Hub.Queue(["Typeset", MathJax.Hub])
                })
            })
        }
    });
    a.Vs.SectionDetails = Bb.View.extend({
        template: "assessment/assessment.detail.template.html",
        events: {
            "click #BackButton": "goBack",
            "click .student-result-btn": "openStudentDialog",
            "click #bulk-commit-button": "bulkCommit",
            "click #breakdown-button": "openBreakdownDialog",
            "click .allow-continue-link": "continueClick",
            "click #bulk-continue-button": "bulkContinueClick"
        },
        render: function(h) {
            var i = this;
            $(h).html(i.el);
            i.renderTemplate()
        },
        renderTemplate: function() {
            var h = this;
            h.assignment = new b.Ms.Assignment();
            h.assignment.set("AssignmentId", h.options.assignmentId);
            h.assignment.fetch({
                error: function() {
                    p3.displayError("Error loading assignment")
                },
                success: function(i, j) {
                    h.assessmentId = h.assignment.get("AssessmentId");
                    h.assessment = new a.Ms.Assessment({
                        AssessmentId: h.assessmentId,
                        AssignmentId: h.options.assignmentId
                    });
                    h.assessment.fetch({
                        async: false,
                        data: {
                            assessmentId: h.assessmentId
                        }
                    });
                    h.renderRoster()
                }
            })
        },
        renderRoster: function() {
            var i = this;
            var h = new a.Cs.AssessmentRoster();
            i.roster = h;
            h.fetch({
                async: false,
                data: {
                    assignmentIndexId: i.options.assignmentIndexId
                },
                success: function(t, x) {
                    var z = _.find(i.assignment.get("SectionLinks"), function(K) {
                        return K.AssignmentIndexId == i.options.assignmentIndexId
                    });
                    var v = false,
                        u = new Date(),
                        G = new Date(u.getFullYear(), u.getMonth(), u.getDate()),
                        o = new Date(z.DueDate),
                        E = 0,
                        m = false,
                        H = 0,
                        I = 0,
                        J = 0,
                        F = [],
                        n = 0,
                        p = 0,
                        B = new a.Cs.AssessmentRoster(),
                        q, D, C, A = false,
                        s;
                    v = (o < G);
                    B.remove(B.at(0));
                    i.submissions = B;
                    h.each(function(K) {
                        q = "";
                        D = "";
                        C = "";
                        if (K.get("grad_year")) {
                            K.set("year", "'" + K.get("grad_year").substring(2))
                        } else {
                            K.set("year", "")
                        }
                        if (K.get("points_earned") != null) {
                            p += 1;
                            q = (Math.round(K.get("points_earned") * 100) / 100).toString()
                        } else {
                            if (K.get("letter_grade")) {
                                p += 1;
                                q = K.get("letter_grade")
                            } else {
                                if (K.get("graded_ind") === true) {
                                    p += 1;
                                    q = "*"
                                }
                            }
                        }
                        K.set("GBDisplay", q);
                        if (K.get("submitted_date_local")) {
                            E += 1;
                            D = c.getDateString(c.getDate(K.get("submitted_date_local"))) + " at " + c.getTimeString(c.getDate(K.get("submitted_date_local")));
                            B.add(K);
                            K.set("PointsDisplay", Math.round(K.get("results_total_points") * 100) / 100);
                            if (K.get("results_total_time")) {
                                F = K.get("results_total_time").split(":");
                                H += parseInt(F[0], 10);
                                I += parseInt(F[1], 10);
                                J += parseFloat(F[2])
                            }
                        } else {
                            if (K.get("assessment_results_id") > 0) {
                                if (!K.get("paused_ind")) {
                                    K.set("inprogress", true);
                                    A = true
                                }
                            } else {
                                if (v) {
                                    K.set("overdue", true)
                                }
                            }
                            D = "--"
                        }
                        if (K.get("exempt")) {
                            C = C + "exempt; "
                        }
                        if (K.get("incomplete")) {
                            C = C + "incomplete; "
                        }
                        if (K.get("missing")) {
                            C = C + "missing; "
                        }
                        if (K.get("num_days_late")) {
                            C = C + "extend " + K.get("num_days_late").toString() + " days; "
                        } else {
                            if (K.get("late")) {
                                C = C + "extend 0 days; "
                            }
                        }
                        if (C.length > 0) {
                            D = D + "  *(" + C.substring(0, C.length - 2) + ")"
                        }
                        K.set("submitted", D)
                    });
                    if (E > n) {
                        m = true;
                        var w = i.assessment.get("Questions");
                        for (s = 0; s < w.length; s++) {
                            if (w[s].QuestionTypeId == 1) {
                                m = false;
                                break
                            }
                        }
                    }
                    var l = "";
                    if (E > 0 && (J > 0 || I > 0 || H > 0)) {
                        I += (H * 60);
                        J += (I * 60);
                        var y = J / E;
                        var j = Math.floor(y / 3600),
                            r = false;
                        if (j > 0) {
                            r = true;
                            l += j + ":";
                            y = y - (j * 3600)
                        }
                        var k = Math.floor(y / 60);
                        if (k > 0) {
                            if (k < 10) {
                                l += "0"
                            }
                            l += k;
                            y = y - (k * 60)
                        } else {
                            if (r) {
                                l += "00"
                            }
                        }
                        l += ":";
                        y = Math.round(y);
                        if (y < 10) {
                            l += "0"
                        }
                        l += y
                    }
                    p3.fT(i.template, function(K) {
                        i.$el.html(K({
                            students: h.toJSON(),
                            total: h.length,
                            completed: p,
                            print: i.options.print == "1",
                            rootUrl: p3.Config.RootPath,
                            aid: i.options.assignmentId,
                            aiid: i.options.assignmentIndexId,
                            title: i.assignment.get("ShortDescription"),
                            adate: z.AssignmentDate,
                            ddate: z.DueDate,
                            sectionName: z.Section.Name,
                            submitted: E,
                            gradebook: i.assignment.get("IncGradeBook"),
                            bulkCommit: m,
                            maxScore: i.assignment.get("MaxScore"),
                            averageTime: l,
                            showBulkContinue: A
                        }))
                    })
                },
                error: function() {
                    p3.displayError("Error loading students")
                }
            })
        },
        goBack: function(h) {
            window.history.go(-1)
        },
        openStudentDialog: function(j) {
            var p = this;
            var h = $(j.currentTarget);
            var o = h.data("id"),
                l = h.data("result"),
                m = -1,
                k;
            for (k = 0; k < p.submissions.length; k++) {
                if (p.submissions.models[k].get("user_id") == o) {
                    m = k;
                    break
                }
            }
            var n = new a.Vs.TeacherReview({
                userId: o,
                resultId: l,
                resultIndex: m,
                submissions: p.submissions,
                assignment: p.assignment,
                assessmentId: p.assessmentId,
                assessment: p.assessment,
                assignmentIndexId: p.options.assignmentIndexId,
                roster: p.roster
            });
            p3.rV(n, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            n.on("resultSaved", function() {
                p.renderRoster()
            })
        },
        bulkCommit: function(h) {
            var i = this;
            p3.showConfirm("Bulk Commit", "Are you sure you want to commit all submitted assessments to the gradebook?", null, function() {
                var j = new a.Ms.BulkCommit();
                j.save({
                    assignmentIndexId: i.options.assignmentIndexId
                }, {
                    success: function() {
                        i.renderRoster()
                    },
                    error: function() {
                        p3.displayError("Bulk Commit Error")
                    }
                })
            })
        },
        openBreakdownDialog: function(h) {
            var i = this;
            p3.rV(new a.Vs.DetailBreakdown({
                assignment: i.assignment,
                assessmentId: i.assessmentId,
                assessment: i.assessment,
                assignmentIndexId: i.options.assignmentIndexId
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        },
        continueClick: function(h) {
            var i = this;
            h.preventDefault();
            p3.showConfirm("Allow Continue", "Are you sure you want to allow this student to continue the assessment?", null, function() {
                i.pauseIncompleteAssessments($(h.currentTarget).data("id"))
            })
        },
        bulkContinueClick: function(h) {
            var j = this,
                i = "";
            p3.showConfirm("Allow Continue", "Are you sure you want to allow all incomplete assessments to be continued?", null, function() {
                j.roster.each(function(k) {
                    if (k.get("inprogress")) {
                        if (i.length > 0) {
                            i += ","
                        }
                        i += k.get("assessment_results_id")
                    }
                });
                j.pauseIncompleteAssessments(i)
            })
        },
        pauseIncompleteAssessments: function(h) {
            var j = this,
                i = new a.Ms.AssessmentPause({
                    resultIds: h,
                    assignmentIndexId: j.options.assignmentIndexId
                });
            i.save({}, {
                success: function() {
                    j.renderRoster()
                },
                error: function() {
                    p3.displayError("Error pausing assessments.")
                }
            })
        }
    });
    a.Vs.TeacherReview = Bb.View.extend({
        template: "assessment/assessment.teacher.review.template.html",
        events: {
            "click #btnSave": "saveClick",
            "click #btnCommit": "commitClick",
            "change .points-box": "updatePoints",
            "click .comment-link": "toggleComment",
            "click #retake-button": "setCommitStatus"
        },
        initialize: function() {
            var h = this;
            h.userId = h.options.userId;
            h.resultId = h.options.resultId;
            h.resultIndex = h.options.resultIndex;
            h.submissions = h.options.submissions;
            h.assignment = h.options.assignment;
            h.assessmentId = h.options.assessmentId;
            h.assessment = h.options.assessment;
            h.assignmentIndexId = h.options.assignmentIndexId;
            h.roster = h.options.roster
        },
        render: function(h) {
            var i = this;
            $(h).html(i.el);
            i.renderTemplate()
        },
        renderTemplate: function() {
            var l = this,
                h;
            l.showRetake = false;
            var j = new a.Ms.AssessmentFacultyResult();
            l.result = j;
            if (l.resultId > 0 && l.resultIndex >= 0) {
                j.fetch({
                    async: false,
                    data: {
                        assessmentId: l.assessmentId,
                        assignmentIndexId: l.assignmentIndexId,
                        assessmentResultId: l.resultId,
                        doSort: true,
                        userId: p3.Data.Context.get("UserInfo").UserId
                    },
                    success: function() {
                        j.set({
                            AssignmentId: l.options.assignmentId,
                            AssignmentIndexId: l.assignmentIndexId
                        });
                        var m = 0,
                            n = 0,
                            q = 0,
                            p = 0,
                            s = j.get("Responses");
                        var r = 0,
                            o, i;
                        if (l.assignment.get("MaxScoreInd") == 1) {
                            r = Math.round((l.assignment.get("MaxScore") / s.length) * 100) / 100
                        }
                        if (j.get("AttemptNumber") >= l.assignment.get("NumberOfAttempts") || j.get("PointsEarned") >= 0) {
                            l.showRetake = true
                        }
                        for (h = 0; h < s.length; h++) {
                            switch (s[h].Correct) {
                                case 0:
                                    n += 1;
                                    break;
                                case 1:
                                    m += 1;
                                    break;
                                case 2:
                                    q += 1;
                                    break;
                                case 3:
                                    p += 1;
                                    break
                            }
                            s[h].DisplayOrder = h + 1;
                            if (l.assignment.get("MaxScoreInd") == 1) {
                                s[h].Points = r
                            }
                            if (s[h].QuestionTypeId == 3 || s[h].QuestionTypeId == 4) {
                                for (o = 0; o < s[h].Answers.length; o++) {
                                    i = s[h].Answers[o];
                                    if (i.IsCorrect) {
                                        i.iconClass = "p3icon-ok"
                                    } else {
                                        if (i.Selected) {
                                            i.iconClass = "p3icon-delete"
                                        } else {
                                            i.iconClass = "p3icon-radioOff"
                                        }
                                    }
                                }
                            }
                        }
                        var t = l.submissions.models[l.resultIndex];
                        if (t.get("points_earned")) {
                            t.set("TotalDisplay", Math.round(t.get("points_earned") * 100) / 100);
                            t.set("IsCommitted", true)
                        } else {
                            if (t.get("letter_grade")) {
                                t.set("TotalDisplay", t.get("letter_grade"));
                                t.set("IsCommitted", true)
                            } else {
                                t.set("TotalDisplay", Math.round(t.get("results_total_points") * 100) / 100)
                            }
                        }
                        var u = a.Us.getTimeDisplayForMilliseconds(j.get("SavedMilliseconds"));
                        p3.fT(l.template, function(v) {
                            l.$el.html(v({
                                submission: t.toJSON(),
                                assignment: l.assignment.toJSON(),
                                schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                                assessment: l.assessment,
                                correct: m,
                                incorrect: n,
                                pending: q,
                                result: j.toJSON(),
                                partial: p,
                                timeTaken: u,
                                showRetake: l.showRetake,
                                host: location.protocol + "//" + location.host + location.pathname,
                                studentId: l.options.userId
                            }));
                            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.MathJax, function() {
                                MathJax.Hub.Queue(["Typeset", MathJax.Hub])
                            })
                        })
                    },
                    error: function() {
                        p3.displayError("Error loading results")
                    }
                })
            } else {
                var k;
                l.showRetake = l.resultId > 0;
                l.roster.each(function(i) {
                    if (i.get("user_id") == l.userId) {
                        k = i.toJSON()
                    }
                });
                if (l.resultId > 0) {
                    j.fetch({
                        async: false,
                        data: {
                            assessmentId: l.assessmentId,
                            assignmentIndexId: l.assignmentIndexId,
                            assessmentResultId: l.resultId,
                            doSort: false,
                            userId: p3.Data.Context.get("UserInfo").UserId
                        },
                        success: function() {
                            j.set("Responses", []);
                            if (k) {
                                j.set({
                                    InProgress: k.inprogress
                                })
                            } else {
                                j.set({
                                    InProgress: false
                                })
                            }
                        },
                        error: function() {
                            p3.displayError("Error loading results")
                        }
                    })
                }
                j.set({
                    AssignmentId: l.options.assignmentId,
                    AssignmentIndexId: l.assignmentIndexId,
                    AssessmentId: l.assessmentId,
                    DaysLate: k.num_days_late,
                    Exempt: k.exempt,
                    Incomplete: k.incomplete,
                    Late: k.late,
                    Missing: k.missing,
                    AssessmentResultId: l.resultId
                });
                p3.fT(l.template, function(i) {
                    l.$el.html(i({
                        assignment: l.assignment.toJSON(),
                        schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                        result: j.toJSON(),
                        assessment: l.assessment,
                        correct: 0,
                        incorrect: 0,
                        pending: 0,
                        partial: 0,
                        timeTaken: "--",
                        notSubmitted: true,
                        submission: k,
                        showRetake: l.showRetake
                    }));
                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.MathJax, function() {
                        MathJax.Hub.Queue(["Typeset", MathJax.Hub])
                    })
                })
            }
        },
        saveClick: function(h) {
            if (this.validateSave(false)) {
                this.saveResult(false)
            }
        },
        commitClick: function(h) {
            if (this.validateSave(true)) {
                this.saveResult(true)
            }
        },
        validateSave: function(h) {
            var i = true;
            if ($(".box-validate").length > 0) {
                i = false
            } else {
                if (h) {
                    if ($(".responseAwaiting").length > 0) {
                        i = false;
                        $(".responseAwaiting").find(".points-box").attr("data-original-title", "Points required.").tooltip({
                            placement: "right"
                        }).addClass("box-validate")
                    }
                }
            }
            return i
        },
        saveResult: function(k) {
            var r = this,
                o = [],
                p = new Date(),
                q = r.resultId > 0 && r.resultIndex >= 0,
                n, l;
            if (r.UnPause !== "undefined" && r.UnPause) {
                var h = r.resultId,
                    j = r.assignmentIndexId;
                var m = new a.Ms.AssessmentPause({
                    resultIds: h,
                    assignmentIndexId: j
                });
                m.save({}, {
                    success: function() {
                        r.trigger("resultSaved");
                        p3.showModal(p3.Layout.Containers.Modal, "hide")
                    },
                    error: function() {
                        p3.displayError("Error pausing assessments.")
                    }
                })
            }
            if (q) {
                p = r.result.get("SavedDateTime");
                n = r.result.get("Responses");
                for (l = 0; l < n.length; l++) {
                    o.push({
                        SortOrder: n[l].SortOrder,
                        ResponseOrder: n[l].ResponseOrder,
                        Response: n[l].Response.toString(),
                        Correct: n[l].Correct.toString(),
                        PointsEarned: n[l].PointsEarned,
                        Comment: $("#comment" + (l + 1)).find(".review-comment").val()
                    })
                }
            }
            r.result.urlRoot = "/api/assessmentresult/edit";
            r.result.save({
                SubmitResults: q,
                PostToGradebook: k,
                TeacherReview: true,
                Responses: o,
                Exempt: $("#exempt-button").hasClass("active"),
                Incomplete: $("#incomplete-button").hasClass("active"),
                Missing: $("#missing-button").hasClass("active"),
                Late: $("#late-button").hasClass("active"),
                DaysLate: $("#days-late-box").val(),
                UserId: r.userId,
                ResultTime: p,
                AllowRetake: ((r.showRetake && $("#retake-button").hasClass("active")) && !(r.UnPause !== "undefined" && r.UnPause))
            }, {
                success: function() {
                    r.trigger("resultSaved");
                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                },
                error: function() {
                    p3.displayError("Error saving results")
                }
            })
        },
        updatePoints: function(o) {
            var z = this;
            var j = $(o.currentTarget);
            var r = j.data("order") - 1;
            var w = z.result.get("Responses"),
                u = w[r],
                t = 0,
                q = 0,
                l = 0,
                k = 0,
                s = 0,
                y = 0,
                m = false,
                p;
            j.removeClass("box-validate");
            j.attr("data-original-title", "");
            if (/^\d*(\.\d{1,})?$/.test(j.val())) {
                if (j.val().length) {
                    t = parseFloat(j.val())
                }
                if (t > u.Points) {
                    j.attr("data-original-title", "Value is greater than the maximum points.");
                    j.tooltip({
                        placement: "right"
                    });
                    j.addClass("box-validate")
                } else {
                    u.PointsEarned = t;
                    var n = 0;
                    if (t > 0) {
                        if (t == u.Points) {
                            n = 1
                        } else {
                            n = 3
                        }
                    }
                    if (n != u.Correct) {
                        m = true;
                        u.Correct = n
                    }
                    for (p = 0; p < w.length; p++) {
                        switch (w[p].Correct) {
                            case 0:
                                q += 1;
                                break;
                            case 1:
                                l += 1;
                                break;
                            case 2:
                                k += 1;
                                break;
                            case 3:
                                s += 1;
                                break
                        }
                        y += w[p].PointsEarned
                    }
                    $("#points-earned").html(Math.round(y * 100) / 100);
                    if (m) {
                        var x, v;
                        switch (n) {
                            case 0:
                                x = "Incorrect";
                                v = "alert-danger";
                                break;
                            case 1:
                                x = "Correct";
                                v = "alert-success";
                                break;
                            case 3:
                                x = "Partial";
                                v = "alert-info";
                                break
                        }
                        var h = j.parents(".point-container");
                        h.removeClass("alert-info alert-warning alert-danger alert-success").addClass(v);
                        h.find(".point-type").html(x);
                        $("#correct-count").html(l);
                        $("#incorrect-count").html(q);
                        $("#awaiting-count").html(k);
                        $("#partial-count").html(s)
                    }
                    z.result.set("Responses", w)
                }
            } else {
                j.attr("data-original-title", d.P3.NotNumeric);
                j.tooltip({
                    placement: "right"
                });
                j.addClass("box-validate")
            }
        },
        toggleComment: function(i) {
            var h = $(i.currentTarget),
                j = h.data("order");
            $("#comment" + j).toggle();
            return false
        },
        setCommitStatus: function(i) {
            var j = this;
            var h = $(i.currentTarget);
            if (h.length > 0 && h.html() == "Allow Continue") {
                j.UnPause = !(h.hasClass("active"))
            } else {
                if ($("#btnCommit").length > 0 && $("#btnCommit").html() == "Commit to Gradebook") {
                    if (h.hasClass("active")) {
                        $("#btnCommit").attr("disabled", false)
                    } else {
                        $("#btnCommit").attr("disabled", true)
                    }
                }
            }
        }
    });
    a.Vs.DetailBreakdown = Bb.View.extend({
        template: "assessment/assessment.breakdown.template.html",
        events: {
            "click .answer-link": "toggleAnswers",
            "click #btn-expand-all": "toggleAllAnswers"
        },
        initialize: function() {
            var h = this;
            h.assignment = h.options.assignment;
            h.assessmentId = h.options.assessmentId;
            h.assessment = h.options.assessment;
            h.assignmentIndexId = h.options.assignmentIndexId
        },
        render: function(h) {
            var i = this;
            $(h).html(i.el);
            i.renderTemplate()
        },
        renderTemplate: function() {
            var i = this;
            var h = new a.Ms.AssessmentBreakdown();
            h.fetch({
                data: {
                    assessmentId: i.assessmentId,
                    assignmentIndexId: i.assignmentIndexId
                },
                success: function() {
                    var k = h.get("Responses"),
                        j;
                    for (j = 0; j < k.length; j++) {
                        k[j].Number = k[j].SortOrder + 1
                    }
                    p3.fT(i.template, function(l) {
                        i.$el.html(l({
                            questions: k
                        }));
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.MathJax, function() {
                            MathJax.Hub.Queue(["Typeset", MathJax.Hub])
                        })
                    })
                },
                error: function() {
                    p3.displayError("Error loading breakdown")
                }
            })
        },
        toggleAnswers: function(i) {
            var h = $(i.currentTarget),
                j = h.data("num");
            $(".answer-detail[data-num='" + j + "']").toggle();
            p3.setModalHeight(p3.Layout.Containers.Modal);
            if ($(".answer-detail:hidden").length == 0) {
                $("#btn-expand-all").removeClass("expand");
                $("#btn-expand-all").html("Collapse All")
            } else {
                if ($(".answer-detail:hidden").length == $(".answer-detail").length) {
                    $("#btn-expand-all").addClass("expand");
                    $("#btn-expand-all").html("Expand All")
                }
            }
            return false
        },
        toggleAllAnswers: function(h) {
            if ($("#btn-expand-all").hasClass("expand")) {
                $("#btn-expand-all").removeClass("expand");
                $("#btn-expand-all").html("Collapse All");
                $(".answer-detail").show()
            } else {
                $("#btn-expand-all").addClass("expand");
                $("#btn-expand-all").html("Expand All");
                $(".answer-detail").hide()
            }
            p3.setModalHeight(p3.Layout.Containers.Modal);
            return false
        }
    });
    a.Us.getQuestionTypeName = function(h) {
        var i = "";
        switch (h) {
            case 1:
                i = "Essay";
                break;
            case 2:
                i = "Fill in the Blank";
                break;
            case 3:
                i = "Multi Choice";
                break;
            case 4:
                i = "True/False";
                break
        }
        return i
    };
    a.Us.showStudentReview = function(i, j, k, l) {
        var h = new b.Ms.AssignmentGet();
        h.set("AssignmentId", i);
        h.fetch({
            error: function() {
                p3.displayError("Error loading assignment")
            },
            success: function(n, o) {
                var m = new a.Ms.AssessmentStudentReview({
                    AssessmentId: h.get("AssessmentId"),
                    AssignmentId: i
                });
                m.fetch({
                    data: {
                        assessmentId: h.get("AssessmentId"),
                        assignmentIndexId: j
                    },
                    error: function() {
                        p3.displayError("Error loading assessment")
                    },
                    success: function() {
                        var p = new a.Ms.AssessmentResult();
                        p.fetch({
                            data: {
                                assessmentId: h.get("AssessmentId"),
                                assignmentIndexId: j,
                                assessmentResultId: 0,
                                doSort: false,
                                userId: k
                            },
                            success: function() {
                                p.set({
                                    AssignmentId: i,
                                    AssignmentIndexId: j
                                });
                                if (p.get("PointsEarned") < 0) {
                                    p.set("PointsEarned", 0)
                                }
                                var s = p.get("Responses"),
                                    r = 0,
                                    q;
                                if (s) {
                                    if (h.get("MaxScoreInd") == 1) {
                                        r = Math.round((h.get("MaxScore") / s.length) * 100) / 100
                                    }
                                    for (q = 0; q < s.length; q++) {
                                        if (h.get("MaxScoreInd") == 1) {
                                            s[q].Points = r;
                                            s[q].PointsEarned = Math.round(s[q].PointsEarned * 100) / 100
                                        }
                                    }
                                }
                                var t = new a.Vs.StudentResults({
                                    result: p,
                                    assessment: m,
                                    maxScore: h.get("MaxScore"),
                                    onComplete: false,
                                    assignment: h,
                                    take: l
                                });
                                p3.renderMainPage(t)
                            },
                            error: function() {
                                p3.displayError("Error loading results")
                            }
                        })
                    }
                })
            }
        })
    };
    a.Us.printResults = function(i, j, l, k) {
        var h = new b.Ms.AssignmentGet();
        h.set("AssignmentId", i);
        h.fetch({
            error: function() {
                p3.displayError("Error loading assignment")
            },
            success: function(n, o) {
                var m = new a.Ms.AssessmentStudentReview({
                    AssessmentId: h.get("AssessmentId"),
                    AssignmentId: i
                });
                m.fetch({
                    data: {
                        assessmentId: h.get("AssessmentId"),
                        assignmentIndexId: j
                    },
                    error: function() {
                        p3.displayError("Error loading assessment")
                    },
                    success: function() {
                        var p = new a.Ms.AssessmentFacultyResult();
                        p.fetch({
                            data: {
                                assessmentId: h.get("AssessmentId"),
                                assignmentIndexId: j,
                                assessmentResultId: k,
                                doSort: true,
                                userId: p3.Data.Context.get("UserInfo").UserId
                            },
                            success: function() {
                                p.set({
                                    AssignmentId: i,
                                    AssignmentIndexId: j
                                });
                                if (p.get("PointsEarned") < 0) {
                                    p.set("PointsEarned", 0)
                                }
                                var s = p.get("Responses"),
                                    r = 0,
                                    q;
                                if (h.get("MaxScoreInd") == 1) {
                                    r = Math.round((h.get("MaxScore") / s.length) * 100) / 100
                                }
                                for (q = 0; q < s.length; q++) {
                                    if (h.get("MaxScoreInd") == 1) {
                                        s[q].Points = r;
                                        s[q].PointsEarned = Math.round(s[q].PointsEarned * 100) / 100
                                    }
                                }
                                var t = new a.Vs.PrintResults({
                                    result: p,
                                    assessment: m,
                                    maxScore: h.get("MaxScore"),
                                    assignment: h,
                                    studentId: l
                                });
                                p3.rV(t, $("#app"), true)
                            },
                            error: function() {
                                p3.displayError("Error loading results")
                            }
                        })
                    }
                })
            }
        })
    };
    a.Us.getStartString = function(h, j) {
        var l = "",
            m = h.get("SectionLinks"),
            k;
        for (k = 0; k < m.length; k++) {
            if (m[k].AssignmentIndexId == j) {
                l = c.displayDate(m[k].AssignmentDate, "shortDate") + " at " + c.displayTime(m[k].AssignmentTime, true, "shortTime");
                break
            }
        }
        return l
    };
    a.Us.getOffsetFromReferenceDate = function(i) {
        var h = new Date(2012, 1, 1);
        return h.getTime() + (i || 0)
    };
    a.Us.getTimeDisplayForMilliseconds = function(h) {
        var j = new Date(a.Us.getOffsetFromReferenceDate(h)),
            i = "";
        if (j.getHours() > 0) {
            i += j.getHours() + ":";
            if (j.getMinutes() > 0 && j.getMinutes() < 10) {
                i += "0"
            } else {
                if (j.getMinutes() == 0) {
                    i += "00"
                }
            }
        }
        if (j.getMinutes() > 0) {
            i += j.getMinutes()
        }
        i += ":";
        if (j.getSeconds() < 10) {
            i += "0"
        }
        i += j.getSeconds();
        return i
    };
    a.Us.getPointsAssigned = function(k) {
        var j = 0,
            h;
        if (k) {
            for (h = 0; h < k.length; h++) {
                j += Number(k[h].Points)
            }
        }
        return Math.floor(g.formatDecimal(j) * 100) / 100
    };
    p3.router().route("assessmentedit/:id/:index/:locked", "assessmentedit", function(h, i, j) {
        p3.renderMainPage(new a.Vs.EditDetail({
            assignmentId: h,
            editMode: "content",
            assignmentIndexId: i,
            locked: j == "1"
        }))
    });
    p3.router().route("assessment/:id/:index/:resume", "assessment", function(h, i, j) {
        p3.renderMainPage(new a.Vs.Take({
            assignmentId: h,
            assignmentIndexId: i,
            preview: false,
            resume: j == "true"
        }))
    });
    p3.router().route("assessmentpreview/:id/:index", "assessmentpreview", function(h, i) {
        p3.renderMainPage(new a.Vs.Take({
            assignmentId: h,
            assignmentIndexId: i,
            preview: true,
            resume: false
        }))
    });
    p3.router().route("assessmentdetail/:id/:index/:print/:studentid/:take", "assessmentdetail", function(h, i, j, k, l) {
        a.Us.showStudentReview(h, i, k, l == "1")
    });
    p3.router().route("assessmentsectiondetail/:id/:index/:print", "assessmentsectiondetail", function(h, i, j) {
        if (j == 1) {
            p3.rV(new a.Vs.SectionDetails({
                assignmentId: h,
                assignmentIndexId: i,
                print: j
            }), $("#app"), true)
        } else {
            p3.renderMainPage(new a.Vs.SectionDetails({
                assignmentId: h,
                assignmentIndexId: i,
                print: j
            }))
        }
    });
    p3.router().route("assessmentdetailprint/:assignmentid/:resultid/:index/:studentid", "assessmentdetailprint", function(h, j, i, k) {
        a.Us.printResults(h, i, k, j)
    })
}(p3.module("LMS/assessment")));
(function(b) {
    var h = p3.Us.Enum,
        m = p3.module("shared/task"),
        l = p3.module("report"),
        g = p3.module("shared/datepicker"),
        n = p3.module("shared/timepicker"),
        k = p3.module("shared/notification"),
        a = p3.module("LMS/academicclass"),
        i = p3.module("cms/shared/grouppublish"),
        j = p3.module("shared/ltitool"),
        f = p3.Us.Culture,
        c = p3.module("lms/assignmentoptions"),
        e = p3.module("LMS/Shared/AssignmentTools"),
        d = p3.module("lms/rubrics/assignmentrubric");
    b.Data = {};
    b.Ms.AssignmentType = Bbm.extend({
        idAttribute: "AssignmentTypeId",
        url: function() {
            return ""
        }
    });
    b.Ms.LtiInfo = Bbm.extend({
        initialize: function(o) {
            var q = this,
                p = new j.Cs.ltiProviderPicklist();
            q.currentProviderId = o.get("ProviderId") || 0;
            q.currentProviderListId = "none";
            q.currentProvider = new Bbm();
            if (q.currentProviderId) {
                q.currentPlacement = o;
                q.hasSavedPlacement = true
            } else {
                q.currentPlacement = new j.Ms.Tool({
                    ContextLabelId: 5,
                    ContextValue: 999,
                    Gradeable: true
                });
                q.hasSavedPlacement = false
            }
            q.provider1Count = 0;
            q.provider2Count = 0;
            q.providerList1 = new j.Cs.ltiProviderPicklist();
            q.providerList2 = new j.Cs.ltiProviderPicklist();
            if (j.Us.IsLtiInstalled()) {
                p.fetch({
                    async: false,
                    data: {
                        scope: h.LtiProviderScope.ASSIGNMENT
                    },
                    success: function() {
                        p.each(function(r) {
                            if (r.get("GalleryId") === 2) {
                                q.providerList2.push(r)
                            } else {
                                q.providerList1.push(r)
                            }
                        });
                        q.provider1Count = q.providerList1.ltiProvidersAvailableCount(q.currentProviderId);
                        q.provider2Count = q.providerList2.ltiProvidersAvailableCount(q.currentProviderId);
                        q.locateProvider(q.currentProviderId)
                    },
                    error: function() {
                        p3.displayError("Error loading the provider list")
                    }
                })
            }
        },
        locateProvider: function(q) {
            var p = this,
                o, r = false;
            if (q) {
                o = p.providerList1.locateProvider(q);
                if (o.get("ProviderId") === q) {
                    p.currentProvider = o;
                    p.currentProviderListId = "lti";
                    r = true
                } else {
                    o = p.providerList2.locateProvider(q);
                    if (o.get("ProviderId") === q) {
                        p.currentProvider = o;
                        p.currentProviderListId = "submission";
                        r = true
                    }
                }
            }
            return r
        },
        getLtiSaved: function() {
            var o = this;
            return (o.currentProviderListId === "lti" && o.hasSavedPlacement)
        },
        getLtiCount: function() {
            var o = this;
            return (o.currentProviderListId !== "submission" ? o.provider1Count : 0)
        },
        getLtiProvider: function() {
            var o = this,
                p = {};
            if (o.currentProviderListId === "lti") {
                if (o.hasSavedPlacement) {
                    p = o.currentPlacement.toJSON()
                } else {
                    if (o.currentProvider) {
                        p = o.currentProvider.toJSON()
                    }
                }
            }
            return p
        },
        getLtiProviderList: function() {
            var o = this;
            return (o.currentProviderListId !== "submission" ? ([{
                ProviderName: "-- Select a provider --",
                ProviderId: 0,
                ActiveInd: true
            }].concat(o.providerList1.toJSON())) : {})
        },
        getLtiSubmissionSaved: function() {
            var o = this;
            return (o.currentProviderListId === "submission" && o.hasSavedPlacement)
        },
        getLtiSubmissionCount: function() {
            var o = this;
            return (o.currentProviderListId !== "lti" ? o.provider2Count : 0)
        },
        getLtiSubmissionProvider: function() {
            var o = this,
                p = {};
            if (o.currentProviderListId === "submission") {
                if (o.hasSavedPlacement) {
                    p = o.currentPlacement.toJSON()
                } else {
                    if (o.currentProvider) {
                        p = o.currentProvider.toJSON()
                    }
                }
            }
            return p
        },
        getLtiSubmissionProviderList: function() {
            var o = this;
            return (o.currentProviderListId !== "lti" ? ([{
                ProviderName: "-- Select a provider --",
                ProviderId: 0,
                ActiveInd: true
            }].concat(o.providerList2.toJSON())) : {})
        }
    });
    b.Vs.Lti = Bb.View.extend({
        template: "classassignment/addnewassignment.lti.template.html",
        events: {
            "change #ProviderId": "toggleLtiProvider",
            "change #XmlValue": "doXmlEntered"
        },
        initialize: function() {
            this.parentView = this.options.parentView
        },
        render: function(o) {
            var p = this;
            $(o).append(p.el);
            p.renderTemplate()
        },
        renderTemplate: function() {
            var p = this,
                o;
            if (p.model.currentProviderListId === "submission") {
                p.$el.hide()
            }
            o = j.Us.PresentationTargetPickList(p.model.currentProvider.get("PresentationTargetOptions"));
            p3.fT(p.template, function(q) {
                p.$el.html(q({
                    placementSaved: p.model.getLtiSaved(),
                    provider: p.model.getLtiProvider(),
                    providerList: p.model.getLtiProviderList(),
                    targets: o.toJSON()
                }));
                p3.setModalHeight(p3.Layout.Containers.Modal);
                if (p.model.currentProvider.get("ParameterInd")) {
                    p.listView = new j.Vs.EditToolGeneralList({
                        model: p.model.currentPlacement
                    });
                    p3.rV(p.listView, p.$("#param-list-area"), true)
                }
            })
        },
        toggleLtiProvider: function(p) {
            var r = this,
                o = $(p.currentTarget),
                q;
            q = parseInt(o.val(), 10);
            if (q) {
                r.model.currentProviderId = q;
                r.model.currentProvider = r.model.providerList1.locateProvider(q);
                r.model.currentProviderListId = "lti";
                if (r.model.currentProvider.get("OutcomesInd")) {
                    r.parentView.forceIncludeInGradebook()
                }
                r.model.currentPlacement.changeProvider(r.model.currentProvider)
            } else {
                r.model.currentProviderId = 0;
                r.model.currentProvider = r.model.providerList1.locateProvider(q);
                r.model.currentProviderListId = "none"
            }
            r.renderTemplate();
            r.parentView.adjustLtiUI()
        },
        doXmlEntered: function(o) {
            var p = this,
                q = $(o.currentTarget).val();
            if (q.length > 0) {
                if (p.model.currentPlacement.processXml(q, p.model.providerList1) === true) {
                    p.renderTemplate()
                }
            }
        },
        doValidate: function(p) {
            var r = this,
                o, q;
            if (r.model.currentProviderId) {
                if (r.model.currentProvider.placementsHaveEditableLaunchUrl()) {
                    o = r.$("#LaunchUrl");
                    q = o.val();
                    if (q.trim().length === 0) {
                        o.closest(".control-group").addClass("error");
                        if (p.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                            p.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                        }
                    } else {
                        r.model.currentPlacement.set("LaunchUrl", q.trim());
                        o.closest(".control-group").removeClass("error")
                    }
                }
                if (r.model.currentProvider.placementsHaveEditableConsumerKey()) {
                    o = r.$("#ConsumerKey");
                    q = o.val();
                    if (q.trim().length === 0) {
                        o.closest(".control-group").addClass("error");
                        if (p.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                            p.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                        }
                    } else {
                        r.model.currentPlacement.set("ConsumerKey", q.trim());
                        o.closest(".control-group").removeClass("error")
                    }
                }
                if (r.model.currentProvider.placementsHaveEditableSharedSecret()) {
                    o = r.$("#SharedSecret");
                    q = o.val();
                    if (q.trim().length === 0) {
                        r.model.currentPlacement.set("SharedSecret", null)
                    } else {
                        r.model.currentPlacement.set("SharedSecret", q.trim())
                    }
                }
                if (r.model.currentProvider.placementsHaveEditableParameters()) {
                    if (!(j.Us.ValidateParameterList(r.listView, r.model.currentPlacement, "Parameters", true))) {
                        if (p.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                            p.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                        }
                    }
                }
            }
        },
        buildLtiPlacementJson: function() {
            var p = this,
                o = {};
            o.ProviderId = p.model.currentProvider.get("ProviderId") || 0;
            o.ToolId = p.model.currentPlacement.get("ToolId") || 0;
            if (o.ProviderId > 0) {
                if (p.model.currentProvider.placementsHaveEditableLaunchUrl()) {
                    o.LaunchUrl = p.model.currentPlacement.get("LaunchUrl")
                }
                if (p.model.currentProvider.placementsHaveEditableConsumerKey()) {
                    o.ConsumerKey = p.model.currentPlacement.get("ConsumerKey")
                }
                if (p.model.currentProvider.placementsHaveEditableSharedSecret()) {
                    o.SharedSecret = p.model.currentPlacement.get("SharedSecret")
                }
                if (p.model.currentProvider.placementsHaveEditableParameters()) {
                    o.Parameters = p.model.currentPlacement.get("Parameters")
                }
            }
            return o
        }
    });
    b.Ms.Assignment = Bbm.extend({
        idAttribute: "AssignmentId",
        url: function() {
            var o = this.get("AssignmentId");
            if (o === undefined || o === 0) {
                return aP + "assignment2/?format=json"
            }
            if (this.hasOwnProperty("useSecureGet") && this.useSecureGet) {
                return aP + "assignment2/SecureGet/" + this.get("AssignmentId") + "/?format=json"
            }
            return aP + "assignment2/" + this.get("AssignmentId") + "/?format=json"
        },
        currentPlacement: function() {
            var o, p;
            o = this.get("Lti");
            if (o && o.length > 0) {
                p = new j.Ms.Tool(o[0])
            } else {
                p = new j.Ms.Tool()
            }
            return p
        }
    });
    b.Ms.AssignmentGet = Bbm.extend({
        idAttribute: "AssignmentId",
        url: function() {
            return aP + "assignment2/getAssignment/" + this.get("AssignmentId") + "/?format=json"
        }
    });
    b.Ms.SectionForTeacher = Bbm.extend({
        idAttribute: "SectionId",
        url: function() {
            return ""
        }
    });
    b.Cs.SectionsForTeacher = Bbc.extend({
        model: b.Ms.SectionForTeacher,
        initialize: function(o, p) {
            p = p || {};
            this.sectionId = p.sectionId || 0;
            this.filterInd = p.filterInd || 0
        },
        url: function() {
            return aP + "datadirect/SectionsForTeacher/?format=json&associationId=1&sectionId=" + this.sectionId + "&filterInd=" + this.filterInd
        }
    });
    b.Ms.SectionForAssignment = Bbm.extend({
        idAttribute: "AssignmentIndexId",
        url: function() {
            return ""
        }
    });
    b.Cs.SectionForAssignments = Bbc.extend({
        model: b.Ms.SectionForAssignment,
        initialize: function(o, p) {
            this.assignmentId = p.assignmentId || 0
        },
        url: function() {
            return aP + "assignment/SectionLinksGet/?format=json&id=" + this.assignmentId
        }
    });
    b.Cs.AssignmentTypes = Bbc.extend({
        url: function() {
            return aP + "DataDirect/AssignmentTypeBySection/"
        }
    });
    b.Cs.AssignmentTypesAll = Bbc.extend({
        url: function() {
            return aP + "DataDirect/AssignmentTypes/"
        }
    });
    b.Cs.Assignments = Bbc.extend({
        model: b.Ms.Assignment,
        initialize: function(o, p) {
            this.dateSort = p.dateSort || null;
            this.assignTypes = p.assignTypes || null;
            this.startDate = p.startDate || null;
            this.endDate = p.endDate || null;
            this.searchTerm = p.searchTerm || null;
            this.sectionId = p.sectionId || 0;
            this.studentId = p.studentId || null;
            this.statuses = p.statuses || null
        },
        setSectionId: function(o) {
            this.sectionId = o
        },
        setDateSortFilter: function(o) {
            this.dateSort = o
        },
        setAssignTypeFilter: function(o) {
            this.assignTypes = o
        },
        setStatusFilter: function(o) {
            this.statuses = o
        },
        setStartDateFilter: function(o) {
            this.startDate = o
        },
        setEndDateFilter: function(o) {
            this.endDate = o
        },
        setSearchTerm: function(o) {
            this.searchTerm = o
        },
        url: function() {
            var p = p3.Data.Context.getSelectedPersona().Id,
                o = "?format=json",
                r = this.sectionId || 0,
                q;
            if (this.dateSort !== null) {
                o += "&dateSort=" + this.dateSort
            }
            if (this.assignTypes !== null) {
                o += "&assignmentTypes=" + this.assignTypes
            }
            if (this.statuses !== null) {
                o += "&statusFilters=" + this.statuses
            }
            if (this.startDate !== null) {
                o += "&startDate=" + this.startDate
            }
            if (this.endDate !== null) {
                o += "&endDate=" + this.endDate
            }
            if (this.searchTerm !== null) {
                o += "&searchTerm=" + this.searchTerm
            }
            if (p == 1) {
                if (this.studentId) {
                    o += "&studentId=" + this.studentId
                }
                q = aP + "assignment/forchildsection/" + r + "/" + o
            } else {
                o += "&personaId=" + p;
                q = aP + "assignment/forsection/" + r + "/" + o
            }
            return q
        },
        filters: undefined,
        comparator: function(o) {
            return o.get("short_description")
        },
        changeSort: function(o) {
            if (this.filters !== undefined) {
                this.comparator = this.filters[o]
            }
        }
    });
    b.Ms.Type = Bbm.extend({
        idAttribute: "Id",
        url: function() {
            return ""
        }
    });
    b.Ms.UserFolder = Bbm.extend({
        url: function() {
            return aP + "datadirect/GetUserFolder/?format=json"
        }
    });
    b.Cs.Types = Bbc.extend({
        model: b.Ms.Type,
        initialize: function(o, p) {
            this.sectionId = p.sectionId || 0
        },
        setSection: function(o) {
            this.sectionId = o
        },
        url: function() {
            var o = aP + "assignment/TypesForSection/?format=json";
            if (this.sectionId !== null) {
                o += "&sectionId=" + this.sectionId
            }
            return o
        }
    });
    b.Enum = {
        viewByFilters: {
            ASSIGNED: 0,
            DUE: 1,
            ACTIVE: 2
        }
    };
    b.Ms.AssignmentDelete = Bbm.extend({
        idAttribute: "Id",
        url: function() {
            if (this.get("sections") === null) {
                return aP + "assignment/delete/" + this.get("Id") + "/?format=json"
            }
            return aP + "assignment/delete/" + this.get("Id") + "/?format=json&sections=" + this.get("sections")
        }
    });
    b.Ms.Attachment = Bbm.extend({});
    b.Cs.Attachments = Bbc.extend({
        model: b.Ms.Attachment,
        url: function() {
            return aP + "datadirect/AssignmentAttachments/?format=json"
        }
    });
    b.Ms.DropBoxItem = Bbm.extend({});
    b.Ms.DropBoxEntry = Bbm.extend({});
    b.Cs.DropBoxEntries = Bbc.extend({
        model: b.Ms.DropBoxEntry,
        url: function() {
            return aP + "datadirect/managedropbox/?format=json"
        }
    });
    b.Ms.PublishAssignment = Bbm.extend({
        url: function() {
            return aP + "assignment2/publishstatus/?format=json"
        }
    });
    b.Ms.DownloadNameDuplicate = Bbm.extend({
        url: function() {
            return aP + "datadirect/validatefilename/?format=json&filename=" + this.get("filename")
        }
    });
    b.Ms.FileTypes = Bbm.extend({
        idAttribute: "Extension",
        url: function() {
            return ""
        }
    });
    b.Cs.FileTypes = Bbc.extend({
        model: b.Ms.FileTypes,
        url: function() {
            return aP + "datadirect/GetValidFileTypes/?format=json"
        },
        parse: function(o) {
            var p = [];
            _.each(o, function(q) {
                p.push({
                    Extension: q.Extension.toLowerCase(),
                    fileType: q.fileType,
                    fileTypeId: q.fileTypeId
                })
            });
            return p
        }
    });
    b.Ms.ExistingAssignment = Bbm.extend({
        url: "assignment2/AddExistingAssignment/"
    });
    b.Cs.MarkingPeriods = Bbc.extend({
        url: function() {
            return aP + "datadirect/AssignmentMarkingPeriods/?format=json"
        }
    });
    b.Cs.ExistingSchoolYears = Bbc.extend({
        url: "datadirect/SchoolYearsGet/"
    });
    b.Cs.ExistingTeachers = Bbc.extend({
        url: "datadirect/AssignmentTeachersGet/"
    });
    b.Cs.ExistingSections = Bbc.extend({
        url: "datadirect/AssignmentSectionsForTeacher/"
    });
    b.Cs.ExistingMarkingPeriods = Bbc.extend({
        url: "datadirect/MarkingPeriodsForSection/"
    });
    b.Cs.ExistingAssignments = Bbc.extend({
        url: "datadirect/ExistingAssignmentsGet/",
        filters: undefined,
        comparator: function(o) {
            return o.get("short_description")
        },
        changeSort: function(o) {
            if (this.filters !== undefined) {
                this.comparator = this.filters[o]
            }
        }
    });
    b.Ms.AssignmentStatusUpdate = Bbm.extend({
        url: function() {
            return aP + "assignment2/assignmentstatusupdate/?format=json&assignmentIndexId=" + this.get("assignmentIndexId") + "&assignmentStatus=" + this.get("assignmentStatus")
        }
    });
    b.Cs.ImportAssignments = Bbc.extend({
        url: "datadirect/ImportAssignmentsGet/",
        filters: undefined,
        comparator: function(o) {
            return o.get("short_description")
        },
        changeSort: function(o) {
            if (this.filters !== undefined) {
                this.comparator = this.filters[o]
            }
        }
    });
    b.Vs.AddAssignmentView = Bb.View.extend({
        template: "classassignment/addassignment.template.html",
        linkTemplate: "classassignment/assignmentLinkItem.template.html",
        downloadTemplate: "classassignment/assignmentDownloadItem.template.html",
        existingTemplate: "classassignment/addexistingassignment.template.html",
        ItemTemplate: "classassignment/addexistingtableitem.template.html",
        newTemplate: "classassignment/addnewassignment.template.html",
        initialize: function(o) {
            if (o !== undefined) {
                this.assignment = o.assignment || undefined;
                this.title = o.title || "Add Assignment";
                this.AddMode = o.AddMode !== undefined ? o.AddMode : true;
                this.AddExisting = o.AddExisting || false;
                this.defaultDate = o.defaultDate || f.localDateTime()
            } else {
                this.assignment = undefined;
                this.title = "Add Assignment";
                this.AddMode = true;
                this.AddExisting = false;
                this.defaultDate = f.localDateTime()
            }
            this.activeYear = "";
            this.activeTeacher = 0;
            this.activeSection = 0;
            this.activeOffering = 0;
            this.activeSections = [];
            this.CurrentSort = "short_description";
            this.ActiveAssignmentSections = b.Data.TeacherSections === undefined ? [] : b.Data.TeacherSections.toJSON();
            this.resetAssignmentFields(false);
            this.contentId = 58;
            b.Data.FileTypes = new b.Cs.FileTypes({}, {});
            b.Data.FileTypes.fetch();
            if (this.SectionsForTeacher === undefined) {
                this.SectionsForTeacher = new b.Cs.ExistingSections()
            }
            this.markingPeriods = new b.Cs.MarkingPeriods();
            p3.fT(this.linkTemplate, function(p) {
                return false
            });
            p3.fT(this.downloadTemplate, function(p) {
                return false
            });
            p3.Layout.Containers.Modal.on("postRender", this.initEditors);
            if (p3.Data.fileTypes === undefined) {
                p3.Data.fileTypes = new b.Cs.FileTypes({}, {});
                p3.Data.fileTypes.fetch({
                    error: function() {
                        p3.displayError("Error loading filetypes")
                    }
                })
            }
        },
        dispose: function() {
            p3.Layout.Containers.Modal.off("postRender");
            if (this.emptysections) {
                b.Data.TeacherSections = undefined
            }
            var o = tinyMCE.get("add-assignment-title-field");
            if (o) {
                o.remove();
                o = null
            }
            o = tinyMCE.get("add-assignment-description-field");
            if (o) {
                o.remove();
                o = null
            }
        },
        initEditors: function() {
            p3.showHtmlEditor("add-assignment-title-field", p3.Us.Enum.HtmlEditorCategories.FULL, false, function() {
                var o = tinyMCE.get("add-assignment-title-field");
                if (o !== undefined) {
                    o.onKeyUp.add(function(r, q) {
                        var p = r.getContent().length;
                        if (p > 255) {
                            $("#titleCountField").addClass("badge-error")
                        } else {
                            $("#titleCountField").removeClass("badge-error")
                        }
                        $("#titleCountField").html(p)
                    });
                    o.onSetContent.add(function(r, q) {
                        var p = r.getContent().length;
                        if (p > 255) {
                            $("#titleCountField").addClass("badge-error")
                        } else {
                            $("#titleCountField").removeClass("badge-error")
                        }
                        $("#titleCountField").html(p)
                    });
                    o.onChange.add(function(r, q) {
                        var p = r.getContent().length;
                        if (p > 255) {
                            $("#titleCountField").addClass("badge-error")
                        } else {
                            $("#titleCountField").removeClass("badge-error")
                        }
                        $("#titleCountField").html(p)
                    })
                } else {
                    p3.log("error TinyMCE not loaded yet.")
                }
            }, p3.Us.Enum.HtmlEditorEncoding.NUMERIC);
            p3.showHtmlEditor("add-assignment-description-field", p3.Us.Enum.HtmlEditorCategories.FULL, false, undefined, p3.Us.Enum.HtmlEditorEncoding.NUMERIC);
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        events: {
            "click #show-more-groups": "showGroupDialog",
            "click .add-assignment-save-option": "doAssignmentSave",
            "click .add-assignment-save-add-another": "doAssignmentSave",
            "click .add-assignment-delete-option": "doAssignmentDelete",
            "click a.toggle-content": "showToggleContent",
            "click #publish-options-apply-selected-button": "doApplyToSelected",
            "click .add-assignment-section-selector": "showMoreButtonVisability",
            "click .assignment-drop-box-enable": "doDropBoxActivate",
            "click .link-delete-button": "deleteLinkItem",
            "click .download-delete-button": "deleteDownloadItem",
            "click #add-existing-assignment-link": "switchAddMode",
            "click .existing-table-sort": "updateFilter",
            "click #add-existing-search-button": "doSearch",
            "click input[name=submit-options]:radio": "submitTypeChange",
            "click #add-assignment-gradebook-include": "toggleGradeBook",
            "click #all_types_check": "refreshTypes",
            "click .select-all-check": "doSelectionToggle",
            "change .input-file": "handleDownloads",
            "change .assignment-download-file-field": "handleDownloads",
            "change #existing-school-year-dd": "doYearSelect",
            "change #existing-teacher-dd": "doTeacherSelect",
            "change #existing-section-dd": "doSectionSelect",
            "blur .assignment-link-field": "handleLinks",
            "blur .assignment-download-field": "handleDownloads",
            "keydown #add-assignment-gradebook-abbr": "doCharacterCountLimit",
            "keydown #existing-search-field": "doSearchEnter",
            "change #add-assignment-type-selector": "assignmentTypeDefaultMaxPoint",
            "change .default-value-change": "highlightApplyToSelected",
            "change #add-assignment-lti-selector": "toggleSubmissionLtiProvider",
            "blur .default-time-value-blur": "highlightApplyToSelected",
            'shown a[data-toggle="tab"]': "haltPropagation",
            'change [name="assignment-instance"]': "toggleAssignmentInstance",
            'change [name="assignment-instance-date-assigned"]': "toggleDateAssigned",
            'click [data-toggle="buttons-checkbox"] > button.active': "unsetDayButton",
            'click [data-toggle="buttons-checkbox"] > button:not(.active)': "setDayButton",
            "change #assignment-instance-start, #assignment-instance-end": "changeDateRange",
            "change #assignment-instance-date-assigned-num": "changeDateAssignedNum",
            "blur #assignment-instance-time-assinged": "changeTimeAssigned",
            'click [data-action="edit-instances"]': "openEditInstances"
        },
        adjustLtiUI: function() {
            var q = this,
                o, p;
            if (!(q.Lti.hasSavedPlacement)) {
                o = q.$("#ProviderId");
                p = q.$("#add-assignment-lti-selector");
                if (q.Lti.currentProviderListId === "lti" && q.Lti.currentProvider.get("ProviderId") > 0) {
                    p.prop("selectedIndex", 0);
                    p.prop("disabled", true);
                    q.$(".assignment-sub-lti-area").hide()
                } else {
                    if (q.Lti.currentProviderListId === "submission") {
                        o.prop("selectedIndex", 0);
                        o.prop("disabled", true);
                        q.$(".assignment-lti-area").hide();
                        if (!(q.Lti.currentProviderList)) {
                            p.prop("disabled", false)
                        }
                    } else {
                        o.prop("selectedIndex", 0);
                        o.prop("disabled", false);
                        p.prop("selectedIndex", 0);
                        p.prop("disabled", true);
                        q.$(".assignment-sub-lti-area").show();
                        q.$(".assignment-lti-area").show()
                    }
                }
            }
        },
        toggleSubmissionLtiProvider: function(p) {
            var q = this,
                o = $(p.currentTarget);
            q.Lti.currentProviderId = parseInt(o.val(), 10);
            q.Lti.currentProvider = q.Lti.providerList2.locateProvider(q.Lti.currentProviderId);
            q.Lti.currentProviderListId = "submission";
            if (q.Lti.currentProvider.get("OutcomesInd")) {
                q.forceIncludeInGradebook()
            }
            q.Lti.currentPlacement.changeProvider(q.Lti.currentProvider)
        },
        forceIncludeInGradebook: function() {
            var o = this;
            if (!(o.$("#add-assignment-gradebook-include").is(":checked"))) {
                o.$("#add-assignment-gradebook-include").trigger("click")
            }
        },
        render: function(o) {
            var r = this,
                q, p = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSIGNMENTRUBRIC);
            r.Lti = new b.Ms.LtiInfo((r.assignment ? r.assignment.currentPlacement() : new j.Ms.Tool()));
            if (r.Lti.provider1Count > 0) {
                r.ltiView = new b.Vs.Lti({
                    model: r.Lti,
                    parentView: r
                })
            }
            if (p) {
                r.rubricView = new d.Vs.AttachRubric()
            }
            p3.fT(r.template, function(t) {
                if (b.Data.TeacherSections === undefined || b.Data.TeacherSections.length == 0) {
                    b.Data.TeacherSections = new b.Cs.SectionsForTeacher();
                    r.emptysections = true;
                    r.SectionsForTeacher.fetch({
                        async: false,
                        data: {
                            schoolYear: p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel,
                            facultyUserId: p3.Data.Context.get("UserInfo").UserId
                        },
                        success: function(u, v) {
                            var w = r.assignment !== undefined ? _.pluck(r.assignment.get("SectionLinks"), "SectionId") : [];
                            u.each(function(y) {
                                if (y.get("isCurrent") === 1) {
                                    var A = y.get("SectionId"),
                                        x = y.get("Name"),
                                        z = new Bbm();
                                    z.set({
                                        IsSelected: w.indexOf(A) === -1 ? false : true,
                                        IsCurrent: true,
                                        LeadSectionId: A,
                                        GroupName: x,
                                        SectionId: A
                                    });
                                    b.Data.TeacherSections.add(z, {
                                        silent: true
                                    })
                                }
                            });
                            r.ActiveAssignmentSections = b.Data.TeacherSections === undefined ? [] : b.Data.TeacherSections.toJSON()
                        }
                    })
                }
                var s = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSIGNMENTDROPBOX);
                r.$el.html(t({
                    AddMode: r.AddMode,
                    WindowTitle: r.title,
                    edit: r.options ? r.options.edit || false : false,
                    gradebookInd: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK),
                    dropboxInd: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSIGNMENTDROPBOX),
                    assignmentTypes: b.Us.FetchAssignmentTypesShort(b.Data.currentLeadSectionId),
                    sections: b.Data.TeacherSections.toJSON(),
                    rubricInd: p,
                    sectionAssignment: b.Data.currentLeadSectionId
                }));
                $(o).append(r.el);
                p3.fT(r.newTemplate, function(z) {
                    var y = r.getSectionListForAssignment(),
                        v = (r.assignment) ? r.assignment.get("AssignmentTypeId") : null,
                        w;
                    $("#site-modal .modal-body").html(z({
                        AddMode: r.AddMode,
                        WindowTitle: r.title,
                        edit: r.options ? r.options.edit || false : false,
                        gradebookInd: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK),
                        dropboxInd: s,
                        assignmentTypes: b.Us.FetchAssignmentTypesShort(b.Data.currentLeadSectionId),
                        sections: y.toJSON(),
                        notifEnabled: r.notifEnabled,
                        notifTooltip: r.notifTooltip,
                        gradebookDefault: p3.Data.Context.get("UserInfo").GradebookDefaultInd,
                        resub: false,
                        existingAssignmentTypeId: v,
                        subPlacementSaved: r.Lti.getLtiSubmissionSaved(),
                        subLtiCount: r.Lti.getLtiSubmissionCount(),
                        subLtiProvider: r.Lti.getLtiSubmissionProvider(),
                        subLtiProviderList: r.Lti.getLtiSubmissionProviderList(),
                        canSubmitInd: s,
                        rubricInd: p,
                        sectionAssignment: b.Data.currentLeadSectionId
                    }));
                    if (r.ltiView) {
                        p3.rV(r.ltiView, r.$(".assignment-lti-area"), true)
                    }
                    if (r.rubricView) {
                        p3.rV(r.rubricView, r.$(".assignment-rubric-area"), true)
                    }
                    $(".abbr-tooltip").tooltip({
                        title: "10 character maximum",
                        html: true
                    });
                    $("#dropbox-enabled-fields").hide();
                    if (r.assignment !== undefined && r.assignment != null && r.assignment.get("AssignmentId") > 0) {
                        r.loadAssignment(r.assignment.toJSON())
                    } else {
                        var A = r.defaultDate;
                        $("#assignment-default-assigned-date").val(f.getDateString(A));
                        r.$("#assignment-instance-start").val(f.getDateString(A));
                        y = $("#add-assignment-sections-listing tr");
                        for (w = 0; w < y.length; w++) {
                            $($(y[w]).children("td")[1]).children("input:first").val(f.getDateString(A))
                        }
                    }
                    b.Us.LoadDateTimePickers(r.ActiveAssignmentSections);
                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, r.initializeFileUpload)
                    });
                    $(".send-notif-label").tooltip();
                    if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK)) {
                        var x = r.getSectionListForAssignment().pluck("LeadSectionId");
                        y = "";
                        for (w = 0; w < x.length; w++) {
                            if (y.length > 0) {
                                y += ","
                            }
                            y += x[w].toString()
                        }
                        c.Us.getAssignmentOptionDefaults();
                        if (p3.Data.LMS.DefaultTime) {
                            q = f.getTimeString(f.getDate(f.getDateString() + " " + p3.Data.LMS.DefaultTime))
                        } else {
                            q = f.buildTimeString(0, 0, 0)
                        }
                        $("#add-assignment-sections-listing").find(".time-picker-field").attr("placeholder", q);
                        $("#assignment-default-assigned-time").attr("placeholder", q);
                        r.$("#assignment-instance-time-assinged").attr("placeholder", q);
                        if (r.recurrence) {
                            r.recurrence.timeplaceholder = q
                        }
                        r.markingPeriods.fetch({
                            data: {
                                sectionList: y
                            },
                            success: function(E, M) {
                                var N = $(".grade-book-tooltip-location"),
                                    J, P, K, L, F, B, G, C, D, H, I, O;
                                for (J = 0; J < N.length; J++) {
                                    P = $(N[J]).data("sectionId");
                                    if (P && P > 0) {
                                        K = b.Us.GetMarkingPeriods(E, P);
                                        if (K.length === 0) {
                                            $(N[J]).hide()
                                        } else {
                                            L = "<strong>Marking Periods:</strong><br>Due date must fall within a marking period for this assignment to be included in Gradebook.<br>";
                                            for (F = 0; F < K.length; F++) {
                                                B = K[F].get("begin_date");
                                                G = K[F].get("end_date");
                                                if (typeof B === "string" && typeof G === "string") {
                                                    C = f.getDateString(f.getDate(B));
                                                    D = f.getTimeString(f.getTime(B));
                                                    H = f.getDateString(f.getDate(G));
                                                    I = f.getTimeString(f.getTime(G));
                                                    L += K[F].get("marking_period_description") + "<br><div>Begin: " + C + " " + D + "<br>End: " + H + " " + I + "<br></div>"
                                                }
                                            }
                                            $(N[J]).show().tooltip({
                                                title: L,
                                                html: true
                                            })
                                        }
                                    }
                                }
                            },
                            error: function(B, C) {
                                p3.displayError("Failed to retreive the Marking Periods")
                            }
                        })
                    }
                    if (r.emptysections && r.AddMode) {
                        $(".add-assignment-section-selector").prop("checked", false)
                    }
                    if ($(".add-assignment-section-selector:checked").length === 0) {
                        $(".select-all-check").prop("checked", false)
                    }
                    var u = jQuery.Event("postRender");
                    window.setTimeout(function() {
                        var B = false;
                        if ($("#rdoOnCampusSubmit").is(":checked")) {
                            $("#add-assignment-dropbox-num-files").prop("disabled", false);
                            $("#add-assignment-dropbox-late-time").prop("disabled", false);
                            $("#add-assignment-dropbox-resub").prop("disabled", false)
                        } else {
                            $("#add-assignment-dropbox-num-files").prop("disabled", true);
                            $("#add-assignment-dropbox-late-time").prop("disabled", true);
                            $("#add-assignment-dropbox-resub").prop("disabled", true)
                        }
                        if ($("#add-assignment-gradebook-include").is(":checked")) {
                            $("#add-assignment-gradebook-include-cum-grade").prop("disabled", false);
                            $("#add-assignment-gradebook-extra-credit").prop("disabled", false);
                            $("#add-assignment-gradebook-include-cum-grade").prop("disabled", false);
                            $("#add-assignment-gradebook-publish").prop("disabled", false);
                            $("#add-assignment-gradebook-abbr").prop("disabled", false);
                            if (r.rubricView) {
                                if (r.assignment !== undefined && r.assignment != null && r.assignment.get("AssignmentId") > 0) {
                                    r.rubricView.setRubricId(r.assignment.get("ParentRubricId"), r.assignment.get("RubricId"), r.assignment.get("HasGrades"), r.assignment.get("RubricName"))
                                }
                                B = r.rubricView.pointRubricSelected()
                            }
                            $("#add-assignment-gradebook-max-points").prop("disabled", B);
                            $("#add-assignment-gradebook-factor").prop("disabled", false)
                        } else {
                            $("#add-assignment-gradebook-include-cum-grade").prop("disabled", true);
                            $("#add-assignment-gradebook-extra-credit").prop("disabled", true);
                            $("#add-assignment-gradebook-include-cum-grade").prop("disabled", true);
                            $("#add-assignment-gradebook-publish").prop("disabled", true);
                            $("#add-assignment-gradebook-abbr").prop("disabled", true);
                            $("#add-assignment-gradebook-max-points").prop("disabled", true);
                            $("#add-assignment-gradebook-factor").prop("disabled", true)
                        }
                        p3.Layout.Containers.Modal.trigger(u)
                    }, 400)
                });
                $("#publish-options-warning-message").hide()
            })
        },
        getSectionListForAssignment: function() {
            var t = this,
                s = new b.Cs.SectionsForTeacher({}, {
                    sectionId: 0
                }),
                r, p, o, q;
            s.remove(s.at(0));
            b.Data.TeacherSections.each(function(u) {
                s.add(u.clone())
            });
            if (!t.AddMode) {
                o = s.pluck("SectionId");
                r = t.assignment.get("SectionLinks");
                for (p = 0; p < r.length; p++) {
                    if (o.indexOf(r[p].SectionId) == -1) {
                        q = new b.Ms.SectionForTeacher({
                            SectionId: r[p].SectionId,
                            GroupName: r[p].Section.Name,
                            IsSelected: 1,
                            LeadSectionId: r[p].SectionId
                        });
                        s.add(q)
                    }
                }
            }
            return s
        },
        haltPropagation: function(o) {
            o.stopPropagation()
        },
        resetAssignmentFields: function(w) {
            var s, x, y, t, o, q, p, r, v, u;
            if ($("#add-assignment-title-field").length) {
                s = tinyMCE.get("add-assignment-title-field");
                s.setContent("");
                s.save();
                s.focus()
            }
            if ($("#add-assignment-description-field").length) {
                s = tinyMCE.get("add-assignment-description-field");
                s.setContent("");
                $("#add-assignment-description-field").html("")
            }
            if ($("#add-assignment-type-selector").length) {
                $("#add-assignment-type-selector").val(0)
            }
            if ($("#add-assignment-gradebook-abbr").length) {
                $("#add-assignment-gradebook-abbr").val("")
            }
            if ($("#add-assignment-gradebook-max-points").length) {
                $("#add-assignment-gradebook-max-points").val("")
            }
            if ($("#add-assignment-gradebook-factor").length) {
                $("#add-assignment-gradebook-factor").val(1)
            }
            if ($("#add-assignment-gradebook-include").length) {
                $("#add-assignment-gradebook-include").prop("checked", p3.Data.Context.get("UserInfo").GradebookDefaultInd);
                this.toggleGradeBook()
            }
            if ($("#add-assignment-gradebook-include-cum-grade").length) {
                $("#add-assignment-gradebook-include-cum-grade").prop("checked", p3.Data.Context.get("UserInfo").GradebookDefaultInd)
            }
            if ($("#add-assignment-gradebook-extra-credit").length) {
                $("#add-assignment-gradebook-extra-credit").prop("checked", false)
            }
            if ($("#add-assignment-gradebook-publish").length) {
                $("#add-assignment-gradebook-publish").prop("checked", p3.Data.Context.get("UserInfo").GradebookDefaultInd)
            }
            $("#rdoNoSubmit").prop("checked", true);
            this.toggleDropBox(false);
            $("#add-assignment-lti-selector").val(0);
            if ($("#add-assignment-dropbox-num-files").length) {
                $("#add-assignment-dropbox-num-files").val(1)
            }
            if ($("#add-assignment-dropbox-late-time").length) {
                $("#add-assignment-dropbox-late-time").val("")
            }
            y = this.defaultDate;
            if ($("#assignment-default-assigned-date").length) {
                $("#assignment-default-assigned-date").val(f.getDateString(y))
            }
            if ($("#assignment-default-assigned-time").length) {
                $("#assignment-default-assigned-time").val("")
            }
            if ($("#assignment-default-due-date").length) {
                $("#assignment-default-due-date").val("")
            }
            if ($("#assignment-default-publish-option").length) {
                $("#assignment-default-publish-option").val(1)
            }
            if ($("#assignment-default-notification-send").length) {
                $("#assignment-default-notification-send").prop("checked", false)
            }
            this.resetAssignmentInstance(f.getDateString(y));
            x = $("#add-assignment-sections-listing tr");
            for (t = 0; t < x.length; t++) {
                o = $(x[t]);
                q = $(o.children("td")[0]).find(".add-assignment-section-selector");
                p = o.children("td")[1];
                r = o.children("td")[2];
                v = o.children("td")[3];
                u = $(o.children("td")[4]).find("input");
                if (q) {
                    if ($(q).data("defaultSection")) {
                        $(q).prop("checked", true)
                    } else {
                        $(q).prop("checked", false)
                    }
                }
                if (p) {
                    $(p).children("input:first").val(f.getDateString(y));
                    $(p).children("input:last").val("")
                }
                if (r) {
                    $(r).children("input:first").val("")
                }
                if (v) {
                    $(v).children("select").val(1)
                }
                if (u) {
                    $(u).prop("checked", false)
                }
            }
            $("input.add-assignment-section-selector:checked").closest("tr").show();
            if (!this.emptysections) {
                $(".add-assignment-section-selector:input:checkbox[checked!='checked']").closest("tr").remove()
            }
            $(".select-all-check").prop("checked", true);
            if (this.emptysections) {
                $("input.add-assignment-section-selector").prop("checked", false);
                $("input.select-all-check").prop("checked", false)
            }
            if (this.$("#add-assignment-links-tab").children().length > 0) {
                this.$("#add-assignment-links-tab").children().remove();
                this.addLinkControl()
            }
            if (this.$("#add-assignment-downloads-tab").children().length > 0) {
                this.$("#add-assignment-downloads-tab").children().remove();
                this.addDownloadControl()
            }
            if ($("#add-assignment-title-field").length) {
                tinyMCE.get("add-assignment-title-field").focus()
            }
            if (w) {
                this.resetLti()
            }
            if (this.rubricView) {
                this.rubricView.setRubricId(0, 0, false)
            }
        },
        resetAssignmentInstance: function(o) {
            this.recurrence = {
                on: false,
                assignmentList: [],
                dayList: [false, false, false, false, false, false, false]
            };
            this.$('[name="assignment-instance"]').val(0);
            this.$("assignment-instance-start").val(o);
            this.$("assignment-instance-end");
            this.$("#assignment-instance-settings button").removeClass("active");
            this.$("#assignment-instance-date-assigned").val(0);
            this.$("#assignment-instance-date-assigned-num").val("");
            this.$("#assignment-instance-time-assinged").val("");
            this.$("#assignment-instance-dates").hide();
            this.$("#assignment-instance-settings").hide();
            this.$("#assignment-instance-date-assigned-container").hide();
            this.$("#no-instances").show();
            this.$("#count-instances").hide()
        },
        resetLti: function() {
            var p = this,
                o = new j.Cs.ltiProviderPicklist();
            p.Lti.currentProviderId = 0;
            p.Lti.currentProviderListId = "none";
            p.Lti.currentProvider = new Bbm();
            p.Lti.currentPlacement = new j.Ms.Tool({
                ContextLabelId: 5,
                ContextValue: 999,
                Gradeable: true
            });
            p.Lti.hasSavedPlacement = false;
            p.Lti.provider1Count = 0;
            p.Lti.provider2Count = 0;
            p.Lti.providerList1 = new j.Cs.ltiProviderPicklist();
            p.Lti.providerList2 = new j.Cs.ltiProviderPicklist();
            if (j.Us.IsLtiInstalled()) {
                o.fetch({
                    async: false,
                    data: {
                        scope: h.LtiProviderScope.ASSIGNMENT
                    },
                    success: function() {
                        o.each(function(q) {
                            if (q.get("GalleryId") === 2) {
                                p.Lti.providerList2.push(q)
                            } else {
                                p.Lti.providerList1.push(q)
                            }
                        });
                        p.Lti.provider1Count = p.Lti.providerList1.ltiProvidersAvailableCount(p.Lti.currentProviderId);
                        p.Lti.provider2Count = p.Lti.providerList2.ltiProvidersAvailableCount(p.Lti.currentProviderId);
                        p.Lti.locateProvider(p.Lti.currentProviderId);
                        p.adjustLtiUI();
                        if (p.ltiView) {
                            p.ltiView.renderTemplate()
                        }
                    },
                    error: function() {
                        p3.displayError("Error loading the provider list")
                    }
                })
            }
        },
        loadAssignment: function(q) {
            var D = this,
                C, x, B, r, A, p, t, z, s, y, o, u, w, v;
            $("#add-assignment-title-field").text(q.ShortDescription);
            $("#titleCountField").html(q.ShortDescription.length);
            $("#add-assignment-description-field").text(q.LongDescription);
            $("#add-assignment-type-selector").val(q.AssignmentTypeId);
            $("#add-assignment-gradebook-abbr").val(q.AbbrDescription);
            $("#add-assignment-gradebook-max-points").val(q.MaxPoints);
            $("#add-assignment-gradebook-factor").val(q.Factor);
            if (q.IncGradeBook) {
                $("#add-assignment-gradebook-include").prop("checked", true)
            } else {
                $("#add-assignment-gradebook-include").prop("checked", false)
            }
            if (q.IncCumGrade) {
                $("#add-assignment-gradebook-include-cum-grade").prop("checked", true)
            } else {
                $("#add-assignment-gradebook-include-cum-grade").prop("checked", false)
            }
            if (q.ExtraCredit) {
                $("#add-assignment-gradebook-extra-credit").prop("checked", true)
            } else {
                $("#add-assignment-gradebook-extra-credit").prop("checked", false)
            }
            if (q.PublishGrade) {
                $("#add-assignment-gradebook-publish").prop("checked", true)
            } else {
                $("#add-assignment-gradebook-publish").prop("checked", false)
            }
            if (q.DropboxInd) {
                $("#rdoOnCampusSubmit").prop("checked", true);
                $("#add-assignment-dropbox-num-files").val(q.DropboxNumFiles);
                $("#add-assignment-dropbox-late-time").val(q.DropboxTimeLate);
                if (q.DropboxResub) {
                    $("#add-assignment-dropbox-resub").prop("checked", true)
                } else {
                    $("#add-assignment-dropbox-resub").prop("checked", false)
                }
            }
            $(".add-assignment-section-selector").prop("checked", false);
            C = [];
            for (x = 0; x < q.SectionLinks.length; x++) {
                B = q.SectionLinks[x];
                r = $("#add-assignment-sections-listing tr td label input[value = " + B.SectionId + "]");
                A = r.parents("tr");
                if (r.length === 0) {
                    $("#add-assignment-sections-listing").append($("<tr>").html('<td><label class="checkbox"><input class="add-assignment-section-selector" type="checkbox" value="' + B.SectionId + '" data-default-section="true" checked="checked">' + B.Section.Name + '</label></td><td class="control-group"><input id="' + B.SectionId + '-assigned-date" type="text" class="input-mini date-picker-field dp-' + B.SectionId + '" placeholder="" value=""> <input id="' + B.SectionId + '-assigned-time" type="text" class="input-mini time-picker-field" value=""></td><td class="control-group"><input id="' + B.SectionId + '-due-date" type="text" class="input-mini date-picker-field dp-' + B.SectionId + '" placeholder="" value=""><i class="p3icon-gradebook grade-book-tooltip-location" data-section-id="' + B.SectionId + '" data-original-title=""></i></td><td><select id="' + B.SectionId + '-publish-option" class="input-small publish-options"><option value="1">Now</option><option value="2">Assigned Date</option><option value="0">No</option></select></td><td><label class="checkbox"><input type="checkbox" id="' + B.SectionId + '-notification-send" value="option1"><span class="send-notif-label" data-original-title="">Yes</span></label></td>'));
                    r = $("#add-assignment-sections-listing tr td label input[value = " + B.SectionId + "]");
                    A = r.parents("tr")
                }
                C.push({
                    LeadSectionId: B.SectionId
                });
                p = $(A).children("td")[1];
                t = $(A).children("td")[2];
                z = $(A).children("td")[3];
                $(A).show();
                $(r).prop("checked", true);
                $(p).children("input:first").val(f.displayDate(B.AssignmentDate, "shortDate"));
                $(p).children("input:last").val(f.displayTime(B.AssignmentTime, false, "shortTime"));
                $(t).children("input:first").val(f.displayDate(B.DueDate, "shortDate"));
                $(z).children("select").val(B.PublishOnAssignedInd ? 2 : B.PublishInd ? 1 : 0)
            }
            if (C.length > 0 && b.Data.TeacherSections.length > 0) {
                b.Data.TeacherSections.each(function(E) {
                    if (_.filter(C, function(F) {
                            return F.LeadSectionId === E.get("LeadSectionId")
                        }).length === 0) {
                        C.push({
                            LeadSectionId: E.get("LeadSectionId")
                        })
                    }
                })
            }
            D.ActiveAssignmentSections = C || b.Data.TeacherSections.toJSON();
            $(".add-assignment-section-selector:input:checkbox[checked!='checked']").closest("tr").remove();
            if (q.LinkItems.length > 0) {
                for (x = 0; x < q.LinkItems.length; x++) {
                    y = q.LinkItems[x];
                    o = $("#add-assignment-links-tab").children(":last");
                    if ($(o).find("input:first").val() !== "" && $(o).find("input:last").val() !== "") {
                        $(o).find(".link-delete-button").show();
                        D.addLinkControl();
                        o = $("#add-assignment-links-tab").children(":last")
                    }
                    $(o).find("input:first").val(y.ShortDescription);
                    $(o).find("input:last").val(y.Url);
                    $(o).data("id", y.LinkID);
                    $(o).find(".link-delete-button").show();
                    D.addLinkControl()
                }
            }
            if (q.DownloadItems.length > 0) {
                for (x = 0; x < q.DownloadItems.length; x++) {
                    s = q.DownloadItems[x];
                    o = $("#add-assignment-downloads-tab").children(":last");
                    if ($(o).find("input:first").val() !== "" && $(o).find("a.assignment-download-file-field:last").val() !== "") {
                        $(o).find(".download-delete-button").show();
                        D.addDownloadControl();
                        o = $("#add-assignment-downloads-tab").children(":last")
                    }
                    u = s.FileName;
                    w = s.FriendlyFileName || s.FileName;
                    v = $(o).find("input:first").parent().next();
                    $(o).find("input:last").val(s.ShortDescription);
                    v.data("rawFile", u);
                    $(o).find("input.assignment-download-file-name").data("fileType", s.FileTypeID);
                    v.val(w.substring(0, w.lastIndexOf(".")));
                    v.next().html(u.substring(u.lastIndexOf(".")));
                    $(o).find("input:first").siblings("span:first").html("Change");
                    $(o).data("id", s.DownloadID);
                    $(o).data("originalFile", u);
                    $(o).data("fileTypeId", s.FileTypeID);
                    $(o).find(".download-delete-button").show();
                    D.addDownloadControl()
                }
            }
        },
        initializeFileUpload: function() {
            b.Us.initializeFileUpload(this)
        },
        handleLinks: function(o) {
            b.Us.handleLinks(o, this);
            return false
        },
        handleDownloads: function(o) {
            b.Us.handleDownloads(o, this);
            return false
        },
        submitTypeChange: function(p) {
            var t = this,
                q, s = $(p.currentTarget).val(),
                o = (s === "1"),
                r = (s === "2");
            this.toggleDropBox(o);
            if (r) {
                q = t.$("#rdoLtiSubmit").data("providerid");
                if (q) {
                    t.Lti.currentProviderId = q;
                    t.Lti.locateProvider(q);
                    if (t.Lti.currentProvider.get("OutcomesInd")) {
                        t.forceIncludeInGradebook()
                    }
                } else {
                    t.Lti.currentProviderListId = "submission"
                }
                t.adjustLtiUI()
            } else {
                if (t.Lti.currentProviderListId === "submission") {
                    t.Lti.currentProviderId = 0;
                    t.Lti.currentProviderListId = "none";
                    t.adjustLtiUI()
                }
            }
        },
        toggleDropBox: function(o) {
            if ($("#rdoOnCampusSubmit").length > 0) {
                if (o) {
                    $("#add-assignment-dropbox-num-files").prop("disabled", false);
                    $("#add-assignment-dropbox-late-time").prop("disabled", false);
                    $("#add-assignment-dropbox-resub").prop("disabled", false)
                } else {
                    $("#add-assignment-dropbox-num-files").prop("disabled", true);
                    $("#add-assignment-dropbox-late-time").prop("disabled", true);
                    $("#add-assignment-dropbox-resub").prop("disabled", true)
                }
            }
        },
        toggleGradeBook: function(o) {
            var q = this,
                p = false;
            $("#add-assignment-gradebook-max-points").prop("disabled", p);
            if ($("#add-assignment-gradebook-include").is(":checked")) {
                $("#add-assignment-gradebook-include-cum-grade").prop("disabled", false);
                $("#add-assignment-gradebook-extra-credit").prop("disabled", false);
                $("#add-assignment-gradebook-include-cum-grade").prop("disabled", false);
                $("#add-assignment-gradebook-publish").prop("disabled", false);
                $("#add-assignment-gradebook-abbr").prop("disabled", false);
                if (q.rubricView) {
                    p = q.rubricView.pointRubricSelected()
                }
                $("#add-assignment-gradebook-max-points").prop("disabled", p);
                $("#add-assignment-gradebook-factor").prop("disabled", false)
            } else {
                $("#add-assignment-gradebook-include-cum-grade").prop("disabled", true);
                $("#add-assignment-gradebook-extra-credit").prop("disabled", true);
                $("#add-assignment-gradebook-include-cum-grade").prop("disabled", true);
                $("#add-assignment-gradebook-publish").prop("disabled", true);
                $("#add-assignment-gradebook-abbr").prop("disabled", true);
                $("#add-assignment-gradebook-max-points").prop("disabled", true);
                $("#add-assignment-gradebook-factor").prop("disabled", true)
            }
        },
        addLinkControl: function() {
            b.Us.addLinkControl(this)
        },
        addDownloadControl: function() {
            b.Us.addDownloadControl(this)
        },
        refreshTypes: function(o) {
            b.Us.RefreshAssignmentTypes(o.currentTarget.checked, "#add-assignment-type-selector")
        },
        deleteLinkItem: function(o) {
            b.Us.deleteLinkItem(o, this);
            return false
        },
        deleteDownloadItem: function(o) {
            b.Us.deleteDownloadItem(o, this);
            return false
        },
        switchAddMode: function(o) {
            var p = this;
            if (this.AddMode) {
                if (this.AddExisting) {
                    $(".assignment-add-header").html("Add New Assignment");
                    $("#add-existing-assignment-link").html("Add Existing");
                    p3.fT(p.newTemplate, function(v) {
                        var q;
                        $("#site-modal .modal-body").html(v({
                            AddMode: p.AddMode,
                            WindowTitle: p.title,
                            edit: p.options ? p.options.edit || false : false,
                            gradebookInd: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK),
                            dropboxInd: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSIGNMENTDROPBOX),
                            assignmentTypes: b.Us.FetchAssignmentTypesShort(b.Data.currentLeadSectionId),
                            sections: b.Data.TeacherSections.toJSON(),
                            notifEnabled: p.notifEnabled,
                            notifTooltip: p.notifTooltip
                        }));
                        b.Us.LoadDateTimePickers(p.ActiveAssignmentSections);
                        var u = f.buildTimeString(0, 0, 0);
                        $(".input-mini.time-picker-field.hasTimePicker").attr("placeholder", u);
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, p.initializeFileUpload)
                        });
                        p.resetPublisOptions();
                        if (b.Data.currentLeadSectionId === undefined) {
                            $(".select-all-check").prop("checked", false);
                            $(".add-assignment-section-selector").prop("checked", false)
                        }
                        if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK)) {
                            var s = b.Data.TeacherSections.pluck("LeadSectionId");
                            var t = "";
                            for (q = 0; q < s.length; q++) {
                                if (t.length > 0) {
                                    t += ","
                                }
                                t += s[q].toString()
                            }
                            var r = new b.Cs.MarkingPeriods();
                            r.fetch({
                                data: {
                                    sectionList: t
                                },
                                success: function(z, G) {
                                    var H = $(".grade-book-tooltip-location"),
                                        A, I, E, F, w, B, x, y, C, D;
                                    for (q = 0; q < H.length; q++) {
                                        I = $(H[q]).data("sectionId");
                                        if (I && I > 0) {
                                            E = b.Us.GetMarkingPeriods(z, I);
                                            if (E.length === 0) {
                                                $(H[q]).hide()
                                            } else {
                                                F = "<strong>Marking Periods:</strong><br>Due date must fall within a marking period for this assignment to be included in Gradebook.<br>";
                                                for (A = 0; A < E.length; A++) {
                                                    w = E[A].get("begin_date");
                                                    B = E[A].get("end_date");
                                                    if (typeof w === "string" && typeof B === "string") {
                                                        x = f.getDateString(f.getDate(w));
                                                        y = f.getTimeString(f.getTime(w));
                                                        C = f.getDateString(f.getDate(B));
                                                        D = f.getTimeString(f.getTime(B));
                                                        F += E[A].get("marking_period_description") + "<br><div>Begin: " + x + " " + y + "<br>End: " + C + " " + D + "<br></div>"
                                                    }
                                                }
                                                $(H[q]).show().tooltip({
                                                    title: F,
                                                    html: true
                                                })
                                            }
                                        }
                                    }
                                },
                                error: function(w, x) {
                                    p3.displayError("Failed to retreive the Marking Periods")
                                }
                            })
                        }
                    });
                    this.initEditors();
                    this.AddExisting = false
                } else {
                    $(".assignment-add-header").html("Add Existing Assignment");
                    $("#add-existing-assignment-link").html("Add New");
                    if (p.ExistingSchoolYears === undefined) {
                        p.ExistingSchoolYears = new b.Cs.ExistingSchoolYears({}, {})
                    }
                    if (p.TeachersForYear === undefined) {
                        p.TeachersForYear = new b.Cs.ExistingTeachers()
                    }
                    if (p.SectionsForTeacher === undefined) {
                        p.SectionsForTeacher = new b.Cs.ExistingSections()
                    }
                    p.ExistingSchoolYears.fetch({
                        success: function(q, s) {
                            p.activeTeacher = p3.Data.Context.get("UserInfo") ? p3.Data.Context.get("UserInfo").UserId : 0;
                            p.activeYear = q.find(function(r) {
                                return r.get("Current")
                            }).get("Label");
                            p.TeachersForYear.fetch({
                                data: {
                                    schoolYear: p.activeYear
                                },
                                success: function(r, t) {
                                    p.SectionsForTeacher.fetch({
                                        data: {
                                            facultyUserId: p.activeTeacher,
                                            schoolYear: p.activeYear
                                        },
                                        success: function(w, y) {
                                            var v = w.toJSON();
                                            v = _.uniq(v, true, function(z) {
                                                return z.SectionId
                                            });
                                            var x, u = false;
                                            if (b.Data.currentLeadSectionId === undefined) {
                                                x = w.at(0);
                                                u = true
                                            } else {
                                                x = w.find(function(z) {
                                                    return z.get("SectionId").toString() == b.Data.currentLeadSectionId
                                                })
                                            }
                                            if (x !== undefined) {
                                                p.activeSection = x.get("SectionId");
                                                p.activeOffering = x.get("OfferingId")
                                            } else {
                                                p.activeSection = 0;
                                                p.activeOffering = 0
                                            }
                                            p3.fT(p.existingTemplate, function(E) {
                                                var z;
                                                $("#site-modal .modal-body").html(E({
                                                    SchoolYears: q.toJSON(),
                                                    Teachers: r.toJSON(),
                                                    SectionNames: v,
                                                    sections: b.Data.TeacherSections.toJSON(),
                                                    notifEnabled: p.notifEnabled,
                                                    notifTooltip: p.notifTooltip,
                                                    gradebookInd: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK),
                                                }));
                                                if (p.activeTeacher) {
                                                    $("#existing-teacher-dd").val(p.activeTeacher)
                                                }
                                                if (b.Data.currentLeadSectionId) {
                                                    $("#existing-section-dd").val(b.Data.currentLeadSectionId)
                                                }
                                                b.Us.LoadDateTimePickers(p.ActiveAssignmentSections);
                                                var D = f.buildTimeString(0, 0, 0);
                                                $(".input-mini.time-picker-field.hasTimePicker").attr("placeholder", D);
                                                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                                                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, p.initializeFileUpload)
                                                });
                                                p.resetPublisOptions();
                                                p.getExistingAssignments();
                                                if (u) {
                                                    $(".select-all-check").prop("checked", false);
                                                    $(".add-assignment-section-selector").prop("checked", false)
                                                }
                                                if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK)) {
                                                    var B = b.Data.TeacherSections.pluck("LeadSectionId");
                                                    var C = "";
                                                    for (z = 0; z < B.length; z++) {
                                                        if (C.length > 0) {
                                                            C += ","
                                                        }
                                                        C += B[z].toString()
                                                    }
                                                    var A = new b.Cs.MarkingPeriods();
                                                    A.fetch({
                                                        data: {
                                                            sectionList: C
                                                        },
                                                        success: function(I, P) {
                                                            var Q = $(".grade-book-tooltip-location"),
                                                                J, R, N, O, F, K, G, H, L, M;
                                                            for (z = 0; z < Q.length; z++) {
                                                                R = $(Q[z]).data("sectionId");
                                                                if (R && R > 0) {
                                                                    N = b.Us.GetMarkingPeriods(I, R);
                                                                    if (N.length === 0) {
                                                                        $(Q[z]).hide()
                                                                    } else {
                                                                        O = "<strong>Marking Periods:</strong><br>Due date must fall within a marking period for this assignment to be included in Gradebook.<br>";
                                                                        for (J = 0; J < N.length; J++) {
                                                                            F = N[J].get("begin_date");
                                                                            K = N[J].get("end_date");
                                                                            if (typeof F === "string" && typeof K === "string") {
                                                                                G = f.getDateString(f.getDate(F));
                                                                                H = f.getTimeString(f.getTime(F));
                                                                                L = f.getDateString(f.getDate(K));
                                                                                M = f.getTimeString(f.getTime(K));
                                                                                O += N[J].get("marking_period_description") + "<br><div>Begin: " + G + " " + H + "<br>End: " + L + " " + M + "<br></div>"
                                                                            }
                                                                        }
                                                                        $(Q[z]).show().tooltip({
                                                                            title: O,
                                                                            html: true
                                                                        })
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        error: function(F, G) {
                                                            p3.displayError("Failed to retreive the Marking Periods")
                                                        }
                                                    })
                                                }
                                            })
                                        },
                                        error: function(u, v) {
                                            p3.displayError("Error retreiving sections.")
                                        }
                                    })
                                },
                                error: function(t, u) {
                                    p3.displayError("Error retreiving teachers.")
                                }
                            })
                        },
                        error: function(q, s) {
                            p3.displayError("Error retreiving school years.")
                        }
                    });
                    this.AddExisting = true
                }
            }
            return false
        },
        doYearSelect: function(o) {
            var p = this;
            p.activeYear = $(o.currentTarget).val();
            if (p.TeachersForYear === undefined) {
                p.TeachersForYear = new b.Cs.ExistingTeachers()
            }
            p.updateTeachers(true, p.activeTeacher)
        },
        doTeacherSelect: function(o) {
            var p = this;
            p.activeTeacher = $(o.currentTarget).val();
            if (p.activeYear <= 0) {
                p.activeYear = $("#existing-school-year-dd").val()
            }
            if (p.SectionsForTeacher === undefined) {
                p.SectionsForTeacher = new b.Cs.ExistingSections()
            }
            p.updateSections(true)
        },
        doSectionSelect: function(p) {
            var o = $("#existing-section-dd");
            this.activeSection = o.val();
            var q = 'option[value="' + this.activeSection + '"]';
            this.activeOffering = o.children(q).data("offering");
            this.getExistingAssignments()
        },
        getExistingAssignments: function(q, p, o) {
            var r = this;
            q = q || r.activeTeacher;
            p = p || r.activeSection;
            o = o || r.activeOffering;
            if (q <= 0 || p <= 0 || o <= 0) {
                r.renderItems([])
            }
            if (r.ExistingAssignments === undefined) {
                r.ExistingAssignments = new b.Cs.ExistingAssignments();
                r.ExistingAssignments.filters = {
                    short_description: function(u, v) {
                        var s = u.get("short_description") || "",
                            t = v.get("short_description") || "";
                        return s < t ? -1 : s > t ? 1 : 0
                    },
                    date1: function(s) {
                        return s.get("date1") ? f.getDate(s.get("date1")).getTime() : 0
                    },
                    date2: function(s) {
                        return s.get("date2") ? f.getDate(s.get("date2")).getTime() : 0
                    },
                    extra: function(u, v) {
                        var s = u.get("extra") || "",
                            t = v.get("extra") || "";
                        return s < t ? -1 : s > t ? 1 : 0
                    },
                    short_description_invert: function(u, v) {
                        var s = u.get("short_description") || "",
                            t = v.get("short_description") || "";
                        return s < t ? 1 : s > t ? -1 : 0
                    },
                    date1_invert: function(s) {
                        return s.get("date1") ? -f.getDate(s.get("date1")).getTime() : 0
                    },
                    date2_invert: function(s) {
                        return s.get("date2") ? -f.getDate(s.get("date2")).getTime() : 0
                    },
                    extra_invert: function(u, v) {
                        var s = u.get("extra") || "",
                            t = v.get("extra") || "";
                        return s < t ? 1 : s > t ? -1 : 0
                    }
                }
            }
            r.ExistingAssignments.fetch({
                data: {
                    facultyUserId: q,
                    offeringId: o,
                    sectionId: p
                },
                success: function(s, u) {
                    s.each(function(z) {
                        var x = z.get("date1"),
                            y = z.get("date2");
                        if (x !== undefined && typeof x.substring === "function" && x.indexOf(" ") > 0) {
                            z.set("date1", x.substring(0, x.indexOf(" ")))
                        }
                        if (y !== undefined && typeof y.substring === "function" && y.indexOf(" ") > 0) {
                            z.set("date2", y.substring(0, y.indexOf(" ")))
                        }
                    });
                    var t = s.toJSON();
                    if ($("#existing-search-field").val() !== "") {
                        t = [];
                        var v = $("#existing-search-field").val().toLowerCase();
                        var w = s.filter(function(x) {
                            return (x.get("short_description").toLowerCase().indexOf(v) > -1)
                        });
                        _.each(w, function(x) {
                            t.push(x.toJSON())
                        })
                    }
                    r.renderItems(t)
                },
                error: function(s, t) {
                    p3.displayError("Error retreiving Existing Assignments.")
                }
            })
        },
        updateTeachers: function(q, o) {
            var r = this,
                p = (p3.Config.IsSmallCollege) ? "Error retreiving faculty." : "Error retreiving teachers.";
            r.TeachersForYear.fetch({
                data: {
                    schoolYear: r.activeYear
                },
                success: function(t, u) {
                    var s = $("#existing-teacher-dd");
                    var v;
                    s.html("");
                    t.each(function(x) {
                        var w;
                        if (o && x.get("Id") === o) {
                            w = $("<option>", {
                                value: x.get("Id"),
                                selected: "selected"
                            }).html(x.get("Name"));
                            r.activeTeacher = x.get("Id")
                        } else {
                            if (!v) {
                                v = x.get("Id")
                            }
                            w = $("<option>", {
                                value: x.get("Id")
                            }).html(x.get("Name"))
                        }
                        s.append(w)
                    });
                    if (!o) {
                        r.activeTeacher = v;
                        r.keepOffering = false
                    } else {
                        r.keepOffering = true
                    }
                    if (t.length === 0) {
                        r.activeTeacher = 0
                    }
                    r.updateSections(q)
                },
                error: function(s, t) {
                    p3.displayError(p)
                }
            })
        },
        updateSections: function(o) {
            var p = this;
            p.SectionsForTeacher.fetch({
                data: {
                    facultyUserId: p.activeTeacher,
                    schoolYear: p.activeYear
                },
                success: function(t, w) {
                    var q = $("#existing-section-dd");
                    var u = false,
                        v = p.keepOffering ? p.activeOffering : 0;
                    q.html("");
                    var s = [];
                    t.each(function(x) {
                        var r, y = x.get("SectionId");
                        if ($.inArray(y, s) === -1) {
                            r = $("<option>", {
                                value: x.get("SectionId"),
                                "data-offering": x.get("OfferingId")
                            }).html(x.get("Name"));
                            s.push(x.get("SectionId"));
                            q.append(r);
                            if (v && x.get("OfferingId") == v) {
                                p.activeOffering = x.get("OfferingId");
                                p.activeSection = x.get("SectionId");
                                v = 0;
                                u = true
                            } else {
                                if (!u) {
                                    p.activeOffering = x.get("OfferingId");
                                    p.activeSection = x.get("SectionId");
                                    u = true
                                }
                            }
                        }
                    });
                    if (t.length === 0) {
                        p.activeOffering = 0;
                        p.activeSection = 0
                    }
                    q.val(p.activeSection);
                    if (o) {
                        p.getExistingAssignments()
                    }
                },
                error: function(q, s) {
                    p3.displayError("Error retreiving sections.")
                }
            })
        },
        renderItems: function(o) {
            var p = this;
            p3.fT(p.ItemTemplate, function(q) {
                if (o !== undefined && o.length > 0) {
                    $("#existing-items-table").html(q({
                        assignments: o
                    }))
                } else {
                    $("#existing-items-table").html("<tr><td></td><td>There are no assignments to display.</td><td></td<td></td><td></td></tr>")
                }
            })
        },
        updateFilter: function(p) {
            var u = this;
            var o = $(p.currentTarget);
            var s = o.data("sort");
            $(".sort-icon").removeClass("p3icon-sortDown p3icon-sortUp p3icon-sortOff");
            $(".sort-icon").addClass("p3icon-sortOff");
            $(".existing-table-sort").removeClass("sort-active").addClass("muted");
            if (s !== undefined) {
                if (u.CurrentSort === s) {
                    s = s + "_invert";
                    o.removeClass("muted").addClass("sort-active");
                    o.children("i").removeClass("p3icon-sortOff").addClass("p3icon-sortUp")
                } else {
                    o.removeClass("muted").addClass("sort-active");
                    o.children("i").removeClass("p3icon-sortOff").addClass("p3icon-sortDown")
                }
                u.CurrentSort = s;
                u.ExistingAssignments.changeSort(s);
                u.ExistingAssignments.sort();
                var q = u.ExistingAssignments.toJSON();
                if ($("#existing-search-field").val() !== "") {
                    q = [];
                    var r = $("#existing-search-field").val().toLowerCase();
                    var t = u.ExistingAssignments.filter(function(v) {
                        return (v.get("short_description").toLowerCase().indexOf(r) > -1)
                    });
                    _.each(t, function(v) {
                        q.push(v.toJSON())
                    })
                }
                u.renderItems(q)
            }
        },
        doAssignmentDelete: function(o) {
            o.preventDefault();
            o.stopPropagation();
            var t = this;
            if (this.assignment !== undefined) {
                var s = '<div class="modal " tabindex="-1" id="confirm-modal" data-keyboard="false" data-backdrop="static"></div>';
                $(s).modal();
                var p = this.assignment.get("AssignmentId");
                var r = new b.Cs.SectionForAssignments({}, {
                    assignmentId: p
                });
                var q = new b.Vs.DeleteAssignmentModalView({
                    collection: r,
                    assignmentId: p,
                    container: $("#confirm-modal")
                }).on("assignmentDeleted", function() {
                    t.trigger("deleteAssignment");
                    p3.Layout.Containers.Modal.modal("hide")
                });
                p3.rV(q, $("#confirm-modal"), true);
                p3.showModal($("#confirm-modal"));
                p3.initModalHeightTimer($("#confirm-modal"));
                r.fetch({
                    error: function() {
                        p3.displayError("Error loading Sections associated with the assignment")
                    }
                })
            }
        },
        doSearchEnter: function(o) {
            if (o.keyCode === 13) {
                this.doSearch(o)
            }
        },
        doSearch: function(o) {
            var s = this;
            var q = $("#existing-search-field").val().toLowerCase();
            var r = s.ExistingAssignments.filter(function(t) {
                return (t.get("short_description").toLowerCase().indexOf(q) > -1)
            });
            var p = [];
            _.each(r, function(t) {
                p.push(t.toJSON())
            });
            s.renderItems(p);
            return false
        },
        resetExistingFields: function() {
            var o = this;
            o.$("input:radio[name=existing-assignmnet-options]:checked").prop("checked", false);
            o.resetPublisOptions()
        },
        resetPublisOptions: function() {
            var y = $("#add-assignment-sections-listing tr"),
                z = f.localDateTime(),
                A = this,
                v;
            var o = $("#assignment-default-assigned-date"),
                r = $("#assignment-default-assigned-time"),
                p = $("#assignment-default-due-date"),
                q, t, s, u, x, w;
            if (o && o.length > 0) {
                o.val(f.getDateString(z))
            }
            if (r && r.length > 0) {
                r.val("")
            }
            if (p && p.length > 0) {
                p.val("")
            }
            for (v = 0; v < y.length; v++) {
                q = $(y[v]);
                t = $(q.children("td")[0]).find(".add-assignment-section-selector");
                s = q.children("td")[1];
                u = q.children("td")[2];
                x = q.children("td")[3];
                w = $(q.children("td")[4]).find("input");
                if (t) {
                    if ($(t).data("defaultSection")) {
                        $(t).prop("checked", true)
                    } else {
                        $(t).prop("checked", false)
                    }
                }
                if (s) {
                    $(s).children("input:first").val(f.getDateString(z));
                    $(s).children("input:last").val("")
                }
                if (u) {
                    $(u).children("input:first").val("")
                }
                if (x) {
                    $(x).children("select").val(1)
                }
                if (w) {
                    $(w).prop("checked", false)
                }
            }
            if (!A.emptysections) {
                $("input.add-assignment-section-selector:checked").closest("tr").show();
                $(".add-assignment-section-selector:input:checkbox[checked!='checked']").closest("tr").remove()
            } else {
                $("input.add-assignment-section-selector").prop("checked", false);
                $("input.select-all-check").prop("checked", false)
            }
            $("#publish-options-apply-selected-button").removeClass("btn-primary");
            $("#publish-options-warning-message").hide("slow")
        },
        doCharacterCountLimit: function(o) {
            if ($(o.currentTarget).val().length >= 10) {
                if (o.keyCode != 8 && o.keyCode != 9 && o.keyCode != 13 && o.keyCode != 46 && (o.keyCode < 35 || o.keyCode > 40)) {
                    return false
                }
            }
        },
        doDropBoxActivate: function(o) {
            var p = $(o.target).data("assignmentId");
            p3.log("someday this button will activate the drop box for " + p);
            return false
        },
        doSelectionToggle: function(o) {
            b.Us.DoSelectionToggle(o)
        },
        showMoreButtonVisability: function() {
            var o = $("#add-assignment-sections-listing tr td label input:checked"),
                p = $("#add-assignment-sections-listing tr:visible");
            if (o.length >= p.length) {
                $(".select-all-check").prop("checked", true)
            } else {
                $(".select-all-check").prop("checked", false)
            }
        },
        highlightApplyToSelected: function(o) {
            $("#publish-options-apply-selected-button").addClass("btn-primary");
            $("#publish-options-warning-message").show("slow")
        },
        doApplyToSelected: function(o) {
            b.Us.DoApplyToSelected();
            return false
        },
        validated: function(F) {
            F = F || false;
            var H = this,
                B = [],
                C = $("#add-assignment-gradebook-include:checked").length == 1 ? true : false,
                s = $("#add-assignment-gradebook-include").closest(".control-group"),
                z = $("#add-assignment-type-selector"),
                o = $("#add-assignment-gradebook-abbr"),
                v = $("#add-assignment-gradebook-max-points"),
                r = $("#add-assignment-gradebook-factor"),
                y = $("#add-assignment-title-field"),
                q = $("#add-assignment-downloads-tab").children(".control-group"),
                u = $("#add-assignment-links-tab").children(".control-group"),
                w = $(".add-assignment-section-selector:checked"),
                p = $("#add-assignment-links-tab").closest(".control-group").children("label:first"),
                x = H.$("#add-assignment-lti-selector"),
                A = false;
            $("ul#add-assignment-attachment-tabs li").removeClass("error");
            $("#gradebook-include-label").removeClass("box-validate");
            if (!F) {
                if (y.val() === "") {
                    if (B.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                        B.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                    }
                    y.closest(".control-group").addClass("error")
                }
                if (y.val().length > 255) {
                    if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.TitleLengthError) === -1) {
                        B.push(p3.Us.InfoMessageLibrary.Assignment.TitleLengthError)
                    }
                    y.closest(".control-group").addClass("error")
                }
                if (y.val() !== "" && y.val().length <= 255) {
                    y.closest(".control-group").removeClass("error")
                }
                if (H.Lti.hasSavedPlacement && H.Lti.currentProviderListId === "submission") {
                    x.removeClass("box-validate")
                } else {
                    if (H.Lti.currentProviderListId === "submission") {
                        if (H.Lti.currentProviderId) {
                            x.removeClass("box-validate")
                        } else {
                            x.addClass("box-validate");
                            if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.LtiProviderRequired) === -1) {
                                B.push(p3.Us.InfoMessageLibrary.Assignment.LtiProviderRequired)
                            }
                        }
                    } else {
                        if (H.Lti.currentProviderListId === "lti") {
                            H.ltiView.doValidate(B)
                        }
                    }
                }
                if (u.length > 0) {
                    var G = /(((http[s]?):\/\/|mailto:)?\S+\.[a-zA-Z]{2,3}([\S\w\W]+|[\s+]))|(javascript:)\S+/i;
                    u.each(function(L) {
                        var J = $(this).find(".assignment-url-field"),
                            I = $(this).find(".assignment-conditional-required-field"),
                            K = false;
                        if (J.length === 0 && I.length === 0) {
                            J.removeClass("error");
                            I.removeClass("error");
                            return
                        }
                        if ((J.val() !== "" && I.val() === "") || (J.val() === "" && I.val() !== "")) {
                            if (B.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                                B.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                            }
                            if (J.val() === "") {
                                J.addClass("error")
                            } else {
                                J.removeClass("error")
                            }
                            if (I.val() === "") {
                                I.addClass("error")
                            } else {
                                I.removeClass("error")
                            }
                            A = K = true
                        } else {
                            J.removeClass("error");
                            I.removeClass("error");
                            A = false
                        }
                        if (J.val() !== "" && !G.test(J.val())) {
                            if (B.indexOf(p3.Us.InfoMessageLibrary.P3.UrlError) === -1) {
                                B.push(p3.Us.InfoMessageLibrary.P3.UrlError)
                            }
                            J.addClass("error");
                            A = true
                        } else {
                            if (!K) {
                                J.removeClass("error");
                                A = false
                            }
                        }
                        if (A) {
                            $("ul#add-assignment-attachment-tabs li:first-child").addClass("error")
                        }
                    })
                }
                if (q.length > 0) {
                    var D = A;
                    q.each(function(M) {
                        var K = $(this).find(".assignment-download-file-name"),
                            J = K.siblings("span:last"),
                            I = $(this).find(".assignment-download-field"),
                            L = false;
                        if (K.length === 0 && J.length === 0 && I.length === 0) {
                            K.removeClass("error");
                            I.removeClass("error");
                            return
                        }
                        if ((K.val() !== "" && I.val() === "") || (K.val() === "" && I.val() !== "")) {
                            A = L = true;
                            if (B.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                                B.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                            }
                            if (K.val() === "") {
                                K.addClass("error")
                            } else {
                                K.removeClass("error")
                            }
                            if (I.val() === "") {
                                I.addClass("error")
                            } else {
                                I.removeClass("error")
                            }
                        } else {
                            if (K.val() !== "" && !/^[^\\\/\:\*\?\"\\<\>\|\.\+]+(\.[^\\\/\:\*\?\"\\<\>\|\.\+]+)+$/.test(K.val() + J.html())) {
                                A = L = true;
                                if (B.indexOf(p3.Us.InfoMessageLibrary.P3.FileNameInvalidChars) === -1) {
                                    B.push(p3.Us.InfoMessageLibrary.P3.FileNameInvalidChars)
                                }
                                K.addClass("error")
                            } else {
                                if (K.val().length > 200) {
                                    A = L = true;
                                    if (B.indexOf(p3.Us.InfoMessageLibrary.P3.FileNameToLong) === -1) {
                                        B.push(p3.Us.InfoMessageLibrary.P3.FileNameToLong)
                                    }
                                    K.addClass("error")
                                } else {
                                    K.removeClass("error");
                                    I.removeClass("error");
                                    if (!D) {
                                        A = false
                                    }
                                }
                            }
                        }
                        if (K.val() !== "" && I.val() !== "") {
                            if (p3.Data.fileTypes !== undefined) {
                                if (p3.Data.fileTypes.get(J.html().toLowerCase())) {
                                    if (!L) {
                                        J.removeClass("error");
                                        if (!D) {
                                            A = false
                                        }
                                    }
                                } else {
                                    J.addClass("error");
                                    A = L = true;
                                    if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.FileTypeUnsupported) === -1) {
                                        B.push(p3.Us.InfoMessageLibrary.Assignment.FileTypeUnsupported)
                                    }
                                }
                            }
                        }
                        if (J.data("Duplicate") === 1) {
                            J.addClass("error");
                            A = true;
                            if (B.indexOf(p3.Us.InfoMessageLibrary.P3.FileNameDuplicate) === -1) {
                                B.push(p3.Us.InfoMessageLibrary.P3.FileNameDuplicate)
                            }
                        } else {
                            if (!L) {
                                J.removeClass("error");
                                if (!D) {
                                    A = false
                                }
                            }
                        }
                        if (A) {
                            $("ul#add-assignment-attachment-tabs li:last-child").addClass("error")
                        }
                    })
                }
                if (A) {
                    p.addClass("error")
                } else {
                    p.removeClass("error")
                }
                s.removeClass("error");
                if (H.Lti.currentProviderListId === "lti" || H.Lti.currentProviderListId === "submission") {
                    if (H.Lti.currentProvider && (H.Lti.currentProvider.get("OutcomesInd") === true && !C)) {
                        s.addClass("error");
                        if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradedLTIRequiresGradebook) === -1) {
                            B.push(p3.Us.InfoMessageLibrary.Assignment.GradedLTIRequiresGradebook)
                        }
                    }
                }
                if (C) {
                    var t = o.closest(".controls").siblings("label:first"),
                        E = false;
                    if (H.markingPeriods.length <= 0) {
                        t.closest(".control-group").addClass("error");
                        if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookSetupIsRequired) === -1) {
                            B.push(p3.Us.InfoMessageLibrary.Assignment.GradeBookSetupIsRequired)
                        }
                    } else {
                        t.closest(".control-group").removeClass("error")
                    }
                    if (z.val() === "0") {
                        z.closest(".control-group").addClass("error");
                        E = true;
                        if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) === -1) {
                            B.push(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields)
                        }
                    } else {
                        z.closest(".control-group").removeClass("error")
                    }
                    if (o.val() === "") {
                        o.closest(".control-group").addClass("error");
                        E = false;
                        if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) === -1) {
                            B.push(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields)
                        }
                    } else {
                        o.closest(".control-group").removeClass("error")
                    }
                    if (v.val() !== "" && /^\d*(\.\d{1,})?$/.test(v.val())) {
                        v.closest(".control-group").removeClass("error");
                        if (v.val().toString().length > 6) {
                            v.val(v.val().substring(0, 6))
                        }
                    } else {
                        v.closest(".control-group").addClass("error");
                        E = false;
                        if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) === -1) {
                            B.push(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields)
                        }
                    }
                    if (r.val() !== "" && /^\d*(\.\d{1,})?$/.test(r.val()) && r.val() !== "0") {
                        r.closest(".control-group").removeClass("error");
                        if (r.val().toString().length > 6) {
                            r.val(r.val().substring(0, 6))
                        }
                    } else {
                        r.closest(".control-group").addClass("error");
                        E = false;
                        if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) === -1) {
                            B.push(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields)
                        }
                    }
                    if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) !== -1) {
                        if (!E) {
                            t.addClass("error")
                        } else {
                            t.removeClass("error")
                        }
                    } else {
                        t.removeClass("error")
                    }
                }
            }
            if (w.length > 0) {
                w.each(function(X) {
                    var I, J, P, Q;
                    if (H.recurrence && H.recurrence.on) {
                        I = H.$("#assignment-instance-start");
                        P = f.getDate(I.val());
                        J = H.$("#assignment-instance-end");
                        Q = f.getDate(J.val())
                    } else {
                        I = $(this).closest("td").siblings("td:first").children("input:first");
                        P = f.getDate(I.val())
                    }
                    if (isNaN(P)) {
                        I.addClass("error");
                        if (B.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                            B.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                        }
                    } else {
                        I.removeClass("error")
                    }
                    if (H.recurrence && H.recurrence.on) {
                        if (_.isEmpty(H.recurrence.assignmentList)) {
                            if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.AssignmentMultipleInstance) === -1) {
                                B.push(p3.Us.InfoMessageLibrary.Assignment.AssignmentMultipleInstance)
                            }
                        }
                        if (isNaN(Q)) {
                            J.addClass("error");
                            if (B.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                                B.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                            }
                        } else {
                            J.removeClass("error")
                        }
                    }
                    if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK) && H.markingPeriods.length > 0) {
                        var ab = parseInt($(this).val(), 10),
                            Y = false,
                            Z = (H.recurrence && H.recurrence.on) ? false : true,
                            K, T, R, L, U, S, O, aa = H.markingPeriods.filter(function(ac) {
                                return ac.get("section_id") === ab
                            }),
                            M, V, N, W;
                        if (H.recurrence && H.recurrence.on) {
                            K = H.$("#assignment-instance-start");
                            L = H.$("#assignment-instance-end");
                            U = L.val();
                            S = f.getDate(U);
                            if (isNaN(S)) {
                                S = Q
                            }
                        } else {
                            K = $("#" + ab + "-due-date")
                        }
                        T = K.val();
                        R = f.getDate(T);
                        if (isNaN(R)) {
                            R = P
                        }
                        for (O = 0; O < aa.length; O++) {
                            M = aa[O].get("begin_date");
                            V = aa[O].get("end_date");
                            if (typeof M === "string" && typeof V === "string") {
                                N = f.getDate(M);
                                W = f.getDate(V);
                                if (R <= W && R >= N) {
                                    Y = true;
                                    K.data("mpid", aa[O].get("marking_period_id"))
                                }
                                if (H.recurrence && H.recurrence.on) {
                                    if (S <= W && S >= N) {
                                        Z = true
                                    }
                                }
                            }
                        }
                        if (!Y) {
                            K.addClass("error");
                            if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.DueDateMustBeInMarkingPeriod) === -1) {
                                B.push(p3.Us.InfoMessageLibrary.Assignment.DueDateMustBeInMarkingPeriod)
                            }
                        } else {
                            K.removeClass("error")
                        }
                        if (H.recurrence && H.recurrence.on) {
                            if (!Z) {
                                L.addClass("error");
                                if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.DueDateMustBeInMarkingPeriod) === -1) {
                                    B.push(p3.Us.InfoMessageLibrary.Assignment.DueDateMustBeInMarkingPeriod)
                                }
                            } else {
                                L.removeClass("error")
                            }
                        }
                    }
                })
            } else {
                if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.SectionRequired) === -1) {
                    B.push(p3.Us.InfoMessageLibrary.Assignment.SectionRequired)
                }
            }
            if (H.rubricView !== undefined) {
                H.rubricView.doValidate(B)
            }
            return B
        },
        doAssignmentSave: function(H) {
            var av = this,
                Q = false,
                s = f.localDateTime(),
                aj, am, an, G, U, W, ak, r, E, aa, af, ah = 0,
                o = $(".add-assignment-save-option"),
                p = $(".add-assignment-save-add-another");
            o.button("loading");
            p.button("loading");
            if (av.AddExisting) {
                aj = av.$("input:radio[name=existing-assignmnet-options]:checked");
                am = av.$(".add-assignment-section-selector:checked");
                an = [];
                G = av.validated(true);
                if (G.length > 0) {
                    _.each(G, function(aw) {
                        p3.Us.InfoMessage.ErrorBox(aw, "#existing-assignments-container", false);
                        Q = true
                    })
                }
                if (Q) {
                    $("#site-modal .modal-body").scrollTop(1);
                    o.button("reset");
                    p.button("reset");
                    return false
                }
                for (U = 0; U < am.length; U++) {
                    ak = $(am[U]).closest("td").nextAll("td");
                    r = $(ak[0]).children("input");
                    E = $(ak[1]).children("input");
                    aa = $(ak[1]).children("input").data("mpid");
                    af = $(ak[2]).children("select").val();
                    s = f.localDateTime();
                    if ($(r[0]).val() !== "") {
                        s = f.getDate($(r[0]).val())
                    }
                    if (f.getDate($(E[0]).val()).getTime() < s.getTime()) {
                        $(E[0]).closest(".control-group").addClass("error");
                        Q = true
                    }
                    an.push({
                        SectionId: $(am[U]).val(),
                        AssignmentDate: $(r[0]).val() || f.getDateString(s),
                        AssignmentTime: b.Us.GetAssignmentTime($(r[1])),
                        DueDate: $(E[0]).val() || f.getDateString(s),
                        DueTime: f.buildTimeString(23, 59, 0),
                        PublishInd: af == 1 ? true : false,
                        PublishOnAssignedInd: af == 2 ? true : false,
                        MarkingPeriodId: aa
                    })
                }
                var ai = new b.Ms.ExistingAssignment({
                    AssignmentId: aj.val(),
                    SectionLinks: an,
                    SendNotification: $("#send_notif_check").is(":checked")
                });
                ai.save({}, {
                    success: function(aw, ax) {
                        av.trigger("saveAssignment");
                        if ($(H.target).hasClass("add-assignment-save-add-another")) {
                            av.resetExistingFields();
                            $("#site-modal .modal-body").scrollTop(1);
                            o.button("reset");
                            p.button("reset")
                        } else {
                            $("#site-modal").modal("hide")
                        }
                    },
                    error: function(aw, ax) {
                        p3.displayError("Error creating assignment");
                        o.button("reset");
                        p.button("reset")
                    }
                })
            } else {
                $("#assignment-edit-form-container").children(".alert").remove();
                var F = tinyMCE.get("add-assignment-title-field");
                if (F !== undefined && typeof F.save === "function") {
                    F.save()
                }
                F = tinyMCE.get("add-assignment-description-field");
                if (F !== undefined && typeof F.save === "function") {
                    F.save()
                }
                G = av.validated();
                if (G.length > 0) {
                    _.each(G, function(aw) {
                        p3.Us.InfoMessage.ErrorBox(aw, "#assignment-edit-form-container", false);
                        Q = true
                    })
                }
                if (Q) {
                    $("#site-modal .modal-body").scrollTop(1);
                    o.button("reset");
                    p.button("reset");
                    return false
                }
                var ao = ($("#add-assignment-title-field").data("contents") !== undefined ? $("#add-assignment-title-field").data("contents") : $("#add-assignment-title-field").val()),
                    z = ($("#add-assignment-description-field").data("contents") !== undefined ? $("#add-assignment-description-field").data("contents") : $("#add-assignment-description-field").val()),
                    aq = $("#add-assignment-type-selector").val(),
                    q = $("#add-assignment-gradebook-abbr").val(),
                    ab = $("#add-assignment-gradebook-max-points").val(),
                    K = $("#add-assignment-gradebook-factor").val(),
                    T = $("#add-assignment-gradebook-include:checked").length == 1 ? true : false,
                    S = $("#add-assignment-gradebook-include-cum-grade:checked").length == 1 ? true : false,
                    J = $("#add-assignment-gradebook-extra-credit:checked").length == 1 ? true : false,
                    ag = $("#add-assignment-gradebook-publish:checked").length == 1 ? true : false,
                    t = $("#rdoOnCampusSubmit:checked").length == 1 ? true : false,
                    v = $("#add-assignment-dropbox-num-files").val(),
                    u = f.buildTimeString(23, 59, 0),
                    w = $("#add-assignment-dropbox-resub").is(":checked"),
                    X = $("#add-assignment-links-tab").children("div"),
                    C = $("#add-assignment-downloads-tab").children("div"),
                    Z, al;
                am = $(".add-assignment-section-selector:checked");
                if (t && $("#add-assignment-dropbox-late-time").length > 0 && $("#add-assignment-dropbox-late-time").val() !== "") {
                    u = $("#add-assignment-dropbox-late-time").getTime()
                }
                an = [];
                var at = /((http[s]?):\/\/|mailto:)/i,
                    Y = [],
                    D = [],
                    ac = [],
                    y, ae, ar, O, B, A, x, L, P, ap, N, I, R, M, V, au, ad;
                for (U = 0; U < am.length; U++) {
                    ak = $(am[U]).closest("td").nextAll("td");
                    r = $(ak[0]).children("input");
                    E = $(ak[1]).children("input");
                    aa = $(ak[1]).children("input").data("mpid");
                    af = $(ak[2]).children("select").val();
                    al = $(am[U]).val();
                    s = f.localDateTime();
                    if ($(r[0]).val() !== "") {
                        s = f.getDate($(r[0]).val())
                    }
                    if (f.getDate($(E[0]).val()).getTime() < s.getTime()) {
                        $(E[0]).closest(".control-group").addClass("error");
                        Q = true
                    }
                    if (this.assignment !== undefined) {
                        an.push({
                            SectionId: al,
                            AssignmentId: this.assignment.get("AssignmentId") || null,
                            AssignmentIndexId: this.assignment.get("AssignmentIndexId") || null,
                            AssignmentDate: $(r[0]).val() || f.getDateString(s),
                            AssignmentTime: b.Us.GetAssignmentTime($(r[1])),
                            DueDate: $(E[0]).val() || f.getDateString(s),
                            DueTime: u || f.buildTimeString(23, 59, 0),
                            Section: null,
                            PublishInd: af == 1 ? true : false,
                            PublishOnAssignedInd: af == 2 ? true : false,
                            MarkingPeriodId: aa
                        })
                    } else {
                        if (av.recurrence && av.recurrence.on) {
                            for (ad = 0; ad < av.recurrence.assignmentList.length; ad++) {
                                an.push({
                                    SectionId: al,
                                    AssignmentDate: av.recurrence.assignmentList[ad].dateAssigned,
                                    AssignmentTime: av.recurrence.assignmentList[ad].timeAssigned,
                                    DueDate: av.recurrence.assignmentList[ad].dateDue,
                                    DueTime: u || f.buildTimeString(23, 59, 0),
                                    Section: null,
                                    PublishInd: af == 1 ? true : false,
                                    PublishOnAssignedInd: af == 2 ? true : false,
                                    MarkingPeriodId: aa
                                })
                            }
                        } else {
                            an.push({
                                SectionId: al,
                                AssignmentDate: $(r[0]).val() || f.getDateString(s),
                                AssignmentTime: b.Us.GetAssignmentTime($(r[1])),
                                DueDate: $(E[0]).val() || f.getDateString(s),
                                DueTime: u || f.buildTimeString(23, 59, 0),
                                Section: null,
                                PublishInd: af == 1 ? true : false,
                                PublishOnAssignedInd: af == 2 ? true : false,
                                MarkingPeriodId: aa
                            })
                        }
                    }
                    if (this.options.edit) {
                        if ($("#" + al + "-notification-send").is(":checked")) {
                            ac.push(al)
                        }
                    }
                }
                if (this.assignment !== undefined && typeof this.assignment.get === "function") {
                    _.each(this.assignment.get("SectionLinks"), function(aw) {
                        if (aw.HasGrades && _.find(an, function(ax) {
                                return aw.SectionId == ax.SectionId
                            }) === undefined) {
                            an.push({
                                SectionId: aw.SectionId,
                                AssignmentDate: aw.AssignmentDate,
                                AssignmentTime: aw.AssignmentTime,
                                DueDate: aw.DueDate,
                                DueTime: aw.DueTime,
                                Section: null,
                                PublishInd: aw.PublishInd,
                                PublishOnAssignedInd: aw.PublishOnAssignedInd
                            })
                        }
                    })
                }
                if (Q) {
                    $("#site-modal .modal-body").scrollTop(1);
                    return false
                }
                if (X.length > 0) {
                    for (U = 0, W = X.length; U < W; U++) {
                        V = $(X[U]).find("input:first").val();
                        au = $(X[U]).find("input:last").val();
                        y = $(X[U]).children(".alert").data("needsDelete");
                        if (y) {
                            R = $(X[U]).children(".alert").data("id");
                            if (R && R > 0) {
                                Y.push({
                                    LinkId: R,
                                    ContextValue: -1
                                })
                            }
                        } else {
                            if (V && au && V != "" && au != "") {
                                if (!at.test(au)) {
                                    au = "http://" + au
                                }
                                if (this.assignment === undefined) {
                                    Y.push({
                                        Url: au,
                                        ShortDescription: V
                                    })
                                } else {
                                    Y.push({
                                        LinkId: $(X[U]).data("id"),
                                        Url: au,
                                        ShortDescription: V
                                    })
                                }
                            }
                        }
                    }
                }
                if (C.length > 0) {
                    for (U = 0, W = C.length; U < W; U++) {
                        x = $(C[U]).find("input:last").val();
                        L = $(C[U]).find("input.assignment-download-file-name").data("rawFile");
                        P = $(C[U]).find("input.assignment-download-file-name").val();
                        ap = $(C[U]).find("input.assignment-download-file-name").data("attachedFileName");
                        N = $(C[U]).find("input.assignment-download-file-name").data("fileType");
                        I = "";
                        y = $(C[U]).children(".alert").data("needsDelete");
                        if (y) {
                            R = $(C[U]).children(".alert").data("id");
                            M = $(C[U]).children(".alert").data("filename");
                            if (R && R > 0) {
                                D.push({
                                    DownloadId: R,
                                    ContextValue: -1,
                                    FileName: M
                                })
                            }
                            break
                        }
                        if (ap !== undefined) {
                            I = ap.substring(ap.lastIndexOf("."))
                        } else {
                            I = $(C[U]).find("input.assignment-download-file-name").next().html()
                        }
                        if (L === "" && x === "" && (ap === undefined || ap === "")) {
                            break
                        }
                        if (this.assignment === undefined) {
                            if (x && x != "" && ((L !== undefined && L != "") || (P !== undefined && P != "")) && ap !== undefined && ap != "" && I != "" && $(C[U]).find("input.assignment-download-file-name").data("fileChanged") === true) {
                                D.push({
                                    FileName: L || P + I,
                                    FriendlyFileName: P + I,
                                    UploadedFile: ap,
                                    FileTypeID: N,
                                    DownloadID: 0,
                                    Description: x
                                })
                            }
                        } else {
                            ae = $(C[U]).data("originalFile");
                            ar = ap;
                            O = N || $(C[U]).data("fileTypeId");
                            B = $(C[U]).data("id");
                            A = {};
                            if (ae && O && B) {
                                if (L && I != L.substring(L.lastIndexOf("."))) {
                                    L = L.substring(0, L.lastIndexOf(".")) + I
                                }
                                A.DownloadID = B || 0;
                                A.FileName = L || P + I;
                                A.FriendlyFileName = P + I || "";
                                A.FileTypeID = O || 0;
                                A.Description = x || "";
                                if (ae != L) {
                                    A.OriginalFile = ae
                                }
                                if (ar !== undefined && ar !== "") {
                                    A.UploadedFile = ar
                                }
                                D.push(A)
                            } else {
                                if (typeof O === "number" && O > 0 && x && x != "") {
                                    D.push({
                                        FileName: L || P + I,
                                        FriendlyFileName: P + I,
                                        UploadedFile: ap,
                                        FileTypeID: N,
                                        DownloadID: 0,
                                        Description: x
                                    })
                                }
                            }
                        }
                    }
                }
                if (av.rubricView !== undefined) {
                    ah = av.rubricView.getRubricId()
                }
                if (this.assignment === undefined) {
                    this.assignment = new b.Ms.Assignment({
                        AssignmentTypeId: aq,
                        ShortDescription: ao,
                        LongDescription: z,
                        IncGradeBook: T,
                        AbbrDescription: q,
                        MaxPoints: ab,
                        Factor: K,
                        ExtraCredit: J,
                        IncCumGrade: S,
                        PublishGrade: ag,
                        DropboxInd: t,
                        DropboxNumFiles: v,
                        DropboxTimeLate: u || f.buildTimeString(23, 59, 0),
                        DropboxResub: w,
                        SectionLinks: an,
                        LinkItems: Y,
                        DownloadItems: D,
                        SendNotification: $("#send_notif_check").is(":checked"),
                        Notifications: ac,
                        HasGrades: (av.options.assignment == undefined) ? false : av.options.assignment.get("HasGrades"),
                        RubricId: ah,
                        RecurrenceNum: (av.recurrence && av.recurrence.on) ? av.recurrence.assignmentList.length : null
                    })
                } else {
                    this.assignment.set({
                        AssignmentTypeId: aq,
                        ShortDescription: ao,
                        LongDescription: z,
                        IncGradeBook: T,
                        AbbrDescription: q,
                        MaxPoints: ab,
                        Factor: K,
                        ExtraCredit: J,
                        IncCumGrade: S,
                        PublishGrade: ag,
                        DropboxInd: t,
                        DropboxNumFiles: v,
                        DropboxTimeLate: u || f.buildTimeString(23, 59, 0),
                        DropboxResub: w,
                        SectionLinks: an,
                        LinkItems: Y,
                        DownloadItems: D,
                        SendNotification: false,
                        Notifications: ac,
                        HasGrades: (av.options.assignment == undefined) ? false : av.options.assignment.get("HasGrades"),
                        RubricId: ah
                    })
                }
                Z = av.assignment.get("Lti");
                if (Z === undefined) {
                    Z = []
                }
                if (av.Lti.currentProviderListId === "lti") {
                    if (Z.length === 0) {
                        Z.push(av.ltiView.buildLtiPlacementJson())
                    } else {
                        Z[0] = av.ltiView.buildLtiPlacementJson()
                    }
                } else {
                    if (av.Lti.currentProviderListId === "submission") {
                        if (Z.length === 0) {
                            Z.push({
                                ProviderId: av.Lti.currentProviderId
                            })
                        } else {
                            Z[0].ProviderId = av.Lti.currentProviderId
                        }
                    } else {
                        Z = []
                    }
                }
                this.assignment.set("Lti", Z);
                if (av.recurrence && av.recurrence.on) {
                    p3.fT("Shared/modal.template.html", function(aw) {
                        p3.rV(new b.Vs.RecurrenceConfirmation({
                            recurrence: av.recurrence,
                            edit: false
                        }), $(aw()).on("create-instances", function() {
                            av.saveAssignment(H)
                        }).on("shown.bs.modal", function(ax) {
                            $(".modal-backdrop.in:last").css("z-index", 1101)
                        }).on("hidden.bs.modal", function(ax) {
                            $(ax.currentTarget).off().remove();
                            $("body").addClass("modal-open overflow-none");
                            o.button("reset");
                            p.button("reset")
                        }), true)
                    })
                } else {
                    this.saveAssignment(H)
                }
            }
            return false
        },
        saveAssignment: function(q) {
            var o = $(".add-assignment-save-option"),
                p = $(".add-assignment-save-add-another"),
                r = this;
            o.button("loading");
            p.button("loading");
            r.assignment.save({}, {
                success: function(s, t) {
                    r.trigger("saveAssignment");
                    if ($(q.target).hasClass("add-assignment-save-add-another")) {
                        r.resetAssignmentFields(true);
                        $("#site-modal .modal-body").scrollTop(1);
                        o.button("reset");
                        p.button("reset")
                    } else {
                        $("#site-modal").modal("hide")
                    }
                },
                error: function(s, t) {
                    o.button("reset");
                    p.button("reset");
                    p3.displayError("Error creating assignment")
                }
            })
        },
        showGroupDialog: function(o) {
            var q = this;
            $("#show-more-groups").button("loading");
            var p = [];
            $(".add-assignment-section-selector").each(function(r) {
                p.push("null_" + $(this).val())
            });
            q.options.$container = p3.addModalContainer();
            i.Us.showGroupPickerDialog(58, p, q);
            return false
        },
        addSelectedGroups: function(o) {
            var r = this,
                p;
            b.Us.addSelectedGroups(r, o);
            var q = "";
            $(".add-assignment-section-selector").each(function(s, t) {
                if (q.length > 0) {
                    q += ","
                }
                q += $(t).val()
            });
            for (p = 0; p < o.length; p++) {
                if (q.length > 0) {
                    q += ","
                }
                q += o[p].leadSectionId.toString()
            }
            r.markingPeriods.fetch({
                data: {
                    sectionList: q
                },
                success: function(w, D) {
                    var E = $(".grade-book-tooltip-location"),
                        x, F, t, y, u, v, z, A, B, C;
                    for (p = 0; p < E.length; p++) {
                        F = $(E[p]).data("sectionId");
                        if (F && F > 0) {
                            B = b.Us.GetMarkingPeriods(w, F);
                            if (B.length === 0) {
                                $(E[p]).hide()
                            } else {
                                C = "<strong>Marking Periods:</strong><br>Due date must fall within a marking period for this assignment to be included in Gradebook.<br>";
                                for (x = 0; x < B.length; x++) {
                                    t = B[x].get("begin_date");
                                    y = B[x].get("end_date");
                                    if (typeof t === "string" && typeof y === "string") {
                                        u = f.getDateString(f.getDate(t));
                                        v = f.getTimeString(f.getTime(t));
                                        z = f.getDateString(f.getDate(y));
                                        A = f.getTimeString(f.getTime(y));
                                        C += B[x].get("marking_period_description") + "<br><div>Begin: " + u + " " + v + "<br>End: " + z + " " + A + "<br></div>"
                                    }
                                }
                                $(E[p]).show().tooltip({
                                    title: C,
                                    html: true
                                })
                            }
                        }
                    }
                },
                error: function(s, t) {
                    p3.displayError("Failed to retreive the Marking Periods")
                }
            })
        },
        showToggleContent: function(o) {
            $(o.target).parent().siblings(".content").slideToggle();
            return false
        },
        assignmentTypeDefaultMaxPoint: function(p) {
            var o = _.first(b.Data.Types.where({
                AssignmentTypeId: parseInt($(p.target).val(), 10)
            }));
            if (o && this.$el.find("#add-assignment-gradebook-max-points").val() === "") {
                this.$el.find("#add-assignment-gradebook-max-points").val(o.get("DefaultMaxPoints"))
            }
        },
        toggleAssignmentInstance: function(s) {
            var w = $(s.currentTarget).val(),
                p = this.$("#assignment-instance-settings"),
                q = this.$("#assignment-instance-dates"),
                r = this.$("#assignment-instance-start"),
                o = this.$("#publish-options-apply-selected-button"),
                u = this.$("#assignment-section-table .date-picker-field"),
                v = this.$("#assignment-section-table .time-picker-field"),
                t = this.$(".grade-book-tooltip-location");
            if (w === "1") {
                this.recurrence.on = true;
                q.show();
                p.show();
                o.hide();
                u.hide();
                v.hide();
                t.hide();
                if (!this.recurrence.dateStart && r.val()) {
                    r.change()
                }
                this.checkrecurrenceData()
            } else {
                this.recurrence.on = false;
                q.hide();
                p.hide();
                o.show();
                u.show();
                v.show();
                t.show()
            }
        },
        toggleDateAssigned: function(p) {
            var o = this.$("#assignment-instance-date-assigned-container");
            if ($(p.currentTarget).val() === "1") {
                this.recurrence.dateAssigned = true;
                o.show()
            } else {
                this.recurrence.dateAssigned = false;
                o.hide()
            }
            this.checkrecurrenceData()
        },
        changeDateAssignedNum: function(o) {
            var p = $(o.currentTarget),
                q = parseInt(p.val(), 10);
            if (_.isNaN(q)) {
                p.val("");
                this.recurrence.dateAssignedNum = null
            } else {
                this.recurrence.dateAssignedNum = q
            }
            this.checkrecurrenceData()
        },
        setDayButton: function(o) {
            this.recurrence.dayList[parseInt($(o.currentTarget).val(), 10)] = true;
            this.checkrecurrenceData()
        },
        unsetDayButton: function(o) {
            this.recurrence.dayList[parseInt($(o.currentTarget).val(), 10)] = false;
            this.checkrecurrenceData()
        },
        changeTimeAssigned: function(o) {
            this.recurrence.timeAssigned = b.Us.GetAssignmentTime($(o.currentTarget));
            this.checkrecurrenceData()
        },
        changeDateRange: function(o) {
            var p = $(o.currentTarget),
                q = $(p).datepicker("getDate");
            this.recurrence[$(o.currentTarget).data("name")] = (!g.Us.isDate($(p).val()) || q === null) ? null : f.getDateString(q).ApiFormat();
            this.checkrecurrenceData()
        },
        checkrecurrenceData: function() {
            var o = true;
            this.recurrence.assignmentList = [];
            if (!this.recurrence.dateStart) {
                o = false
            }
            if (!this.recurrence.dateEnd) {
                o = false
            }
            if (!_.contains(this.recurrence.dayList, true)) {
                o = false
            }
            if (o) {
                this.setrecurrenceData()
            } else {
                this.$("#count-instances").hide();
                this.$('[data-action="edit-instances"]').hide();
                this.$("#no-instances").show()
            }
        },
        setrecurrenceData: function() {
            var q = new Date(this.recurrence.dateStart),
                r = new Date(this.recurrence.dateEnd),
                p, o;
            for (p = q; p <= r; p.setDate(p.getDate() + 1)) {
                if (this.recurrence.dayList[p.getDay()]) {
                    o = new Date(p);
                    o.setDate(p.getDate() - ((this.recurrence.dateAssigned) ? (this.recurrence.dateAssignedNum || 0) : 0));
                    this.recurrence.assignmentList.push({
                        dateDue: f.getDateString(p).ApiFormat(),
                        dateAssigned: f.getDateString(o).ApiFormat(),
                        timeAssigned: this.recurrence.timeAssigned
                    })
                }
            }
            this.$("#count-instances").show();
            this.$('[data-action="edit-instances"]').show();
            this.$("#count-instances dt").html(this.recurrence.assignmentList.length);
            this.$("#no-instances").hide()
        },
        openEditInstances: function() {
            var o = this;
            p3.fT("Shared/modal.template.html", function(p) {
                p3.rV(new b.Vs.RecurrenceConfirmation({
                    recurrence: o.recurrence,
                    edit: true
                }), $(p()).css("z-index", 1102).appendTo($("body")).on("shown.bs.modal", function(q) {
                    $(".modal-backdrop.in:last").css("z-index", 1101)
                }).on("hidden.bs.modal", function(q) {
                    $(q.currentTarget).off().remove();
                    $("body").addClass("modal-open overflow-none");
                    o.$("#count-instances dt").html(o.recurrence.assignmentList.length)
                }), true)
            })
        }
    });
    b.Vs.RecurrenceConfirmation = Bb.View.extend({
        className: "modal-dialog",
        attributes: {
            role: "document"
        },
        template: "classassignment/addnewassignment.recurrence.template.html",
        events: {
            'click [data-action="save"]': "saveModal",
            'click [data-action="save-changes"]': "changeInstances",
            'click [data-action="removeInstance"]': "removeInstance"
        },
        render: function(o) {
            var p = this;
            p3.fT(this.template, function(q) {
                p.$el.appendTo(o).html(q({
                    recurrenceNum: p.options.recurrence.assignmentList.length,
                    list: p.options.recurrence.assignmentList,
                    edit: p.options.edit
                }));
                g.Us.initialize(".instance-date-picker");
                n.Us.initialize(".instance-time-picker");
                p.$(".instance-time-picker").attr("placeholder", p.options.recurrence.timeplaceholder);
                p3.showModal(o)
            })
        },
        saveModal: function() {
            this.$el.trigger("create-instances");
            p3.showModal(this.$el.parent(), "hide")
        },
        changeInstances: function() {
            var r = [],
                u, q, p, o, t, s, v = [];
            _.each(this.$("input.instance-date-picker"), function(w) {
                if ($(w).val() === "") {
                    if (r.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                        r.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                    }
                }
            });
            if (this.$("input").has("error").length > 0) {
                if (r.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                    r.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                }
            }
            _.each(this.$("tbody > tr"), function(w) {
                o = $(w);
                u = false;
                t = o.find('[data-name="dateDue"]');
                s = o.find('[data-name="dateAssigned"]');
                q = f.getDate(t.val());
                p = f.getDate(s.val());
                if (t.val() == "") {
                    if (r.indexOf(p3.Us.InfoMessageLibrary.Assignment.AssignmentMultipleInstanceDateRange) === -1) {
                        r.push(p3.Us.InfoMessageLibrary.Assignment.AssignmentMultipleInstanceDateRange)
                    }
                    t.addClass("error")
                }
                if (s.val() == "") {
                    if (r.indexOf(p3.Us.InfoMessageLibrary.Assignment.AssignmentMultipleInstanceDateRange) === -1) {
                        r.push(p3.Us.InfoMessageLibrary.Assignment.AssignmentMultipleInstanceDateRange)
                    }
                    s.addClass("error")
                }
                if (q <= f.getDate(this.options.recurrence.dateEnd) && q >= f.getDate(this.options.recurrence.dateStart)) {
                    u = true
                } else {
                    t.addClass("error")
                }
                if (!u) {
                    if (r.indexOf(p3.Us.InfoMessageLibrary.Assignment.AssignmentMultipleInstanceDateRange) === -1) {
                        r.push(p3.Us.InfoMessageLibrary.Assignment.AssignmentMultipleInstanceDateRange)
                    }
                }
                if (q < p) {
                    if (r.indexOf("Due date must fall on or after Assign date.") === -1) {
                        r.push("Due date must fall on or after Assign date.")
                    }
                    t.addClass("error");
                    s.addClass("error")
                }
                v.push({
                    dateDue: f.getDateString(q).ApiFormat(),
                    dateAssigned: f.getDateString(p).ApiFormat(),
                    timeAssigned: b.Us.GetAssignmentTime(o.find(".instance-time-picker"))
                })
            }, this);
            this.$("#assignment-instance-error").children(".alert").remove();
            if (r.length > 0) {
                _.each(r, function(w) {
                    p3.Us.InfoMessage.ErrorBox(w, "#assignment-instance-error", false)
                })
            } else {
                this.options.recurrence.assignmentList = v;
                p3.showModal(this.$el.parent(), "hide")
            }
        },
        removeInstance: function(o) {
            $(o.currentTarget).closest("tr").remove();
            this.$("dt").html(this.$("tr").length - 1)
        }
    });
    b.Vs.ClassAssignmentView = Bb.View.extend({
        template: "classassignment/classassignment.template.html",
        assignmentlistview: undefined,
        events: {
            "click .addAssignmentButton": "assignmentAddWindow",
            "click #assignmentSearchButton": "doAssignmentSearch",
            "blur #assignmentSearchBox": "doSearchFix",
            "keypress #assignmentSearchBox": "doAssignmentSearchEnter",
            "click .addAssessmentButton": "addAssessment",
            "click .addDiscussionButton": "addDiscussion",
            "click .ltiConfigButton": "showLtiConfigList"
        },
        initialize: function() {
            this.Containers = {};
            this.sectionId = this.options.sectionId || 0;
            b.Data.currentLeadSectionId = this.leadSectionId = this.options.leadSectionId || 0;
            this.assginments = null;
            p3.Layout.Containers.Modal.on("shown", b.Us.showHtmlEditor);
            this.userHasFullAccess = this.options.userHasFullAccess || false;
            this.isOwner = this.options.isOwner || false;
            this.isManager = this.options.isManager || false;
            this.content = this.options.content;
            this.canEdit = false;
            this.isEditor = false;
            if (this.userHasFullAccess) {
                this.canEdit = true
            } else {
                var o = this.content.get(58);
                if (o && o.get("EditorAccess")) {
                    this.canEdit = true;
                    this.isEditor = true
                }
            }
            if (this.canEdit) {
                b.Us.FetchTeacherSections(this.leadSectionId, this.isOwner, this.isManager, this.isEditor)
            }
        },
        dispose: function() {
            p3.Layout.Containers.Modal.off("shown", b.Us.showHtmlEditor);
            if (b.Data.currentLeadSectionId) {
                b.Data.currentLeadSectionId = undefined
            }
            if (b.Data.TeacherSections) {
                b.Data.TeacherSections = undefined
            }
            var o = tinyMCE.get("myeditor");
            if (o) {
                o.remove();
                o = null
            }
        },
        render: function(p) {
            var q = this,
                o = function() {
                    q.rVs(p)
                };
            l.loadReportList2(o, o)
        },
        rVs: function(o) {
            var r = this,
                q, p, s;
            q = new l.Cs.ReportList();
            q.remove(q.at(0));
            if (r.canEdit && l.hasAccessToReportId(324, true)) {
                s = m.Us.getUrlById(1691, "__pd=gm_fv&pk=324&ext=vw&o_pk=" + r.sectionId);
                p = new l.Ms.ReportList({
                    ReportName: "Roster Assignments Due - By Section",
                    Link: s
                });
                q.add(p)
            }
            if (r.canEdit && l.hasAccessToReportId(82, true)) {
                s = m.Us.getUrlById(1691, "__pd=gm_fv&pk=82&ext=vw&o_pk=" + r.sectionId);
                p = new l.Ms.ReportList({
                    ReportName: "Roster Major Assignments - By Section",
                    Link: s
                });
                q.add(p)
            }
            if (r.canEdit && l.hasAccessToReportId(444, true)) {
                s = m.Us.getUrlById(1691, "__pd=gm_fv&pk=444&ext=vw&sid=" + r.leadSectionId);
                p = new l.Ms.ReportList({
                    ReportName: "Submitted Assignments - By Student",
                    Link: s
                });
                q.add(p)
            }
            if (r.canEdit && l.hasAccessToReportId(412, true)) {
                s = m.Us.getUrlById(1691, "__pd=gm_fv&pk=412&ext=vw&sid=" + r.leadSectionId + "&vid=" + p3.Data.Context.get("UserInfo").UserId);
                p = new l.Ms.ReportList({
                    ReportName: "View Schedule",
                    Link: s
                });
                q.add(p)
            }
            r.reports = q;
            p3.fT(r.template, function(t) {
                r.$el.html(t({
                    leadSectionId: r.leadSectionId,
                    schoolId: p3.Config.SchoolId
                }));
                $(o).html(r.el);
                r.Containers.LeftColumn = $("#2col-wideleft");
                r.Containers.RightColumn = $("#2col-slimright");
                r.renderContent()
            })
        },
        renderContent: function() {
            b.Data.assignments = new b.Cs.Assignments({}, {
                dateSort: 1,
                assignTypes: null,
                startDate: null,
                endDate: null,
                sectionId: this.leadSectionId,
                studentId: b.Data.studentId
            });
            b.Data.assignments.filters = {
                AssignmentDescription: function(q, r) {
                    var o = q.get("AssignmentDescription") || "",
                        p = r.get("AssignmentDescription") || "";
                    return o < p ? -1 : o > p ? 1 : 0
                },
                AssignmentDescription_invert: function(q, r) {
                    var o = q.get("AssignmentDescription") || "",
                        p = r.get("AssignmentDescription") || "";
                    return o < p ? 1 : o > p ? -1 : 0
                },
                AssignmentType: function(q, r) {
                    var o = q.get("AssignmentType") || "",
                        p = r.get("AssignmentType") || "";
                    return o < p ? -1 : o > p ? 1 : 0
                },
                AssignmentType_invert: function(q, r) {
                    var o = q.get("AssignmentType") || "",
                        p = r.get("AssignmentType") || "";
                    return o < p ? 1 : o > p ? -1 : 0
                },
                DateAssigned: function(o) {
                    return o.get("DateAssigned") ? f.getDate(o.get("DateAssigned")).getTime() : 0
                },
                DateAssigned_invert: function(o) {
                    return o.get("DateAssigned") ? -f.getDate(o.get("DateAssigned")).getTime() : 0
                },
                DateDue: function(o) {
                    return o.get("DateDue") ? f.getDate(o.get("DateDue")).getTime() : 0
                },
                DateDue_invert: function(o) {
                    return o.get("DateDue") ? -f.getDate(o.get("DateDue")).getTime() : 0
                },
                Publish: function(o) {
                    var p;
                    if (o.get("PublishOnAssignedInd")) {
                        p = 1
                    } else {
                        if (o.get("PublishInd")) {
                            p = 3
                        } else {
                            p = 2
                        }
                    }
                    return p
                },
                Publish_invert: function(o) {
                    var p;
                    if (o.get("PublishOnAssignedInd")) {
                        p = 3
                    } else {
                        if (o.get("PublishInd")) {
                            p = 1
                        } else {
                            p = 2
                        }
                    }
                    return p
                },
                GradedCount: function(u, v) {
                    var s = u.get("GradedCount"),
                        o = u.get("NumEnrolled"),
                        t = v.get("GradedCount"),
                        p = v.get("NumEnrolled"),
                        q = s === o,
                        r = t === p;
                    if (u.get("GradeBookInd") === false && v.get("GradeBookInd") === false) {
                        return 0
                    }
                    if (u.get("GradeBookInd") === false && v.get("GradeBookInd") === true) {
                        return -1
                    }
                    if (u.get("GradeBookInd") === true && v.get("GradeBookInd") === false) {
                        return 1
                    }
                    if (s === 0 && t === 0) {
                        return o < p ? -1 : o > p ? 1 : 0
                    }
                    if (!q && !r) {
                        if (s === t) {
                            return o < p ? -1 : o > p ? 1 : 0
                        }
                        return s < t ? -1 : s > t ? 1 : 0
                    }
                    if (q && !r) {
                        return 1
                    }
                    if (r && !q) {
                        return -1
                    }
                    if (q && r) {
                        return o < p ? -1 : o > p ? 1 : 0
                    }
                    return 0
                },
                GradedCount_invert: function(o, p) {
                    return -this.filters.GradedCount(o, p)
                }
            };
            this.assignmentlistview = new b.Vs.ListToggleView({
                leadSectionId: this.leadSectionId,
                sectionId: this.sectionId,
                canEdit: this.canEdit
            });
            p3.rV(this.assignmentlistview, this.Containers.LeftColumn, false);
            b.Data.types = new b.Cs.Types({}, {
                sectionId: this.leadSectionId
            });
            p3.rV(new b.Vs.AssignmentFilterView({
                collection: b.Data.types,
                sectionId: this.sectionId,
                leadSectionId: this.leadSectionId,
                assignments: b.Data.assignments,
                reports: this.reports,
                canEdit: this.canEdit,
                isOwner: this.isOwner
            }), this.Containers.RightColumn, false);
            b.Data.types.fetch({
                error: function() {
                    p3.displayError("Error loading assignment types")
                }
            })
        },
        assignmentAddWindow: function() {
            b.Us.AddAssignmentView().on("saveAssignment", function() {
                setTimeout(function() {
                    b.Us.updateAssignments(true)
                }, 500)
            });
            return false
        },
        showLtiConfigList: function(o) {
            e.Us.showLtiConfigList(0, o)
        },
        doSearchFix: function(o) {
            if ($("#assignmentSearchBox").val() === "") {
                b.Data.assignments.setSearchTerm("");
                if (p3.Data.LMS !== undefined && p3.Data.LMS.AssignmentFilters !== undefined) {
                    p3.Data.LMS.AssignmentFilters.SearchTerm = ""
                }
            }
        },
        doAssignmentSearch: function(o) {
            var p = $("#assignmentSearchBox").val();
            if (p !== undefined && p !== null) {
                b.Data.assignments.setSearchTerm(p);
                b.Us.updateAssignments();
                if (p3.Data.LMS !== undefined && p3.Data.LMS.AssignmentFilters !== undefined) {
                    p3.Data.LMS.AssignmentFilters.SearchTerm = p
                }
            }
            return false
        },
        doAssignmentSearchEnter: function(o) {
            if (o.keyCode === 13) {
                this.doAssignmentSearch(o);
                return false
            }
        },
        addAssessment: function(o) {
            var p = this;
            b.Us.AddAssessmentView().on("saveAssessment", function(r, s) {
                var q = new b.Ms.Assignment();
                q.set("AssignmentId", r);
                q.fetch({
                    error: function() {
                        p3.displayError("Error loading assignment")
                    },
                    success: function(v, w) {
                        var x = q.get("SectionLinks"),
                            t = 0,
                            u;
                        for (u = 0; u < x.length; u++) {
                            if (x[u].SectionId == p.sectionId) {
                                t = x[u].AssignmentIndexId;
                                break
                            }
                        }
                        p3.router().navigate("#assessmentedit/" + r + "/" + t + "/0", true)
                    }
                })
            });
            return false
        },
        addDiscussion: function(p) {
            var q = this,
                o = b.Us.AddDiscussionView();
            o.on("saveDiscussion", function(r, s) {
                b.Us.updateAssignments()
            });
            o.on("saveAddDiscussion", function(r, s) {
                b.Us.updateAssignments();
                q.addDiscussion()
            });
            return false
        }
    });
    b.Vs.ClassAssignmentStudentView = Bb.View.extend({
        template: "classassignment/classassignment.template.student.html",
        assignmentlistview: undefined,
        events: {
            "click #assignmentSearchButton": "doAssignmentSearch",
            "blur #assignmentSearchBox": "doSearchFix",
            "keypress #assignmentSearchBox": "doAssignmentSearchEnter",
            "click a.assignment-status-link": "doStatusChange"
        },
        initialize: function() {
            this.Containers = {};
            this.sectionId = this.options.sectionId || 0;
            b.Data.currentLeadSectionId = this.leadSectionId = this.options.leadSectionId || 0;
            b.Data.studentId = this.options.studentId;
            this.assginments = null;
            p3.Layout.Containers.Modal.on("shown", b.Us.showHtmlEditor)
        },
        dispose: function() {
            p3.Layout.Containers.Modal.off("shown", b.Us.showHtmlEditor);
            var o = tinyMCE.get("myeditor");
            if (o) {
                o.remove();
                o = null
            }
        },
        render: function(o) {
            var p = this;
            p3.fT(p.template, function(q) {
                p.$el.html(q({
                    leadSectionId: p.leadSectionId
                }));
                $(o).html(p.el);
                p.Containers.LeftColumn = $("#2col-wideleft");
                p.Containers.RightColumn = $("#2col-slimright");
                p.renderContent()
            })
        },
        renderContent: function() {
            b.Data.assignments = new b.Cs.Assignments({}, {
                dateSort: 1,
                assignTypes: null,
                startDate: null,
                endDate: null,
                sectionId: this.leadSectionId,
                studentId: b.Data.studentId
            });
            b.Data.assignments.filters = {
                _statusPrepHelper: function(o, p) {
                    var u = {
                            red: 0,
                            blue: 1,
                            orange: 2,
                            green: 3
                        },
                        v = o.get("AssignmentStatus"),
                        w = p.get("AssignmentStatus"),
                        q = "",
                        r = "",
                        s = -1,
                        t = -1;
                    switch (v) {
                        case -1:
                            if (o.get("AssessmentInd")) {
                                q = "Take";
                                s = u.blue
                            } else {
                                q = o.get("DropBoxInd") ? "Submit" : "To Do";
                                s = u.blue
                            }
                            break;
                        case 0:
                            q = "In&nbsp;Progress";
                            s = u.orange;
                            break;
                        case 1:
                            q = o.get("HasGrade") ? "Graded" : "Completed";
                            s = u.green;
                            break;
                        case 2:
                            q = "Overdue";
                            s = u.red;
                            break;
                        case 3:
                            q = "Retake";
                            s = u.blue;
                            break;
                        case 4:
                            q = "Graded";
                            s = u.green;
                            break
                    }
                    switch (w) {
                        case -1:
                            if (p.get("AssessmentInd")) {
                                r = "Take";
                                t = u.blue
                            } else {
                                r = p.get("DropBoxInd") ? "Submit" : "To Do";
                                t = u.blue
                            }
                            break;
                        case 0:
                            r = "In&nbsp;Progress";
                            t = u.orange;
                            break;
                        case 1:
                            r = p.get("HasGrade") ? "Graded" : "Completed";
                            t = u.green;
                            break;
                        case 2:
                            r = "Overdue";
                            t = u.red;
                            break;
                        case 3:
                            r = "Retake";
                            t = u.blue;
                            break;
                        case 4:
                            r = "Graded";
                            t = u.green;
                            break
                    }
                    return {
                        n1: q,
                        n2: r,
                        p1: s,
                        p2: t
                    }
                },
                AssignmentDescription: function(q, r) {
                    var o = q.get("AssignmentDescription") || "",
                        p = r.get("AssignmentDescription") || "";
                    return o < p ? -1 : o > p ? 1 : 0
                },
                AssignmentDescription_invert: function(q, r) {
                    var o = q.get("AssignmentDescription") || "",
                        p = r.get("AssignmentDescription") || "";
                    return o < p ? 1 : o > p ? -1 : 0
                },
                AssignmentType: function(q, r) {
                    var o = q.get("AssignmentType") || "",
                        p = r.get("AssignmentType") || "";
                    return o < p ? -1 : o > p ? 1 : 0
                },
                AssignmentType_invert: function(q, r) {
                    var o = q.get("AssignmentType") || "",
                        p = r.get("AssignmentType") || "";
                    return o < p ? 1 : o > p ? -1 : 0
                },
                DateAssigned: function(o) {
                    return o.get("DateAssigned") ? f.getDate(o.get("DateAssigned")).getTime() : 0
                },
                DateAssigned_invert: function(o) {
                    return o.get("DateAssigned") ? -f.getDate(o.get("DateAssigned")).getTime() : 0
                },
                DateDue: function(o) {
                    return o.get("DateDue") ? f.getDate(o.get("DateDue")).getTime() : 0
                },
                DateDue_invert: function(o) {
                    return o.get("DateDue") ? -f.getDate(o.get("DateDue")).getTime() : 0
                },
                AssignmentStatus: function(p, q) {
                    var o = (this.filters !== undefined) ? this.filters : this,
                        r = o._statusPrepHelper(p, q),
                        s;
                    if (r.p1 === r.p2) {
                        s = r.n1 < r.n2 ? -1 : r.n1 > r.n2 ? 1 : 0
                    } else {
                        s = r.p1 < r.p2 ? -1 : r.p1 > r.p2 ? 1 : 0
                    }
                    return s
                },
                AssignmentStatus_invert: function(o, p) {
                    return -this.filters.AssignmentStatus(o, p)
                }
            };
            this.assignmentlistview = new b.Vs.ListToggleView({
                leadSectionId: this.leadSectionId,
                sectionId: this.sectionId,
                canEdit: this.canEdit
            });
            p3.rV(this.assignmentlistview, this.Containers.LeftColumn, false);
            b.Data.assignments.fetch({
                error: function(o, p) {
                    p3.displayError("Error loading assignments")
                }
            });
            b.Data.types = new b.Cs.Types({}, {
                sectionId: this.leadSectionId
            });
            p3.rV(new b.Vs.AssignmentFilterStudentView({
                collection: b.Data.types,
                sectionId: this.sectionId,
                leadSectionId: this.leadSectionId,
                assignments: b.Data.assignments
            }), this.Containers.RightColumn, false);
            b.Data.types.fetch({
                error: function() {
                    p3.displayError("Error loading assignment types")
                }
            })
        },
        doSearchFix: function(o) {
            if ($("#assignmentSearchBox").val() === "") {
                b.Data.assignments.setSearchTerm("")
            }
        },
        doAssignmentSearch: function(o) {
            var p = $("#assignmentSearchBox").val();
            if (p != undefined && p != null) {
                b.Data.assignments.setSearchTerm(p);
                b.Us.updateAssignments()
            }
            return false
        },
        doAssignmentSearchEnter: function(o) {
            if (o.keyCode == 13) {
                this.doAssignmentSearch(o);
                o.stopPropagation()
            }
        },
        doStatusChange: function(r) {
            $(".btn-group.open").removeClass("open");
            var p = $(r.currentTarget),
                o = p.closest(".btn-group"),
                s = p.data("status"),
                t = o.data("status"),
                q, u;
            if (s != t) {
                q = o.data("indexid");
                u = new b.Ms.AssignmentStatusUpdate({
                    assignmentIndexId: q,
                    assignmentStatus: s
                });
                u.save({}, {
                    success: function() {
                        var v = "",
                            w;
                        switch (s) {
                            case -1:
                                if ($(r.currentTarget).text() == "Overdue") {
                                    v = "btn-danger"
                                }
                                break;
                            case 0:
                                v = "btn-warning";
                                break;
                            case 1:
                                v = "btn-success";
                                break
                        }
                        o.find(".assignment-status-button").removeClass("btn-warning").removeClass("btn-danger").removeClass("btn-success").addClass(v).html('<span class="caret"></span>&nbsp;' + $(r.currentTarget).text());
                        $(r.currentTarget).closest(".btn-group").data("status", s);
                        w = b.Data.assignments.find(function(x) {
                            return x.get("AssignmentIndexId") === q
                        });
                        if (w !== undefined) {
                            w.set("AssignmentStatus", s)
                        }
                    },
                    error: function() {
                        p3.displayError("Error updating assignment status")
                    }
                })
            }
            return false
        }
    });
    b.Vs.Attachments = Bb.View.extend({
        template: "ParentChild/assignment.attachments.template.html",
        className: "attachments",
        initialize: function() {
            this.collection.bind("reset change", this.renderTemplate, this);
            Hb.registerHelper("htmlTextDisplay", function(o) {
                if (o) {
                    return new Hb.SafeString(o)
                }
                return ""
            })
        },
        render: function(o) {
            $(o).append(this.el)
        },
        renderTemplate: function(o) {
            var p = this;
            p3.fT(p.template, function(r) {
                var q = _.groupBy(o.toJSON(), function(s) {
                    return s.type
                });
                _.each(q.Download, function(s) {
                    s.attachment = p3.Config.FtpImagePath + "download/" + s.attachment
                });
                p.$el.html(r({
                    attachmentsSorted: q
                }));
                p.$el.parent().slideToggle()
            })
        }
    });
    b.Vs.ListToggleView = Bb.View.extend({
        template: "classassignment/listtypetoggleview.template.html",
        events: {
            "click #list-type-toggle": "toggleList"
        },
        initialize: function() {
            if (p3.Data.LMS === undefined) {
                p3.Data.LMS = {}
            }
            this.activeView = p3.Data.LMS.listViewType || "byType";
            this.leadSectionId = this.options.leadSectionId;
            this.sectionId = this.options.sectionId;
            this.canEdit = this.options.canEdit
        },
        render: function(o) {
            $(o).append(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var p = this,
                o = p3.Data.Context.getSelectedPersona().Id;
            p3.fT(p.template, function(q) {
                p.$el.html(q({}));
                p.$listContainer = $("#list-container");
                if (p.activeView === "byType") {
                    if (o === 3 || o === 5 || o === 20 || o === 24) {
                        p3.rV(new b.Vs.AssignmentListView({
                            collection: b.Data.assignments,
                            leadSectionId: p.leadSectionId,
                            sectionId: p.sectionId,
                            canEdit: p.canEdit
                        }), p.$listContainer, true)
                    } else {
                        p3.rV(new b.Vs.AssignmentListStudentView({
                            collection: b.Data.assignments,
                            leadSectionId: p.leadSectionId,
                            sectionId: p.sectionId
                        }), p.$listContainer, true)
                    }
                } else {
                    p3.rV(new b.Vs.SortedListView({
                        collection: b.Data.assignments,
                        leadSectionId: p.leadSectionId,
                        sectionId: p.sectionId,
                        canEdit: p.canEdit
                    }), p.$listContainer, true);
                    $("#list-type-toggle button").removeClass("active");
                    $($("#list-type-toggle button")[1]).addClass("active")
                }
            })
        },
        toggleList: function(q) {
            var s = this,
                p = $(q.target),
                o = $("#list-type-toggle button"),
                t = p.data("toggle"),
                r = p3.Data.Context.getSelectedPersona().Id;
            if (p[0].tagName.toLowerCase() === "button") {
                if (t != this.activeView) {
                    o.removeClass("active");
                    p.addClass("active");
                    if (t === "byType") {
                        if (r === 3 || r === 5 || r === 20 || r === 24) {
                            p3.rV(new b.Vs.AssignmentListView({
                                collection: b.Data.assignments,
                                leadSectionId: s.leadSectionId,
                                sectionId: s.sectionId,
                                canEdit: s.canEdit
                            }), s.$listContainer, true)
                        } else {
                            p3.rV(new b.Vs.AssignmentListStudentView({
                                collection: b.Data.assignments,
                                leadSectionId: s.leadSectionId,
                                sectionId: s.sectionId
                            }), s.$listContainer, true)
                        }
                        b.Data.assignments.trigger("reset")
                    } else {
                        p3.rV(new b.Vs.SortedListView({
                            collection: b.Data.assignments,
                            leadSectionId: this.leadSectionId,
                            sectionId: this.sectionId,
                            canEdit: this.canEdit
                        }), this.$listContainer, true);
                        if (b._renderListTimer) {
                            window.clearInterval(b._renderListTimer);
                            b._renderListTimer = undefined
                        }
                        b._renderListTimer = window.setInterval(function() {
                            if ($("#sorted-assignment-items").length > 0) {
                                b.Data.assignments.trigger("reset");
                                window.clearInterval(b._renderListTimer);
                                b._renderListTimer = undefined
                            }
                        }, 100)
                    }
                    p3.Data.LMS.listViewType = t;
                    this.activeView = t
                }
            }
            q.stopPropagation()
        }
    });
    b.Vs.SortedListView = Bb.View.extend({
        template: "classassignment/sortedlistview.template.html",
        events: {
            "click .assignment-table-sort": "updateFilter",
            "click .assignment-list-edit-button": "doAssignmentEdit",
            "click .assignment-list-delete-button": "doAssignmentDelete",
            "change .assignment-list-publish-selector": "doAssignmentPublish",
            "click .assignment-list-copy-button": "doAssignmentCopy"
        },
        initialize: function() {
            if (p3.Data.LMS === undefined) {
                p3.Data.LMS = {}
            }
            this.sortDir = -1;
            this.sortField = "";
            if (p3.Data.LMS.sortViewField !== undefined) {
                if (p3.Data.LMS.sortViewField.indexOf("_") > 0) {
                    this.sortDir = 1;
                    this.sortField = p3.Data.LMS.sortViewField.substring(0, p3.Data.LMS.sortViewField.indexOf("_"))
                }
            } else {
                this.sortField = "DateDue"
            }
            this.collection.comparator = this.collection.filters[p3.Data.LMS.sortViewField || "DateDue"];
            this.collection.sort();
            this.collection.on("reset", this.renderItems, this);
            this.collection.on("sort", this.renderItems, this)
        },
        dispose: function() {
            this.collection.off("reset", this.renderItems);
            this.collection.off("sort", this.renderItems)
        },
        render: function(o) {
            $(o).append(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var q = this,
                p = p3.Data.Context.getSelectedPersona().Id,
                o = [];
            switch (p) {
                case 1:
                    o.push({
                        title: "Title",
                        field: "AssignmentDescription"
                    });
                    o.push({
                        title: "Type",
                        field: "AssignmentType",
                        classes: "assignment-list-item-type"
                    });
                    o.push({
                        title: "Assigned",
                        field: "DateAssigned",
                        classes: "assignment-list-item-dates"
                    });
                    o.push({
                        title: "Due",
                        field: "DateDue",
                        classes: "assignment-list-item-dates"
                    });
                    o.push({
                        title: "",
                        field: "",
                        classes: ""
                    });
                    break;
                case 2:
                    o.push({
                        title: "Title",
                        field: "AssignmentDescription"
                    });
                    o.push({
                        title: "Type",
                        field: "AssignmentType",
                        classes: "assignment-list-item-type"
                    });
                    o.push({
                        title: "Assigned",
                        field: "DateAssigned",
                        classes: "assignment-list-item-dates"
                    });
                    o.push({
                        title: "Due",
                        field: "DateDue",
                        classes: "assignment-list-item-dates"
                    });
                    o.push({
                        title: "Status",
                        field: "AssignmentStatus",
                        classes: ""
                    });
                    o.push({
                        title: "Available action",
                        field: "",
                        classes: "",
                        noSort: true
                    });
                    break;
                case 3:
                case 5:
                    o.push({
                        title: "Title",
                        field: "AssignmentDescription"
                    });
                    o.push({
                        title: "Type",
                        field: "AssignmentType",
                        classes: "assignment-list-item-type"
                    });
                    o.push({
                        title: "Assigned",
                        field: "DateAssigned",
                        classes: "assignment-list-item-dates"
                    });
                    o.push({
                        title: "Due",
                        field: "DateDue",
                        classes: "assignment-list-item-dates"
                    });
                    o.push({
                        title: "Publish",
                        field: "Publish",
                        classes: "assignment-list-item-publish"
                    });
                    if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK)) {
                        o.push({
                            title: "Graded",
                            field: "GradedCount",
                            classes: "assignment-list-item-graded"
                        })
                    }
                    o.push({
                        title: "",
                        field: "",
                        classes: "assignment-list-item-controls"
                    });
                    break;
                default:
                    break
            }
            p3.fT(q.template, function(r) {
                q.$el.html(r({
                    columns: o
                }));
                $('a[data-sort="' + q.sortField + '"]').removeClass("muted").addClass("sort-active");
                $('a[data-sort="' + q.sortField + '"] i').removeClass("p3icon-sortOff").addClass(q.sortDir > 0 ? "p3icon-sortUp" : "p3icon-sortDown")
            })
        },
        renderItems: function() {
            var p = this,
                o = $("#sorted-assignment-items");
            o.html("");
            this.collection.each(function(q) {
                var t = {},
                    s = p3.Data.Context.getSelectedPersona().Id;
                if (q.get("GradedCount") === 0) {
                    t.btnStyle = "danger"
                } else {
                    if (q.get("GradedCount") < q.get("NumEnrolled")) {
                        t.btnStyle = "warning"
                    } else {
                        t.btnStyle = "success"
                    }
                }
                if ((q.get("AssignmentLongDescription") !== undefined && q.get("AssignmentLongDescription") !== null && q.get("AssignmentLongDescription").length > 0) || q.get("HasLinks") || q.get("") || q.get("DropBoxInd") || (q.get("GradeBookInd") && (s == 3 || s == 5 || s == 20 || s == 24)) || (q.get("GradeBookInd") && q.get("PublishGrade") && s < 3)) {
                    t.showDetail = true
                }
                if (p.options.studentId) {
                    t.studentId = p.options.studentId
                }
                var r = new b.Vs.SortedItemView({
                    model: q,
                    options: t,
                    canEdit: p.options.canEdit
                });
                p3.rV(r, o, false)
            })
        },
        doAssignmentEdit: function(q) {
            var r = $(q.currentTarget).data("assignmentId"),
                s = ($(q.currentTarget).data("assessment") == 1),
                t = ($(q.currentTarget).data("discussion") == 1),
                u = this;
            if (s) {
                p3.router().navigate("#assessmentedit/" + r + "/" + $(q.currentTarget).data("index") + "/" + $(q.currentTarget).data("locked"), true)
            } else {
                if (t) {
                    var o = new b.Ms.Assignment();
                    o.set("AssignmentId", r);
                    o.fetch({
                        async: false,
                        error: function() {
                            p3.displayError("Error loading assignment")
                        },
                        success: function(w, x) {
                            var v = b.Us.AddDiscussionView(o, 0);
                            v.on("saveDiscussion", function() {
                                setTimeout(function() {
                                    u.collection.fetch()
                                }, 500)
                            })
                        }
                    })
                } else {
                    var p = b.Us.EditAssignmentView(r);
                    if (p !== undefined && p !== null) {
                        p.on("saveAssignment", function() {
                            setTimeout(function() {
                                u.collection.fetch()
                            }, 500)
                        }).on("deleteAssignment", function() {
                            setTimeout(function() {
                                u.collection.fetch()
                            }, 500)
                        })
                    }
                }
            }
            return false
        },
        doAssignmentCopy: function(q) {
            var o = $(q.currentTarget).data("assignmentId"),
                r = this;
            var p = b.Us.AddAssessmentView(undefined, o);
            if (p !== undefined) {
                p.on("saveAssessment", function(s, t) {
                    setTimeout(function() {
                        r.collection.fetch()
                    }, 500)
                });
                p.on("saveEditAssessment", function(t, u) {
                    var s = new b.Ms.Assignment();
                    s.set("AssignmentId", t);
                    s.fetch({
                        error: function() {
                            p3.displayError("Error loading assignment")
                        },
                        success: function(v, w) {
                            p3.router().navigate("#assessmentedit/" + t + "/" + s.get("SectionLinks")[0].AssignmentIndexId + "/0", true)
                        }
                    })
                })
            }
            return false
        },
        doAssignmentDelete: function(p) {
            var q = $(p.currentTarget).data("assignmentId"),
                r = ($(p.currentTarget).data("assessment") == 1),
                t = this;
            var s = new b.Cs.SectionForAssignments({}, {
                assignmentId: q
            });
            var o = new b.Vs.DeleteAssignmentModalView({
                collection: s,
                assignmentId: q,
                isAssessment: r
            });
            p3.rV(o, p3.Layout.Containers.Modal, true);
            o.on("assignmentDeleted", function() {
                t.collection.fetch()
            });
            p3.showModal(p3.Layout.Containers.Modal);
            s.fetch({
                error: function() {
                    p3.displayError("Error loading Sections associated with the assignment")
                }
            });
            return false
        },
        doAssignmentPublish: function(r) {
            var t = this,
                o = $(r.target).data("assignmentId"),
                p = $(r.target).data("aiid"),
                s = $(r.target).val();
            var q = new b.Ms.Assignment();
            q.set("AssignmentId", o);
            q.fetch({
                error: function() {
                    p3.displayError("Error loading assignment")
                },
                success: function(v, x) {
                    var y = v.get("SectionLinks");
                    if (y.length > 1) {
                        var u = new b.Vs.PublishChangeConfirmation({
                            Sections: y,
                            PublishOpt: s,
                            LeadSectionId: t.options.leadSectionId,
                            SectionId: t.options.sectionId,
                            target: $(r.target)
                        });
                        p3.rV(u, p3.Layout.Containers.Modal, true);
                        p3.showModal(p3.Layout.Containers.Modal);
                        $(p3.Layout.Containers.Modal).on("hide", u.resetDefault)
                    } else {
                        var w = new b.Ms.PublishAssignment();
                        w.fetch({
                            data: {
                                assignmentIndexId: p,
                                publishInd: s
                            },
                            success: function() {
                                t.collection.fetch()
                            },
                            error: function() {
                                t.collection.fetch()
                            }
                        })
                    }
                }
            })
        },
        updateFilter: function(p) {
            var r = this;
            var o = $(p.currentTarget);
            var q = o.data("sort");
            $(".sort-icon").removeClass("p3icon-sortDown p3icon-sortUp p3icon-sortOff").addClass("p3icon-sortOff");
            $(".assignment-table-sort").removeClass("sort-active").addClass("muted");
            if (q !== undefined) {
                if (r.CurrentSort === q) {
                    q = q + "_invert";
                    o.removeClass("muted").addClass("sort-active");
                    o.children("i").removeClass("p3icon-sortOff").addClass("p3icon-sortUp")
                } else {
                    o.removeClass("muted").addClass("sort-active");
                    o.children("i").removeClass("p3icon-sortOff").addClass("p3icon-sortDown")
                }
                r.CurrentSort = q;
                b.Data.assignments.changeSort(q);
                b.Data.assignments.sort();
                if (p3.Data.LMS === undefined) {
                    p3.Data.LMS = {}
                }
                p3.Data.LMS.sortViewField = q
            }
            return false
        }
    });
    b.Vs.SortedItemView = Bb.View.extend({
        template: "classassignment/sorteditemview.template.html",
        studentTemplate: "classassignment/sortedstudentitemview.template.html",
        tagName: "tr",
        events: {
            "click .assignment-status-update": "showStatusUpdate"
        },
        initialize: function(o) {
            this.model = o.model;
            this.viewOptions = o.options || {}
        },
        render: function(o) {
            var s = this,
                p = p3.Data.LMS !== undefined && p3.Data.LMS.AssignmentFilters !== undefined && p3.Data.LMS.AssignmentFilters.onlyDropbox !== undefined && p3.Data.LMS.AssignmentFilters.onlyDropbox === true,
                r = p3.Data.Context.getSelectedPersona().Id;
            $(o).append(s.el);
            if (s.model !== undefined && (!p || (p && s.model.get("DropBoxInd") === true))) {
                var q = "";
                if (s.model.get("AssessmentInd")) {
                    if (s.model.get("AssessmentId") > 0 && (r == 3 || r == 5 || r == 20 || r == 24)) {
                        q += '<a href="#assessmentsectiondetail/' + s.model.get("AssignmentId") + "/" + s.model.get("AssignmentIndexId") + '/0">' + s.model.get("AssignmentDescription") + "</a>"
                    } else {
                        q += '<p class="assignment-list-text">' + s.model.get("AssignmentDescription") + "</p>"
                    }
                } else {
                    if (s.model.get("DiscussionInd")) {
                        if (r == 3 || r == 5 || r == 20 || r == 24) {
                            q += '<a href="#discussionsectiondetail/' + s.model.get("AssignmentId") + "/" + s.model.get("AssignmentIndexId") + '/0">' + s.model.get("AssignmentDescription") + "</a>"
                        } else {
                            if (r == 2) {
                                q += '<a href="#discussiondetail/' + s.model.get("AssignmentId") + "/" + s.model.get("AssignmentIndexId") + '">' + s.model.get("AssignmentDescription") + "</a>"
                            }
                        }
                    } else {
                        if (s.model.get("AssignmentLongDescription").length > 0 || s.model.get("HasLinks") || s.model.get("HasDownloads") || (s.model.get("LtiInd") && (r == 2 || r == 3)) || s.model.get("DropBoxInd") || (s.model.get("GradeBookInd") && (r == 3 || r == 5 || r == 20 || r == 24))) {
                            if (r == 1) {
                                q += '<a href="' + e.Us.BuildAssignmentDetailLink(s.model.get("AssignmentId"), s.model.get("AssignmentIndexId"), a.Data.studentId, 0) + '">'
                            } else {
                                q += '<a href="' + e.Us.BuildAssignmentDetailLink(s.model.get("AssignmentId"), s.model.get("AssignmentIndexId"), null, 0) + '">'
                            }
                            q += s.model.get("AssignmentDescription") + "</a>"
                        } else {
                            q += '<p class="assignment-list-text">' + s.model.get("AssignmentDescription") + "</p>"
                        }
                    }
                }
                s.model.set("linkItem", q)
            }
            p3.fT((r === 3 || r === 5 || r === 20 || r === 24) ? s.template : s.studentTemplate, function(t) {
                s.$el.append(t({
                    model: s.model.toJSON(),
                    options: s.viewOptions,
                    hasGradebook: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK),
                    canEdit: s.options.canEdit
                }))
            })
        },
        showStatusUpdate: function(p) {
            var t = $(p.currentTarget),
                o = t.data("id"),
                q = t.data("index"),
                r = t.data("overdue"),
                s = t.data("status");
            e.Us.ShowStatusChange(t, o, q, r, s, false)
        }
    });
    b.Vs.AssignmentListView = Bb.View.extend({
        template: "classassignment/assignmentlistview.template.html",
        itemTemplate: "classassignment/assignmentlistview.item.template.html",
        className: "ch",
        sortType: "assignmentType",
        events: {
            "click .slide": "slideContent",
            "click .assignment-list-edit-button": "doAssignmentEdit",
            "click .assignment-list-delete-button": "doAssignmentDelete",
            "click a.toggle-detail": "showDetail",
            "click .assignment-table-button": "doShowMoreAssignments",
            "change .assignment-list-publish-selector": "doAssignmentPublish",
            "focus .assignment-list-publish-selector": "doAssignmnetPublishFocus",
            "updateAssignments #assignmentview": "updateAssignments",
            "click .assignment-list-copy-button": "doAssignmentCopy"
        },
        renderTemplate: function() {
            var o = this;
            p3.fT(o.template, function(B) {
                var D = [],
                    s = p3.Data.LMS !== undefined && p3.Data.LMS.AssignmentFilters !== undefined && p3.Data.LMS.AssignmentFilters.onlyDropbox !== undefined && p3.Data.LMS.AssignmentFilters.onlyDropbox === true,
                    z = p3.Data.Context.getSelectedPersona().Id,
                    t, w, q;
                if (o.sortType) {
                    switch (o.sortType) {
                        case "assignmentType":
                            var r = o.collection.pluck("AssignmentType"),
                                C = _.uniq(r),
                                u, x, p, A, v, y;
                            if (r[0] !== undefined && C.length) {
                                for (t = 0, x = C.length; t < x; t++) {
                                    p = b.Us.GetAssignmentsByType(o.collection, C[t]);
                                    A = [];
                                    for (u = 0; u < p.length; u++) {
                                        v = p[u];
                                        if ((v !== undefined) && (!s || (s && v.get("DropBoxInd") === true))) {
                                            y = "";
                                            if (v.get("AssessmentInd")) {
                                                if (v.get("AssessmentId") > 0 && (z == 3 || z == 5 || z == 20 || z == 24)) {
                                                    y += '<a href="#assessmentsectiondetail/' + v.get("AssignmentId") + "/" + v.get("AssignmentIndexId") + '/0">' + v.get("AssignmentDescription") + "</a>"
                                                } else {
                                                    y += '<p class="assignment-list-text">' + v.get("AssignmentDescription") + "</p>"
                                                }
                                            } else {
                                                if (v.get("DiscussionInd")) {
                                                    if (z == 3 || z == 5 || z == 20 || z == 24) {
                                                        y += '<a href="#discussionsectiondetail/' + v.get("AssignmentId") + "/" + v.get("AssignmentIndexId") + '/0">' + v.get("AssignmentDescription") + "</a>"
                                                    } else {
                                                        y += '<p class="assignment-list-text">' + v.get("AssignmentDescription") + "</p>"
                                                    }
                                                } else {
                                                    if (v.get("AssignmentLongDescription").length > 0 || v.get("HasLinks") || v.get("HasDownloads") || v.get("DropBoxInd") || (v.get("LtiInd") && (z == 2 || z == 3)) || (v.get("GradeBookInd") && (z == 3 || z == 5 || z == 20 || z == 24))) {
                                                        if (z == 1) {
                                                            y += '<a href="' + e.Us.BuildAssignmentDetailLink(v.get("AssignmentId"), v.get("AssignmentIndexId"), a.Data.studentId, 0) + '">'
                                                        } else {
                                                            y += '<a href="' + e.Us.BuildAssignmentDetailLink(v.get("AssignmentId"), v.get("AssignmentIndexId"), null, 0) + '">'
                                                        }
                                                        y += v.get("AssignmentDescription") + "</a>"
                                                    } else {
                                                        y += '<p class="assignment-list-text">' + v.get("AssignmentDescription") + "</p>"
                                                    }
                                                }
                                            }
                                            v.set("linkItem", y);
                                            A.push(v.toJSON())
                                        }
                                    }
                                    if (A.length > 0) {
                                        D.push({
                                            heading: C[t],
                                            id: (A.length > 0 ? A[0].AssignmentTypeId : -1),
                                            major: false,
                                            assignments: A
                                        })
                                    }
                                }
                            }
                            break;
                        default:
                            break
                    }
                } else {
                    D = o.collection.toJSON()
                }
                if (D.length === 0) {
                    if ($("#assignmentSearchBox").val() !== "") {
                        o.$el.html("<h5>Your search did not return any results.</h5>")
                    } else {
                        if (b.Data.assignments.dateSort == null && (b.Data.assignments.startDate == null || b.Data.assignments.endDate == null)) {
                            o.$el.html("<h5>Enter date range to view assignments.</h5>")
                        } else {
                            o.$el.html("<h5>There are no assignments to display.</h5>")
                        }
                    }
                } else {
                    for (t = 0; t < D.length; t++) {
                        q = D[t];
                        for (w = 0; w < q.assignments.length; w++) {
                            if (q.assignments[w].GradedCount === 0) {
                                q.assignments[w].btnStyle = "danger"
                            } else {
                                if (q.assignments[w].GradedCount < q.assignments[w].NumEnrolled) {
                                    q.assignments[w].btnStyle = "warning"
                                } else {
                                    q.assignments[w].btnStyle = "success"
                                }
                            }
                        }
                    }
                    o.$el.html(B({
                        leadSectionId: o.options.leadSectionId,
                        sortedItems: D,
                        hasGradebook: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK),
                        canEdit: o.options.canEdit
                    }));
                    o.renderItems(D)
                }
            })
        },
        renderItems: function(o) {
            if (o === undefined || o.length < 0) {
                return
            }
            var p = this;
            _.each(o, function(u) {
                var v = u.id + "-list-table",
                    s = (u.id !== "" ? (u.id + "-more-button") : "no-more-button"),
                    r = $("#" + v).children("tbody"),
                    q = $("#" + s),
                    t = 1;
                _.each(u.assignments, function(w) {
                    p3.fT(p.itemTemplate, function(x) {
                        r.append(x({
                            assignment: w,
                            hasGradebook: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK),
                            canEdit: p.options.canEdit,
                            userId: p3.Data.Context.get("UserInfo").UserId,
                            facultyInd: (p3.Data.Context.getSelectedPersona().Id === h.AppPersona.FACULTY.Value)
                        }));
                        if (t > 10) {
                            r.children("tr:last").hide()
                        }
                        t++
                    })
                });
                if (u.assignments.length > 10) {
                    q.show()
                }
            })
        },
        renderSearch: function(o) {
            var p = this;
            p3.fT(p.template, function(q) {
                p.$el.html(q({
                    leadSectionId: p.options.leadSectionId,
                    assignmentTypes: o,
                    hasGradebook: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK),
                    canEdit: p.options.canEdit
                }))
            })
        },
        initialize: function() {
            this.collection.comparator = undefined;
            this.collection.on("reset", this.renderTemplate, this);
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, function() {
                    return false
                })
            })
        },
        dispose: function() {
            this.collection.off("reset", this.renderTemplate)
        },
        render: function(o) {
            b.Us.registerHelpers();
            $(o).append(this.el)
        },
        slideContent: function(o) {
            var p = $(o.target);
            p3.slideContent(p)
        },
        showButtons: function(p) {
            var o = $(p.currentTarget).find("a.btn"),
                q, r;
            for (q = 0, r = o.length; q < r; q++) {
                $(o[q]).show()
            }
        },
        hideButtons: function(p) {
            var o = $(p.currentTarget).find("a.btn"),
                q, r;
            for (q = 0, r = o.length; q < r; q++) {
                $(o[q]).hide()
            }
        },
        doAssignmentEdit: function(q) {
            var r = $(q.currentTarget).data("assignmentId"),
                s = ($(q.currentTarget).data("assessment") == 1),
                t = ($(q.currentTarget).data("discussion") == 1);
            if (s) {
                p3.router().navigate("#assessmentedit/" + r + "/" + $(q.currentTarget).data("indexId") + "/" + $(q.currentTarget).data("locked"), true)
            } else {
                if (t) {
                    var o = new b.Ms.Assignment();
                    o.set("AssignmentId", r);
                    o.fetch({
                        async: false,
                        error: function() {
                            p3.displayError("Error loading assignment")
                        },
                        success: function(v, w) {
                            var u = b.Us.AddDiscussionView(o, 0);
                            u.on("saveDiscussion", function() {
                                setTimeout(function() {
                                    b.Us.updateAssignments()
                                }, 500)
                            })
                        }
                    })
                } else {
                    var p = b.Us.EditAssignmentView(r);
                    if (p !== undefined) {
                        p.on("saveAssignment", function() {
                            setTimeout(function() {
                                b.Us.updateAssignments()
                            }, 500)
                        }).on("deleteAssignment", function() {
                            setTimeout(function() {
                                b.Us.updateAssignments()
                            }, 500)
                        })
                    }
                }
            }
            return false
        },
        doAssignmentCopy: function(q) {
            var o = $(q.currentTarget).data("assignmentId"),
                p = b.Us.AddAssessmentView(undefined, o);
            if (p !== undefined) {
                p.on("saveAssessment", function(r, s) {
                    setTimeout(function() {
                        b.Us.updateAssignments()
                    }, 500)
                });
                p.on("saveEditAssessment", function(s, t) {
                    var r = new b.Ms.Assignment();
                    r.set("AssignmentId", s);
                    r.fetch({
                        error: function() {
                            p3.displayError("Error loading assignment")
                        },
                        success: function(u, v) {
                            p3.router().navigate("#assessmentedit/" + s + "/" + r.get("SectionLinks")[0].AssignmentIndexId + "/0", true)
                        }
                    })
                })
            }
            return false
        },
        doAssignmentDelete: function(o) {
            var p = $(o.currentTarget).data("assignmentId"),
                q = ($(o.currentTarget).data("assessment") == 1);
            var r = new b.Cs.SectionForAssignments({}, {
                assignmentId: p
            });
            var s = new b.Vs.DeleteAssignmentModalView({
                collection: r,
                assignmentId: p,
                isAssessment: q
            }).on("assignmentDeleted", function() {
                b.Us.updateAssignments()
            });
            p3.rV(s, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            r.fetch({
                error: function() {
                    p3.displayError("Error loading Sections associated with the assignment")
                }
            });
            return false
        },
        showDetail: function(p) {
            if ($(p.target).closest("td").has(".attachments").length) {
                $(p.target).closest("td").find(".detail").slideToggle()
            } else {
                var q = $(p.target).data("assignmentId");
                if (q === undefined) {
                    q = $(p.target).closest("a").data("assignmentId")
                }
                var o = new b.Cs.Attachments();
                p3.rV(new b.Vs.Attachments({
                    collection: o
                }), $(p.target).parents("td").find(".detail"), false);
                o.fetch({
                    data: {
                        assignmentId: q
                    },
                    error: function() {
                        p3.displayError("Error loading attachments")
                    }
                })
            }
            return false
        },
        doAssignmnetPublishFocus: function(o) {
            $(o.target).data("lastValue", $(o.target).val())
        },
        doAssignmentPublish: function(r) {
            var t = this,
                o = $(r.target).data("assignmentId"),
                p = $(r.target).data("aiid"),
                s = $(r.target).val();
            var q = new b.Ms.Assignment();
            q.set("AssignmentId", o);
            q.fetch({
                error: function() {
                    p3.displayError("Error loading assignment")
                },
                success: function(v, x) {
                    var y = v.get("SectionLinks");
                    if (y.length > 1) {
                        var u = new b.Vs.PublishChangeConfirmation({
                            Sections: y,
                            PublishOpt: s,
                            LeadSectionId: t.options.leadSectionId,
                            SectionId: t.options.sectionId,
                            target: $(r.target)
                        });
                        p3.rV(u, p3.Layout.Containers.Modal, true);
                        p3.showModal(p3.Layout.Containers.Modal);
                        $(p3.Layout.Containers.Modal).on("hide", u.resetDefault)
                    } else {
                        var w = new b.Ms.PublishAssignment();
                        w.fetch({
                            data: {
                                assignmentIndexId: p,
                                publishInd: s
                            },
                            success: function(z, A) {
                                t.collection.fetch()
                            }
                        })
                    }
                }
            })
        },
        doShowMoreAssignments: function(p) {
            p.preventDefault();
            var o = $(p.currentTarget),
                t = $(o.prev("table")[0]),
                q = t.children("tbody").children("tr:hidden"),
                r, s;
            if (q.length < 11) {
                o.hide()
            }
            for (r = 0, s = q.length; r < s && r < 10; r++) {
                $(q[r]).show()
            }
            return false
        },
        updateAssignments: function() {
            b.Us.updateAssignments(true)
        }
    });
    b.Vs.AssignmentListStudentView = Bb.View.extend({
        template: "classassignment/assignmentlistview.template.student.html",
        className: "ch",
        sortType: "assignmentType",
        events: {
            "click .slide": "slideContent",
            "click .assignment-list-edit-button": "doAssignmentEdit",
            "click .assignment-list-delete-button": "doAssignmentDelete",
            "click a.toggle-detail": "showDetail",
            "change .assignment-list-publish-selector": "doAssignmentPublish",
            "focus .assignment-list-publish-selector": "doAssignmnetPublishFocus",
            "click .assignment-table-button": "doShowMoreAssignments",
            "click .assignment-status-update": "showStatusUpdate"
        },
        renderTemplate: function() {
            var o = this;
            p3.fT(o.template, function(v) {
                var x = [];
                if (o.sortType) {
                    switch (o.sortType) {
                        case "assignmentType":
                            var q = o.collection.pluck("AssignmentType"),
                                w = _.uniq(q),
                                r, t, p, s, u;
                            if (q[0] !== undefined && w.length) {
                                for (r = 0, t = w.length; r < t; r++) {
                                    p = b.Us.GetAssignmentsByType(o.collection, w[r]);
                                    u = [];
                                    for (s = 0; s < p.length; s++) {
                                        if (p[s] !== undefined) {
                                            u.push(p[s].toJSON())
                                        }
                                    }
                                    x.push({
                                        heading: w[r],
                                        major: false,
                                        assignments: u
                                    })
                                }
                            }
                            break;
                        default:
                            break
                    }
                } else {
                    x = o.collection.toJSON()
                }
                if (x.length === 0) {
                    if ($("#assignmentSearchBox").val() !== "") {
                        o.$el.html("<h5>Your search did not return any results.</h5>")
                    } else {
                        if (b.Data.assignments.dateSort == null && (b.Data.assignments.startDate == null || b.Data.assignments.endDate == null)) {
                            o.$el.html("<h5>Enter date range to view assignments.</h5>")
                        } else {
                            o.$el.html("<h5>There are no assignments to display.</h5>")
                        }
                    }
                } else {
                    o.$el.html(v({
                        leadSectionId: o.options.leadSectionId,
                        sortedItems: x,
                        hasDropbox: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSIGNMENTDROPBOX),
                        showStatus: p3.Data.Context.getSelectedPersona().Id === 2
                    }))
                }
            })
        },
        renderSearch: function(o) {
            var p = this;
            p3.fT(p.template, function(q) {
                p.$el.html(q({
                    leadSectionId: p.options.leadSectionId,
                    assignmentTypes: o,
                    hasDropbox: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSIGNMENTDROPBOX),
                    showStatus: p3.Data.Context.getSelectedPersona().Id === 2
                }))
            })
        },
        initialize: function() {
            this.collection.bind("reset change", this.renderTemplate, this);
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, function() {
                    return false
                })
            })
        },
        render: function(o) {
            b.Us.registerHelpers();
            $(o).append(this.el);
            b.Us.updateAssignments()
        },
        slideContent: function(o) {
            var p = $(o.target);
            p3.slideContent(p)
        },
        showButtons: function(p) {
            var o = $(p.currentTarget).find("a.btn"),
                q, r;
            for (q = 0, r = o.length; q < r; q++) {
                $(o[q]).show()
            }
        },
        hideButtons: function(p) {
            var o = $(p.currentTarget).find("a.btn"),
                q, r;
            for (q = 0, r = o.length; q < r; q++) {
                $(o[q]).hide()
            }
        },
        doAssignmentEdit: function(o) {
            var p = $(o.currentTarget).data("assignmentId");
            b.Us.EditAssignmentView(p, {
                event: "saveAssignment",
                execute: function() {
                    setTimeout(function() {
                        b.Us.updateAssignments()
                    }, 500)
                }
            });
            return false
        },
        doAssignmentDelete: function(o) {
            var p = $(o.currentTarget).data("assignmentId"),
                q = new b.Cs.SectionForAssignments({}, {
                    assignmentId: p
                }),
                r = new b.Vs.DeleteAssignmentModalView({
                    collection: q,
                    assignmentId: p
                }).on("assignmentDeleted", function() {
                    b.Us.updateAssignments()
                });
            p3.rV(r, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            q.fetch({
                error: function() {
                    p3.displayError("Error loading Sections associated with the assignment")
                }
            });
            return false
        },
        showDetail: function(p) {
            if ($(p.target).closest("td").has(".attachments").length) {
                $(p.target).closest("td").find(".detail").slideToggle()
            } else {
                var q = $(p.target).data("assignmentId");
                if (q === undefined) {
                    q = $(p.target).closest("a").data("assignmentId")
                }
                var o = new b.Cs.Attachments();
                p3.rV(new b.Vs.Attachments({
                    collection: o
                }), $(p.target).parents("td").find(".detail"), false);
                o.fetch({
                    data: {
                        assignmentId: q
                    },
                    error: function() {
                        p3.displayError("Error loading attachments")
                    }
                })
            }
            return false
        },
        doAssignmnetPublishFocus: function(o) {
            $(o.target).data("lastValue", $(o.target).val())
        },
        doAssignmentPublish: function(r) {
            var t = this,
                o = $(r.target).data("assignmentId"),
                p = $(r.target).data("aiid"),
                s = $(r.target).val();
            var q = new b.Ms.Assignment();
            q.set("AssignmentId", o);
            q.fetch({
                error: function() {
                    p3.displayError("Error loading assignment")
                },
                success: function(v, x) {
                    var y = v.get("SectionLinks");
                    if (y.length > 1) {
                        var u = new b.Vs.PublishChangeConfirmation({
                            Sections: y,
                            PublishOpt: s,
                            LeadSectionId: t.options.leadSectionId,
                            SectionId: t.options.sectionId,
                            target: $(r.target)
                        });
                        p3.rV(u, p3.Layout.Containers.Modal, true);
                        p3.showModal(p3.Layout.Containers.Modal);
                        $(p3.Layout.Containers.Modal).on("hide", u.resetDefault)
                    } else {
                        var w = new b.Ms.PublishAssignment();
                        w.fetch({
                            data: {
                                assignmentIndexId: p,
                                publishInd: s
                            }
                        })
                    }
                }
            })
        },
        showStatusUpdate: function(p) {
            var t = $(p.currentTarget),
                o = t.data("id"),
                q = t.data("index"),
                r = t.data("overdue"),
                s = t.data("status");
            e.Us.ShowStatusChange(t, o, q, r, s, false)
        },
        doShowMoreAssignments: function(p) {
            p.preventDefault();
            var o = $(p.currentTarget),
                t = $(o.prev("table")[0]),
                q = t.children("tbody").children("tr:hidden"),
                r, s;
            if (q.length < 11) {
                o.hide()
            }
            for (r = 0, s = q.length; r < s && r < 10; r++) {
                $(q[r]).show()
            }
            return false
        }
    });
    b.Vs.AssignmentFilterView = Bb.View.extend({
        template: "classassignment/assignmentfilter.template.html",
        className: "ch",
        filterRange: {
            previous: false,
            active: true,
            future: false,
            daterange: false
        },
        events: {
            "click .assignmentTypeFilter": "setAssignmentTypes",
            "click .assignmentTimeFilter": "setFilterRange",
            "change #assignmentFilterStartDatePicker": "setDateRange",
            "change #assignmentFilterEndDatePicker": "setDateRange",
            "click #assignment-reports-list-toggle": "toggleReports",
            "click #import-button": "openImportDialog"
        },
        initialize: function(p) {
            this.collection.bind("reset", this.renderTemplate, this);
            this.showDateRanges(false);
            b.Us.FetchAssignmentTypes(p.sectionId);
            if (p3.Data.LMS === undefined) {
                p3.Data.LMS = {}
            }
            if (p3.Data.LMS.AssignmentFilters === undefined) {
                p3.Data.LMS.AssignmentFilters = {
                    Range: {
                        previous: false,
                        active: true,
                        future: false,
                        daterange: false,
                        startDate: f.localDateTime().toDateString(),
                        endDate: null
                    },
                    Types: "",
                    Statuses: "",
                    SearchTerm: ""
                };
                this.filterRange.previous = false;
                this.filterRange.active = true;
                this.filterRange.future = false;
                this.filterRange.daterange = false
            } else {
                this.filterRange.previous = p3.Data.LMS.AssignmentFilters.Range.previous;
                this.filterRange.active = p3.Data.LMS.AssignmentFilters.Range.active;
                this.filterRange.future = p3.Data.LMS.AssignmentFilters.Range.future;
                this.filterRange.daterange = p3.Data.LMS.AssignmentFilters.Range.daterange;
                if (p3.Data.LMS.AssignmentFilters.Types.length > 0) {
                    this.options.assignments.setAssignTypeFilter(p3.Data.LMS.AssignmentFilters.Types)
                }
                if (p3.Data.LMS.AssignmentFilters.Statuses.length > 0) {
                    this.options.assignments.setAssignTypeFilter(p3.Data.LMS.AssignmentFilters.Statuses)
                }
                var o = 1;
                if (p3.Data.LMS.AssignmentFilters.Range.daterange) {
                    o = null
                } else {
                    if (p3.Data.LMS.AssignmentFilters.Range.previous) {
                        o = 0
                    } else {
                        if (p3.Data.LMS.AssignmentFilters.Range.future) {
                            o = 2
                        }
                    }
                }
                this.options.assignments.setDateSortFilter(o)
            }
            this.schoolYears = new b.Cs.ExistingSchoolYears();
            this.schoolYears.fetch({
                error: function(q, s) {
                    p3.displayError("Error retreiving school years.")
                }
            })
        },
        renderTemplate: function() {
            var o = this;
            e.Us.refreshLtiConfigSummary(0);
            p3.fT(o.template, function(p) {
                o.$el.html(p({
                    assignmentTypes: o.collection.toJSON(),
                    previous: o.filterRange.previous,
                    active: o.filterRange.active,
                    future: o.filterRange.future,
                    daterange: o.filterRange.daterange,
                    reports: o.options.reports.toJSON(),
                    leadSectionId: o.options.leadSectionId,
                    canEdit: o.options.canEdit,
                    owner: o.options.isOwner,
                    showAssess: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSESSMENTS),
                    showDiscuss: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEDDISCUSSION),
                    lti: e.Data.LtiConfigSummary.toJSON()
                }));
                g.Us.initialize("#assignmentFilterStartDatePicker", {
                    changeMonth: true,
                    changeYear: true
                });
                g.Us.initialize("#assignmentFilterEndDatePicker", {
                    changeMonth: true,
                    changeYear: true
                });
                o.displayExistingFilters();
                o.showDateRanges(o.filterRange.daterange)
            })
        },
        render: function(o) {
            var p = this;
            $(o).append(p.el)
        },
        setAssignmentTypes: function(t) {
            t.preventDefault();
            var r = $(t.currentTarget),
                o = r.find("i"),
                q = r.closest("ul"),
                p = r.closest("ul").find("li"),
                w = r.data("typeId"),
                s = false;
            if (w === -1) {
                var u = q.find("i");
                if (u.length > 0) {
                    _.each(u, function(x) {
                        $(x).removeClass("p3icon-ok").addClass("p3icon-check");
                        $(x).closest("div").removeClass("active-filter").addClass("inactive-filter")
                    });
                    o.removeClass("p3icon-check").addClass("p3icon-ok");
                    o.closest("div").removeClass("inactive-filter").addClass("active-filter")
                }
                s = true
            } else {
                q.find("i:first").removeClass("p3icon-ok").addClass("p3icon-check");
                q.find("i:first").closest("div").removeClass("active-filter").addClass("inactive-filter");
                if (o.hasClass("p3icon-ok")) {
                    o.removeClass("p3icon-ok").addClass("p3icon-check");
                    o.closest("div").removeClass("active-filter").addClass("inactive-filter")
                } else {
                    o.removeClass("p3icon-check").addClass("p3icon-ok");
                    o.closest("div").removeClass("inactive-filter").addClass("active-filter")
                }
                if (q.find("i.p3icon-ok").length === 0) {
                    q.find("i:first").removeClass("p3icon-check").addClass("p3icon-ok");
                    q.find("i:first").closest("div").removeClass("inactive-filter").addClass("active-filter");
                    s = true
                }
            }
            if (this.options.assignments) {
                p3.Data.LMS.AssignmentFilters.Types = "";
                if (!s) {
                    var v = p.find(".p3icon-ok");
                    _.each(v, function(x) {
                        if (p3.Data.LMS.AssignmentFilters.Types.length > 0) {
                            p3.Data.LMS.AssignmentFilters.Types += ","
                        }
                        p3.Data.LMS.AssignmentFilters.Types += $(x).closest("a").data("typeId")
                    })
                }
            }
            this.options.assignments.setAssignTypeFilter(p3.Data.LMS.AssignmentFilters.Types);
            b.Us.updateAssignments()
        },
        displayExistingFilters: function() {
            var r = this,
                p;
            if (p3.Data.LMS === undefined || p3.Data.LMS.AssignmentFilters === undefined) {
                return
            }
            if (p3.Data.LMS.AssignmentFilters.Types.length > 0) {
                var q = p3.Data.LMS.AssignmentFilters.Types.split(","),
                    o = $(".assignmentTypeFilter");
                o.each(function() {
                    var s = $(this).data("typeId");
                    if (q.indexOf(s.toString()) > -1) {
                        $(this).find("i").removeClass("p3icon-check").addClass("p3icon-ok");
                        $(this).find("div").removeClass("inactive-filter").addClass("active-filter")
                    } else {
                        $(this).find("i").removeClass("p3icon-ok").addClass("p3icon-check");
                        $(this).find("div").removeClass("active-filter").addClass("inactive-filter")
                    }
                })
            }
            _.each($(".assignmentTimeFilter"), function(t) {
                var s = $(t).data("typeId");
                if (r.filterRange.previous && s === 0) {
                    $(t).find("i").removeClass("p3icon-radioOff").addClass("p3icon-radioOn");
                    $(t).find("div").removeClass("inactive-filter").addClass("active-filter")
                } else {
                    if (r.filterRange.active && s === 1) {
                        $(t).find("i").removeClass("p3icon-radioOff").addClass("p3icon-radioOn");
                        $(t).find("div").removeClass("inactive-filter").addClass("active-filter")
                    } else {
                        if (r.filterRange.future && s === 2) {
                            $(t).find("i").removeClass("p3icon-radioOff").addClass("p3icon-radioOn");
                            $(t).find("div").removeClass("inactive-filter").addClass("active-filter")
                        } else {
                            if (r.filterRange.daterange && s === 3) {
                                $(t).find("i").removeClass("p3icon-radioOff").addClass("p3icon-radioOn");
                                $(t).find("div").removeClass("inactive-filter").addClass("active-filter")
                            } else {
                                $(t).find("i").removeClass("p3icon-radioOn").addClass("p3icon-radioOff");
                                $(t).find("div").removeClass("active-filter").addClass("inactive-filter")
                            }
                        }
                    }
                }
            });
            if (p3.Data.LMS.AssignmentFilters.Range.daterange) {
                p = f.getDateString(p3.Data.LMS.AssignmentFilters.Range.startDate).ApiFormat();
                $("#assignmentFilterStartDatePicker").val(p);
                this.options.assignments.setStartDateFilter(p);
                p = f.getDateString(p3.Data.LMS.AssignmentFilters.Range.endDate).ApiFormat();
                $("#assignmentFilterEndDatePicker").val(p);
                this.options.assignments.setEndDateFilter(p)
            }
            if (p3.Data.LMS.AssignmentFilters.SearchTerm.length > 0) {
                $("#assignmentSearchBox").val(p3.Data.LMS.AssignmentFilters.SearchTerm);
                $("#assignmentSearchButton").trigger($.Event("click"))
            } else {
                b.Us.updateAssignments()
            }
        },
        setFilterRange: function(r) {
            r.preventDefault();
            var q = $(r.currentTarget),
                o = q.find("i"),
                p = q.closest("ul"),
                s = p.find("i"),
                t = q.data("typeId");
            if (s.length > 0) {
                _.each(s, function(u) {
                    $(u).removeClass("p3icon-radioOn").addClass("p3icon-radioOff");
                    $(u).closest("div").removeClass("active-filter").addClass("inactive-filter")
                });
                o.removeClass("p3icon-radioOff").addClass("p3icon-radioOn");
                o.closest("div").removeClass("inactive-filter").addClass("active-filter")
            }
            p3.Data.LMS.AssignmentFilters.Range.previous = this.filterRange.previous = false;
            p3.Data.LMS.AssignmentFilters.Range.active = this.filterRange.active = false;
            p3.Data.LMS.AssignmentFilters.Range.future = this.filterRange.future = false;
            p3.Data.LMS.AssignmentFilters.Range.daterange = this.filterRange.daterange = false;
            if (this.options.assignments) {
                if (t == 3) {
                    this.options.assignments.setDateSortFilter(null);
                    p3.Data.LMS.AssignmentFilters.Range.daterange = this.filterRange.daterange = true;
                    this.showDateRanges(true)
                } else {
                    this.options.assignments.setDateSortFilter(t);
                    switch (t) {
                        case 0:
                            p3.Data.LMS.AssignmentFilters.Range.previous = this.filterRange.previous = true;
                            break;
                        case 1:
                            p3.Data.LMS.AssignmentFilters.Range.active = this.filterRange.active = true;
                            break;
                        case 2:
                            p3.Data.LMS.AssignmentFilters.Range.future = this.filterRange.future = true;
                            break
                    }
                    this.showDateRanges(false)
                }
            }
            b.Us.updateAssignments()
        },
        setDateRange: function() {
            var q = $("#assignmentFilterStartDatePicker");
            var o = $("#assignmentFilterEndDatePicker");
            var r = q.attr("value") || $(q).datepicker("getDate");
            var p = o.attr("value") || $(o).datepicker("getDate");
            p3.Data.LMS.AssignmentFilters.Range.startDate = r;
            p3.Data.LMS.AssignmentFilters.Range.endDate = p;
            if (r !== null && p !== null && !$(q).hasClass("invalid") && !$(o).hasClass("invalid")) {
                this.options.assignments.setStartDateFilter(f.getDateString(r).ApiFormat());
                this.options.assignments.setEndDateFilter(f.getDateString(p).ApiFormat());
                b.Us.updateAssignments()
            }
        },
        showDateRanges: function(o) {
            if (o == false) {
                $("#assignmentFilterStartDatePicker").attr("disabled", "disabled");
                $("#assignmentFilterEndDatePicker").attr("disabled", "disabled");
                $("#assignmentFilterStartDatePicker").siblings("label").removeClass("active-filter").addClass("inactive-filter");
                $("#assignmentFilterEndDatePicker").siblings("label").removeClass("active-filter").addClass("inactive-filter")
            } else {
                $("#assignmentFilterStartDatePicker").removeAttr("disabled");
                $("#assignmentFilterEndDatePicker").removeAttr("disabled");
                $("#assignmentFilterStartDatePicker").siblings("label").removeClass("inactive-filter").addClass("active-filter");
                $("#assignmentFilterEndDatePicker").siblings("label").removeClass("inactive-filter").addClass("active-filter")
            }
        },
        toggleReports: function(o) {
            o.preventDefault();
            $("#reports-collapse").collapse("toggle")
        },
        openImportDialog: function() {
            var p = this;
            var o = new b.Vs.ImportAssignments({
                schoolYears: p.schoolYears,
                currentSections: b.Data.TeacherSections,
                leadSectionId: p.options.leadSectionId
            });
            o.on("save", function() {
                b.Us.updateAssignments()
            });
            p3.rV(o, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        },
        toggleDropBoxOnly: function(p) {
            var o = $(p.currentTarget);
            if (o.data("toggleOn") === true) {
                p3.Data.LMS.AssignmentFilters.onlyDropbox = true
            } else {
                p3.Data.LMS.AssignmentFilters.onlyDropbox = undefined
            }
        }
    });
    b.Vs.AssignmentFilterStudentView = Bb.View.extend({
        template: "classassignment/assignmentfilter.template.student.html",
        className: "ch",
        filterRange: {
            previous: false,
            active: true,
            future: false,
            daterange: false
        },
        events: {
            "click .assignment-type-filter": "setAssignmentTypes",
            "click .status-type-filter": "setStatusFilter",
            "click .assignment-time-filter": "setFilterRange",
            "change #assignmentFilterStartDatePicker": "setDateRange",
            "change #assignmentFilterEndDatePicker": "setDateRange",
            "click #assignment-reports-list-toggle": "toggleReports"
        },
        initialize: function(o) {
            this.collection.bind("reset change", this.renderTemplate, this);
            this.showDateRanges(false);
            b.Us.FetchAssignmentTypes(o.sectionId);
            this.filterRange.previous = false;
            this.filterRange.active = true;
            this.filterRange.future = false;
            this.filterRange.daterange = false
        },
        renderTemplate: function() {
            var r = this;
            var q = false;
            var t = "";
            var p = false;
            var s = "";
            var o = false;
            p3.fT(r.template, function(x) {
                var v = p3.Data.Context.findByTaskRef("AssignmentCalendar:Run:0");
                r.$el.html(x({
                    assignmentTypes: r.collection.toJSON(),
                    previous: r.filterRange.previous,
                    active: r.filterRange.active,
                    future: r.filterRange.future,
                    daterange: r.filterRange.daterange,
                    leadSectionId: r.options.sectionId,
                    hasGrade: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK) || p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADING),
                    hasaccess: v,
                    hasAccessToReport: p,
                    viewReportLink: t,
                    hasAccessTo2ndReport: o,
                    view2ndReportLink: s,
                    showreportsbutton: q,
                    showStatusFilter: p3.Data.Context.getSelectedPersona().Id === 2,
                    assessments: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSESSMENTS)
                }));
                var w = $(".assignment-type-filter:first").closest("ul").find("i"),
                    u = $(".assignment-type-filter:first").find("i");
                if (w.length > 0) {
                    _.each(w, function(y) {
                        $(y).removeClass("p3icon-ok").addClass("p3icon-check");
                        $(y).closest("div").removeClass("active-filter").addClass("inactive-filter")
                    });
                    u.removeClass("p3icon-check").addClass("p3icon-ok");
                    u.closest("div").removeClass("inactive-filter").addClass("active-filter")
                }
                r.showDateRanges(r.filterRange.daterange);
                g.Us.initialize("#assignmentFilterStartDatePicker", {
                    changeMonth: true,
                    changeYear: true
                });
                g.Us.initialize("#assignmentFilterEndDatePicker", {
                    changeMonth: true,
                    changeYear: true
                })
            })
        },
        render: function(o) {
            var p = this;
            $(o).append(p.el)
        },
        setAssignmentTypes: function(t) {
            t.preventDefault();
            var r = $(t.currentTarget),
                o = r.find("i"),
                q = r.closest("ul"),
                p = r.closest("ul").find("li"),
                x = r.data("typeId"),
                s = false;
            if (x === -1) {
                var u = q.find("i");
                if (u.length > 0) {
                    _.each(u, function(y) {
                        $(y).removeClass("p3icon-ok").addClass("p3icon-check");
                        $(y).closest("div").removeClass("active-filter").addClass("inactive-filter")
                    });
                    o.removeClass("p3icon-check").addClass("p3icon-ok");
                    o.closest("div").removeClass("inactive-filter").addClass("active-filter")
                }
                s = true
            } else {
                q.find("i:first").removeClass("p3icon-ok").addClass("p3icon-check");
                q.find("i:first").closest("div").removeClass("active-filter").addClass("inactive-filter");
                if (o.hasClass("p3icon-ok")) {
                    o.removeClass("p3icon-ok").addClass("p3icon-check");
                    o.closest("div").removeClass("active-filter").addClass("inactive-filter")
                } else {
                    o.removeClass("p3icon-check").addClass("p3icon-ok");
                    o.closest("div").removeClass("inactive-filter").addClass("active-filter")
                }
                if (q.find("i.p3icon-ok").length === 0) {
                    q.find("i:first").removeClass("p3icon-check").addClass("p3icon-ok");
                    q.find("i:first").closest("div").removeClass("inactive-filter").addClass("active-filter");
                    s = true
                }
            }
            var v = "";
            if (this.options.assignments) {
                if (!s) {
                    var w = p.find(".p3icon-ok");
                    _.each(w, function(y) {
                        if (v.length > 0) {
                            v += ","
                        }
                        v += $(y).closest("a").data("typeId")
                    })
                }
            }
            this.options.assignments.setAssignTypeFilter(v);
            b.Us.updateAssignments()
        },
        setStatusFilter: function(t) {
            t.preventDefault();
            var r = $(t.currentTarget),
                o = r.find("i"),
                q = r.closest("ul"),
                p = r.closest("ul").find("li"),
                x = r.data("statusId"),
                v = "",
                s = false;
            if (x === -2) {
                var u = q.find("i");
                if (u.length > 0) {
                    _.each(u, function(y) {
                        $(y).removeClass("p3icon-ok").addClass("p3icon-check");
                        $(y).closest("div").removeClass("active-filter").addClass("inactive-filter")
                    });
                    o.removeClass("p3icon-check").addClass("p3icon-ok");
                    o.closest("div").removeClass("inactive-filter").addClass("active-filter")
                }
                s = true
            } else {
                q.find("i:first").removeClass("p3icon-ok").addClass("p3icon-check");
                q.find("i:first").closest("div").removeClass("active-filter").addClass("inactive-filter");
                if (o.hasClass("p3icon-ok")) {
                    o.removeClass("p3icon-ok").addClass("p3icon-check");
                    o.closest("div").removeClass("active-filter").addClass("inactive-filter")
                } else {
                    o.removeClass("p3icon-check").addClass("p3icon-ok");
                    o.closest("div").removeClass("inactive-filter").addClass("active-filter")
                }
                if (q.find("i.p3icon-ok").length === 0) {
                    q.find("i:first").removeClass("p3icon-check").addClass("p3icon-ok");
                    q.find("i:first").closest("div").removeClass("inactive-filter").addClass("active-filter");
                    s = true
                }
            }
            if (this.options.assignments) {
                if (!s) {
                    var w = p.find(".p3icon-ok");
                    _.each(w, function(y) {
                        if (v.length > 0) {
                            v += ","
                        }
                        v += $(y).closest("a").data("statusId")
                    })
                }
            }
            this.options.assignments.setStatusFilter(v);
            b.Us.updateAssignments()
        },
        setFilterRange: function(r) {
            r.preventDefault();
            var q = $(r.currentTarget),
                o = q.find("i"),
                p = q.closest("ul"),
                s = p.find("i"),
                t = q.data("typeId");
            if (s.length > 0) {
                _.each(s, function(u) {
                    $(u).removeClass("p3icon-radioOn").addClass("p3icon-radioOff");
                    $(u).closest("div").removeClass("active-filter").addClass("inactive-filter")
                });
                o.removeClass("p3icon-radioOff").addClass("p3icon-radioOn");
                o.closest("div").removeClass("inactive-filter").addClass("active-filter")
            }
            this.filterRange.previous = false;
            this.filterRange.active = false;
            this.filterRange.future = false;
            this.filterRange.daterange = false;
            if (this.options.assignments) {
                if (t == 3) {
                    this.options.assignments.setDateSortFilter(null);
                    this.filterRange.daterange = true;
                    this.showDateRanges(true)
                } else {
                    this.options.assignments.setDateSortFilter(t);
                    switch (t) {
                        case 0:
                            this.filterRange.previous = true;
                            break;
                        case 1:
                            this.filterRange.active = true;
                            break;
                        case 2:
                            this.filterRange.future = true;
                            break
                    }
                    this.showDateRanges(false)
                }
            }
            b.Us.updateAssignments()
        },
        setDateRange: function() {
            var q = $("#assignmentFilterStartDatePicker");
            var o = $("#assignmentFilterEndDatePicker");
            var r = q.attr("value") || $(q).datepicker("getDate");
            var p = o.attr("value") || $(o).datepicker("getDate");
            if (r !== null && p !== null && !$(q).hasClass("invalid") && !$(o).hasClass("invalid")) {
                this.options.assignments.setStartDateFilter(f.getDateString(r).ApiFormat());
                this.options.assignments.setEndDateFilter(f.getDateString(p).ApiFormat());
                b.Us.updateAssignments()
            }
        },
        showDateRanges: function(o) {
            if (o == false) {
                $("#assignmentFilterStartDatePicker").attr("disabled", "disabled");
                $("#assignmentFilterEndDatePicker").attr("disabled", "disabled");
                $("#assignmentFilterStartDatePicker").siblings("label").removeClass("active-filter").addClass("inactive-filter");
                $("#assignmentFilterEndDatePicker").siblings("label").removeClass("active-filter").addClass("inactive-filter")
            } else {
                $("#assignmentFilterStartDatePicker").removeAttr("disabled");
                $("#assignmentFilterEndDatePicker").removeAttr("disabled");
                $("#assignmentFilterStartDatePicker").siblings("label").removeClass("inactive-filter").addClass("active-filter");
                $("#assignmentFilterEndDatePicker").siblings("label").removeClass("inactive-filter").addClass("active-filter")
            }
        },
        toggleReports: function(o) {
            o.preventDefault();
            $("#reports-collapse").collapse("toggle")
        }
    });
    b.Vs.PublishChangeConfirmation = Bb.View.extend({
        template: "classassignment/AssignmentPublishChange.template.html",
        update: false,
        events: {
            "click #btnConfirm": "doPublishChange"
        },
        initialize: function(o) {
            b.Data.ConfirmBox = this
        },
        render: function(o) {
            $(o).append(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var o = this;
            p3.fT(o.template, function(q) {
                var p = [];
                _.each(o.options.Sections, function(r) {
                    p.push({
                        aiid: r.AssignmentIndexId,
                        name: r.Section.Name
                    })
                });
                o.$el.html(q({
                    Sections: p,
                    showRadios: p.length > 1 ? true : false
                }))
            })
        },
        resetDefault: function() {
            if (!b.Data.ConfirmBox.update) {
                var o = $(b.Data.ConfirmBox.options.target).data("lastValue");
                if (o !== undefined) {
                    $(b.Data.ConfirmBox.options.target).val(o)
                }
            }
            b.Data.ConfirmBox = undefined;
            $(p3.Layout.Containers.Modal).off("hide", this.resetDefault)
        },
        doPublishChange: function(r) {
            var w = this,
                u = $("#rdo_remove").filter(":checked"),
                q = $("#rdo_delete").filter(":checked"),
                s = $("#showRadios").length > 0 ? true : false,
                v = $("table#sectionsToChange"),
                t, o;
            this.update = true;
            if (s && w.options.PublishOpt) {
                if (u.length) {
                    t = new b.Ms.PublishAssignment();
                    o = $(w.options.target).data("aiid");
                    if (o && w.options.PublishOpt !== undefined) {
                        t.fetch({
                            data: {
                                assignmentIndexId: o,
                                publishInd: w.options.PublishOpt
                            },
                            success: function(x, y) {
                                $("#site-modal").modal("hide");
                                b.Data.assignments.fetch()
                            },
                            error: function(x, y) {
                                p3.displayError("Failed to save changes to the server")
                            }
                        })
                    }
                } else {
                    if (q.length) {
                        var p = "";
                        t = new b.Ms.PublishAssignment();
                        _.each($(v).children("tbody").children("tr"), function(x) {
                            if (p.length > 0) {
                                p += ","
                            }
                            p += $(x).data("aiid")
                        });
                        if (p && w.options.PublishOpt !== undefined) {
                            t.fetch({
                                data: {
                                    assignmentIndexId: p,
                                    publishInd: w.options.PublishOpt
                                },
                                success: function(x, y) {
                                    $("#site-modal").modal("hide");
                                    b.Data.assignments.fetch()
                                },
                                error: function(x, y) {
                                    p3.displayError("Failed to save changes to the server")
                                }
                            })
                        }
                    }
                }
            }
        },
        showToggleContent: function(o) {
            $(o.target).parent().siblings(".content").slideToggle();
            return false
        },
        assignmentTypeDefaultMaxPoint: function(p) {
            var o = _.first(b.Data.Types.where({
                AssignmentTypeId: parseInt($(p.target).val(), 10)
            }));
            if (o) {
                this.$el.find("#add-assignment-gradebook-max-points").val(o.get("DefaultMaxPoints"))
            }
        }
    });
    b.Vs.DeleteAssignmentModalView = Bb.View.extend({
        template: "classassignment/assignmentdeletemodal.template.html",
        events: {
            "click #assignment-delete-cancel-button": "doCancel",
            "click #assignment-delete-confirm-button": "doAssignmentDelete",
            "click .close": "doCancel"
        },
        renderTemplate: function() {
            var q = this,
                p = q.collection.toJSON(),
                o = true;
            p3.fT(q.template, function(x) {
                var s = q.collection.filter(function(A) {
                        return A.get("HasGrades") === true
                    }),
                    t = q.collection.filter(function(A) {
                        return A.get("HasGradeDetails") === true
                    }),
                    u = q.collection.filter(function(A) {
                        return A.get("HasGradeValues") === true
                    }),
                    y = q.collection.filter(function(A) {
                        return A.get("DropBoxSubmitted") === true
                    }),
                    w = q.collection.filter(function(A) {
                        return A.get("HasAssessmentResults") === true
                    }),
                    v = q.isAssessment ? "Assessment" : "Assignment",
                    z = q.isAssessment ? "assessment" : "assignment",
                    r = "<p>To delete this " + z + ' leave "Remove" checked for all class sections listed and click "Confirm."</p><p>To only remove this ' + z + ' from specific class sections, uncheck "Remove" in list below for the sections that should keep this ' + z + ' and click "Confirm."</p>';
                if (q.isAssessment) {
                    if (u.length > 0) {
                        p = [];
                        o = false;
                        q.collection.each(function(A) {
                            if (A.get("HasGradeValues")) {
                                p.push(A.toJSON())
                            }
                        })
                    }
                    q.$el.html(x({
                        Sections: p,
                        AllowDelete: o,
                        header: v
                    }));
                    if (u.length > 0) {
                        p3.Us.InfoMessage.ErrorBox("<p>Whoops! We can't let you delete this " + z + "! Grades have been recorded for the following course sections. You must open the Gradebook and delete those grades before we'll let you delete this assessment forever.</p>", "#delete-confirm-modal-errors", false)
                    } else {
                        if (w.length > 0) {
                            p3.Us.InfoMessage.ErrorBox("<p>Yikes! There are student submissions associated with this " + z + ". Are you sure you want to delete it and lose those answers forever? Once you hit confirm there is no undo button. </p>" + r, "#delete-confirm-modal-errors", false)
                        } else {
                            if (t.length > 0) {
                                p3.Us.InfoMessage.ErrorBox("<p>Yikes! We are seeing some grade details on this " + z + ". Are you really sure you want to delete it and lose those details forever? You can review the details in the Gradebook.</p>" + r, "#delete-confirm-modal-errors", false)
                            } else {
                                p3.Us.InfoMessage.ErrorBox("<p>Wait a minute! Are you sure you want to delete this " + z + " forever? Once you hit confirm there is no undo button.</p>" + r, "#delete-confirm-modal-errors", false)
                            }
                        }
                    }
                } else {
                    if (s.length > 0) {
                        p = [];
                        o = false;
                        q.collection.each(function(A) {
                            if (A.get("HasGrades")) {
                                p.push(A.toJSON())
                            }
                        })
                    } else {
                        if (w.length > 0) {
                            p = [];
                            o = false;
                            q.collection.each(function(A) {
                                if (A.get("HasAssessmentResults")) {
                                    p.push(A.toJSON())
                                }
                            })
                        }
                    }
                    q.$el.html(x({
                        Sections: p,
                        AllowDelete: o,
                        header: v
                    }));
                    if (s.length > 0) {
                        p3.Us.InfoMessage.ErrorBox("<p>Whoops! We can't let you delete this " + z + "! Grades have been recorded for the following course sections.</p>", "#delete-confirm-modal-errors", false)
                    } else {
                        if (w.length > 0) {
                            p3.Us.InfoMessage.ErrorBox("<p>Whoops! We can't let you delete this " + z + "! Results have been recorded for the following course sections.</p>", "#delete-confirm-modal-errors", false)
                        } else {
                            if (y.length > 0) {
                                p3.Us.InfoMessage.ErrorBox(p3.Us.InfoMessageLibrary.Assignment.AssignmentDeleteAssociatedSubmissions, "#delete-confirm-modal-errors", false)
                            } else {
                                p3.Us.InfoMessage.ErrorBox("<p>Wait a minute! Are you sure you want to delete this " + z + " forever? Once you hit confirm there is no undo button.</p>" + r, "#delete-confirm-modal-errors", false)
                            }
                        }
                    }
                }
            })
        },
        initialize: function() {
            this.collection.bind("reset change", this.renderTemplate, this);
            this.assignmentId = this.options.assignmentId || 0;
            this.isAssessment = this.options.isAssessment || false;
            this.container = this.options.container || p3.Layout.Containers.Modal
        },
        render: function(o) {
            $(o).append(this.el);
            if (this.options.container) {
                $(".modal-backdrop").css("z-index", "1101")
            }
        },
        doAssignmentDelete: function() {
            var t = this,
                p;
            if (this.assignmentId > 0) {
                var q = "",
                    s = false,
                    r = $("#assignment-sections-to-delete-list tr");
                for (p = 0; p < r.length; p++) {
                    if ($($(r[p]).children("td:last").children()).is(":checked")) {
                        q += $($(r[p]).children("td:last").children()).val() + ","
                    } else {
                        s = true
                    }
                }
                if (q && q.length > 0) {
                    q = q.substr(0, q.length - 1)
                }
                var o = new b.Ms.AssignmentDelete({
                    Id: this.assignmentId,
                    sections: s ? q : null
                });
                o.destroy({
                    error: function() {
                        t.container.modal("hide")
                    },
                    success: function() {
                        t.trigger("assignmentDeleted");
                        t.doCancel()
                    }
                })
            }
            return false
        },
        doCancel: function(o) {
            if (o !== undefined) {
                o.preventDefault()
            }
            this.$el.parent().modal("hide");
            if (this.container) {
                $("#confirm-modal").remove();
                $(".modal-backdrop").css("z-index", "1100")
            }
        }
    });
    b.Vs.ImportAssignments = Bb.View.extend({
        template: "classassignment/import.asignment.template.html",
        events: {
            "change #school-year-dd": "yearChanged",
            "change #teacher-dd": "teacherChanged",
            "change #section-dd": "sectionChanged",
            "change #marking-dd": "markingPeriodChanged",
            "click #btnApply": "saveAssignments"
        },
        initialize: function() {
            var o = this;
            o.leadSectionId = o.options.leadSectionId;
            p3.Layout.Containers.Modal.on("shown", function() {
                window.setTimeout(function() {
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                }, 300)
            });
            o.options.schoolYears.each(function(p) {
                if (p.get("Current")) {
                    o.activeYear = p.get("Label")
                }
            });
            o.Containers = {};
            o.activeTeacher = p3.Data.Context.get("UserInfo").UserId
        },
        render: function(o) {
            var t = this,
                r = 0,
                q = "";
            if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK)) {
                var p = new b.Cs.MarkingPeriods();
                p.fetch({
                    async: false,
                    data: {
                        sectionList: t.leadSectionId
                    },
                    success: function(u, v) {
                        q = "<strong>Marking Periods:</strong><div style='margin-top:5px;'>";
                        p.each(function(A) {
                            var w = A.get("begin_date"),
                                y = A.get("end_date");
                            if (typeof w === "string" && typeof y === "string") {
                                var x = w.substring(0, w.indexOf(" ")),
                                    z = y.substring(0, y.indexOf(" "));
                                q += A.get("marking_period_description") + ": " + x + " - " + z + "<br />"
                            }
                        });
                        q += "</div>"
                    },
                    error: function(u, v) {
                        p3.displayError("Failed to retreive the Marking Periods")
                    }
                })
            }
            var s = new b.Cs.ExistingTeachers();
            s.fetch({
                data: {
                    schoolYear: t.activeYear
                },
                success: function(u, x, w) {
                    var y = new b.Cs.ExistingSections(),
                        v;
                    y.fetch({
                        data: {
                            facultyUserId: t.activeTeacher,
                            schoolYear: t.activeYear
                        },
                        success: function(A, C) {
                            var z = A.toJSON();
                            z = _.uniq(z, true, function(D) {
                                return D.SectionId
                            });
                            if (z.length > 0) {
                                for (v = 0; v < z.length; v++) {
                                    if (z[v].SectionId == t.leadSectionId) {
                                        z.splice(v, 1);
                                        break
                                    }
                                }
                                if (z.length > 0) {
                                    r = z[0].SectionId
                                }
                            }
                            var B = new b.Cs.ExistingMarkingPeriods();
                            B.fetch({
                                data: {
                                    sectionId: r
                                },
                                success: function(D, F, E) {
                                    p3.fT(t.template, function(H) {
                                        t.$el.html(H({
                                            schoolYears: t.options.schoolYears.toJSON(),
                                            teachers: u.toJSON(),
                                            sections: z,
                                            currentSections: t.options.currentSections.toJSON(),
                                            markingPeriods: [{
                                                Name: "-- All --",
                                                mpId: -1
                                            }].concat(B.toJSON()),
                                            mpMessage: q
                                        }));
                                        $(o).html(t.el);
                                        $("#teacher-dd").val(t.activeTeacher);
                                        t.Containers.Assignments = $("#import-content-container");
                                        var G = new b.Cs.ImportAssignments();
                                        if (r > 0) {
                                            G.fetch({
                                                data: {
                                                    sectionId: r
                                                },
                                                success: function() {
                                                    t.renderAssignments(G)
                                                },
                                                error: function() {
                                                    p3.displayError("Error retreiving existing assignments.")
                                                }
                                            })
                                        } else {
                                            t.renderAssignments(G)
                                        }
                                    })
                                }
                            })
                        }
                    })
                },
                error: function(u, v) {
                    p3.displayError("Error retreiving sections.")
                }
            })
        },
        renderAssignments: function(o) {
            var q = this;
            var p = new b.Vs.ImportAssignmentList({
                assignments: o
            });
            q.listView = p;
            p3.rV(p, q.Containers.Assignments, true);
            p3.initModalHeightTimer(q.Containers.Assignments)
        },
        yearChanged: function(o) {
            var q = this;
            q.activeYear = $("#school-year-dd").val();
            $("#teacher-dd").empty();
            var p = new b.Cs.ExistingTeachers();
            p.fetch({
                data: {
                    schoolYear: q.activeYear
                },
                success: function(s, v, u) {
                    if (s.length > 0) {
                        var t = false;
                        s.each(function(r) {
                            var w = r.get("Id") === q.activeTeacher;
                            $("<option />", {
                                text: r.get("Name"),
                                val: r.get("Id"),
                                selected: w
                            }).appendTo("#teacher-dd");
                            if (w) {
                                t = true
                            }
                        });
                        if (!t) {
                            $("#teacher-dd").val(p3.Data.Context.get("UserInfo").UserId);
                            if ($("#teacher-dd").val() !== p3.Data.Context.get("UserInfo").UserId) {
                                $("#teacher-dd > option:first").attr("selected", true)
                            }
                        }
                    } else {
                        $("#section-dd").empty()
                    }
                    $("#teacher-dd").trigger($.Event("change"))
                }
            })
        },
        teacherChanged: function(p) {
            var t = this,
                r = 0,
                o = $(p.currentTarget),
                q;
            t.activeTeacher = parseInt(o.val(), 10) || t.activeTeacher || 0;
            $("#section-dd").empty();
            var s = new b.Cs.ExistingSections();
            s.fetch({
                data: {
                    facultyUserId: t.activeTeacher,
                    schoolYear: t.activeYear
                },
                success: function(v, w) {
                    var u = v.toJSON();
                    u = _.uniq(u, true, function(x) {
                        return x.SectionId
                    });
                    if (u.length > 0) {
                        for (q = 0; q < u.length; q++) {
                            if (u[q].SectionId != t.leadSectionId) {
                                if (r == 0) {
                                    r = u[q].SectionId
                                }
                                $("<option />", {
                                    val: u[q].SectionId,
                                    text: u[q].Name
                                }).appendTo("#section-dd")
                            }
                        }
                    }
                    t.updateAssignments(r);
                    $("#section-dd").trigger($.Event("change"))
                },
                error: function(u, v) {
                    p3.displayError("Error retreiving sections.")
                }
            })
        },
        sectionChanged: function(o) {
            var s = this,
                r = $("#section-dd").val(),
                p = 0,
                q = new b.Cs.ExistingMarkingPeriods();
            $("#marking-dd").empty();
            q.fetch({
                data: {
                    sectionId: r
                },
                success: function(u, x, w) {
                    var t = u.toJSON(),
                        v;
                    t = [{
                        Name: "-- All --",
                        mpId: -1
                    }].concat(_.uniq(t, true, function(y) {
                        return y.mpId
                    }));
                    if (t.length > 0) {
                        for (v = 0; v < t.length; v++) {
                            if (p === 0) {
                                p = t[v].mpId
                            }
                            $("<option />", {
                                val: t[v].mpId,
                                text: t[v].Name
                            }).appendTo("#marking-dd")
                        }
                    }
                    s.updateAssignments(r, p === -1 ? undefined : p)
                }
            })
        },
        markingPeriodChanged: function(o) {
            var p = this;
            p.updateAssignments($("#section-dd").val(), $("#marking-dd").val())
        },
        updateAssignments: function(q, p) {
            var r = this,
                o = new b.Cs.ImportAssignments();
            if (q > 0) {
                o.fetch({
                    async: false,
                    data: {
                        sectionId: q,
                        markingPeriodId: (p !== undefined && p > 0 ? p : undefined)
                    },
                    success: function() {
                        r.listView.assignments = o;
                        r.listView.renderTemplate()
                    },
                    error: function() {
                        p3.displayError("Error retreiving existing assignments.")
                    }
                })
            } else {
                o.remove(o.at(0));
                r.listView.assignments = o;
                r.listView.renderTemplate()
            }
        },
        saveAssignments: function(q) {
            var y = this;
            var x = true;
            var v = true;
            var w = true;
            var u = [];
            var p = [],
                r, o;
            $("div.alert-error").remove();
            if ($(".btn-select-item.active").length == 0) {
                x = false;
                v = false
            }
            if ($(".section-checkbox:checked").length == 0) {
                x = false;
                w = false
            } else {
                $(".section-checkbox:checked").each(function() {
                    u.push($(this).val())
                })
            }
            if (!x) {
                var s = "Please select ";
                if (!v && !w) {
                    s += "at least one assignment and a section to add it to."
                } else {
                    if (!v) {
                        s += "at least one assignment."
                    } else {
                        s += "at least one section to add assignments to."
                    }
                }
                p3.Us.InfoMessage.ErrorBox(s, "#import-content-container", false);
                $("#site-modal .modal-body").scrollTop(1)
            } else {
                $(".btn-select-item.active").each(function() {
                    for (r = 0; r < u.length; r++) {
                        o = $(this).data("item");
                        if ($("#pub-date-" + o).val().length > 0) {
                            p.push({
                                AssignmentId: o,
                                SectionId: u[r],
                                AssignmentDate: $("#pub-date-" + o).val(),
                                AssignmentTime: f.displayTime(f.buildTimeString(0, 0, 0), true, "timeSpan"),
                                DueDate: $("#exp-date-" + o).val() || $("#pub-date-" + o).val(),
                                DueTime: f.buildTimeString(23, 59, 0),
                                PublishInd: true,
                                PublishOnAssignedInd: false
                            })
                        } else {
                            x = false
                        }
                    }
                });
                if (x) {
                    var t = new b.Ms.ExistingAssignment({
                        AssignmentId: 0,
                        SectionLinks: p,
                        SendNotification: false
                    });
                    t.save({}, {
                        error: function() {
                            p3.showModal(p3.Layout.Containers.Modal, "hide");
                            p3.displayError("Error importing assignments")
                        },
                        success: function() {
                            y.trigger("save");
                            p3.showModal(p3.Layout.Containers.Modal, "hide")
                        }
                    })
                } else {
                    p3.Us.InfoMessage.ErrorBox("An assigned date is required for each assignment being imported.", "#import-content-container", false);
                    $("#site-modal .modal-body").scrollTop(1)
                }
            }
        }
    });
    b.Vs.ImportAssignmentList = Bb.View.extend({
        template: "classassignment/import.assignment.list.template.html",
        itemTemplate: "classassignment/import.assignment.list.item.template.html",
        events: {
            "click .type-toggle": "toggleType",
            "click .select-all-type": "selectAllType",
            "click .btn-select-item": "selectItem",
            "click th.header-sort-item": "updateFilter",
            'blur [id*="exp-date-"]': "triggerCacheUpdate",
            'blur [id*="pub-date-"]': "triggerCacheUpdate"
        },
        renderTemplate: function() {
            var p = this;
            var o = [];
            p3.fT(p.template, function(q) {
                p.$el.html(q({
                    assignType: o,
                    haveData: p.assignments.length > 0
                }));
                window.setTimeout(function() {
                    if (p.CurrentSort === undefined) {
                        p.CurrentSort = "title_no_html_invert"
                    }
                    var r = p.CurrentSort.indexOf("_invert"),
                        s = p.CurrentSort;
                    if (r > -1) {
                        s = p.CurrentSort.substring(0, r)
                    }
                    $("th.header-sort-item[data-sort=" + s + "]").trigger($.Event("click"))
                }, 500)
            })
        },
        renderItems: function() {
            var p = this,
                o = $("#import-assignment-list-table-body");
            o.html("");
            p.assignments.each(function(q) {
                p3.fT(p.itemTemplate, function(r) {
                    o.append(r({
                        assignment: q.toJSON()
                    }))
                })
            });
            $("#import-assignment-list-table-body button").removeClass("active");
            _.each(p.selectedAssignments, function(q) {
                if (q.sel) {
                    $("#import-assignment-list-table-body button[data-item=" + q.id + "]").addClass("active")
                } else {
                    $("#import-assignment-list-table-body button[data-item=" + q.id + "]").removeClass("active")
                }
                $("#exp-date-" + q.id).val(q.dd);
                $("#pub-date-" + q.id).val(q.da)
            });
            p3.initModalHeightTimer(p3.Layout.Containers.Modal);
            window.setTimeout(function() {
                g.Us.initialize(".date-input", {
                    changeMonth: true,
                    changeYear: true
                })
            }, 400)
        },
        initialize: function() {
            var o = this;
            o.assignments = o.options.assignments;
            o.assignments.changeSort("title_no_html");
            o.selectedAssignments = []
        },
        render: function(o) {
            this.renderTemplate();
            $(o).append(this.el)
        },
        toggleType: function(p) {
            var o = $(p.currentTarget);
            var q = o.data("type");
            if ($("#type" + q).is(":visible")) {
                $("#type" + q).hide(200);
                o.find(".p3icon-downArrow").removeClass("p3icon-downArrow").addClass("p3icon-sideArrow")
            } else {
                $("#type" + q).show(200);
                o.find(".p3icon-sideArrow").removeClass("p3icon-sideArrow").addClass("p3icon-downArrow")
            }
        },
        selectAllType: function(q) {
            var s = this,
                p = $(q.currentTarget),
                r = p.data("type"),
                o = $(".btn-select-item[data-type='" + r + "']");
            if (p.hasClass("active")) {
                o.removeClass("active");
                o.each(function(t, u) {
                    s.cacheManageEdit($(u).data("item"), false)
                })
            } else {
                o.addClass("active");
                o.each(function(t, u) {
                    s.cacheManageEdit($(u).data("item"), true)
                });
                if (!$("#type" + r).is(":visible")) {
                    $("#type" + r).show(200);
                    $(".type-toggle[data-type='" + r + "']").find(".p3icon-sideArrow").removeClass("p3icon-sideArrow").addClass("p3icon-downArrow")
                }
            }
        },
        selectItem: function(p) {
            var o = $(p.currentTarget),
                r = o.data("type"),
                q = o.data("item"),
                s = this;
            if (o.hasClass("active")) {
                $(".select-all-type[data-type='" + r + "']").removeClass("active");
                s.cacheManageEdit(q, false)
            } else {
                if ($(".btn-select-item.active[data-type='" + r + "']").length + 1 == $(".btn-select-item[data-type='" + r + "']").length) {
                    $(".select-all-type[data-type='" + r + "']").addClass("active")
                }
                s.cacheManageEdit(q, true)
            }
        },
        cacheManageEdit: function(r, s) {
            var u = $("button[data-item=" + r + "]").hasClass("active"),
                q = $("#exp-date-" + r).val(),
                o = $("#pub-date-" + r).val(),
                t = this.selectedAssignments,
                p = _.find(t, function(v) {
                    return v.id === r
                });
            if (s !== undefined) {
                u = s
            }
            if (q === "" && o === "" && u === false) {
                this.cacheRemoveEdit(r)
            }
            if (p === undefined || p === null) {
                t.push({
                    id: r,
                    sel: u,
                    dd: q,
                    da: o
                })
            } else {
                p.sel = u;
                p.dd = q;
                p.da = o
            }
        },
        cacheRemoveEdit: function(p) {
            var q = this.selectedAssignments,
                o = _.find(q, function(r) {
                    return r.id === p
                });
            if (o !== undefined) {
                q.splice(q.indexOf(o), 1)
            }
        },
        updateFilter: function(p) {
            var r = this;
            var o = (p.currentTarget !== undefined && p.currentTarget !== null) ? $(p.currentTarget) : undefined;
            var q = (o !== undefined && o !== null) ? o.data("sort") : undefined;
            if (r.assignments.filters === undefined) {
                r.assignments.filters = {
                    title_no_html: function(u, v) {
                        var s = u.get("title_no_html") || "",
                            t = v.get("title_no_html") || "";
                        return s < t ? -1 : s > t ? 1 : 0
                    },
                    assignment_type: function(u, v) {
                        var s = u.get("assignment_type") || "",
                            t = v.get("assignment_type") || "";
                        return s < t ? -1 : s > t ? 1 : 0
                    },
                    date_assigned: function(s) {
                        return s.get("date_assigned") ? f.getDate(s.get("date_assigned")).getTime() : 0
                    },
                    date_due: function(s) {
                        return s.get("date_due") ? f.getDate(s.get("date_due")).getTime() : 0
                    },
                    title_no_html_invert: function(u, v) {
                        var s = u.get("title_no_html") || "",
                            t = v.get("title_no_html") || "";
                        return s < t ? 1 : s > t ? -1 : 0
                    },
                    assignment_type_invert: function(u, v) {
                        var s = u.get("assignment_type") || "",
                            t = v.get("assignment_type") || "";
                        return s < t ? 1 : s > t ? -1 : 0
                    },
                    date_assigned_invert: function(s) {
                        return s.get("date_assigned") ? -f.getDate(s.get("date_assigned")).getTime() : 0
                    },
                    date_due_invert: function(s) {
                        return s.get("date_due") ? -f.getDate(s.get("date_due")).getTime() : 0
                    }
                }
            }
            $(".sort-icon").removeClass("p3icon-sortDown p3icon-sortUp p3icon-sortOff");
            $(".sort-icon").addClass("p3icon-sortOff");
            $(".existing-table-sort").removeClass("sort-active").addClass("muted");
            if (q !== undefined) {
                if (r.CurrentSort === q) {
                    q = q + "_invert";
                    o.removeClass("muted").addClass("sort-active");
                    o.children("i").removeClass("p3icon-sortOff").addClass("p3icon-sortUp")
                } else {
                    o.removeClass("muted").addClass("sort-active");
                    o.children("i").removeClass("p3icon-sortOff").addClass("p3icon-sortDown")
                }
                r.CurrentSort = q;
                r.assignments.changeSort(q);
                r.assignments.sort();
                r.renderItems()
            }
        },
        triggerCacheUpdate: function(o) {
            var p = $(o.currentTarget).closest("tr").find("button").data("item");
            if (p !== undefined && p > 0) {
                this.cacheManageEdit(p)
            }
        }
    });
    b.Vs.AssessmentEditView = Bb.View.extend({
        template: "ClassAssignment/Assessment.edit.template.html",
        events: {
            "click #btnSave": "saveAssessment",
            "click #btnSaveEdit": "saveAssessment",
            "click #show-more-groups": "showGroupDialog",
            "change #assignment-type-drop": "assignmentTypeDefaultMaxPoint",
            "click #publish-options-apply-selected-button": "doApplyToSelected",
            "click #all_types_check": "refreshTypes",
            "click .select-all-check": "doSelectionToggle",
            "change #max-point-box": "pointsChange",
            "change #max-score-box": "scoreChange",
            "click #gradebook-check": "toggleGradeBook",
            "change .default-value-change": "highlightApplyToSelected",
            "blur .default-time-value-blur": "highlightApplyToSelected"
        },
        initialize: function() {
            this.contentId = 58;
            this.markingPeriods = new b.Cs.MarkingPeriods()
        },
        dispose: function() {
            var o = tinyMCE.get("description-box");
            if (o) {
                o.remove()
            }
            if (this.emptysections) {
                b.Data.TeacherSections = undefined
            }
        },
        render: function(o) {
            var p = this;
            $(o).html(p.el);
            p.renderTemplate()
        },
        renderTemplate: function() {
            var o = this;
            b.Us.RenderEditModal(o, "name-box")
        },
        validated: function() {
            var B = this;
            var x = tinyMCE.get("name-box");
            x.save();
            var y = [],
                z = $("#gradebook-check:checked").length == 1 ? true : false,
                w = $("#assignment-type-drop"),
                o = $("#abbrev-box"),
                r = $("#max-point-box"),
                p = $("#factor-box"),
                v = $("#name-box"),
                t = $(".add-assignment-section-selector:checked"),
                u = $("#time-box"),
                s = $("#max-score-box");
            if (v.val() === "") {
                if (y.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                    y.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                }
                v.closest(".control-group").addClass("error")
            } else {
                v.closest(".control-group").removeClass("error")
            }
            if (z) {
                var q = o.closest(".controls").siblings("label:first"),
                    A = false;
                if (w.val() === "0") {
                    w.closest(".control-group").addClass("error");
                    A = true;
                    if (y.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) === -1) {
                        y.push(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields)
                    }
                } else {
                    w.closest(".control-group").removeClass("error")
                }
                if (o.val() === "") {
                    o.closest(".control-group").addClass("error");
                    A = false;
                    if (y.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) === -1) {
                        y.push(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields)
                    }
                } else {
                    o.closest(".control-group").removeClass("error")
                }
                if (r.val() !== "" && /^\d*(\.\d{1,})?$/.test(r.val())) {
                    r.closest(".control-group").removeClass("error");
                    if (r.val().toString().length > 6) {
                        r.val(r.val().substring(0, 6))
                    }
                } else {
                    r.closest(".control-group").addClass("error");
                    A = false;
                    if (y.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) === -1) {
                        y.push(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields)
                    }
                }
                if (p.val() !== "" && /^\d*(\.\d{1,})?$/.test(p.val()) && p.val() !== "0") {
                    p.closest(".control-group").removeClass("error");
                    if (p.val().toString().length > 6) {
                        p.val(p.val().substring(0, 6))
                    }
                } else {
                    p.closest(".control-group").addClass("error");
                    A = false;
                    if (y.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) === -1) {
                        y.push(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields)
                    }
                }
                if (y.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) !== -1) {
                    if (!A) {
                        q.addClass("error")
                    } else {
                        q.removeClass("error")
                    }
                } else {
                    q.removeClass("error")
                }
            }
            if (s.val() !== "" && /^\d*(\.\d{1,})?$/.test(s.val()) && s.val() !== "0") {
                s.closest(".control-group").removeClass("error")
            } else {
                s.closest(".control-group").addClass("error");
                if (y.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                    y.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                }
            }
            if ((/^\d*(\.\d{1,})?$/.test(u.val()) && u.val() !== "0") || u.val() == "") {
                u.closest(".control-group").removeClass("error")
            } else {
                u.closest(".control-group").addClass("error");
                if (y.indexOf("Invalid value, must be numeric and greater than zero.") === -1) {
                    y.push("Invalid value, must be numeric and greater than zero.")
                }
            }
            if (t.length > 0) {
                t.each(function(M) {
                    var C = $(this).closest("td").siblings("td:first").children("input:first"),
                        H = f.getDate(C.val());
                    if (isNaN(H)) {
                        C.closest(".control-group").addClass("error");
                        if (y.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                            y.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                        }
                    } else {
                        C.closest(".control-group").removeClass("error")
                    }
                    if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK) && B.markingPeriods.length > 0) {
                        var P = parseInt($(this).val(), 10),
                            N = false,
                            D = $("#" + P + "-due-date"),
                            J = D.val(),
                            I = f.getDate(J),
                            O = B.markingPeriods.filter(function(Q) {
                                return Q.get("section_id") === P
                            }),
                            G, E, L, F, K;
                        if (isNaN(I)) {
                            I = H
                        }
                        for (G = 0; G < O.length; G++) {
                            E = O[G].get("begin_date");
                            L = O[G].get("end_date");
                            if (typeof E === "string" && typeof L === "string") {
                                F = f.getDate(E);
                                K = f.getDate(L);
                                if (I <= K && I >= F) {
                                    N = true
                                }
                            }
                        }
                        if (!N) {
                            D.closest(".control-group").addClass("error");
                            if (y.indexOf(p3.Us.InfoMessageLibrary.Assignment.DueDateMustBeInMarkingPeriod) === -1) {
                                y.push(p3.Us.InfoMessageLibrary.Assignment.DueDateMustBeInMarkingPeriod)
                            }
                        } else {
                            D.closest(".control-group").removeClass("error")
                        }
                    }
                })
            } else {
                if (y.indexOf(p3.Us.InfoMessageLibrary.Assignment.SectionRequired) === -1) {
                    y.push(p3.Us.InfoMessageLibrary.Assignment.SectionRequired)
                }
            }
            return y
        },
        highlightApplyToSelected: function(o) {
            $("#publish-options-apply-selected-button").addClass("btn-primary");
            $("#publish-options-warning-message").show("slow")
        },
        saveAssessment: function(t) {
            var R = this,
                w = false;
            $(".modal-body").children(".alert").remove();
            var s = R.validated();
            if (s.length > 0) {
                _.each(s, function(S) {
                    p3.Us.InfoMessage.ErrorBox(S, ".modal-body", false);
                    w = true
                })
            }
            if (w) {
                $("#site-modal .modal-body").scrollTop(1);
                return false
            }
            var O = $("#name-box").val(),
                Q = $("#assignment-type-drop").val(),
                o = $("#abbrev-box").val(),
                A = $("#max-point-box").val(),
                v = $("#factor-box").val(),
                y = $("#gradebook-check:checked").length == 1 ? true : false,
                x = $("#cumulative-check:checked").length == 1 ? true : false,
                u = $("#extra-credit-check:checked").length == 1 ? true : false,
                G = $("#publish-grade-check:checked").length == 1 ? true : false,
                L = $(".add-assignment-section-selector:checked"),
                B = $("#max-score-box").val(),
                C = $("#score_type_dropdown").val(),
                E = $("#attempts-box").val(),
                N = $("#time-box").val(),
                H = $("#random-radio").hasClass("active"),
                P = $("#together-button").hasClass("active"),
                I = $("#allow-save-radio").hasClass("active"),
                z, D = [];
            var M = [];
            var J = $(L[z]).closest("td").nextAll("td"),
                p, r, F, K, q;
            for (z = 0; z < L.length; z++) {
                J = $(L[z]).closest("td").nextAll("td");
                p = $(J[0]).children("input");
                r = $(J[1]).children("input");
                F = $(J[2]).children("select").val();
                K = $(L[z]).val();
                q = f.localDateTime();
                if ($(p[0]).val() !== "") {
                    q = f.getDate($(p[0]).val())
                }
                if (f.getDate($(r[0]).val()).getTime() < q.getTime()) {
                    $(r[0]).closest(".control-group").addClass("error");
                    w = true
                }
                if (this.assignment !== undefined) {
                    M.push({
                        SectionId: K,
                        AssignmentId: this.assignment.get("AssignmentId") || null,
                        AssignmentIndexId: this.assignment.get("AssignmentIndexId") || null,
                        AssignmentDate: $(p[0]).val() || f.getDateString(q),
                        AssignmentTime: b.Us.GetAssignmentTime($(p[1])),
                        DueDate: $(r[0]).val() || f.getDateString(q),
                        DueTime: f.buildTimeString(23, 59, 0),
                        Section: null,
                        PublishInd: F == 1 ? true : false,
                        PublishOnAssignedInd: F == 2 ? true : false
                    })
                } else {
                    M.push({
                        SectionId: K,
                        AssignmentDate: $(p[0]).val() || f.getDateString(q),
                        AssignmentTime: b.Us.GetAssignmentTime($(p[1])),
                        DueDate: $(r[0]).val() || f.getDateString(q),
                        DueTime: f.buildTimeString(23, 59, 0),
                        Section: null,
                        PublishInd: F == 1 ? true : false,
                        PublishOnAssignedInd: F == 2 ? true : false
                    })
                }
                if (this.options.edit) {
                    if ($("#" + K + "-notification-send").is(":checked")) {
                        D.push(K)
                    }
                }
            }
            if (w) {
                $("#site-modal .modal-body").scrollTop(1);
                return false
            }
            if (this.assignment === undefined || this.copyId > 0) {
                this.assignment = new b.Ms.Assignment({
                    AssignmentTypeId: Q,
                    ShortDescription: O,
                    LongDescription: "",
                    IncGradeBook: y,
                    AbbrDescription: o,
                    MaxPoints: A,
                    Factor: v,
                    ExtraCredit: u,
                    IncCumGrade: x,
                    PublishGrade: G,
                    DropboxInd: false,
                    DropboxNumFiles: 0,
                    DropboxTimeLate: f.buildTimeString(23, 59, 0),
                    DropboxResub: false,
                    SectionLinks: M,
                    LinkItems: [],
                    DownloadItems: [],
                    SendNotification: false,
                    Notifications: [],
                    HasGrades: (R.options.assignment == undefined) ? false : R.options.assignment.get("HasGrades"),
                    AssessmentInd: true,
                    MaxScore: B,
                    MaxScoreInd: C,
                    TimeToComplete: N,
                    NumberOfAttempts: E,
                    RandomizeQuestions: H,
                    QuestionsTogether: P,
                    SaveForLater: I
                });
                if (this.copyId > 0) {
                    this.assignment.set("AssessmentCopyId", this.copyAssessmentId)
                }
            } else {
                this.assignment.set({
                    AssignmentTypeId: Q,
                    ShortDescription: O,
                    LongDescription: "",
                    IncGradeBook: y,
                    AbbrDescription: o,
                    MaxPoints: A,
                    Factor: v,
                    ExtraCredit: u,
                    IncCumGrade: x,
                    PublishGrade: G,
                    DropboxInd: false,
                    DropboxNumFiles: 0,
                    DropboxTimeLate: f.buildTimeString(23, 59, 0),
                    DropboxResub: false,
                    SectionLinks: M,
                    LinkItems: [],
                    DownloadItems: [],
                    SendNotification: false,
                    Notifications: [],
                    HasGrades: (R.options.assignment == undefined) ? false : R.options.assignment.get("HasGrades"),
                    AssessmentInd: true,
                    MaxScore: B,
                    MaxScoreInd: C,
                    TimeToComplete: N,
                    NumberOfAttempts: E,
                    RandomizeQuestions: H,
                    QuestionsTogether: P,
                    SaveForLater: I
                })
            }
            this.assignment.save({}, {
                success: function(S, T) {
                    if (t.currentTarget.id == "btnSaveEdit") {
                        R.trigger("saveEditAssessment", T, S)
                    } else {
                        R.trigger("saveAssessment", T, S)
                    }
                    $("#site-modal").modal("hide")
                },
                error: function(S, T) {
                    p3.displayError("Error creating assignment")
                }
            })
        },
        getSectionListForAssignment: function() {
            var t = this;
            var s = new b.Cs.SectionsForTeacher({}, {
                sectionId: 0
            });
            s.remove(s.at(0));
            b.Data.TeacherSections.each(function(u) {
                s.add(u.clone())
            });
            if (!t.AddMode) {
                var o = s.pluck("SectionId");
                var r = t.assignment.get("SectionLinks"),
                    p, q;
                for (p = 0; p < r.length; p++) {
                    if (o.indexOf(r[p].SectionId) == -1) {
                        q = new b.Ms.SectionForTeacher({
                            SectionId: r[p].SectionId,
                            GroupName: r[p].Section.Name,
                            IsSelected: 1,
                            LeadSectionId: r[p].SectionId,
                            HasGrades: r[p].HasGrades,
                            HasAssessmentResults: r[p].HasAssessmentResults
                        });
                        s.add(q)
                    } else {
                        if (r[p].HasGrades || r[p].HasAssessmentResults) {
                            b.Us.SyncSections(s, r, p)
                        }
                    }
                }
            }
            return s
        },
        showGroupDialog: function(o) {
            var q = this;
            $("#show-more-groups").button("loading");
            var p = [];
            $(".add-assignment-section-selector").each(function(r) {
                p.push("null_" + $(this).val())
            });
            q.options.$container = p3.addModalContainer();
            i.Us.showGroupPickerDialog(58, p, q);
            return false
        },
        addSelectedGroups: function(o) {
            var s = this;
            b.Us.addSelectedGroups(s, o);
            var q = s.getSectionListForAssignment().pluck("LeadSectionId");
            var r = "",
                p;
            for (p = 0; p < q.length; p++) {
                if (r.length > 0) {
                    r += ","
                }
                r += q[p].toString()
            }
            for (p = 0; p < o.length; p++) {
                if (r.length > 0) {
                    r += ","
                }
                r += o[p].leadSectionId.toString()
            }
            s.markingPeriods.fetch({
                data: {
                    sectionList: r
                },
                success: function(w, D) {
                    var E = $(".grade-book-tooltip-location"),
                        F, B, C, x, t, y, u, v, z, A;
                    for (p = 0; p < E.length; p++) {
                        F = $(E[p]).data("sectionId");
                        if (F && F > 0) {
                            B = b.Us.GetMarkingPeriods(w, F);
                            if (B.length === 0) {
                                $(E[p]).hide()
                            } else {
                                C = "<strong>Marking Periods:</strong><br>Due date must fall within a marking period for this assignment to be included in Gradebook.<br>";
                                for (x = 0; x < B.length; x++) {
                                    t = B[x].get("begin_date");
                                    y = B[x].get("end_date");
                                    if (typeof t === "string" && typeof y === "string") {
                                        u = f.getDateString(f.getDate(t));
                                        v = f.getTimeString(f.getTime(t));
                                        z = f.getDateString(f.getDate(y));
                                        A = f.getTimeString(f.getTime(y));
                                        C += B[x].get("marking_period_description") + "<br><div>Begin: " + u + " " + v + "<br>End: " + z + " " + A + "<br></div>"
                                    }
                                }
                                $(E[p]).show().tooltip({
                                    title: C,
                                    html: true
                                })
                            }
                        }
                    }
                },
                error: function(t, u) {
                    p3.displayError("Failed to retreive the Marking Periods")
                }
            })
        },
        loadAssignment: function(p) {
            var s, v, q, u, o, r, t;
            $("#name-box").val(p.ShortDescription);
            $("#assignment-type-drop").val(p.AssignmentTypeId);
            $("#max-score-box").val(p.MaxScore);
            $("#score_type_dropdown").val(p.MaxScoreInd);
            if (p.TimeToComplete > 0) {
                $("#time-box").val(p.TimeToComplete)
            } else {
                $("#time-box").val("")
            }
            $("#attempts-box").val(p.NumberOfAttempts);
            if (p.QuestionsTogether) {
                $("#together-button").addClass("active");
                $("#per-page-button").removeClass("active")
            } else {
                $("#per-page-button").addClass("active");
                $("#together-button").removeClass("active")
            }
            if (p.RandomizeQuestions) {
                $("#random-radio").addClass("active");
                $("#order-radio").removeClass("active")
            } else {
                $("#random-radio").removeClass("active");
                $("#order-radio").addClass("active")
            }
            if (p.SaveForLater) {
                $("#allow-save-radio").addClass("active");
                $("#no-save-radio").removeClass("active")
            } else {
                $("#allow-save-radio").removeClass("active");
                $("#no-save-radio").addClass("active")
            }
            $("#abbrev-box").val(p.AbbrDescription);
            $("#max-point-box").val(p.MaxPoints);
            $("#factor-box").val(p.Factor);
            if (p.IncGradeBook) {
                $("#gradebook-check").prop("checked", true)
            } else {
                $("#gradebook-check").prop("checked", false)
            }
            if (p.IncCumGrade) {
                $("#cumulative-check").prop("checked", true)
            } else {
                $("#cumulative-check").prop("checked", false)
            }
            if (p.ExtraCredit) {
                $("#extra-credit-check").prop("checked", true)
            } else {
                $("#extra-credit-check").prop("checked", false)
            }
            if (p.PublishGrade) {
                $("#publish-grade-check").prop("checked", true)
            } else {
                $("#publish-grade-check").prop("checked", false)
            }
            $(".add-assignment-section-selector").prop("checked", false);
            for (s = 0; s < p.SectionLinks.length; s++) {
                v = p.SectionLinks[s];
                q = $("#add-assignment-sections-listing tr td label input[value = " + v.SectionId + "]");
                u = q.parents("tr");
                o = $(u).children("td")[1];
                r = $(u).children("td")[2];
                t = $(u).children("td")[3];
                $(u).show();
                $(q).prop("checked", true);
                $(o).children("input:first").val(f.displayDate(v.AssignmentDate, "shortDate"));
                $(o).children("input:last").val(f.displayTime(v.AssignmentTime, false, "shortTime"));
                $(r).children("input:first").val(f.displayDate(v.DueDate, "shortDate"));
                $(t).children("select").val(v.PublishOnAssignedInd ? 2 : v.PublishInd ? 1 : 0)
            }
            $(".add-assignment-section-selector:input:checkbox[checked!='checked']").closest("tr").remove()
        },
        assignmentTypeDefaultMaxPoint: function(p) {
            var o = _.first(b.Data.Types.where({
                AssignmentTypeId: parseInt($(p.target).val(), 10)
            }));
            if (o && this.$el.find("#max-point-box").val() === "") {
                this.$el.find("#max-point-box").val(o.get("DefaultMaxPoints"));
                $("#max-score-box").val(o.get("DefaultMaxPoints"))
            }
        },
        doApplyToSelected: function(o) {
            b.Us.DoApplyToSelected();
            return false
        },
        doSelectionToggle: function(o) {
            b.Us.DoSelectionToggle(o)
        },
        pointsChange: function(o) {
            $("#max-score-box").val($("#max-point-box").val())
        },
        refreshTypes: function(o) {
            b.Us.RefreshAssignmentTypes(o.currentTarget.checked, "#assignment-type-drop")
        },
        scoreChange: function(o) {
            $("#max-point-box").val($("#max-score-box").val())
        },
        toggleGradeBook: function(o) {
            b.Us.ToggleGradeBook()
        }
    });
    b.Vs.DiscussionEditView = Bb.View.extend({
        template: "ClassAssignment/discussion.edit.template.html",
        linkTemplate: "classassignment/assignmentLinkItem.template.html",
        downloadTemplate: "classassignment/assignmentDownloadItem.template.html",
        events: {
            "click #btnSave": "saveDiscussion",
            "click #btnSaveEdit": "saveDiscussion",
            "click #btnSaveAdd": "saveDiscussion",
            "click #show-more-groups": "showGroupDialog",
            "change #assignment-type-drop": "assignmentTypeDefaultMaxPoint",
            "click #publish-options-apply-selected-button": "doApplyToSelected",
            "click .select-all-check": "doSelectionToggle",
            "click #all_types_check": "refreshTypes",
            "click #gradebook-check": "toggleGradeBook",
            "change .default-value-change": "highlightApplyToSelected",
            "blur .default-time-value-blur": "highlightApplyToSelected",
            "click .link-delete-button": "deleteLinkItem",
            "click .download-delete-button": "deleteDownloadItem",
            "change .input-file": "handleDownloads",
            "change .assignment-download-file-field": "handleDownloads",
            "blur .assignment-link-field": "handleLinks",
            "blur .assignment-download-field": "handleDownloads"
        },
        initialize: function() {
            this.contentId = 58;
            this.markingPeriods = new b.Cs.MarkingPeriods();
            p3.fT(this.linkTemplate, function(o) {
                return false
            });
            p3.fT(this.downloadTemplate, function(o) {
                return false
            });
            b.Data.FileTypes = new b.Cs.FileTypes({}, {});
            b.Data.FileTypes.fetch();
            if (p3.Data.fileTypes === undefined) {
                p3.Data.fileTypes = new b.Cs.FileTypes({}, {});
                p3.Data.fileTypes.fetch({
                    error: function() {
                        p3.displayError("Error loading filetypes")
                    }
                })
            }
            p3.Layout.Containers.Modal.on("postRender", this.initializeFileUpload)
        },
        dispose: function() {
            var o = tinyMCE.get("description-box");
            if (o) {
                o.remove()
            }
            if (this.emptysections) {
                b.Data.TeacherSections = undefined
            }
            p3.Layout.Containers.Modal.off("postRender")
        },
        render: function(o) {
            var p = this;
            $(o).html(p.el);
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, function() {
                    p.renderTemplate()
                })
            })
        },
        renderTemplate: function() {
            var o = this;
            b.Us.RenderEditModal(o, "description-box")
        },
        validated: function() {
            var G = this;
            var A = tinyMCE.get("description-box");
            A.save();
            var B = [],
                C = $("#gradebook-check:checked").length == 1 ? true : false,
                y = $("#assignment-type-drop"),
                o = $("#abbrev-box"),
                v = $("#max-point-box"),
                s = $("#factor-box"),
                x = $("#name-box"),
                w = $(".add-assignment-section-selector:checked"),
                q = $("#description-box"),
                r = $("#add-assignment-downloads-tab").children(".control-group"),
                u = $("#add-assignment-links-tab").children(".control-group"),
                p = $("#add-assignment-links-tab").closest(".control-group").children("label:first"),
                z = false;
            if (x.val() === "") {
                if (B.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                    B.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                }
                x.closest(".control-group").addClass("error")
            } else {
                x.closest(".control-group").removeClass("error")
            }
            if (q.val() === "") {
                if (B.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                    B.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                }
                q.closest(".control-group").addClass("error")
            } else {
                q.closest(".control-group").removeClass("error")
            }
            if (u.length > 0) {
                var F = /(((http[s]?):\/\/|mailto:)?\S+\.[a-zA-Z]{2,3}([\S\w\W]+|[\s+]))|(javascript:)\S+/i;
                u.each(function(K) {
                    var I = $(this).find(".assignment-url-field"),
                        H = $(this).find(".assignment-conditional-required-field"),
                        J = false;
                    if (I.length === 0 && H.length === 0) {
                        return
                    }
                    if ((I.val() !== "" && H.val() === "") || (I.val() === "" && H.val() !== "")) {
                        if (B.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                            B.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                        }
                        $(this).addClass("error");
                        z = J = true
                    } else {
                        $(this).removeClass("error");
                        z = false
                    }
                    if (I.val() !== "" && !F.test(I.val())) {
                        if (B.indexOf(p3.Us.InfoMessageLibrary.P3.UrlError) === -1) {
                            B.push(p3.Us.InfoMessageLibrary.P3.UrlError)
                        }
                        $(this).addClass("error");
                        z = true
                    } else {
                        if (!J) {
                            $(this).removeClass("error");
                            z = false
                        }
                    }
                    if ($(this).hasClass("error")) {
                        $("ul#add-assignment-attachment-tabs li:first-child").addClass("error")
                    }
                })
            }
            if (r.length > 0) {
                var D = z;
                r.each(function(L) {
                    var J = $(this).find(".assignment-download-file-name"),
                        I = J.siblings("span:last"),
                        H = $(this).find(".assignment-download-field"),
                        K = false;
                    if (J.length === 0 && I.length === 0 && H.length === 0) {
                        return
                    }
                    if ((J.val() !== "" && H.val() === "") || (J.val() === "" && H.val() !== "")) {
                        $(this).addClass("error");
                        z = K = true;
                        if (B.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                            B.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                        }
                    } else {
                        if (J.val() !== "" && !/^[^\\\/\:\*\?\"\\<\>\|\.\+]+(\.[^\\\/\:\*\?\"\\<\>\|\.\+]+)+$/.test(J.val() + I.html())) {
                            $(this).addClass("error");
                            z = K = true;
                            if (B.indexOf(p3.Us.InfoMessageLibrary.P3.FileNameInvalidChars) === -1) {
                                B.push(p3.Us.InfoMessageLibrary.P3.FileNameInvalidChars)
                            }
                        } else {
                            if (J.val().length > 200) {
                                $(this).addClass("error");
                                z = K = true;
                                if (B.indexOf(p3.Us.InfoMessageLibrary.P3.FileNameToLong) === -1) {
                                    B.push(p3.Us.InfoMessageLibrary.P3.FileNameToLong)
                                }
                            } else {
                                $(this).removeClass("error");
                                if (!D) {
                                    z = false
                                }
                            }
                        }
                    }
                    if (J.val() !== "" && H.val() !== "") {
                        if (p3.Data.fileTypes !== undefined) {
                            if (p3.Data.fileTypes.get(I.html().toLowerCase())) {
                                if (!K) {
                                    I.removeClass("error");
                                    if (!D) {
                                        z = false
                                    }
                                }
                            } else {
                                I.addClass("error");
                                z = K = true;
                                if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.FileTypeUnsupported) === -1) {
                                    B.push(p3.Us.InfoMessageLibrary.Assignment.FileTypeUnsupported)
                                }
                            }
                        }
                    }
                    if (I.data("Duplicate") === 1) {
                        $(this).addClass("error");
                        z = true;
                        if (B.indexOf(p3.Us.InfoMessageLibrary.P3.FileNameDuplicate) === -1) {
                            B.push(p3.Us.InfoMessageLibrary.P3.FileNameDuplicate)
                        }
                    } else {
                        if (!K) {
                            I.removeClass("error");
                            if (!D) {
                                z = false
                            }
                        }
                    }
                    if ($(this).hasClass("error")) {
                        $("#download-tab").addClass("error")
                    }
                })
            }
            if (z) {
                p.addClass("error")
            } else {
                p.removeClass("error")
            }
            if (C) {
                var t = o.closest(".controls").siblings("label:first"),
                    E = false;
                if (y.val() === "0") {
                    y.closest(".control-group").addClass("error");
                    E = true;
                    if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) === -1) {
                        B.push(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields)
                    }
                } else {
                    y.closest(".control-group").removeClass("error")
                }
                if (o.val() === "") {
                    o.closest(".control-group").addClass("error");
                    E = false;
                    if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) === -1) {
                        B.push(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields)
                    }
                } else {
                    o.closest(".control-group").removeClass("error")
                }
                if (v.val() !== "" && /^\d*(\.\d{1,})?$/.test(v.val())) {
                    v.closest(".control-group").removeClass("error");
                    if (v.val().toString().length > 6) {
                        v.val(v.val().substring(0, 6))
                    }
                } else {
                    v.closest(".control-group").addClass("error");
                    E = false;
                    if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) === -1) {
                        B.push(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields)
                    }
                }
                if (s.val() !== "" && /^\d*(\.\d{1,})?$/.test(s.val()) && s.val() !== "0") {
                    s.closest(".control-group").removeClass("error");
                    if (s.val().toString().length > 6) {
                        s.val(s.val().substring(0, 6))
                    }
                } else {
                    s.closest(".control-group").addClass("error");
                    E = false;
                    if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) === -1) {
                        B.push(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields)
                    }
                }
                if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.GradeBookRequiredFields) !== -1) {
                    if (!E) {
                        t.addClass("error")
                    } else {
                        t.removeClass("error")
                    }
                } else {
                    t.removeClass("error")
                }
            }
            if (w.length > 0) {
                w.each(function(R) {
                    var H = $(this).closest("td").siblings("td:first").children("input:first"),
                        M = f.getDate(H.val());
                    if (isNaN(M)) {
                        H.closest(".control-group").addClass("error");
                        if (B.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                            B.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                        }
                    } else {
                        H.closest(".control-group").removeClass("error")
                    }
                    if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK) && G.markingPeriods.length > 0) {
                        var U = parseInt($(this).val(), 10),
                            S = false,
                            I = $("#" + U + "-due-date"),
                            O = I.val(),
                            N = f.getDate(O),
                            T = G.markingPeriods.filter(function(V) {
                                return V.get("section_id") === U
                            }),
                            J, Q, L, K, P;
                        if (isNaN(N)) {
                            N = M
                        }
                        for (L = 0; L < T.length; L++) {
                            J = T[L].get("begin_date");
                            Q = T[L].get("end_date");
                            if (typeof J === "string" && typeof Q === "string") {
                                K = f.getDate(J);
                                P = f.getDate(Q);
                                if (N <= P && N >= K) {
                                    S = true
                                }
                            }
                        }
                        if (!S) {
                            I.closest(".control-group").addClass("error");
                            if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.DueDateMustBeInMarkingPeriod) === -1) {
                                B.push(p3.Us.InfoMessageLibrary.Assignment.DueDateMustBeInMarkingPeriod)
                            }
                        } else {
                            I.closest(".control-group").removeClass("error")
                        }
                    }
                })
            } else {
                if (B.indexOf(p3.Us.InfoMessageLibrary.Assignment.SectionRequired) === -1) {
                    B.push(p3.Us.InfoMessageLibrary.Assignment.SectionRequired)
                }
            }
            return B
        },
        highlightApplyToSelected: function(o) {
            $("#publish-options-apply-selected-button").addClass("btn-primary");
            $("#publish-options-warning-message").show("slow")
        },
        saveDiscussion: function(A) {
            var ak = this,
                J = false;
            $(".modal-body").children(".alert").remove();
            var z = ak.validated();
            if (z.length > 0) {
                _.each(z, function(al) {
                    p3.Us.InfoMessage.ErrorBox(al, ".modal-body", false);
                    J = true
                })
            }
            if (J) {
                $("#site-modal .modal-body").scrollTop(1);
                return false
            }
            var ae = $("#name-box").val(),
                ag = $("#assignment-type-drop").val(),
                o = $("#abbrev-box").val(),
                T = $("#max-point-box").val(),
                D = $("#factor-box").val(),
                M = $("#gradebook-check:checked").length == 1 ? true : false,
                L = $("#cumulative-check:checked").length == 1 ? true : false,
                C = $("#extra-credit-check:checked").length == 1 ? true : false,
                X = $("#publish-grade-check:checked").length == 1 ? true : false,
                aa = $(".add-assignment-section-selector:checked"),
                ab = $("#btn-share-yes").hasClass("active"),
                ac = $("#btn-anytime").hasClass("active"),
                p = $("#btn-attach-yes").hasClass("active"),
                S = $("#description-box").val(),
                Q = $("#add-assignment-links-tab").children("div"),
                w = $("#add-assignment-downloads-tab").children("div");
            var ad = [],
                R = [],
                x = [],
                ai = /((http[s]?):\/\/|mailto:)/i,
                N, Y, q, y, W, Z, r, U = [],
                O, aj, t, s, E, I, af, G, B, K, F, P, V, ah, H, v, u;
            for (N = 0; N < aa.length; N++) {
                Y = $(aa[N]).closest("td").nextAll("td");
                q = $(Y[0]).children("input");
                y = $(Y[1]).children("input");
                W = $(Y[2]).children("select").val();
                Z = $(aa[N]).val();
                r = f.localDateTime();
                if ($(q[0]).val() !== "") {
                    r = f.getDate($(q[0]).val())
                }
                if (f.getDate($(y[0]).val()).getTime() < r.getTime()) {
                    $(y[0]).closest(".control-group").addClass("error");
                    J = true
                }
                if (this.assignment !== undefined) {
                    ad.push({
                        SectionId: Z,
                        AssignmentId: this.assignment.get("AssignmentId") || null,
                        AssignmentIndexId: this.assignment.get("AssignmentIndexId") || null,
                        AssignmentDate: $(q[0]).val() || f.getDateString(r),
                        AssignmentTime: b.Us.GetAssignmentTime($(q[1])),
                        DueDate: $(y[0]).val() || f.getDateString(r),
                        DueTime: f.buildTimeString(23, 59, 0),
                        Section: null,
                        PublishInd: W == 1 ? true : false,
                        PublishOnAssignedInd: W == 2 ? true : false
                    })
                } else {
                    ad.push({
                        SectionId: Z,
                        AssignmentDate: $(q[0]).val() || f.getDateString(r),
                        AssignmentTime: b.Us.GetAssignmentTime($(q[1])),
                        DueDate: $(y[0]).val() || f.getDateString(r),
                        DueTime: f.buildTimeString(23, 59, 0),
                        Section: null,
                        PublishInd: W == 1 ? true : false,
                        PublishOnAssignedInd: W == 2 ? true : false
                    })
                }
                if (this.options.edit) {
                    if ($("#" + Z + "-notification-send").is(":checked")) {
                        U.push(Z)
                    }
                }
            }
            if (Q.length > 0) {
                for (N = 0, P = Q.length; N < P; N++) {
                    O = $(Q[N]).find("input:first").val();
                    aj = $(Q[N]).find("input:last").val();
                    t = $(Q[N]).children("span").data("needsDelete");
                    if (t) {
                        K = $(Q[N]).children("span").data("id");
                        if (K && K > 0) {
                            R.push({
                                LinkId: K,
                                ContextValue: -1
                            })
                        }
                    } else {
                        if (O && aj && O != "" && aj != "") {
                            if (!ai.test(aj)) {
                                aj = "http://" + aj
                            }
                            if (this.assignment === undefined) {
                                R.push({
                                    Url: aj,
                                    ShortDescription: O
                                })
                            } else {
                                R.push({
                                    LinkId: $(Q[N]).data("id"),
                                    Url: aj,
                                    ShortDescription: O
                                })
                            }
                        }
                    }
                }
            }
            if (w.length > 0) {
                for (N = 0, P = w.length; N < P; N++) {
                    s = $(w[N]).find("input:last").val();
                    E = $(w[N]).find("input.assignment-download-file-name").data("rawFile");
                    I = $(w[N]).find("input.assignment-download-file-name").val();
                    af = $(w[N]).find("input.assignment-download-file-name").data("attachedFileName");
                    G = $(w[N]).find("input.assignment-download-file-name").data("fileType");
                    t = $(w[N]).children(".alert").data("needs-delete");
                    B = "";
                    if (t) {
                        K = $(w[N]).children(".alert").data("id");
                        F = $(w[N]).children(".alert").data("filename");
                        if (K && K > 0) {
                            x.push({
                                DownloadId: K,
                                ContextValue: -1,
                                FileName: F
                            })
                        }
                    } else {
                        if (af !== undefined) {
                            B = af.substring(af.lastIndexOf("."))
                        } else {
                            B = $(w[N]).find("input.assignment-download-file-name").next().html()
                        }
                        if (E === "" && s === "" && (af === undefined || af === "")) {
                            break
                        }
                        if (this.assignment === undefined) {
                            if (s && s != "" && ((E !== undefined && E != "") || (I !== undefined && I != "")) && af !== undefined && af != "" && B != "" && $(w[N]).find("input.assignment-download-file-name").data("fileChanged") === true) {
                                x.push({
                                    FileName: E || I + B,
                                    FriendlyFileName: I + B,
                                    UploadedFile: af,
                                    FileTypeID: G,
                                    DownloadID: 0,
                                    Description: s
                                })
                            }
                        } else {
                            V = $(w[N]).data("originalFile");
                            ah = af;
                            H = G || $(w[N]).data("fileTypeId");
                            v = $(w[N]).data("id");
                            u = {};
                            if (V && H && v) {
                                u.DownloadID = v || 0;
                                u.FileName = E || I + B;
                                u.FriendlyFileName = I + B || "";
                                u.FileTypeID = H || 0;
                                u.Description = s || "";
                                if (V != E) {
                                    u.OriginalFile = V
                                }
                                if (ah !== undefined && ah !== "") {
                                    u.UploadedFile = ah
                                }
                                x.push(u)
                            } else {
                                if (typeof H === "number" && H > 0 && s && s != "") {
                                    x.push({
                                        FileName: E || I + B,
                                        FriendlyFileName: I + B,
                                        UploadedFile: af,
                                        FileTypeID: G,
                                        DownloadID: 0,
                                        Description: s
                                    })
                                }
                            }
                        }
                    }
                }
            }
            if (J) {
                $("#site-modal .modal-body").scrollTop(1);
                return false
            }
            if (this.assignment === undefined || this.copyId > 0) {
                this.assignment = new b.Ms.Assignment({
                    AssignmentTypeId: ag,
                    ShortDescription: ae,
                    LongDescription: S,
                    IncGradeBook: M,
                    AbbrDescription: o,
                    MaxPoints: T,
                    Factor: D,
                    ExtraCredit: C,
                    IncCumGrade: L,
                    PublishGrade: X,
                    DropboxInd: false,
                    DropboxNumFiles: 0,
                    DropboxTimeLate: f.buildTimeString(23, 59, 0),
                    DropboxResub: false,
                    SectionLinks: ad,
                    LinkItems: R,
                    DownloadItems: x,
                    SendNotification: false,
                    Notifications: [],
                    HasGrades: (ak.options.assignment == undefined) ? false : ak.options.assignment.get("HasGrades"),
                    DiscussionInd: true,
                    ShareDiscussion: ab,
                    AlwaysShowDiscussion: ac,
                    AllowDiscussionAttach: p,
                    Embed: $("#discussion-embed-box").val()
                });
                if (this.copyId > 0) {
                    this.assignment.set("AssessmentCopyId", this.copyAssessmentId)
                }
            } else {
                this.assignment.set({
                    AssignmentTypeId: ag,
                    ShortDescription: ae,
                    LongDescription: S,
                    IncGradeBook: M,
                    AbbrDescription: o,
                    MaxPoints: T,
                    Factor: D,
                    ExtraCredit: C,
                    IncCumGrade: L,
                    PublishGrade: X,
                    DropboxInd: false,
                    DropboxNumFiles: 0,
                    DropboxTimeLate: f.buildTimeString(23, 59, 0),
                    DropboxResub: false,
                    SectionLinks: ad,
                    LinkItems: R,
                    DownloadItems: x,
                    SendNotification: false,
                    Notifications: [],
                    HasGrades: (ak.options.assignment == undefined) ? false : ak.options.assignment.get("HasGrades"),
                    DiscussionInd: true,
                    ShareDiscussion: ab,
                    AlwaysShowDiscussion: ac,
                    AllowDiscussionAttach: p,
                    Embed: $("#discussion-embed-box").val()
                })
            }
            this.assignment.save({}, {
                success: function(al, am) {
                    if (A.currentTarget.id == "btnSaveEdit") {
                        ak.trigger("saveEditDiscussion", am, al);
                        $("#site-modal").modal("hide")
                    } else {
                        if (A.currentTarget.id == "btnSaveAdd") {
                            ak.trigger("saveAddDiscussion", am, al)
                        } else {
                            ak.trigger("saveDiscussion", am, al);
                            $("#site-modal").modal("hide")
                        }
                    }
                },
                error: function(al, am) {
                    p3.displayError("Error creating assignment")
                }
            })
        },
        getSectionListForAssignment: function() {
            var t = this;
            var s = new b.Cs.SectionsForTeacher({}, {
                    sectionId: 0
                }),
                p, q;
            s.remove(s.at(0));
            b.Data.TeacherSections.each(function(u) {
                s.add(u.clone())
            });
            if (!t.AddMode) {
                var o = s.pluck("SectionId");
                var r = t.assignment.get("SectionLinks");
                for (p = 0; p < r.length; p++) {
                    if (o.indexOf(r[p].SectionId) == -1) {
                        q = new b.Ms.SectionForTeacher({
                            SectionId: r[p].SectionId,
                            GroupName: r[p].Section.Name,
                            IsSelected: 1,
                            LeadSectionId: r[p].SectionId,
                            HasGrades: r[p].HasGrades,
                            HasAssessmentResults: r[p].HasAssessmentResults
                        });
                        s.add(q)
                    } else {
                        if (r[p].HasGrades || r[p].HasAssessmentResults) {
                            b.Us.SyncSections(s, r, p)
                        }
                    }
                }
            }
            return s
        },
        showGroupDialog: function(o) {
            var q = this;
            $("#show-more-groups").button("loading");
            var p = [];
            $(".add-assignment-section-selector").each(function(r) {
                p.push("null_" + $(this).val())
            });
            q.options.$container = p3.addModalContainer();
            i.Us.showGroupPickerDialog(58, p, q);
            return false
        },
        addSelectedGroups: function(o) {
            var s = this,
                p;
            b.Us.addSelectedGroups(s, o);
            var q = s.getSectionListForAssignment().pluck("LeadSectionId");
            var r = "";
            for (p = 0; p < q.length; p++) {
                if (r.length > 0) {
                    r += ","
                }
                r += q[p].toString()
            }
            for (p = 0; p < o.length; p++) {
                if (r.length > 0) {
                    r += ","
                }
                r += o[p].leadSectionId.toString()
            }
            s.markingPeriods.fetch({
                data: {
                    sectionList: r
                },
                success: function(w, D) {
                    var E = $(".grade-book-tooltip-location"),
                        B, F, t, y, u, v, z, A, C, x;
                    for (p = 0; p < E.length; p++) {
                        F = $(E[p]).data("sectionId");
                        if (F && F > 0) {
                            B = b.Us.GetMarkingPeriods(w, F);
                            if (B.length === 0) {
                                $(E[p]).hide()
                            } else {
                                C = "<strong>Marking Periods:</strong><br>Due date must fall within a marking period for this assignment to be included in Gradebook.<br>";
                                for (x = 0; x < B.length; x++) {
                                    t = B[x].get("begin_date");
                                    y = B[x].get("end_date");
                                    if (typeof t === "string" && typeof y === "string") {
                                        u = f.getDateString(f.getDate(t));
                                        v = f.getTimeString(f.getTime(t));
                                        z = f.getDateString(f.getDate(y));
                                        A = f.getTimeString(f.getTime(y));
                                        C += B[x].get("marking_period_description") + "<br><div>Begin: " + u + " " + v + "<br>End: " + z + " " + A + "<br></div>"
                                    }
                                }
                                $(E[p]).show().tooltip({
                                    title: C,
                                    html: true
                                })
                            }
                        }
                    }
                },
                error: function(t, u) {
                    p3.displayError("Failed to retreive the Marking Periods")
                }
            })
        },
        loadAssignment: function(q) {
            var C = this,
                x, B = q.SectionLinks[x],
                r, A, p, t, z, y, s, o, u, w, v;
            $("#name-box").val(q.ShortDescription);
            $("#description-box").val(q.LongDescription);
            $("#assignment-type-drop").val(q.AssignmentTypeId);
            if (q.ShareDiscussion) {
                $("#btn-share-yes").addClass("active");
                $("#btn-share-no").removeClass("active")
            } else {
                $("#btn-share-no").addClass("active");
                $("#btn-share-yes").removeClass("active")
            }
            if (q.AlwaysShowDiscussion) {
                $("#btn-anytime").addClass("active");
                $("#btn-after-post").removeClass("active")
            } else {
                $("#btn-after-post").addClass("active");
                $("#btn-anytime").removeClass("active")
            }
            if (q.AllowDiscussionAttach) {
                $("#btn-attach-yes").addClass("active");
                $("#btn-attach-no").removeClass("active")
            } else {
                $("#btn-attach-no").addClass("active");
                $("#btn-attach-yes").removeClass("active")
            }
            $("#abbrev-box").val(q.AbbrDescription);
            $("#max-point-box").val(q.MaxPoints);
            $("#factor-box").val(q.Factor);
            if (q.IncGradeBook) {
                $("#gradebook-check").prop("checked", true)
            } else {
                $("#gradebook-check").prop("checked", false)
            }
            if (q.IncCumGrade) {
                $("#cumulative-check").prop("checked", true)
            } else {
                $("#cumulative-check").prop("checked", false)
            }
            if (q.ExtraCredit) {
                $("#extra-credit-check").prop("checked", true)
            } else {
                $("#extra-credit-check").prop("checked", false)
            }
            if (q.PublishGrade) {
                $("#publish-grade-check").prop("checked", true)
            } else {
                $("#publish-grade-check").prop("checked", false)
            }
            $(".add-assignment-section-selector").prop("checked", false);
            for (x = 0; x < q.SectionLinks.length; x++) {
                B = q.SectionLinks[x];
                r = $("#add-assignment-sections-listing tr td label input[value = " + B.SectionId + "]");
                A = r.parents("tr");
                p = $(A).children("td")[1];
                t = $(A).children("td")[2];
                z = $(A).children("td")[3];
                $(A).show();
                $(r).prop("checked", true);
                $(p).children("input:first").val(f.displayDate(B.AssignmentDate, "shortDate"));
                $(p).children("input:last").val(f.displayTime(B.AssignmentTime, false, "shortTime"));
                $(t).children("input:first").val(f.displayDate(B.DueDate, "shortDate"));
                $(z).children("select").val(B.PublishOnAssignedInd ? 2 : B.PublishInd ? 1 : 0)
            }
            $(".add-assignment-section-selector:input:checkbox[checked!='checked']").closest("tr").remove();
            if (q.LinkItems.length > 0) {
                for (x = 0; x < q.LinkItems.length; x++) {
                    y = q.LinkItems[x];
                    o = $("#add-assignment-links-tab").children(":last");
                    if ($(o).find("input:first").val() !== "" && $(o).find("input:last").val() !== "") {
                        $(o).find(".link-delete-button").show();
                        C.addLinkControl();
                        o = $("#add-assignment-links-tab").children(":last")
                    }
                    $(o).find("input:first").val(y.ShortDescription);
                    $(o).find("input:last").val(y.Url);
                    $(o).data("id", y.LinkID);
                    $(o).find(".link-delete-button").show();
                    C.addLinkControl()
                }
            }
            if (q.DownloadItems.length > 0) {
                for (x = 0; x < q.DownloadItems.length; x++) {
                    s = q.DownloadItems[x];
                    o = $("#add-assignment-downloads-tab").children(":last");
                    if ($(o).find("input:first").val() !== "" && $(o).find("a.assignment-download-file-field:last").val() !== "") {
                        $(o).find(".download-delete-button").show();
                        C.addDownloadControl();
                        o = $("#add-assignment-downloads-tab").children(":last")
                    }
                    u = s.FileName;
                    w = s.FriendlyFileName || s.FileName;
                    v = $(o).find("input:first").parent().next();
                    $(o).find("input:last").val(s.ShortDescription);
                    v.data("rawFile", u);
                    $(o).find("input.assignment-download-file-name").data("fileType", s.FileTypeID);
                    v.val(w.substring(0, w.lastIndexOf(".")));
                    v.next().html(u.substring(u.lastIndexOf(".")));
                    $(o).find("input:first").siblings("span:first").html("Change");
                    $(o).data("id", s.DownloadID);
                    $(o).data("originalFile", u);
                    $(o).data("fileTypeId", s.FileTypeID);
                    $(o).find(".download-delete-button").show();
                    C.addDownloadControl()
                }
            }
            $("#discussion-embed-box").val(q.Embed)
        },
        assignmentTypeDefaultMaxPoint: function(p) {
            var o = _.first(b.Data.Types.where({
                AssignmentTypeId: parseInt($(p.target).val(), 10)
            }));
            if (o && this.$el.find("#max-point-box").val() === "") {
                this.$el.find("#max-point-box").val(o.get("DefaultMaxPoints"))
            }
        },
        doApplyToSelected: function(o) {
            b.Us.DoApplyToSelected();
            return false
        },
        doSelectionToggle: function(o) {
            b.Us.DoSelectionToggle(o)
        },
        toggleGradeBook: function(o) {
            b.Us.ToggleGradeBook()
        },
        addLinkControl: function() {
            b.Us.addLinkControl(this)
        },
        addDownloadControl: function() {
            b.Us.addDownloadControl(this)
        },
        deleteLinkItem: function(o) {
            b.Us.deleteLinkItem(o, this);
            return false
        },
        deleteDownloadItem: function(o) {
            b.Us.deleteDownloadItem(o, this);
            return false
        },
        handleLinks: function(o) {
            b.Us.handleLinks(o, this);
            return false
        },
        handleDownloads: function(o) {
            b.Us.handleDownloads(o, this);
            return false
        },
        refreshTypes: function(o) {
            b.Us.RefreshAssignmentTypes(o.currentTarget.checked, "#assignment-type-drop")
        },
        initializeFileUpload: function() {
            b.Us.initializeFileUpload(this)
        }
    });
    b.Us.DoApplyToSelected = function() {
        var o = $("#assignment-default-assigned-date").val(),
            p = $("#assignment-default-assigned-time").val(),
            q = $("#assignment-default-due-date").val(),
            r = $("#assignment-default-publish-option").val(),
            s = $("#assignment-default-notification-send").attr("checked"),
            v = $("#add-assignment-sections-listing").children("tr"),
            w = $($(v).children("td")).children("label").children("input:checked.add-assignment-section-selector"),
            u, t;
        for (u = 0; u < w.length; u++) {
            t = $(w[u]).val();
            $("#" + t + "-assigned-date").val(o);
            $("#" + t + "-assigned-time").val(p);
            $("#" + t + "-assigned-time").setTime(p);
            $("#" + t + "-due-date").val(q);
            $("#" + t + "-publish-option").val(r);
            if (s === "checked") {
                $("#" + t + "-notification-send").prop("checked", true)
            } else {
                $("#" + t + "-notification-send").prop("checked", false)
            }
        }
        $("#publish-options-apply-selected-button").removeClass("btn-primary");
        $("#publish-options-warning-message").hide("slow")
    };
    b.Us.DoSelectionToggle = function(o) {
        var p = $(o.target).filter(":checked");
        if (p.length > 0) {
            $(".add-assignment-section-selector:visible").prop("checked", true)
        } else {
            $(".add-assignment-section-selector:visible").prop("checked", false);
            $(".add-assignment-section-selector:disabled").prop("checked", true)
        }
    };
    b.Us.ToggleGradeBook = function() {
        if ($("#gradebook-check").is(":checked")) {
            $("#cumulative-check").prop("disabled", false);
            $("#extra-credit-check").prop("disabled", false);
            $("#publish-grade-check").prop("disabled", false);
            $("#abbrev-box").prop("disabled", false);
            $("#max-point-box").prop("disabled", false);
            $("#factor-box").prop("disabled", false)
        } else {
            $("#cumulative-check").prop("disabled", true);
            $("#extra-credit-check").prop("disabled", true);
            $("#publish-grade-check").prop("disabled", true);
            $("#abbrev-box").prop("disabled", true);
            $("#max-point-box").prop("disabled", true);
            $("#factor-box").prop("disabled", true)
        }
    };
    b.Us.FetchAssignmentTypes = function(o) {
        if (o === undefined) {
            b.Data.Types = new b.Cs.AssignmentTypesAll();
            b.Data.Types.fetch({
                async: false
            })
        } else {
            b.Data.Types = new b.Cs.AssignmentTypes();
            b.Data.Types.fetch({
                data: {
                    sectionId: o
                },
                async: false
            })
        }
    };
    b.Us.RefreshSectionAssignmentTypes = function(o) {
        if (b.Data.types !== undefined) {
            b.Data.types.fetch({
                data: {
                    sectionId: o
                },
                error: function() {
                    p3.displayError("Error loading assignment types")
                }
            })
        }
    };
    b.Us.FetchAssignmentTypesShort = function(o) {
        var p;
        if (o === undefined) {
            b.Data.Types = new b.Cs.AssignmentTypesAll();
            b.Data.Types.fetch({
                async: false
            });
            p = [{
                Type: "-- Select An Assignment Type --",
                AssignmentTypeId: 0,
                GbUse: 1
            }].concat(b.Data.Types.toJSON())
        } else {
            b.Data.Types = new b.Cs.AssignmentTypes();
            b.Data.Types.fetch({
                data: {
                    sectionId: o
                },
                async: false
            });
            p = [{
                Type: "-- Select An Assignment Type --",
                AssignmentTypeId: 0,
                GbUse: 1
            }].concat(b.Data.Types.toJSON());
            p = _.filter(p, function(q) {
                return q.GbUse || q.AssignmentUse
            })
        }
        return p
    };
    b.Us.RefreshAssignmentTypes = function(p, o) {
        var q;
        q = [{
            Type: "-- Select An Assignment Type --",
            AssignmentTypeId: 0,
            GbUse: 1
        }].concat(b.Data.Types.toJSON());
        if (!p) {
            q = _.filter(q, function(r) {
                return r.GbUse || r.AssignmentUse
            })
        }
        $(o).empty();
        _.each(q, function(r) {
            $("<option />", {
                text: r.Type,
                val: r.AssignmentTypeId
            }).appendTo(o)
        })
    };
    b.Us.FetchTeacherSections = function(s, r, q, p) {
        var o;
        if (r) {
            o = 0
        } else {
            if (q) {
                o = 1
            } else {
                o = 2
            }
        }
        b.Data.TeacherSections = new b.Cs.SectionsForTeacher({}, {
            sectionId: s,
            filterInd: o
        });
        b.Data.TeacherSections.fetch({
            async: false,
            error: function() {
                p3.displayError("Error loading sections list.")
            }
        })
    };
    b.Us.AddAssignmentView = function(q) {
        b.Us.registerHelpers();
        b.Us.FetchAssignmentTypesShort(b.Data.currentLeadSectionId);
        var r = new b.Vs.AddAssignmentView(q);
        var o;
        if (q && q.edit) {
            o = 55
        } else {
            o = 54
        }
        var p = new k.Cs.NotificationActive({}, {
            actionId: o
        });
        p.fetch({
            success: function() {
                p.setNotificationProperties();
                r.notifEnabled = p.enabled;
                r.notifTooltip = p.tooltip;
                p3.rV(r, p3.Layout.Containers.Modal, true);
                p3.showModal(p3.Layout.Containers.Modal);
                p3.Layout.Containers.Modal.on("hide.assignmentEdit", function() {
                    if (tinyMCE !== undefined) {
                        tinyMCE.execCommand("mceRemoveControl", false, "add-assignment-title-field");
                        tinyMCE.execCommand("mceRemoveControl", false, "add-assignment-description-field")
                    }
                    p3.Layout.Containers.Modal.off("hide.assignmentEdit");
                    p3.Layout.Containers.Modal.off("postRender")
                })
            },
            error: function() {
                p3.displayError("Error loading notification settings")
            }
        });
        return r
    };
    b.Us.AddAssessmentView = function(o, q) {
        b.Us.registerHelpers();
        if (b.Data.currentLeadSectionId === undefined) {
            b.Data.Types = new b.Cs.AssignmentTypesAll();
            b.Data.Types.fetch({
                async: false
            })
        } else {
            b.Us.FetchAssignmentTypesShort(b.Data.currentLeadSectionId)
        }
        var r = new b.Vs.AssessmentEditView();
        if (o) {
            r.AddMode = false;
            r.assignment = o;
            p3.rV(r, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        } else {
            if (q > 0) {
                r.copyId = q;
                r.AddMode = false;
                var p = new b.Ms.Assignment();
                p.set("AssignmentId", q);
                p.fetch({
                    error: function() {
                        p3.displayError("Error loading assignment")
                    },
                    success: function(s, t) {
                        p.set("ShortDescription", "Copy of " + p.get("ShortDescription"));
                        r.assignment = p;
                        r.copyAssessmentId = p.get("AssessmentId");
                        p3.rV(r, p3.Layout.Containers.Modal, true);
                        p3.showModal(p3.Layout.Containers.Modal)
                    }
                })
            } else {
                r.AddMode = true;
                p3.rV(r, p3.Layout.Containers.Modal, true);
                p3.showModal(p3.Layout.Containers.Modal)
            }
        }
        return r
    };
    b.Us.AddDiscussionView = function(o, q) {
        b.Us.registerHelpers();
        if (b.Data.currentLeadSectionId === undefined) {
            b.Data.Types = new b.Cs.AssignmentTypesAll();
            b.Data.Types.fetch({
                async: false
            })
        } else {
            b.Us.FetchAssignmentTypesShort(b.Data.currentLeadSectionId)
        }
        var r = new b.Vs.DiscussionEditView();
        if (o) {
            r.AddMode = false;
            r.assignment = o;
            p3.rV(r, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        } else {
            if (q > 0) {
                r.copyId = q;
                r.AddMode = false;
                var p = new b.Ms.Assignment();
                p.set("AssignmentId", q);
                p.fetch({
                    error: function() {
                        p3.displayError("Error loading assignment")
                    },
                    success: function(s, t) {
                        p.set("ShortDescription", "Copy of " + p.get("ShortDescription"));
                        r.assignment = p;
                        r.copyAssessmentId = p.get("AssessmentId");
                        p3.rV(r, p3.Layout.Containers.Modal, true);
                        p3.showModal(p3.Layout.Containers.Modal)
                    }
                })
            } else {
                r.AddMode = true;
                p3.rV(r, p3.Layout.Containers.Modal, true);
                p3.showModal(p3.Layout.Containers.Modal)
            }
        }
        return r
    };
    b.Us.EditAssignmentView = function(p, q) {
        b.Us.FetchAssignmentTypesShort(b.Data.currentLeadSectionId);
        b.Us.registerHelpers();
        var o = new b.Ms.Assignment();
        var r;
        o.set("AssignmentId", p);
        o.useSecureGet = true;
        o.fetch({
            async: false,
            error: function() {
                o.useSecureGet = false;
                p3.displayError("Error loading assignment")
            },
            success: function(s, t) {
                o.useSecureGet = false;
                r = b.Us.AddAssignmentView({
                    assignment: s,
                    title: "Edit Assignment",
                    edit: true,
                    AddMode: false
                });
                if (q) {
                    r.on(q.event, q.execute)
                }
            }
        });
        return r
    };
    b.Us.updateAssignments = function(o) {
        if (b.Data.assignments) {
            b.Data.assignments.reset({}, {
                silent: true
            });
            if (b.Data.assignments.dateSort != null || (b.Data.assignments.startDate != null && b.Data.assignments.endDate != null)) {
                b.Data.assignments.fetch({
                    error: function(p, q) {
                        p3.displayError("Error loading assignments")
                    }
                })
            }
            if (o && b.Data.assignments.sectionId) {
                b.Us.RefreshSectionAssignmentTypes(b.Data.assignments.sectionId)
            }
        }
    };
    b.Us.LoadDateTimePickers = function(o) {
        g.Us.initialize(".dp-non-pre-pop");
        n.Us.initialize(".time-picker-field");
        g.Us.LoadPreSelDatePickers(o)
    };
    b.Us.showHtmlEditor = function() {
        p3.showHtmlEditor("myeditor", p3.Us.Enum.HtmlEditorCategories.FULL, false, undefined, p3.Us.Enum.HtmlEditorEncoding.NUMERIC)
    };
    b.Us.registerHelpers = function() {
        if (!Hb.helpers.DropBoxFileNumberSelector) {
            Hb.registerHelper("DropBoxFileNumberSelector", function(p, r) {
                var s = "",
                    o = "",
                    q;
                for (q = 0; q < 11; q++) {
                    o = (q == p) ? ' selected="selected"' : "";
                    s += r.fn({
                        index: q,
                        selectMe: o
                    })
                }
                return s
            })
        }
        if (!Hb.helpers.AssignmentListing) {
            Hb.registerHelper("AssignmentListing", function(o, s) {
                var t = "",
                    p, r, q;
                if (o && o.length > 0) {
                    t = '<tbody><tr style="display: none;"><td></td></tr>';
                    for (p = 0, r = o.length; p < r; p++) {
                        q = o[p];
                        q.hide = (p > 9) ? "none" : "";
                        t += s.fn(q)
                    }
                    t += "</tbody>"
                }
                t += "</table>";
                if (o && o.length > 10) {
                    t += '<a href class="btn btn-default assignment-table-button">Show More</a><br/><br/>'
                }
                return t
            })
        }
        if (!Hb.helpers.AssignmentDetailLink) {
            Hb.registerHelper("AssignmentDetailLink", function(o, q) {
                var s = "",
                    r = p3.Data.Context.getSelectedPersona().Id,
                    p = e.Us.isStudentDetailLinkAvailable(o, r);
                if (p) {
                    if (o.AssessmentInd) {
                        var t;
                        if (r == 1) {
                            t = a.Data.studentId
                        } else {
                            t = p3.Data.Context.get("UserInfo").UserId
                        }
                        s += '<a href="#assessmentdetail/' + o.AssignmentId + "/" + o.AssignmentIndexId + "/0/" + t + '/0">'
                    } else {
                        if (r == 1) {
                            s += '<a href="' + e.Us.BuildAssignmentDetailLink(o.AssignmentId, o.AssignmentIndexId, a.Data.studentId, 0) + '">'
                        } else {
                            if (o.DiscussionInd) {
                                if (r == 2) {
                                    s += '<a href="#discussiondetail/' + o.AssignmentId + "/" + o.AssignmentIndexId + '">'
                                } else {
                                    s += '<a href="#discussionsectiondetail/' + o.AssignmentId + "/" + o.AssignmentIndexId + '/0">'
                                }
                            } else {
                                s += '<a href="' + e.Us.BuildAssignmentDetailLink(o.AssignmentId, o.AssignmentIndexId, null, 0) + '">'
                            }
                        }
                    }
                } else {
                    s += '<p class="assignment-list-text">'
                }
                s += q.fn(o);
                if (p) {
                    s += "</a>"
                } else {
                    s += "</p>"
                }
                return s
            })
        }
        if (!Hb.helpers.fileSizeDisplay) {
            Hb.registerHelper("fileSizeDisplay", function(p) {
                if (p === undefined || p === null) {
                    return ""
                }
                var q = p,
                    o = 0,
                    r = "",
                    s = ["B", "KB", "MB", "GB", "TB", "PB"];
                while (q > 1024) {
                    q = (q / 1024);
                    o++
                }
                r = s[o];
                return Math.round(q * 100) / 100 + " " + r
            });
            Hb.registerPartial("dropBoxFileDetail", '<div class="well"><dl class="dl-horizontal"><dt class="muted">Download(s)</dt><dd>{{#each files}}<a target="_blank" href="{{fileUrl}}">{{fileName}}</a>{{/each}}<button class="btn" data-url="{{fileUrl}}"><i class="icon-trash"></i></button></dd></dl><button class="btn" data-url="{{filePath}}">Allow Resubmission</button>')
        }
        if (!Hb.helpers.sectionIsShownInPublishOptions) {
            Hb.registerHelper("sectionIsShownInPublishOptions", function(o, p) {
                if (o.IsSelected || o.IsCurrent) {
                    return p.fn(o)
                }
                return ""
            })
        }
    };
    b.Us.addSelectedGroups = function(J, o) {
        if (o.length > 0) {
            var F = "";
            var p = [];
            var I = f.localDateTime();
            var u = f.getDateString(I);
            var H = f.buildTimeString(0, 0, 0);
            var y = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK);
            var D = "";
            var A = 0,
                z, G, B, q, v, r, s, w, x, E, t;
            for (z = 0; z < o.length; z++) {
                A = o[z].leadSectionId;
                if (z > 0) {
                    F += ","
                }
                F += A;
                p.push({
                    LeadSectionId: A
                });
                D = '<tr><td><label class="checkbox"><input class="add-assignment-section-selector" type="checkbox" value="' + A + '" checked="checked">' + o[z].courseTitle + "</td></label>";
                D += '<td><input id="' + A + '-assigned-date" type="text" class="form-control input-mini date-picker-field dp-' + A + '" value="' + u + '" style="width:100px;display:inline-block;"> <input id="' + A + '-assigned-time" type="text" class="form-control input-mini time-picker-field" placeholder="' + H + '" style="width:80px;display:inline-block;"></td>';
                D += '<td><input id="' + A + '-due-date" type="text" class="form-control input-mini date-picker-field dp-' + A + '" data-mpid="" style="width:100px;display:inline-block;">';
                if (y && !this.AddExisting) {
                    D += '<i class="p3icon-gradebook grade-book-tooltip-location" data-section-id="' + A + '"></i>'
                }
                D += "</td>";
                D += '<td><select id="' + A + '-publish-option" class="form-control input-sm publish-options" style="width:auto;"><option value="1">Now</option><option value="2">Assigned Date</option><option value="0">No</option></select></td>';
                if (!J.AddMode) {
                    D += '<td><label class="checkbox"><input';
                    if (!J.notifEnabled) {
                        D += ' disabled="disabled"'
                    }
                    D += ' type="checkbox" id="' + A + '-notification-send" value="option1"><span class="send-notif-label"';
                    if (!J.notifEnabled) {
                        D += ' rel="tooltip" data-original-title="' + J.notifTooltip + '"'
                    }
                    D += ">Yes</span></label></td>"
                }
                D += "</tr>";
                if ($("#add-assignment-sections-listing tr:last").length > 0) {
                    $("#add-assignment-sections-listing tr:last").after(D)
                } else {
                    $("#add-assignment-sections-listing").html(D)
                }
            }
            g.Us.LoadPreSelDatePickers(p);
            $(".time-picker-field").timepicker({
                render24Hour: f.is24HourFormat()
            });
            $(".send-notif-label").tooltip();
            if (y && !this.AddExisting) {
                var C = new b.Cs.MarkingPeriods();
                C.fetch({
                    data: {
                        sectionList: F
                    },
                    success: function(K, L) {
                        for (z = 0; z < o.length; z++) {
                            G = o[z].leadSectionId;
                            B = b.Us.GetMarkingPeriods(K, G);
                            if (B.length === 0) {
                                $('.grade-book-tooltip-location[data-section-id="' + G + '"]').hide()
                            } else {
                                E = "<strong>Marking Periods:</strong><br>Due date must fall within a marking period for this assignment to be included in Gradebook.<br>";
                                for (t = 0; t < B.length; t++) {
                                    q = B[t].get("begin_date");
                                    v = B[t].get("end_date");
                                    if (typeof q === "string" && typeof v === "string") {
                                        r = f.getDateString(f.getDate(q));
                                        s = f.getTimeString(f.getTime(q));
                                        w = f.getDateString(f.getDate(v));
                                        x = f.getTimeString(f.getTime(v));
                                        E += B[t].get("marking_period_description") + "<br><div>Begin: " + r + " " + s + "<br>End: " + w + " " + x + "<br></div>"
                                    }
                                }
                                $('.grade-book-tooltip-location[data-section-id="' + G + '"]').show().tooltip({
                                    title: E,
                                    html: true
                                })
                            }
                        }
                    },
                    error: function(K, L) {
                        p3.displayError("Failed to retreive the Marking Periods")
                    }
                })
            }
        }
    };
    b.Us.RenderEditModal = function(p, o) {
        if (b.Data.TeacherSections === undefined) {
            b.Data.TeacherSections = new b.Cs.SectionsForTeacher();
            p.emptysections = true;
            p.SectionsForTeacher = new b.Cs.ExistingSections();
            p.SectionsForTeacher.fetch({
                async: false,
                data: {
                    schoolYear: p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel,
                    facultyUserId: p3.Data.Context.get("UserInfo").UserId
                },
                success: function(q, s) {
                    q.each(function(t) {
                        if (t.get("isCurrent") === 1) {
                            var v = t.get("SectionId"),
                                r = t.get("Name"),
                                u = new Bbm();
                            u.set({
                                IsSelected: false,
                                IsCurrent: true,
                                LeadSectionId: v,
                                GroupName: r,
                                SectionId: v
                            });
                            b.Data.TeacherSections.add(u, {
                                silent: true
                            })
                        }
                    })
                }
            })
        }
        p3.fT(p.template, function(w) {
            var u = p.getSectionListForAssignment(),
                r, v, s;
            r = (p.assignment) ? p.assignment.get("AssignmentTypeId") : null;
            p.$el.html(w({
                AddMode: p.AddMode,
                assignmentTypes: b.Us.FetchAssignmentTypesShort(b.Data.currentLeadSectionId),
                edit: p.options ? p.options.edit || false : false,
                gradebookInd: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK),
                sections: u.toJSON(),
                gradebookDefault: p3.Data.Context.get("UserInfo").GradebookDefaultInd,
                resub: false,
                copyId: p.copyId,
                existingAssignmentTypeId: r,
                sectionAssignment: b.Data.currentLeadSectionId
            }));
            $(".section-label").tooltip();
            if (p.assignment !== undefined && p.assignment != null && p.assignment.get("AssignmentId") > 0) {
                p.loadAssignment(p.assignment.toJSON())
            } else {
                var x = f.localDateTime();
                $("#assignment-default-assigned-date").val(f.getDateString(x));
                u = $("#add-assignment-sections-listing tr");
                for (s = 0; s < u.length; s++) {
                    $($(u[s]).children("td")[1]).children("input:first").val(f.getDateString(x))
                }
            }
            b.Us.LoadDateTimePickers(b.Data.TeacherSections.toJSON());
            if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK)) {
                var t = p.getSectionListForAssignment().pluck("LeadSectionId");
                u = "";
                for (s = 0; s < t.length; s++) {
                    if (u.length > 0) {
                        u += ","
                    }
                    u += t[s].toString()
                }
                c.Us.getAssignmentOptionDefaults();
                if (p3.Data.LMS.DefaultTime) {
                    v = f.getTimeString(f.getDate(f.getDateString() + " " + p3.Data.LMS.DefaultTime))
                } else {
                    v = f.buildTimeString(0, 0, 0)
                }
                $("#add-assignment-sections-listing").find(".time-picker-field").attr("placeholder", v);
                $("#assignment-default-assigned-time").attr("placeholder", v);
                p.markingPeriods.fetch({
                    data: {
                        sectionList: u
                    },
                    success: function(B, I) {
                        var J = $(".grade-book-tooltip-location"),
                            K, G, H, C, y, D, z, A, E, F;
                        for (s = 0; s < J.length; s++) {
                            K = $(J[s]).data("sectionId");
                            if (K && K > 0) {
                                G = b.Us.GetMarkingPeriods(B, K);
                                if (G.length === 0) {
                                    $(J[s]).hide()
                                } else {
                                    H = "<strong>Marking Periods:</strong><br>Due date must fall within a marking period for this assignment to be included in Gradebook.<br>";
                                    for (C = 0; C < G.length; C++) {
                                        y = G[C].get("begin_date");
                                        D = G[C].get("end_date");
                                        if (typeof y === "string" && typeof D === "string") {
                                            z = f.getDateString(f.getDate(y));
                                            A = f.getTimeString(f.getTime(y));
                                            E = f.getDateString(f.getDate(D));
                                            F = f.getTimeString(f.getTime(D));
                                            H += G[C].get("marking_period_description") + "<br><div>Begin: " + z + " " + A + "<br>End: " + E + " " + F + "<br></div>"
                                        }
                                    }
                                    $(J[s]).show().tooltip({
                                        title: H,
                                        html: true
                                    })
                                }
                            }
                        }
                    },
                    error: function(y, z) {
                        p3.displayError("Failed to retreive the Marking Periods")
                    }
                })
            }
            if (p.emptysections && p.AddMode) {
                $(".add-assignment-section-selector").prop("checked", false)
            }
            if ($(".add-assignment-section-selector:checked").length === 0) {
                $(".select-all-check").prop("checked", false)
            }
            var q = jQuery.Event("postRender");
            window.setTimeout(function() {
                p3.Layout.Containers.Modal.trigger(q);
                p3.showHtmlEditor(o, p3.Us.Enum.HtmlEditorCategories.FULL, false, undefined, p3.Us.Enum.HtmlEditorEncoding.NUMERIC);
                p.toggleGradeBook()
            }, 400)
        })
    };
    b.Us.addLinkControl = function(p) {
        var o = p.$("#add-assignment-links-tab");
        p3.fT(p.linkTemplate, function(q) {
            var r = q({});
            $(o).append(r);
            $(".assignment-link-field.assignment-conditional-required-field:last").focus()
        })
    };
    b.Us.addDownloadControl = function(q) {
        var o = q.$("#add-assignment-downloads-tab"),
            p = $(o).children(":last");
        if (p.find("input.assignment-download-file-name").val() !== "" && p.find("input:last").val() !== "") {
            p3.fT(q.downloadTemplate, function(r) {
                $(o).append(r({}));
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, function() {
                        $(".assignment-download-file-field").fileupload({
                            dropZone: null
                        });
                        $(".assignment-download-file-field:last").fileupload({
                            url: p3.Config.RootPath + "utilities/FileTransferHandler.ashx",
                            autoUpload: true,
                            dropZone: $(document)
                        }).on("fileuploaddone", function(t, s) {
                            $(t.target).parent().attr("data-active", false);
                            if (s.result[0] !== undefined) {
                                if (s.files[0].isValidUpload) {
                                    var v = $(t.target).parent().siblings("input.assignment-download-file-name"),
                                        u = s.files[0].name;
                                    $(v).data("attachedFileName", s.result[0].name);
                                    $(v).data("fileChanged", true);
                                    $(v).val(u.substring(0, u.lastIndexOf(".")));
                                    $(v).siblings("span:last").html(u.substring(u.lastIndexOf(".")));
                                    $(v).siblings("span:first").children("span").html("Change");
                                    $(t.target).parent().find("input:last").focus();
                                    $(v).trigger("change");
                                    $(".progress-container").hide();
                                    return false
                                }
                                if (!s.files[0].isValidUpload) {
                                    if ($("#assignment-editor-file-error-msg").length === 0) {
                                        $("#add-assignment-downloads-tab").find(".progress-container:first").after($("<div>").addClass("alert alert-error margin-file-error").attr("id", "assignment-editor-file-error-msg").html("The file " + s.files[0].name + " is not a supported type and was not uploaded."))
                                    } else {
                                        $("#assignment-editor-file-error-msg").html("The file " + s.files[0].name + " is not a supported type and was not uploaded.")
                                    }
                                }
                            }
                        }).on("fileuploadadd", function(t, s) {
                            $(t.target).parent().attr("data-active", true);
                            s.files[0].isValidUpload = p3.Us.FileTools.isValidFile(p3.Us.Enum.UploadType.All, s.files[0].name);
                            if ($("#assignment-editor-file-error-msg").length > 0) {
                                $("#assignment-editor-file-error-msg").remove()
                            }
                            if (s.files[0].isValidUpload) {
                                $(".bar").attr("style", "width: 0%");
                                $(".progress-text").html("Uploading... " + s.files[0].name);
                                $(".progress-container").show();
                                s.submit()
                            }
                        }).on("fileuploadprogress", function(t, s) {
                            var u = parseInt(s.loaded / s.total * 100, 10);
                            $(".bar").attr("style", "width: " + u + "%")
                        })
                    })
                });
                $("assignment-download-file-name:last").focus()
            })
        }
    };
    b.Us.deleteLinkItem = function(q, s) {
        var o = $(q.currentTarget);
        var r = o.parent("div").data("id");
        r = typeof r === "number" ? r : 0;
        if (r > 0) {
            var p = o.siblings(":first").val();
            o.siblings().remove();
            o.replaceWith($("<div>", {
                "class": "alert alert-danger",
                "data-id": r.toString(),
                "data-needs-delete": "true"
            }).html('The link "' + p + '" will be deleted upon clicking Save.'))
        } else {
            o.closest(".control-group").remove()
        }
    };
    b.Us.deleteDownloadItem = function(q, v) {
        var o = $(q.currentTarget);
        var u = o.parent("div").data("id");
        var s = o.parent("div").find("input.assignment-download-file-name").data("rawFile"),
            t = o.parent("div").find("input.assignment-download-file-name").val(),
            r = o.parent("div").find("input.assignment-download-file-name").next().html();
        u = typeof u === "number" ? u : 0;
        if (u > 0) {
            var p = o.siblings(":last").val();
            o.siblings().remove();
            o.replaceWith($("<div>", {
                "class": "alert alert-danger",
                "data-id": u.toString(),
                "data-needs-delete": "true",
                "data-filename": s + r
            }).html('The download "' + t + "." + r + '" (' + p + ") will be deleted once you click the Save button."))
        } else {
            o.closest(".control-group").remove()
        }
    };
    b.Us.handleLinks = function(r, w) {
        var p = w.$("#add-assignment-links-tab");
        var o = $(p).children(":last");
        var q = $(o).find("input:first"),
            v = $(o).find("input:last");
        if (q.val() !== "" && v.val() !== "") {
            $(o).find(".link-delete-button").show();
            b.Us.addLinkControl(w)
        } else {
            if (q.val() === "" && v.val() === "") {
                var t = $(o).prev();
                var s = $(t).find("input:first"),
                    u = $(t).find("input:last");
                if (s.val() === "" && u.val() === "") {
                    o.remove()
                }
            }
        }
    };
    b.Us.handleDownloads = function(r, y) {
        var p = y.$("#add-assignment-downloads-tab");
        var o = $(p).find('span.fileinput-button[data-active="true"]').parent();
        if (o.length === 0) {
            o = $(p).children(":last")
        }
        var q = $(o).find("input:last"),
            t = $(o).find("input.assignment-download-file-name");
        var s = $(t).data("attachedFileName");
        if (s === undefined && r.srcElement !== undefined && r.srcElement.files !== undefined && r.srcElement.files !== null && r.srcElement.files.length > 0) {
            s = r.srcElement.files[0].name;
            if (t.val() === "") {
                if (s && typeof s.substring === "function" && typeof s.lastIndexOf === "function") {
                    t.val(s.substring(0, s.lastIndexOf(".")))
                }
            }
        }
        if (s && typeof s.substring === "function" && typeof s.lastIndexOf === "function") {
            s = s.substring(s.lastIndexOf("."))
        }
        var u = b.Data.FileTypes.filter(function(z) {
            if (s === undefined) {
                return false
            }
            return z.get("Extension") == s.toLowerCase()
        });
        if (q.val() !== "" && t.val() !== "" && u.length > 0) {
            t.data("fileType", u[0].get("fileTypeId"));
            $(o).find(".download-delete-button").show();
            b.Us.addDownloadControl(y)
        } else {
            if (q.val() === "" && t.val() === "") {
                var x = $(o).prev();
                var v = $(x).find("input:first"),
                    w = $(x).find("a.assignment-download-file-field:last");
                if (v.val() === "" && $(w).data("attachedFileName") === "") {
                    o.remove()
                }
            }
        }
    };
    b.Us.initializeFileUpload = function(o) {
        $(".assignment-download-file-field").off("fileuploaddone fileuploadadd fileuploadprogress").fileupload({
            url: p3.Config.RootPath + "utilities/FileTransferHandler.ashx",
            autoUpload: true
        }).on("fileuploaddone", function(q, p) {
            $(q.target).parent().attr("data-active", false);
            if (p.result[0] !== undefined) {
                if (p.files[0].isValidUpload) {
                    var s = $(q.target).parent().siblings("input.assignment-download-file-name"),
                        r = p.files[0].name;
                    $(s).data("attachedFileName", p.result[0].name);
                    $(s).data("fileChanged", true);
                    $(s).val(r.substring(0, r.lastIndexOf(".")));
                    $(s).siblings("span:last").html(r.substring(r.lastIndexOf(".")));
                    $(s).siblings("span:first").children("span").html("Change");
                    $(q.target).parent().find("input:last").focus();
                    $(s).trigger("change");
                    $(".progress-container").hide();
                    return false
                }
                if (!p.files[0].isValidUpload) {
                    if ($("#assignment-editor-file-error-msg").length === 0) {
                        $("#add-assignment-downloads-tab").find(".progress-container:first").after($("<div>").addClass("alert alert-error margin-file-error").attr("id", "assignment-editor-file-error-msg").html("The file " + p.files[0].name + " is not a supported type and was not uploaded."))
                    } else {
                        $("#assignment-editor-file-error-msg").html("The file " + p.files[0].name + " is not a supported type and was not uploaded.")
                    }
                }
            }
        }).on("fileuploadadd", function(q, p) {
            p.files[0].isValidUpload = p3.Us.FileTools.isValidFile(p3.Us.Enum.UploadType.All, p.files[0].name);
            $(q.target).parent().attr("data-active", true);
            if ($("#assignment-editor-file-error-msg").length > 0) {
                $("#assignment-editor-file-error-msg").remove()
            }
            if (p.files[0].isValidUpload) {
                $(".bar").attr("style", "width: 0%");
                $(".progress-text").html("Uploading... " + p.files[0].name);
                $(".progress-container").show();
                p.submit()
            }
        }).on("fileuploadprogress", function(q, p) {
            var r = parseInt(p.loaded / p.total * 100, 10);
            $(".bar").attr("style", "width: " + r + "%")
        })
    };
    b.Us.GetAssignmentTime = function(o) {
        var p = o.getTime();
        if (p === "undefined:undefined" || p === false) {
            p = "0:00"
        }
        if (p === "0:00" && o.attr("placeholder").length > 0) {
            p = o.attr("placeholder")
        }
        return f.displayTime(p, true, "timeSpan")
    };
    b.Us.GetMarkingPeriods = function(o, p) {
        return o.filter(function(q) {
            return q.get("section_id") === p
        })
    };
    b.Us.SyncSections = function(q, p, o) {
        q.each(function(r) {
            if (r.get("SectionId") == p[o].SectionId) {
                r.set("HasGrades", p[o].HasGrades);
                r.set("HasAssessmentResults", p[o].HasAssessmentResults)
            }
        })
    };
    b.Us.SyncSections = function(q, p, o) {
        q.each(function(r) {
            if (r.get("SectionId") == p[o].SectionId) {
                r.set("HasGrades", p[o].HasGrades);
                r.set("HasAssessmentResults", p[o].HasAssessmentResults)
            }
        })
    };
    b.Us.GetAssignmentsByType = function(o, p) {
        return o.filter(function(q) {
            return q.get("AssignmentType") === p
        })
    };
    p3.router().route("classassignment", "Assignment", function(o) {
        p3.renderMainPage(new b.Vs.ClassAssignmentView())
    })
}(p3.module("LMS/assignment")));
(function(a) {
    a.Cs.PersonaAccess = Bbc.extend({
        url: "DataDirect/AssignmentCenterPersonaOptionsGet"
    });
    a.Ms.PersonaAccessSet = Bbm.extend({
        idAttribute: "pliId",
        url: function() {
            return aP + "DataDirect/AssignmentCenterPersonaOptionsSave"
        }
    });
    a.Vs.LayoutView = Bb.View.extend({
        template: "page/page.1col.wide.template.html",
        initialize: function() {
            this.template = "assignmentcenter/assignmentcenter.options.layout.template.html"
        },
        render: function(b) {
            var c = this;
            $(b).html(this.el);
            p3.fT(c.template, function(e) {
                c.$el.html(e());
                var d = c.$el.find("#col-main");
                p3.rV(new a.Vs.PersonaOptions(), d, false)
            })
        }
    });
    a.Vs.PersonaOptions = Bb.View.extend({
        template: "assignmentcenter/assignmentcenter.options.persona.template.html",
        events: {
            "click button": "doToggle"
        },
        initialize: function(b) {
            new a.Cs.PersonaAccess().on("reset", this.renderTemplate, this).fetch()
        },
        render: function(b) {
            var c = this;
            $(b).append(c.el)
        },
        renderTemplate: function(b, i, g) {
            var k = this,
                c, f, e, h = _.uniq(b.pluck("persona_desc")),
                d = [],
                j;
            for (c = 0; c < h.length; c++) {
                f = b.where({
                    persona_desc: h[c]
                });
                j = [];
                for (e = 0; e < f.length; e++) {
                    j.push({
                        id: f[e].get("pli_id"),
                        name: f[e].get("persona_level_desc"),
                        enabled: f[e].get("enabled_ind")
                    })
                }
                d.push({
                    title: h[c],
                    levels: j
                })
            }
            p3.fT(k.template, function(l) {
                k.$el.html(l({
                    persona: d
                }))
            })
        },
        doToggle: function(d) {
            var c = $(d.currentTarget),
                b = c.parent(),
                f = b.data("id"),
                g = {
                    pliId: f,
                    enabled: c.data("enabled")
                };
            new a.Ms.PersonaAccessSet(g).save()
        }
    });
    p3.router().route("Assignmentcenterdisplay", "Assignmentcenterdisplay", function(b) {
        p3.renderMainPage(new a.Vs.LayoutView())
    })
}(p3.module("assignmentcenteroptions")));
(function(a) {
    var c = p3.module("shared/timepicker"),
        b = p3.Us.Culture;
    a.Ms.AssignmentOptions = Bbm.extend({
        urlRoot: "Assignment/AssignmentOptions/"
    });
    a.Ms.AssignmentOptionsEndUser = Bbm.extend({
        urlRoot: "Assignment/ViewAssignmentOptions/"
    });
    a.AssignmentViews = {
        LIST: {
            Name: "List",
            Value: 0
        },
        GRID: {
            Name: "Grid",
            Value: 1
        }
    };
    a.AssignmentCenterRanges = {
        MONTH: {
            Name: "Month",
            Value: 2
        },
        WEEK: {
            Name: "Week",
            Value: 1
        },
        DAY: {
            Name: "Day",
            Value: 0
        }
    };
    a.AssignmentCenterDisplays = {
        DUE: {
            Name: "Due",
            Value: 1
        },
        ACTIVE: {
            Name: "Active",
            Value: 0
        },
        ASSIGNED: {
            Name: "Assigned",
            Value: 2
        }
    };
    a.Vs.LayoutView = Bb.View.extend({
        template: "assignmentoptions/layout.template.html",
        events: {
            "blur #default-time-box": "timeChange",
            "click .ac-default-view": "acViewClick",
            "click .ac-default-range": "acRangeClick",
            "change #ac-display-dropdown": "acDisplayChange"
        },
        renderTemplate: function() {
            var d = this;
            p3.fT(d.template, function(e) {
                d.$el.html(e({
                    options: d.model.toJSON()
                }));
                c.Us.initialize("#default-time-box")
            })
        },
        render: function(d) {
            var e = this;
            $(d).append(e.el);
            e.model = new a.Ms.AssignmentOptions();
            e.getOptions()
        },
        getOptions: function() {
            var d = this;
            d.model.fetch({
                success: function() {
                    d.renderTemplate()
                },
                error: function(e, f) {
                    p3.displayError("Error getting assignment options")
                }
            })
        },
        saveOptions: function() {
            var d = this;
            d.model.save({}, {
                error: function() {
                    p3.displayError("Error saving assignment options.")
                }
            })
        },
        timeChange: function(d) {
            var h = $("#default-time-box").val(),
                f = [],
                g = "0:00:00";
            if (h.length > 0) {
                f = b.getTime(h, true);
                g = f[0] + ":" + f[1] + ":" + f[2]
            }
            this.model.set("DefaultTime", g);
            this.saveOptions()
        },
        acViewClick: function(d) {
            this.model.set("AssignmentCenterView", $(d.currentTarget).data("val"));
            this.saveOptions()
        },
        acRangeClick: function(d) {
            this.model.set("AssignmentCenterRange", $(d.currentTarget).data("val"));
            this.saveOptions()
        },
        acDisplayChange: function(d) {
            this.model.set("AssignmentCenterDisplay", $("#ac-display-dropdown").val());
            this.saveOptions()
        }
    });
    a.Us.getAssignmentOptionDefaults = function() {
        var d;
        if (_.isUndefined(p3.Data.LMS)) {
            p3.Data.LMS = {}
        }
        if (!p3.Data.LMS.OptionsDefaulted) {
            d = new a.Ms.AssignmentOptionsEndUser();
            d.fetch({
                async: false,
                success: function() {
                    p3.Data.LMS.OptionsDefaulted = true;
                    p3.Data.LMS.DisplayCalendar = (d.get("AssignmentCenterView") === a.AssignmentViews.GRID.Value);
                    switch (d.get("AssignmentCenterRange")) {
                        case a.AssignmentCenterRanges.DAY.Value:
                            p3.Data.LMS.calendarView = "basicDay";
                            break;
                        case a.AssignmentCenterRanges.MONTH.Value:
                            p3.Data.LMS.calendarView = "month";
                            break;
                        case a.AssignmentCenterRanges.WEEK.Value:
                            p3.Data.LMS.calendarView = "basicWeek";
                            break
                    }
                    switch (d.get("AssignmentCenterDisplay")) {
                        case a.AssignmentCenterDisplays.ACTIVE.Value:
                            p3.Data.LMS.AssignmentCenterfilter = 2;
                            break;
                        case a.AssignmentCenterDisplays.ASSIGNED.Value:
                            p3.Data.LMS.AssignmentCenterfilter = 0;
                            break;
                        case a.AssignmentCenterDisplays.DUE.Value:
                            p3.Data.LMS.AssignmentCenterfilter = 1;
                            break
                    }
                    p3.Data.LMS.DefaultTime = d.get("DefaultTime")
                },
                error: function(e, f) {
                    p3.displayError("Error getting default assignment options")
                }
            })
        }
    };
    a.Us.verifyAssignmentCenterFilter = function(e, d) {
        if ((e !== undefined && e !== null) && (e === 0 || e === 1 || e === 2 || e === "0" || e === "1" || e === "2")) {
            return e
        }
        if ((d !== undefined && d !== null) && (d === 0 || d === 1 || d === 2 || d === "0" || d === "1" || d === "2")) {
            return d
        }
        return 2
    }
}(p3.module("lms/assignmentoptions")));
(function(b) {
    var a = p3.module("lms/assignmentoptions");
    b.Cs.PersonaAccess = Bbc.extend({
        url: "DataDirect/AssignmentCenterPersonaOptionsGet"
    });
    b.Ms.PersonaAccessSet = Bbm.extend({
        idAttribute: "pliId",
        url: function() {
            return aP + "DataDirect/AssignmentCenterPersonaOptionsSave"
        }
    });
    b.Ms.AssignmentType = Bbm.extend({
        idAttribute: "AssignmentTypeId",
        url: "assignmenttype/get/"
    });
    b.Cs.AssignmentType = Bbc.extend({
        model: b.Ms.AssignmentType,
        url: "assignmenttype/getall/"
    });
    b.Ms.AssignmentTypeSave = Bbm.extend({
        idAttribute: "AssignmentTypeId",
        url: function() {
            var c;
            if (this.get("AssignmentTypeId") === 0) {
                c = aP + "assignmenttype/create/?format=json"
            } else {
                c = aP + "assignmenttype/update/?format=json"
            }
            return c
        }
    });
    b.Ms.AssignmentTypeDelete = Bbm.extend({
        idAttribute: "AssignmentTypeId",
        url: function() {
            return aP + "assignmenttype/delete/?format=json&assignmentTypeId=" + this.get("AssignmentTypeId")
        }
    });
    b.Vs.LayoutView = Bb.View.extend({
        template: "page/page.2col.6-6.splitscreen.template.html",
        render: function(c) {
            var d = this;
            p3.fT(d.template, function(e) {
                d.$el.appendTo(c).html(e());
                d.$(".row").addClass("bb-page-content-multicolumn");
                d.Containers = {
                    colLeft: d.$el.find("#page-2col-left6"),
                    colRight: d.$el.find("#page-2col-right6")
                };
                p3.rV(new b.Vs.AssignmentTypes(), d.Containers.colLeft, false);
                p3.rV(new b.Vs.AssignmentOptions(), d.Containers.colRight, true);
                p3.rV(new b.Vs.PersonaOptions(), d.Containers.colRight, false)
            })
        }
    });
    b.Vs.AssignmentOptions = Bb.View.extend({
        template: "assignmentsettings/assignmentsettings.options.template.html",
        tagName: "section",
        className: "bb-tile",
        render: function(c) {
            var d = this;
            p3.fT(d.template, function(e) {
                d.$el.html(e());
                d.Containers = {
                    Content: d.$(".bb-tile-content-section")
                };
                p3.rV(new a.Vs.LayoutView(), d.Containers.Content, true)
            });
            d.$el.appendTo(c)
        }
    });
    b.Vs.AssignmentTypes = Bb.View.extend({
        template: "assignmentsettings/assignmentsettings.types.template.html",
        events: {
            "click #add-type-button": "addType",
            "click .edit-type-button": "editType",
            "click .delete-type-button": "deleteType"
        },
        initialize: function() {
            this.collection = new b.Cs.AssignmentType();
            this.listenTo(this.collection, "reset", this.renderTemplate);
            this.getTypes()
        },
        renderTemplate: function(c) {
            var d = this;
            p3.fT(d.template, function(e) {
                d.$el.html(e({
                    types: c.toJSON()
                }));
                d.$(".btn-mini.disabled").tooltip()
            })
        },
        render: function(c) {
            this.$el.appendTo(c)
        },
        getTypes: function() {
            this.collection.fetch({
                error: function(c, d) {
                    p3.displayError("Error getting assignment types")
                }
            })
        },
        addType: function(d) {
            d.stopPropagation();
            var f = this,
                c = new b.Vs.editView({
                    assignmentTypeId: 0
                });
            p3.rV(c, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            c.on("typeSaved", function() {
                f.getTypes()
            })
        },
        editType: function(c) {
            var f = this,
                d = new b.Vs.editView({
                    assignmentTypeId: $(c.currentTarget).data("id")
                });
            p3.rV(d, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            d.on("typeSaved", function() {
                f.getTypes()
            })
        },
        deleteType: function(f) {
            var g = this,
                c = $(f.currentTarget).data("id"),
                d;
            p3.showConfirm(null, "Are you sure you want to delete this assignment type?", null, function() {
                d = new b.Ms.AssignmentTypeDelete({
                    AssignmentTypeId: c
                });
                d.destroy({
                    error: function() {
                        p3.displayError("Error deleting assignment type")
                    },
                    success: function() {
                        g.getTypes()
                    }
                })
            })
        }
    });
    b.Vs.editView = Bb.View.extend({
        template: "assignmenttype/edit.template.html",
        events: {
            "click #btnSave": "saveType",
            "click #btnSaveAdd": "saveType"
        },
        renderTemplate: function() {
            var c = this;
            p3.fT(c.template, function(d) {
                c.$el.html(d({
                    type: c.model.toJSON(),
                    assignmentTypeId: c.options.assignmentTypeId
                }))
            })
        },
        render: function(c) {
            var d = this;
            $(c).append(this.el);
            d.model = new b.Ms.AssignmentType({
                Inactive: false
            });
            if (d.options.assignmentTypeId === 0) {
                d.renderTemplate()
            } else {
                d.model.fetch({
                    data: {
                        assignmentTypeId: d.options.assignmentTypeId
                    },
                    success: function() {
                        d.renderTemplate()
                    },
                    error: function(e, f) {
                        p3.displayError("Error getting assignment type")
                    }
                })
            }
        },
        saveType: function(l) {
            var n = this,
                k = (l.target.id === "btnSaveAdd"),
                m, i = $("#type-box"),
                j = $("#type-group"),
                d = $("#btnSave"),
                f = $("#btnSaveAdd"),
                g = $("#code-box"),
                h = $("#major-yes-button"),
                c = $("#active-no-button");
            if (i.val().length === 0) {
                j.addClass("error").addClass("has-error")
            } else {
                j.removeClass("error").removeClass("has-error");
                d.button("loading");
                f.button("loading");
                m = new b.Ms.AssignmentTypeSave({
                    AssignmentTypeId: n.options.assignmentTypeId,
                    ShortDescription: i.val(),
                    Code: g.val(),
                    Major: h.hasClass("active"),
                    Inactive: c.hasClass("active")
                });
                m.save({}, {
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error saving assignment type.")
                    },
                    success: function() {
                        n.trigger("typeSaved");
                        if (k) {
                            i.val("");
                            g.val("");
                            h.removeClass("active");
                            $("#major-no-button").addClass("active");
                            c.removeClass("active");
                            $("#active-yes-button").addClass("active");
                            d.button("reset");
                            f.button("reset")
                        } else {
                            p3.showModal(p3.Layout.Containers.Modal, "hide")
                        }
                    }
                })
            }
        }
    });
    b.Vs.PersonaOptions = Bb.View.extend({
        template: "assignmentsettings/assignmentsettings.persona.template.html",
        events: {
            "click .option-toggle": "doToggle"
        },
        initialize: function(c) {
            new b.Cs.PersonaAccess().once("reset", this.renderTemplate, this).fetch()
        },
        render: function(c) {
            this.$el.appendTo(c)
        },
        renderTemplate: function(c, j, h) {
            var l = this,
                i = _.uniq(c.pluck("persona_desc")),
                e = [],
                d, g, k, f;
            for (d = 0; d < i.length; d++) {
                g = c.where({
                    persona_desc: i[d]
                });
                k = [];
                for (f = 0; f < g.length; f++) {
                    k.push({
                        id: g[f].get("pli_id"),
                        name: g[f].get("persona_level_desc"),
                        enabled: g[f].get("enabled_ind")
                    })
                }
                e.push({
                    title: i[d],
                    levels: k
                })
            }
            p3.fT(l.template, function(m) {
                l.$el.html(m({
                    persona: e
                }))
            })
        },
        doToggle: function(f) {
            var d = $(f.currentTarget),
                c = d.parent(),
                g = c.data("id"),
                h = {
                    pliId: g,
                    enabled: d.data("enabled")
                };
            new b.Ms.PersonaAccessSet(h).save()
        }
    });
    p3.router().route("assignmentsettings", "assignmentsettings", function(c) {
        p3.renderMainPage(new b.Vs.LayoutView())
    })
}(p3.module("LMS/AssignmentSettings")));
(function(b) {
    var a = p3.module("LMS/AssignmentSettings");
    p3.router().route("assignmenttypes", "assignmenttypes", function() {
        p3.renderMainPage(new a.Vs.LayoutView({}))
    })
}(p3.module("lms/assignmenttype")));
(function(a) {
    var l = p3.module("shared/task"),
        d = p3.module("shared/datepicker"),
        c = p3.Us.Culture,
        i = p3.module("report"),
        g = p3.module("shared/message"),
        h = p3.module("shared/profile"),
        f = p3.module("LMS/groupPageEdit"),
        j = p3.module("LMS/roster");
    a.Data = {};
    a.Cs.Members = Bbc.extend({
        initialize: function(n, o) {
            this.sectionId = o.sectionId || 0
        },
        url: function() {
            return aP + "datadirect/athleticrosterget/?format=json&teamId=" + this.sectionId
        },
        filters: undefined,
        comparator: function(n) {
            return n.get("jersey_num")
        },
        changeSort: function(n) {
            if (!_.isUndefined(this.filters)) {
                this.comparator = this.filters[n]
            }
        }
    });
    a.Ms.Member = Bbm.extend({
        idAttribute: "memberId",
        url: function() {
            return aP + "datadirect/AthleticRosterItemGet?format=json&teamId=" + this.get("sectionId") + "&memberId=" + this.get("memberId")
        }
    });
    a.Ms.MemberUpdate = Bbm.extend({
        url: function() {
            return aP + "athletics/rosterupdate"
        }
    });
    a.Ms.MemberDelete = Bbm.extend({
        idAttribute: "memberId",
        url: function() {
            return aP + "athletics/rosterdelete?format=json&teamId=" + this.get("teamId") + "&memberId=" + this.get("memberId") + "&scheduleError=" + this.get("scheduleError") + "&changeSections=" + this.get("changeSections") + "&dropDate=" + this.get("dropDate")
        }
    });
    a.Cs.MedicalMedicationList = Bbc.extend({
        url: "Medical/MedicalMedicationList/"
    });

    function m(n, o) {
        var p = n.split(",").map(function(q) {
            return parseInt(q, 10)
        });
        return $.grep(o, function(q) {
            return p.indexOf(q.Id) > -1
        }).map(function(q) {
            return q.Description
        }).join(", ")
    }

    function b(t, r) {
        var n = t.get("allergies"),
            p = t.get("conditions"),
            q = "",
            s = t.get("medications"),
            o = t.get("clearances");
        if (n) {
            q = "Allergic to: " + n
        }
        if (p) {
            if (q) {
                q += "<br />"
            }
            q += "Condition(s): " + p
        }
        if (s) {
            if (q) {
                q += "<br />"
            }
            q += "Medication(s): " + m(s, r)
        }
        if (o) {
            if (q) {
                q += "<br />"
            }
            q += "Missing: " + o
        }
        t.set("medicalSummary", q);
        return s
    }

    function e(q, r) {
        var u = q.split(",").map(function(w) {
                return parseInt(w, 10)
            }),
            v = {},
            n, o = u.length,
            t, p, s;
        for (n = 0; n < o; n++) {
            t = u[n];
            v[t] = (v[t] || 0) + 1
        }
        o = r.length;
        for (n = 0; n < o; n++) {
            p = r[n];
            if (v[p.Id]) {
                if (s) {
                    s += ", "
                } else {
                    s = ""
                }
                s += v[p.Id] + " " + p.Description
            }
        }
        return s
    }

    function k(n) {
        return [n.lastname, n.firstname]
    }
    a.Vs.RosterView = Bb.View.extend({
        template: "athleticroster/athleticsroster.roster.template.html",
        events: {
            "click .send-message": "sendMessage",
            "click .edit-roster": "editRoster",
            "click .delete-roster": "showDeleteDialog",
            "click .sort-icon": "sortChange",
            "click #rosterSearchButton": "outputTemplate",
            "keydown #rosterSearchField": "doSearchEnter",
            "click #athleticRosterManageButton": "onManageButton",
            "change #roster-term-picker": "changeTermPicker"
        },
        renderTemplate: function() {
            var p = this,
                o = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.MEDICAL) && !p3.Data.Context.get("IsImpersonating");

            function n() {
                p.collection.fetch({
                    success: function(q, F) {
                        var J = new i.Cs.ReportList(),
                            I, L, t = [],
                            D, y = false,
                            w = false,
                            z = false,
                            v = false,
                            x = false,
                            s = 0,
                            K = false,
                            u = false,
                            E, A, B, C = [],
                            H = [],
                            G = [];
                        J.remove(J.at(0));
                        if (i.hasAccessToReportId(373)) {
                            L = l.Us.getUrlById(1691, "__pd=gm_fv&pk=373&ext=vw&o_pk=" + p.options.sectionId);
                            I = new i.Ms.ReportList({
                                ReportName: "Emergency Contacts",
                                Link: L
                            });
                            J.add(I)
                        }
                        if (i.hasAccessToReportId(401)) {
                            L = l.Us.getUrlById(1691, "__pd=gm_fv&pk=401&ext=pdf&sid=" + p.options.sectionId);
                            I = new i.Ms.ReportList({
                                ReportName: "Learning Profile - By Section",
                                Link: L
                            });
                            J.add(I)
                        }
                        if ((i.hasAccessToReportId(500)) && (!p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.CONNECTEE))) {
                            L = l.Us.getUrlById(1691, "__pd=gm_fv&pk=500&ext=vw&o_pk=" + p.options.sectionId);
                            I = new i.Ms.ReportList({
                                ReportName: "Attendance History - By Section",
                                Link: L
                            });
                            J.add(I)
                        }
                        if ((i.hasAccessToReportId(121)) && (!p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.CONNECTEE))) {
                            L = l.Us.getUrlById(1691, "__pd=gm_fv&pk=121&ext=vw&o_pk=" + p.options.sectionId);
                            I = new i.Ms.ReportList({
                                ReportName: "Attendance History - By Section",
                                Link: L
                            });
                            J.add(I)
                        }
                        if (i.hasAccessToReportId(508)) {
                            L = l.Us.getUrlById(1691, "__pd=gm_fv&pk=508&sectionId=" + p.options.sectionId);
                            I = new i.Ms.ReportList({
                                ReportName: "School Forms",
                                Link: L
                            });
                            J.add(I)
                        }
                        if (p3.Data.Context.findByTaskId(53477) && !p3.Data.Context.get("IsImpersonating")) {
                            L = "/app" + l.Us.getUrlById(53477, p.options.sectionId);
                            I = new i.Ms.ReportList({
                                ReportName: "Medical Contact Cards",
                                Link: L
                            });
                            J.add(I)
                        }
                        D = new a.Cs.Members(null, {
                            sectionId: p.options.sectionId
                        });
                        p.players = D;
                        p.defineFilters();
                        p.collection.each(function(r) {
                            if (r.get("teacher_type") && r.get("teacher_type").length > 0) {
                                s += 1;
                                if (s == 1 || (s - 1) % 3 == 0) {
                                    K = true
                                } else {
                                    K = false
                                }
                                if (s > 1 && s % 3 == 0) {
                                    u = true
                                } else {
                                    u = false
                                }
                                t.push({
                                    coachType: r.get("teacher_type"),
                                    name: r.get("name"),
                                    id: r.get("id"),
                                    photo: (r.get("user_thumb")) ? p3.Config.PhotonForUserPhotoUrl + r.get("user_thumb") : null,
                                    photoEditSettings: r.get("photo_edit_settings"),
                                    startRow: K,
                                    endRow: u
                                })
                            } else {
                                if (r.get("jersey_num")) {
                                    x = true
                                }
                                if (r.get("position")) {
                                    y = true
                                }
                                if (r.get("height") && r.get("publish_height")) {
                                    w = true
                                }
                                if (r.get("weight") && r.get("publish_weight")) {
                                    z = true
                                }
                                if (r.get("grad_year") && r.get("grad_year").length > 2) {
                                    r.set("grad_year", r.get("grad_year").substring(2))
                                }
                                if (r.get("form_instance_id")) {
                                    r.set("lpLink", "pk=393&__pd=gm_fv&ext=pdf&sid=" + r.get("id") + "&fiid=" + r.get("form_instance_id"))
                                }
                                if (r.get("user_thumb") && r.get("user_thumb").indexOf("thumb_photo") !== -1) {
                                    r.set("ath_photo", true)
                                }
                                B = b(r, p.medicationList);
                                if (B) {
                                    if (A) {
                                        A += ","
                                    } else {
                                        A = ""
                                    }
                                    A += B
                                }
                                if (!r.get("cleared")) {
                                    C.push({
                                        name: r.get("name"),
                                        lastname: r.get("lastname"),
                                        firstname: r.get("firstname")
                                    })
                                }
                                if (r.get("clearance_date")) {
                                    H.push({
                                        name: r.get("name"),
                                        lastname: r.get("lastname"),
                                        firstname: r.get("firstname"),
                                        clearanceDate: r.get("clearance_date")
                                    })
                                }
                                if (r.get("allergy_date")) {
                                    G.push({
                                        name: r.get("name"),
                                        lastname: r.get("lastname"),
                                        firstname: r.get("firstname"),
                                        changedDate: r.get("allergy_date"),
                                        type: "allergy"
                                    })
                                }
                                if (r.get("condition_date")) {
                                    G.push({
                                        name: r.get("name"),
                                        lastname: r.get("lastname"),
                                        firstname: r.get("firstname"),
                                        changedDate: r.get("condition_date"),
                                        type: "condition"
                                    })
                                }
                                if (r.get("medication_date")) {
                                    G.push({
                                        name: r.get("name"),
                                        lastname: r.get("lastname"),
                                        firstname: r.get("firstname"),
                                        changedDate: r.get("medication_date"),
                                        type: "medication"
                                    })
                                }
                                D.add(r)
                            }
                        });
                        if (A) {
                            p.medicationsNeeded = e(A, p.medicationList)
                        }
                        p.nonClearedStudents = _.sortBy(C, k);
                        p.recentlyClearedStudents = _.sortBy(H, k);
                        p.recentlyChangedStudents = _.sortBy(G, k);
                        if (s > 0) {
                            t[s - 1].endRow = true
                        }
                        p.reports = J;
                        p.coaches = t;
                        p.players = D;
                        p.havePosition = y;
                        p.haveHeight = w;
                        p.haveWeight = z;
                        p.haveEquipment = v;
                        p.haveNumbers = x;
                        p.SortAsc = true;
                        if (x) {
                            p.SortType = a.Us.SortType.Number;
                            D.changeSort("jersey_num")
                        } else {
                            p.SortType = a.Us.SortType.Name;
                            D.changeSort("lastname")
                        }
                        D.sort();
                        if (D.length == 0) {
                            p.outputTemplate()
                        } else {
                            E = new h.Ms.ProfileTabs();
                            E.fetch({
                                data: {
                                    showuserid: D.models[0].get("id"),
                                    personaId: p3.Data.Context.getSelectedPersona().Id
                                },
                                success: function(M) {
                                    var r = _.chain(M.toJSON()).filter(function(T) {
                                            return T.Value == true
                                        }).pluck("Key").value(),
                                        Q = false,
                                        S = false,
                                        N = false,
                                        P = false,
                                        R = false,
                                        O = false;
                                    if (_.contains(r, "Progress")) {
                                        Q = true
                                    }
                                    if (_.contains(r, "Schedule")) {
                                        S = true
                                    }
                                    if (_.contains(r, "Assignments")) {
                                        N = true
                                    }
                                    if (_.contains(r, "Official Notes")) {
                                        P = true
                                    }
                                    if (_.contains(r, "Course Requests")) {
                                        R = true
                                    }
                                    if (_.contains(r, "Contact Card")) {
                                        O = true
                                    }
                                    p.showProgress = Q;
                                    p.showSchedule = S;
                                    p.showAssign = N;
                                    p.showNotes = P;
                                    p.showRequests = R;
                                    p.showContact = O;
                                    p.showMedical = o && p3.Data.Context.findByTaskId(53394);
                                    p.outputTemplate()
                                }
                            })
                        }
                    },
                    error: function() {
                        p3.displayError("Error loading roster")
                    }
                })
            }
            if (o) {
                new a.Cs.MedicalMedicationList().fetch({
                    success: function(q) {
                        p.medicationList = q ? q.toJSON() : [];
                        n()
                    }
                })
            } else {
                p.medicationList = [];
                n()
            }
        },
        initialize: function() {
            var p = this,
                o, n;
            p.canEdit = p.options.userHasFullAccess;
            if (!p.canEdit) {
                o = p.options.content.get(49);
                if (o && o.get("EditorAccess")) {
                    p.canEdit = true
                }
            }
            n = new a.Cs.Members({}, {
                sectionId: p.options.sectionId
            });
            p.collection = n
        },
        dispose: function() {
            $(".tooltip").remove()
        },
        render: function(n) {
            $(n).append(this.el);
            i.loadReportList();
            var o = this;
            o.renderTemplate()
        },
        defineFilters: function() {
            var n = this;
            n.players.filters = {
                lastname: function(q, r) {
                    var o = q.get("lastname") || "",
                        p = r.get("lastname") || "",
                        s;
                    if (o < p) {
                        s = -1
                    } else {
                        if (o > p) {
                            s = 1
                        } else {
                            s = n.players.filters.firstname(q, r)
                        }
                    }
                    return s
                },
                lastname_invert: function(q, r) {
                    var o = q.get("lastname") || "",
                        p = r.get("lastname") || "",
                        s;
                    if (o < p) {
                        s = 1
                    } else {
                        if (o > p) {
                            s = -1
                        } else {
                            s = n.players.filters.firstname_invert(q, r)
                        }
                    }
                    return s
                },
                firstname: function(q, r) {
                    var o = q.get("firstname") || "",
                        p = r.get("firstname") || "";
                    return o < p ? -1 : o > p ? 1 : 0
                },
                firstname_invert: function(q, r) {
                    var o = q.get("firstname") || "",
                        p = r.get("firstname") || "";
                    return o < p ? 1 : o > p ? -1 : 0
                },
                jersey_num: function(q, r) {
                    var o = -1,
                        p = -1;
                    if (q.get("jersey_num") != null) {
                        o = q.get("jersey_num")
                    }
                    if (r.get("jersey_num") != null) {
                        p = r.get("jersey_num")
                    }
                    return n.doCompare(o, p, q, r)
                },
                jersey_num_invert: function(q, r) {
                    var o = -1,
                        p = -1;
                    if (q.get("jersey_num") != null) {
                        o = q.get("jersey_num")
                    }
                    if (r.get("jersey_num") != null) {
                        p = r.get("jersey_num")
                    }
                    return n.doCompareInvert(o, p, q, r)
                },
                position: function(q, r) {
                    var o = q.get("position") || "",
                        p = r.get("position") || "";
                    return n.doCompare(o, p, q, r)
                },
                position_invert: function(q, r) {
                    var o = q.get("position") || "",
                        p = r.get("position") || "";
                    return n.doCompareInvert(o, p, q, r)
                },
                height: function(q, r) {
                    var o = q.get("height") || "",
                        p = r.get("height") || "";
                    return n.doCompare(o, p, q, r)
                },
                height_invert: function(q, r) {
                    var o = q.get("height") || "",
                        p = r.get("height") || "";
                    return n.doCompareInvert(o, p, q, r)
                },
                weight: function(q, r) {
                    var o = q.get("weight") || "",
                        p = r.get("weight") || "";
                    return n.doCompare(o, p, q, r)
                },
                weight_invert: function(q, r) {
                    var o = q.get("weight") || "",
                        p = r.get("weight") || "";
                    return n.doCompareInvert(o, p, q, r)
                },
                grade_number: function(q, r) {
                    var o = -1,
                        p = -1;
                    if (q.get("grade_number") != null) {
                        o = q.get("grade_number")
                    }
                    if (r.get("grade_number") != null) {
                        p = r.get("grade_number")
                    }
                    return n.doCompare(o, p, q, r)
                },
                grade_number_invert: function(q, r) {
                    var o = -1,
                        p = -1;
                    if (q.get("grade_number") != null) {
                        o = q.get("grade_number")
                    }
                    if (r.get("grade_number") != null) {
                        p = r.get("grade_number")
                    }
                    return n.doCompareInvert(o, p, q, r)
                }
            }
        },
        doCompare: function(q, r, n, o) {
            var s = this,
                p;
            if (q < r) {
                p = -1
            } else {
                if (q > r) {
                    p = 1
                } else {
                    p = s.players.filters.lastname(n, o)
                }
            }
            return p
        },
        doCompareInvert: function(q, r, n, o) {
            var s = this,
                p;
            if (q < r) {
                p = 1
            } else {
                if (q > r) {
                    p = -1
                } else {
                    p = s.players.filters.lastname(n, o)
                }
            }
            return p
        },
        sortChange: function(o) {
            var r = this,
                n = $(o.currentTarget),
                q = n.data("sorttype"),
                p = "";
            switch (q) {
                case a.Us.SortType.Number:
                    p = "jersey_num";
                    break;
                case a.Us.SortType.Name:
                    p = "lastname";
                    break;
                case a.Us.SortType.Year:
                    p = "grade_number";
                    break;
                case a.Us.SortType.Position:
                    p = "position";
                    break;
                case a.Us.SortType.Height:
                    p = "height";
                    break;
                case a.Us.SortType.Weight:
                    p = "weight";
                    break
            }
            if (q == r.SortType) {
                r.SortAsc = !r.SortAsc
            } else {
                r.SortAsc = true
            }
            if (!r.SortAsc) {
                p += "_invert"
            }
            r.SortType = q;
            r.players.changeSort(p);
            r.players.sort();
            r.outputTemplate()
        },
        doSearchEnter: function(n) {
            if (n.keyCode === 13) {
                this.outputTemplate()
            }
        },
        outputTemplate: function() {
            var s = this,
                q = $("#rosterSearchField").val(),
                n = [],
                p, o = p3.Data.Context.getSelectedPersona().Id == 3 || p3.Data.Context.getSelectedPersona().Id == 5 || p3.Data.Context.getSelectedPersona().Id == 20,
                r = [];
            h.Data.ShowBackButton = true;
            s.$el.html("");
            if (q !== undefined && q !== null && q.length > 0) {
                n = _.filter(s.coaches, function(t) {
                    return !_.isUndefined(t.name) ? t.name.toLowerCase().indexOf(q.toLowerCase()) >= 0 : false
                });
                p = s.players.filter(function(w) {
                    var v = (w.get("nickname") !== null) ? w.get("nickname").toLowerCase().indexOf(q.toLowerCase()) >= 0 : false,
                        t = (w.get("firstname") !== null) ? w.get("firstname").toLowerCase().indexOf(q.toLowerCase()) >= 0 : false,
                        u = (w.get("lastname") !== null) ? w.get("lastname").toLowerCase().indexOf(q.toLowerCase()) >= 0 : false;
                    return v || t || u
                });
                _.each(p, function(t) {
                    r.push(t.toJSON())
                });
                p = r
            } else {
                n = n.concat(s.coaches);
                p = s.players.toJSON()
            }
            _.each(n, function(t, u) {
                t.endRow = (u + 1) % 3 === 0;
                if (u === n.length) {
                    t.endRow = true
                }
            });
            if (n.length > 0) {
                n[n.length - 1].endRow = true
            }
            if (s.options.enableSearch) {
                this.content = new f.Cs.Content({}, {
                    sectionId: s.options.sectionId,
                    leadSectionId: s.options.leadSectionId
                });
                this.content.fetch({
                    success: function(t) {
                        var w = t.find(function(x) {
                                return x.get("ContentId") == 434
                            }),
                            v = s.coaches.length + s.players.length,
                            u = w.get("EditorAccess") && (p3.Data.Context.findByTaskId(j.Us.GroupTypes.Athletics.memberEdit) || p3.Data.Context.findByTaskId(j.Us.GroupTypes.Athletics.ownerEdit));
                        p3.fT(s.template, function(x) {
                            s.$el.append(x({
                                report: s.reports.toJSON(),
                                haveReports: s.reports.length > 0,
                                coaches: n,
                                players: p || s.players.toJSON(),
                                sectionId: s.options.sectionId,
                                hasComposeAccess: (g.Us.hasComposeAccess() && (p3.Data.SchoolContext.get("SchoolInfo").BulkMessageEnabled || p3.Data.SchoolContext.get("SchoolInfo").BulkEmailEnabled)),
                                canMsgUser: (g.Us.hasComposeAccess() && p3.Data.SchoolContext.get("SchoolInfo").IndividualMessageEnabled),
                                havePosition: s.havePosition,
                                haveHeight: s.haveHeight,
                                haveWeight: s.haveWeight,
                                haveEquipment: s.haveEquipment,
                                haveNumbers: s.haveNumbers,
                                schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                                canEdit: s.canEdit,
                                isParent: p3.Data.Context.getSelectedPersona().Id === 1,
                                sortType: s.SortType,
                                sortAsc: s.SortAsc,
                                isTeacher: o,
                                showProgress: s.showProgress,
                                showSchedule: s.showSchedule,
                                showAssign: s.showAssign,
                                showNotes: s.showNotes,
                                showRequests: s.showRequests,
                                showContact: s.showContact,
                                enableSearch: s.options.enableSearch,
                                memberCount: v,
                                searchTerm: q,
                                managementLink: typeof u === "object" ? u.TaskId : undefined,
                                showCoaches: n.length > 0,
                                showPlayers: p.length > 0,
                                editTask: (l.Us.getUrlByTaskRef("ContentItem:Edit:49", "") != "#"),
                                deleteTask: (l.Us.getUrlByTaskRef("EnrollmentAddDrop:Delete:9", "") != "#"),
                                isCoach: p3.Data.Context.getSelectedPersona().Id == 3 || p3.Data.Context.getSelectedPersona().Id == 5 || p3.Data.Context.getSelectedPersona().Id == 20 || p3.Data.Context.getSelectedPersona().Id == 22,
                                medicationsNeeded: s.medicationsNeeded,
                                nonClearedStudents: s.nonClearedStudents,
                                recentlyClearedStudents: s.recentlyClearedStudents,
                                recentlyChangedStudents: s.recentlyChangedStudents,
                                showMedical: s.showMedical,
                                hasConduct: (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.CONDUCT)) ? true : false,
                                PhotonUrl: p3.Config.PhotonUrl,
                                photoRefresh: new Date().getTime()
                            }));
                            s.$el.find(".btn").tooltip();
                            s.$el.find(".teamCaptain").tooltip();
                            s.Containers = {
                                termPicker: s.$("#term-picker")
                            };
                            p3.rV(new j.Vs.TermPicker({
                                leadSectionId: s.options.leadSectionId,
                                sectionId: s.options.sectionId
                            }), s.Containers.termPicker, true)
                        })
                    }
                })
            } else {
                p3.fT(s.template, function(t) {
                    s.$el.append(t({
                        report: s.reports.toJSON(),
                        haveReports: s.reports.length > 0,
                        coaches: n,
                        players: p || s.players.toJSON(),
                        sectionId: s.options.sectionId,
                        hasComposeAccess: (g.Us.hasComposeAccess() && (p3.Data.SchoolContext.get("SchoolInfo").BulkMessageEnabled || p3.Data.SchoolContext.get("SchoolInfo").BulkEmailEnabled)),
                        canMsgUser: (g.Us.hasComposeAccess() && p3.Data.SchoolContext.get("SchoolInfo").IndividualMessageEnabled),
                        havePosition: s.havePosition,
                        haveHeight: s.haveHeight,
                        haveWeight: s.haveWeight,
                        haveEquipment: s.haveEquipment,
                        haveNumbers: s.haveNumbers,
                        schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                        canEdit: s.canEdit,
                        isParent: p3.Data.Context.getSelectedPersona().Id === 1,
                        sortType: s.SortType,
                        sortAsc: s.SortAsc,
                        isTeacher: o,
                        showProgress: s.showProgress,
                        showSchedule: s.showSchedule,
                        showAssign: s.showAssign,
                        showNotes: s.showNotes,
                        showRequests: s.showRequests,
                        showContact: s.showContact,
                        enableSearch: s.options.enableSearch,
                        memberCount: 0,
                        searchTerm: q,
                        managementLink: undefined,
                        showCoaches: n.length > 0,
                        showPlayers: p.length > 0,
                        editTask: (l.Us.getUrlByTaskRef("ContentItem:Edit:49", "") != "#"),
                        deleteTask: (l.Us.getUrlByTaskRef("EnrollmentAddDrop:Delete:9", "") != "#"),
                        isCoach: p3.Data.Context.getSelectedPersona().Id == 3 || p3.Data.Context.getSelectedPersona().Id == 5 || p3.Data.Context.getSelectedPersona().Id == 20,
                        medicationsNeeded: s.medicationsNeeded,
                        nonClearedStudents: s.nonClearedStudents,
                        recentlyClearedStudents: s.recentlyClearedStudents,
                        recentlyChangedStudents: s.recentlyChangedStudents,
                        showMedical: s.showMedical
                    }));
                    s.$el.find(".btn").tooltip();
                    s.$el.find(".teamCaptain").tooltip();
                    s.Containers = {
                        termPicker: s.$("#term-picker")
                    };
                    p3.rV(new j.Vs.TermPicker({
                        leadSectionId: s.options.leadSectionId,
                        sectionId: s.options.sectionId
                    }), s.Containers.termPicker, true)
                })
            }
        },
        sendMessage: function(n) {
            var u = $(n.currentTarget),
                w = this,
                r = p3.Data.SchoolContext.get("SchoolInfo"),
                q = (r.BulkEmailEnabled && r.BulkMessageEnabled) ? 2 : ((r.BulkEmailEnabled && !r.BulkMessageEnabled) ? 1 : 0),
                v, o, p, s;
            if (u.length > 0) {
                v = $(u).data("messageType");
                o = $(u).data("userId");
                if (!v && typeof o === "number") {
                    a.Us.ComposeUserMessage(o)
                } else {
                    if (!v && typeof o === "string") {
                        p = o.split(",");
                        if (p.length > 0) {
                            a.Us.ComposeUserMessage(p, false, {})
                        }
                    } else {
                        if (typeof v === "number") {
                            s = parseInt(w.options.sectionId, 10);
                            if (typeof s === "number") {
                                switch (v) {
                                    case 0:
                                        a.Us.ComposeUserMessage(["2_" + s + "_1", "2_" + s + "_2", "2_" + s + "_4"], true, {
                                            mode: q,
                                            type: g.Enum.bulkType.all,
                                            sectionId: s
                                        });
                                        break;
                                    case 1:
                                        a.Us.ComposeUserMessage(["2_" + s + "_2"], true, {
                                            mode: q,
                                            type: g.Enum.bulkType.parent,
                                            sectionId: s
                                        });
                                        break;
                                    case 2:
                                        a.Us.ComposeUserMessage(["2_" + s + "_1"], true, {
                                            mode: q,
                                            type: g.Enum.bulkType.roster,
                                            sectionId: s
                                        });
                                        break;
                                    default:
                                        break
                                }
                            }
                        }
                    }
                }
            }
            return false
        },
        editRoster: function(o) {
            var r = this,
                n = $(o.currentTarget),
                q = n.data("id"),
                p = new a.Ms.Member({
                    memberId: q,
                    sectionId: r.options.sectionId
                });
            p.fetch({
                async: false,
                error: function() {
                    p3.displayError("Error loading roster member")
                },
                success: function(s, t) {
                    p3.rV(new a.Vs.EditRosterView({
                        userId: q,
                        sectionId: r.options.sectionId,
                        rosterItem: t[0],
                        schoolId: p3.Data.SchoolContext.attributes.SchoolInfo.SchoolId,
                        parentView: r
                    }), p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal)
                }
            });
            return false
        },
        showDeleteDialog: function(o) {
            var q = this,
                n = $(o.currentTarget),
                p = n.data("id");
            p3.rV(new a.Vs.DeleteRosterView({
                userId: p,
                teamId: q.options.sectionId,
                startDate: q.options.startDate,
                endDate: q.options.endDate,
                parentView: q,
                duration: q.options.duration
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        },
        refreshPlayers: function() {
            var n = this;
            n.collection.fetch({
                success: function() {
                    var r = false,
                        p = false,
                        s = false,
                        o = false,
                        q = false,
                        u = new a.Cs.Members({}, {
                            sectionId: n.options.sectionId
                        }),
                        t, v;
                    u.remove(u.at(0));
                    n.collection.each(function(w) {
                        if (!w.get("teacher_type") || w.get("teacher_type").length == 0) {
                            if (w.get("jersey_num")) {
                                q = true
                            }
                            if (w.get("position")) {
                                r = true
                            }
                            if (w.get("height") && w.get("publish_height")) {
                                p = true
                            }
                            if (w.get("weight") && w.get("publish_weight")) {
                                s = true
                            }
                            w.set("grad_year", w.get("grad_year").substring(2));
                            if (w.get("form_instance_id")) {
                                w.set("lpLink", "pk=393&__pd=gm_fv&ext=pdf&sid=" + w.get("id") + "&fiid=" + w.get("form_instance_id"))
                            }
                            if (w.get("user_thumb") && w.get("user_thumb").indexOf("thumb_photo") !== -1) {
                                w.set("ath_photo", true)
                            }
                            b(w, n.medicationList);
                            u.add(w)
                        }
                    });
                    n.players = u;
                    n.defineFilters();
                    n.havePosition = r;
                    n.haveHeight = p;
                    n.haveWeight = s;
                    n.haveEquipment = o;
                    n.haveNumbers = q;
                    v = false;
                    if (n.SortType == a.Us.SortType.Number && !q) {
                        v = true
                    }
                    if (n.SortType == a.Us.SortType.Position && !r) {
                        v = true
                    }
                    if (n.SortType == a.Us.SortType.Height && !p) {
                        v = true
                    }
                    if (n.SortType == a.Us.SortType.Weight && !s) {
                        v = true
                    }
                    if (v) {
                        n.SortAsc = true;
                        n.SortType = a.Us.SortType.Name
                    }
                    switch (n.SortType) {
                        case a.Us.SortType.Number:
                            t = "jersey_num";
                            break;
                        case a.Us.SortType.Name:
                            t = "lastname";
                            break;
                        case a.Us.SortType.Year:
                            t = "grade_number";
                            break;
                        case a.Us.SortType.Position:
                            t = "position";
                            break;
                        case a.Us.SortType.Height:
                            t = "height";
                            break;
                        case a.Us.SortType.Weight:
                            t = "weight";
                            break
                    }
                    if (!n.SortAsc) {
                        t += "_invert"
                    }
                    n.players.changeSort(t);
                    n.players.sort();
                    n.outputTemplate()
                },
                error: function() {
                    p3.displayError("Error refreshing roster")
                }
            })
        },
        onManageButton: function(n) {
            var p = this,
                o;
            j.Data.AssociationId = 2;
            o = new j.Vs.ManageRosterView({
                sectionId: this.options.sectionId,
                roster: undefined,
                onSave: function() {
                    p.renderTemplate()
                }
            });
            n.stopPropagation();
            n.preventDefault();
            p3.rV(o, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        },
        changeTermPicker: function(n) {
            this.options.sectionId = $(n.currentTarget).val();
            this.collection.sectionId = this.options.sectionId;
            this.outputTemplate()
        }
    });
    a.Vs.DeleteRosterView = Bb.View.extend({
        template: "athleticroster/athleticsroster.delete.template.html",
        events: {
            "click #btnSave": "deleteRoster",
            "click .remove-filter": "removeTypeChange"
        },
        initialize: function() {
            this.teamId = this.options.teamId || 0;
            this.userId = this.options.userId || 0;
            this.startDate = this.options.startDate;
            this.endDate = this.options.endDate;
            this.parentView = this.options.parentView;
            this.duration = this.options.duration || ""
        },
        render: function(n) {
            var o = this;
            p3.fT(o.template, function(s) {
                var q = false,
                    p = c.localDateTime(),
                    r = new Date(o.startDate);
                if (p.getTime() >= r.getTime()) {
                    q = true
                }
                o.seasonStarted = q;
                o.$el.html(s({
                    seasonStarted: q,
                    duration: o.duration,
                    today: c.getDateString(p),
                    startDate: c.getDateString(r),
                    endDate: c.getDateString(new Date(o.endDate))
                }));
                $(n).html(o.el);
                d.Us.initialize("#dropDate")
            })
        },
        deleteRoster: function() {
            var u = this,
                t = true,
                p = "",
                r = false,
                n = false,
                q = "",
                s, o;
            $("div.alert-error").remove();
            $("#btnSave").button("loading");
            if (u.seasonStarted) {
                if ($(".active-filter").length == 0) {
                    t = false;
                    p = "Please select a removal option."
                } else {
                    if ($(".active-filter").data("type-id") == 0) {
                        r = true
                    } else {
                        n = ($(".active-filter").data("type-id") == 1);
                        q = $("#dropDate").val();
                        if (q.length == 0) {
                            t = false;
                            p = "Please select a Drop/Change Date."
                        } else {
                            s = new Date(q).getTime();
                            if (s < new Date(u.startDate).getTime() || s > new Date(u.endDate).getTime()) {
                                t = false;
                                p = "Please select a Drop/Change Date within the season start and end dates."
                            }
                        }
                    }
                }
            } else {
                n = true
            }
            if (t) {
                o = new a.Ms.MemberDelete({
                    memberId: u.userId,
                    teamId: u.teamId,
                    scheduleError: r,
                    changeSections: n,
                    dropDate: q
                });
                o.destroy({
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error deleting roster member")
                    },
                    success: function() {
                        u.parentView.refreshPlayers();
                        p3.showModal(p3.Layout.Containers.Modal, "hide")
                    }
                })
            } else {
                p3.Us.InfoMessage.ErrorBox(p, ".modal-body", false)
            }
            $("#btnSave").button("reset");
            return false
        },
        removeTypeChange: function(o) {
            var n = $(o.currentTarget);
            $(".active-filter").removeClass("active-filter").addClass("inactive-filter");
            $(".p3icon-radioOn").removeClass("p3icon-radioOn").addClass("p3icon-radioOff");
            n.find(".inactive-filter").removeClass("inactive-filter").addClass("active-filter");
            n.find(".p3icon-radioOff").removeClass("p3icon-radioOff").addClass("p3icon-radioOn");
            return false
        }
    });
    a.Vs.EditRosterView = Bb.View.extend({
        template: "athleticroster/athleticsroster.edit.template.html",
        events: {
            "click #btnSave": "saveRoster"
        },
        initialize: function() {
            this.sectionId = this.options.sectionId || 0;
            _.bindAll(this, "initializeFileUpload")
        },
        render: function(n) {
            var o = this;
            p3.fT(o.template, function(p) {
                o.options.rosterItem.grad_year = o.options.rosterItem.grad_year.substring(2);
                o.$el.html(p({
                    rosterItem: o.options.rosterItem,
                    canDrag: !window.head.browser.ie,
                    PhotonUrl: p3.Config.PhotonUrl
                }));
                $(n).html(o.el)
            });
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, o.initializeFileUpload)
            })
        },
        initializeFileUpload: function() {
            var n = p3.Us.Enum.UploadType.IMAGE;
            window.setTimeout(function() {
                $("#fileupload").fileupload({
                    url: p3.Config.RootPath + "utilities/FileTransferHandler.ashx",
                    acceptFileTypes: n.ValidExtensions,
                    autoUpload: true
                }).bind("fileuploaddone", function(p, o) {
                    if (o.files[0].isValidUpload) {
                        $("#user-image").attr("src", "/ftpimages/pdTemp/" + o.result[0].name)
                    } else {
                        $("#fileupload").find("p:first").addClass("alert alert-error").removeClass("muted").html("The file " + o.files[0].name + " is not a supported type and was not uploaded.")
                    }
                }).on("fileuploadadd", function(p, o) {
                    o.files[0].isValidUpload = p3.Us.FileTools.isValidFile(n, o.files[0].name);
                    $("#fileupload").find("p:first").removeClass("alert alert-error").addClass("muted").html("Select a photo to represent you. If nothing is uploaded the current placeholder photo will be dislpayed.");
                    if (o.files[0].isValidUpload) {
                        o.submit()
                    } else {
                        $("#fileupload").find("p:first").addClass("alert alert-error").removeClass("muted").html("The file " + o.files[0].name + " is not a supported type and was not uploaded.")
                    }
                })
            }, 1000)
        },
        saveRoster: function() {
            var s = this,
                r = true,
                o = "",
                q, n, p;
            $("div.alert-error").remove();
            $("#btnSave").button("loading");
            if (r) {
                q = new a.Ms.MemberUpdate({
                    TeamId: s.options.sectionId,
                    Id: s.options.userId,
                    PublishName: true
                });
                q.set("Position", $("#position-box").val());
                n = -1;
                if ($("#jersey-box").val().length > 0) {
                    n = $("#jersey-box").val()
                }
                q.set("JerseyNumber", n);
                q.set("LockerNumber", $("#locker-box").val());
                q.set("LockerCombination", $("#locker-combo").val());
                q.set("Height", $("#height-box").val());
                q.set("PublishHeight", $("#chkPublishHeight").is(":checked"));
                q.set("Weight", $("#weight-box").val());
                q.set("PublishWeight", $("#chkPublishWeight").is(":checked"));
                q.set("ReturningLetterInd", $("#chkLetter").is(":checked"));
                q.set("TeamCaptainInd", $("#chkCaptain").is(":checked"));
                q.set("Accolades", $("#accolade-box").val());
                p = [];
                if ($("#user-image").attr("src").indexOf("user.png") == -1) {
                    if ($("#user-image").attr("src").indexOf("/pdTemp/") > -1) {
                        p.push({
                            photo_id: 0,
                            original_filename: $("#user-image").attr("src")
                        });
                        if (s.options.rosterItem.photo_id > 0) {
                            p.push({
                                photo_id: s.options.rosterItem.photo_id,
                                DeleteInd: true,
                                large_filename: s.options.rosterItem.large_filename,
                                thumb_filename: s.options.rosterItem.thumb_filename
                            })
                        }
                    }
                }
                q.set("Photos", p);
                q.save({}, {
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error saving roster member")
                    },
                    success: function(t) {
                        s.options.parentView.refreshPlayers();
                        p3.showModal(p3.Layout.Containers.Modal, "hide")
                    }
                })
            } else {
                p3.Us.InfoMessage.ErrorBox(o, ".modal-body", false)
            }
            $("#btnSave").button("reset");
            return false
        }
    });
    a.Us.ComposeUserMessage = function(o, n, q) {
        var r = [],
            p;
        if (n) {
            if (o.length > 0) {
                g.Us.composeMessageOrEmail(o, undefined, q)
            }
        } else {
            if (o && o instanceof Array) {
                for (p = 0; p < o.length; p++) {
                    r.push("12_" + o[p] + "_0")
                }
            } else {
                if (typeof o === "number") {
                    r.push("12_" + o + "_0")
                } else {
                    return
                }
            }
            if (r.length > 0) {
                g.Us.composeMessageOrEmail(r, undefined, q)
            }
        }
    };
    a.Us.SortType = {
        Number: 0,
        Name: 1,
        Year: 2,
        Position: 3,
        Height: 4,
        Weight: 5
    };
    Hb.registerHelper("sortIcon", function(q, n, p) {
        var o = "p3icon-sortOff";
        if (q == n) {
            if (p) {
                o = "p3icon-sortUp"
            } else {
                o = "p3icon-sortDown"
            }
        }
        return o
    })
}(p3.module("LMS/athleticroster")));
(function(b) {
    var d = p3.module("shared/datepicker"),
        h = p3.module("shared/timepicker"),
        f = p3.module("shared/notification"),
        a = p3.module("app"),
        g = p3.module("shared/task"),
        c = p3.Us.Culture,
        e = p3.module("shared/feeds");
    b.Data = {};
    b.Ms.ScheduleItem = Bbm.extend({
        idAttribute: "ScheduleId",
        url: function() {
            var i;
            if (this.get("ScheduleId") > 0) {
                i = aP + "athleticschedule/GameUpdate"
            } else {
                i = aP + "athleticschedule/GameCreate"
            }
            return i
        }
    });
    b.Cs.ScheduleItem = Bbc.extend({
        model: b.Ms.ScheduleItem,
        initialize: function(i, j) {
            this.dateSort = j.dateSort || 0;
            this.scheduleType = j.scheduleType || 0;
            this.startDate = j.startDate || null;
            this.endDate = j.endDate || null;
            this.searchTerm = j.searchTerm || null;
            this.sectionId = j.sectionId || 0;
            this.lite = j.lite || null
        },
        setSectionId: function(i) {
            this.sectionId = i
        },
        setDateSortFilter: function(i) {
            this.dateSort = i
        },
        setScheduleTypeFilter: function(i) {
            this.scheduleType = i
        },
        setStartDateFilter: function(i) {
            this.startDate = i
        },
        setEndDateFilter: function(i) {
            this.endDate = i
        },
        setSearchTerm: function(i) {
            this.searchTerm = i
        },
        setLiteMode: function(i) {
            this.lite = i
        },
        url: function() {
            var i = "?format=json&teamId=" + this.sectionId;
            if (this.dateSort !== null) {
                i += "&dateSort=" + this.dateSort
            }
            if (this.scheduleType !== null) {
                i += "&scheduleType=" + this.scheduleType
            }
            if (this.startDate !== null) {
                i += "&startDate=" + this.startDate
            }
            if (this.endDate !== null) {
                i += "&endDate=" + this.endDate
            }
            if (this.searchTerm !== null) {
                i += "&searchTerm=" + this.searchTerm
            }
            if (this.lite !== null) {
                i += "&isLite=" + this.lite
            }
            return aP + "athletics/teamscheduleget/" + i
        }
    });
    b.Cs.CalendarItem = Bbc.extend({
        model: b.Ms.ScheduleItem,
        initialize: function(i, j) {
            this.startDate = j.startDate || null;
            this.scheduleDuration = j.scheduleDuration || 0;
            this.scheduleType = j.scheduleType || 0
        },
        url: function() {
            var i = "";
            if (b.Data.SelectedSportLevels.length > 0) {
                i = b.Data.SelectedSportLevels.join()
            }
            return aP + "athletics/athleticcalendarget/?format=json&startDate=" + this.startDate + "&scheduleDuration=" + this.scheduleDuration + "&selectedSportLevels=" + i
        },
        setScheduleTypeFilter: function(i) {
            this.scheduleType = i
        }
    });
    b.Ms.Venue = Bbm.extend({
        idAttribute: "id"
    });
    b.Cs.Venue = Bbc.extend({
        model: b.Ms.Venue,
        url: function() {
            return aP + "datadirect/athleticvenuesget/"
        }
    });
    b.Ms.Location = Bbm.extend({
        idAttribute: "id"
    });
    b.Cs.Location = Bbc.extend({
        model: b.Ms.Location,
        url: function() {
            return aP + "datadirect/athleticlocationsget/"
        }
    });
    b.Ms.Opponent = Bbm.extend({
        idAttribute: "id"
    });
    b.Cs.Opponent = Bbc.extend({
        model: b.Ms.Opponent,
        url: function() {
            return aP + "datadirect/athleticopponentsget/"
        }
    });
    b.Ms.Transportation = Bbm.extend({
        idAttribute: "id"
    });
    b.Cs.Transportation = Bbc.extend({
        model: b.Ms.Transportation,
        url: function() {
            return aP + "datadirect/athletictransportationget/"
        }
    });
    b.Ms.GameGet = Bbm.extend({
        idAttribute: "ScheduleId",
        url: function() {
            return aP + "athleticschedule/gameedit?format=json&scheduleId=" + this.get("ScheduleId")
        }
    });
    b.Ms.GameDelete = Bbm.extend({
        idAttribute: "ScheduleId",
        url: function() {
            return aP + "athleticschedule/gamedelete?format=json&scheduleId=" + this.get("ScheduleId")
        }
    });
    b.Ms.DateUpdate = Bbm.extend({
        idAttribute: "ScheduleId",
        url: function() {
            return aP + "athleticschedule/scheduledatechange?format=json&scheduleId=" + this.get("ScheduleId") + "&newDate=" + this.get("newDate") + "&sendNotification=" + this.get("sendNotification") + "&reschedule=" + this.get("reschedule") + "&endDate=" + this.get("endDate") + "&isGame=" + this.get("isGame")
        }
    });
    b.Ms.PracticeItem = Bbm.extend({
        idAttribute: "PracticeId",
        url: function() {
            var i;
            if (this.get("PracticeId") > 0) {
                i = aP + "athleticschedule/PracticeUpdate"
            } else {
                i = aP + "athleticschedule/PracticeCreate"
            }
            return i
        }
    });
    b.Ms.PublishOptionsSave = Bbm.extend({
        url: "AthleticSchedule/AthleticSchedulePublishSave"
    });
    b.Ms.PublishOptionsGet = Bbm.extend({
        idAttribute: "teamId",
        url: function() {
            return aP + "DataDirect/AthleticSchedulePublishGet?format=json&teamId=" + this.get("teamId")
        }
    });
    b.Cs.PracticeDates = Bbc.extend({
        initialize: function(i, j) {
            this.teamId = j.teamId || 0;
            this.dateStart = j.dateStart || null;
            this.dateEnd = j.dateEnd || null;
            this.excludeGames = j.excludeGames || false;
            this.weekdays = j.weekdays || null;
            this.roomId = j.roomId || 0;
            this.locationId = j.locationId || 0;
            this.transportationId = j.transportationId || 0
        },
        url: function() {
            return aP + "athleticschedule/PracticeDatesGenerate/?format=json&teamId=" + this.teamId + "&dateStart=" + this.dateStart + "&dateEnd=" + this.dateEnd + "&excludeGames=" + this.excludeGames + "&weekdays=" + this.weekdays + "&roomId=" + this.roomId + "&locationId=" + this.locationId + "&transportationId=" + this.transportationId
        }
    });
    b.Ms.PracticeDelete = Bbm.extend({
        idAttribute: "PracticeId",
        url: function() {
            return aP + "athleticschedule/practicedelete?format=json&practiceId=" + this.get("PracticeId") + "&teamId=" + this.get("TeamId")
        }
    });
    b.Ms.PracticeGet = Bbm.extend({
        idAttribute: "PracticeId",
        url: function() {
            return aP + "athleticschedule/practiceedit?format=json&practiceId=" + this.get("PracticeId") + "&teamId=" + this.get("TeamId")
        }
    });
    b.Ms.PracticeDetailsGet = Bbm.extend({
        idAttribute: "ScheduleId",
        url: function() {
            return aP + "datadirect/practicedetailsget?format=json&scheduleId=" + this.get("ScheduleId")
        }
    });
    b.Cs.GameConflicts = Bbc.extend({
        initialize: function(i, j) {
            this.teamId = j.teamId || 0;
            this.gameDate = j.gameDate || null;
            this.scheduleId = j.scheduleId || 0
        },
        url: function() {
            return aP + "athleticschedule/GameUpdateValidate/?format=json&teamId=" + this.teamId + "&gameDate=" + this.gameDate + "&scheduleId=" + this.scheduleId
        }
    });
    b.Cs.PracticeConflicts = Bbc.extend({
        initialize: function(i, j) {
            this.teamId = j.teamId || 0;
            this.dateStart = j.dateStart || null;
            this.dateEnd = j.dateEnd || null;
            this.practiceId = j.practiceId || 0
        },
        url: function() {
            return aP + "athleticschedule/PracticeUpdateValidate/?format=json&teamId=" + this.teamId + "&dateStart=" + this.dateStart + "&dateEnd=" + this.dateEnd + "&practiceId=" + this.practiceId
        }
    });
    b.Cs.SportLevels = Bbc.extend({
        url: function() {
            return aP + "datadirect/sportlevelsget/"
        }
    });
    b.Cs.EditableTeams = Bbc.extend({
        initialize: function(i, j) {
            this.lookupDate = j.lookupDate
        },
        url: function() {
            var i;
            i = aP + "datadirect/EditableTeamsByDate/?format=json&lookupDate=" + c.getDateString(this.lookupDate).ApiFormat();
            return i
        }
    });
    b.Vs.TeamScheduleView = Bb.View.extend({
        template: "athleticschedule/athleticschedule.template.html",
        schedulelistview: undefined,
        events: {
            "click .addGameButton": "gameAddWindow",
            "click .addPracticeButton": "practiceAddWindow",
            "click .scheduleSettingsButton": "publishSettingsWindow",
            "click #scheduleSearchButton": "doScheduleSearch",
            "blur #scheduleSearchBox": "doSearchFix",
            "keypress #scheduleSearchBox": "doScheduleSearchEnter"
        },
        initialize: function() {
            this.Containers = {};
            this.sectionId = this.options.sectionId || 0;
            b.Data.currentLeadSectionId = this.leadSectionId = this.options.leadSectionId || 0;
            this.scheduleItems = null;
            this.userHasFullAccess = this.options.userHasFullAccess || false;
            this.isOwner = this.options.isOwner || false;
            this.isManager = this.options.isManager || false;
            this.content = this.options.content || undefined;
            this.canEdit = false;
            this.isEditor = false;
            if (this.userHasFullAccess) {
                this.canEdit = true
            } else {
                var i = !_.isUndefined(this.content) ? this.content.get(45) : null;
                if (i && i.get("EditorAccess")) {
                    this.canEdit = true;
                    this.isEditor = true
                }
            }
            this.durationId = this.options.durationId || 0;
            this.hideCalendar = this.options.hideCalendar || false;
            this.hideBulkPractices = this.options.hideBulkPractices || false;
            this.isLite = (this.hideCalendar && this.hideBulkPractices);
            this.athleticPrivileges = b.Us.getAthleticPrivileges(this.canEdit, this.isLite, this.hideBulkPractices);
            b.Us.initializeData(this.canEdit);
            b.Us.initializeNotifications(this.sectionId)
        },
        render: function(i) {
            var j = this;
            p3.fT(j.template, function(k) {
                j.$el.html(k({
                    leadSectionId: j.leadSectionId
                }));
                $(i).html(j.el);
                j.Containers.LeftColumn = $("#2col-wideleft");
                j.Containers.RightColumn = $("#2col-slimright");
                j.renderContent()
            })
        },
        renderContent: function() {
            var i = this;
            b.Data.scheduleItems = new b.Cs.ScheduleItem({}, {
                dateSort: 2,
                scheduleType: 0,
                startDate: null,
                endDate: null,
                sectionId: i.leadSectionId,
                lite: i.isLite
            });
            i.schedulelistview = new b.Vs.ScheduleListView({
                collection: b.Data.scheduleItems,
                leadSectionId: i.leadSectionId,
                sectionId: i.sectionId,
                canEdit: i.canEdit,
                isLite: i.isLite
            });
            p3.rV(i.schedulelistview, i.Containers.LeftColumn, false);
            b.Data.scheduleItems.fetch({
                error: function(j, k) {
                    p3.displayError("Error loading schedule")
                }
            });
            p3.rV(new b.Vs.ScheduleFilterView({
                sectionId: i.sectionId,
                leadSectionId: i.leadSectionId,
                scheduleItems: b.Data.scheduleItems,
                canEdit: i.canEdit,
                durationId: i.durationId,
                hideCalendar: i.hideCalendar,
                hideBulkPractices: i.hideBulkPractices
            }), i.Containers.RightColumn, false)
        },
        gameAddWindow: function() {
            var j = this,
                i;
            if (j.athleticPrivileges.canAddGameAndPractice || j.athleticPrivileges.canAddGame) {
                i = new b.Ms.ScheduleItem({
                    ScheduleType: 0,
                    HomeAwayType: 0,
                    LocationId: -1,
                    LeagueInd: 1
                });
                b.Us.openGameScheduleDialog(0, i, j.options.leadSectionId, false, null, false, j.isLite, j.athleticPrivileges)
            } else {
                if (j.athleticPrivileges.canAddPractice) {
                    i = new b.Ms.ScheduleItem({
                        PracticeDate: null
                    });
                    b.Us.openEditPracticeDialog(0, i, j.options.leadSectionId, false, null, false, j.athleticPrivileges)
                }
            }
            return false
        },
        practiceAddWindow: function() {
            var i = this;
            p3.rV(new b.Vs.BulkAddPracticeView({
                sectionId: i.leadSectionId
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        },
        publishSettingsWindow: function(i) {
            i.preventDefault();
            var j = this;
            p3.rV(new b.Vs.PublishSettings({
                sectionId: j.leadSectionId,
                isLite: j.isLite
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        },
        doSearchFix: function(i) {
            if ($("#scheduleSearchBox").val() === "") {
                b.Data.scheduleItems.setSearchTerm("")
            }
        },
        doScheduleSearch: function(i) {
            var j = $("#scheduleSearchBox").val();
            if (j && j !== null) {
                b.Data.scheduleItems.setSearchTerm(j);
                b.Us.updateSchedule()
            }
            return false
        },
        doScheduleSearchEnter: function(i) {
            if (i.keyCode == 13) {
                this.doScheduleSearch(i);
                return false
            }
        }
    });
    b.Vs.ScheduleFilterView = Bb.View.extend({
        template: "athleticschedule/athleticschedulefilter.template.html",
        className: "ch",
        filterRange: {
            allDates: true,
            past: true,
            upcoming: false,
            daterange: false
        },
        events: {
            "click .athletic-event-type-filter": "setScheduleType",
            "click .athletic-schedule-time-filter": "setFilterRange",
            "change #scheduleFilterStartDatePicker": "setDateRange",
            "change #scheduleFilterEndDatePicker": "setDateRange"
        },
        initialize: function(i) {
            this.showDateRanges(false);
            this.filterRange.allDates = false;
            this.filterRange.past = false;
            this.filterRange.upcoming = true;
            this.filterRange.daterange = false;
            this.canEdit = (this.options.canEdit || false);
            this.hideCalendar = (this.options.hideCalendar || false);
            this.hideBulkPractices = (this.options.hideBulkPractices || false);
            this.isLite = (this.hideCalendar && this.hideBulkPractices);
            this.athleticPrivileges = b.Us.getAthleticPrivileges(this.canEdit, this.isLite, this.hideBulkPractices)
        },
        renderTemplate: function() {
            var i = this;
            p3.fT(i.template, function(j) {
                i.$el.html(j({
                    allDates: i.filterRange.allDates,
                    past: i.filterRange.past,
                    upcoming: i.filterRange.upcoming,
                    daterange: i.filterRange.daterange,
                    leadSectionId: i.options.leadSectionId,
                    canEdit: i.canEdit,
                    hideCalendar: i.hideCalendar,
                    hideBulkPractices: i.hideBulkPractices,
                    isLite: i.isLite,
                    athleticPrivileges: i.athleticPrivileges
                }));
                d.Us.initialize("#scheduleFilterStartDatePicker", {
                    changeMonth: true,
                    changeYear: true
                });
                d.Us.initialize("#scheduleFilterEndDatePicker", {
                    changeMonth: true,
                    changeYear: true
                })
            })
        },
        render: function(i) {
            var j = this;
            p3.fT(j.template, function(k) {
                j.$el.html(k({
                    allDates: j.filterRange.allDates,
                    past: j.filterRange.past,
                    upcoming: j.filterRange.upcoming,
                    daterange: j.filterRange.daterange,
                    leadSectionId: j.options.leadSectionId,
                    canEdit: j.canEdit,
                    durationId: j.options.durationId,
                    hideCalendar: j.hideCalendar,
                    hideBulkPractices: j.hideBulkPractices,
                    isLite: j.isLite,
                    athleticPrivileges: j.athleticPrivileges
                }));
                $(i).append(j.el);
                d.Us.initialize("#scheduleFilterStartDatePicker", {
                    changeMonth: true,
                    changeYear: true
                });
                d.Us.initialize("#scheduleFilterEndDatePicker", {
                    changeMonth: true,
                    changeYear: true
                });
                j.showDateRanges(j.filterRange.daterange)
            })
        },
        setScheduleType: function(n) {
            n.preventDefault();
            var l = $(n.currentTarget),
                i = l.find("i"),
                k = l.closest("ul"),
                j = l.closest("ul").find("li"),
                r = l.data("typeId"),
                m = false,
                o, p, q;
            if (r === -1) {
                o = k.find("i");
                if (o.length > 0) {
                    _.each(o, function(s) {
                        $(s).removeClass("p3icon-ok").addClass("p3icon-check");
                        $(s).closest("div").removeClass("active-filter").addClass("inactive-filter")
                    });
                    i.removeClass("p3icon-check").addClass("p3icon-ok");
                    i.closest("div").removeClass("inactive-filter").addClass("active-filter")
                }
                m = true
            } else {
                k.find("i:first").removeClass("p3icon-ok").addClass("p3icon-check");
                k.find("i:first").closest("div").removeClass("active-filter").addClass("inactive-filter");
                if (i.hasClass("p3icon-ok")) {
                    i.removeClass("p3icon-ok").addClass("p3icon-check");
                    i.closest("div").removeClass("active-filter").addClass("inactive-filter")
                } else {
                    i.removeClass("p3icon-check").addClass("p3icon-ok");
                    i.closest("div").removeClass("inactive-filter").addClass("active-filter")
                }
                if (k.find("i.p3icon-ok").length === 0) {
                    k.find("i:first").removeClass("p3icon-check").addClass("p3icon-ok");
                    k.find("i:first").closest("div").removeClass("inactive-filter").addClass("active-filter");
                    m = true
                }
            }
            p = 0;
            if (this.options.scheduleItems) {
                if (!m) {
                    q = j.find(".p3icon-ok");
                    _.each(q, function(s) {
                        p += $(s).closest("a").data("typeId")
                    })
                }
            }
            this.options.scheduleItems.setScheduleTypeFilter(p);
            b.Us.updateSchedule()
        },
        setFilterRange: function(l) {
            l.preventDefault();
            var k = $(l.currentTarget),
                i = k.find("i"),
                j = k.closest("ul"),
                m = j.find("i"),
                n = k.data("typeId");
            if (m.length > 0) {
                _.each(m, function(o) {
                    $(o).removeClass("p3icon-radioOn").addClass("p3icon-radioOff");
                    $(o).closest("div").removeClass("active-filter").addClass("inactive-filter")
                });
                i.removeClass("p3icon-radioOff").addClass("p3icon-radioOn");
                i.closest("div").removeClass("inactive-filter").addClass("active-filter")
            }
            this.filterRange.allDates = false;
            this.filterRange.past = false;
            this.filterRange.upcoming = false;
            this.filterRange.daterange = false;
            if (this.options.scheduleItems) {
                if (n == 3) {
                    this.options.scheduleItems.setDateSortFilter(null);
                    this.filterRange.daterange = true;
                    this.showDateRanges(true)
                } else {
                    this.options.scheduleItems.setDateSortFilter(n);
                    switch (n) {
                        case 0:
                            this.filterRange.allDates = true;
                            break;
                        case 1:
                            this.filterRange.past = true;
                            break;
                        case 2:
                            this.filterRange.upcoming = true;
                            break
                    }
                    this.showDateRanges(false)
                }
            }
            b.Us.updateSchedule()
        },
        setDateRange: function() {
            var k = $("#scheduleFilterStartDatePicker"),
                i = $("#scheduleFilterEndDatePicker"),
                l = k.attr("value") || $(k).datepicker("getDate"),
                j = i.attr("value") || $(i).datepicker("getDate");
            if (l !== null && j !== null && !$(k).hasClass("invalid") && !$(i).hasClass("invalid")) {
                this.options.scheduleItems.setStartDateFilter(c.getDateString(l));
                this.options.scheduleItems.setEndDateFilter(c.getDateString(j));
                b.Us.updateSchedule()
            }
        },
        showDateRanges: function(i) {
            if (i == false) {
                $("#scheduleFilterStartDatePicker").attr("disabled", "disabled");
                $("#scheduleFilterEndDatePicker").attr("disabled", "disabled");
                $("#scheduleFilterStartDatePicker").siblings("label").removeClass("active-filter").addClass("inactive-filter");
                $("#scheduleFilterEndDatePicker").siblings("label").removeClass("active-filter").addClass("inactive-filter")
            } else {
                $("#scheduleFilterStartDatePicker").removeAttr("disabled");
                $("#scheduleFilterEndDatePicker").removeAttr("disabled");
                $("#scheduleFilterStartDatePicker").siblings("label").removeClass("inactive-filter").addClass("active-filter");
                $("#scheduleFilterEndDatePicker").siblings("label").removeClass("inactive-filter").addClass("active-filter")
            }
        }
    });
    b.Vs.ScheduleListView = Bb.View.extend({
        template: "athleticschedule/athleticschedulelistview.template.html",
        className: "ch",
        events: {
            "click a.schedule-list-delete-button": "showDeleteDialog",
            "click a.schedule-list-edit-button": "showEditDialog",
            "click a.athletic-detail-link": "showDetails"
        },
        initialize: function() {
            this.canEdit = this.options.canEdit || false;
            this.isLite = this.options.isLite || false;
            b.Us.initializeData(this.canEdit);
            b.Us.initializeNotifications(this.sectionId);
            this.athleticPrivileges = b.Us.getAthleticPrivileges(this.canEdit, this.isLite, true);
            this.collection.bind("reset change", this.renderTemplate, this)
        },
        renderTemplate: function() {
            var i = this;
            p3.fT(i.template, function(o) {
                var m = "",
                    p = [],
                    k, j, n, l;
                i.collection.each(function(q) {
                    if (q.get("Gamedate")) {
                        j = c.getDate(q.get("Gamedate"));
                        n = c.displayDate(j, "monthYear");
                        if (n !== m) {
                            m = n;
                            k = [];
                            p.push({
                                heading: n,
                                scheduleItems: k
                            })
                        }
                        q.set("Location", q.get("location"));
                        l = q.get("ScheduleTypeText");
                        if (l === "Game") {
                            q.set("UserCanEdit", i.athleticPrivileges.canEditGame)
                        } else {
                            if (l === "Practice") {
                                q.set("UserCanEdit", i.athleticPrivileges.canEditPractice)
                            }
                        }
                        k.push(q.toJSON())
                    }
                });
                if (p.length === 0 && $("#scheduleSearchBox").length > 0) {
                    if ($("#scheduleSearchBox").val() !== "") {
                        i.$el.html("<h5>Your search did not return any results.</h5>")
                    } else {
                        if (b.Data.scheduleItems.dateSort == null && (b.Data.scheduleItems.startDate == null || b.Data.scheduleItems.endDate == null)) {
                            i.$el.html("<h5>Enter date range to view schedule.</h5>")
                        } else {
                            i.$el.html("<h5>There are no schedule items to display.</h5>")
                        }
                    }
                } else {
                    if ($("#scheduleSearchBox").length === 0) {
                        i.$el.html("")
                    } else {
                        i.$el.html(o({
                            leadSectionId: i.options.leadSectionId,
                            sortedItems: p
                        }))
                    }
                }
            })
        },
        renderSearch: function(i) {
            var j = this;
            p3.fT(j.template, function(k) {
                j.$el.html(k({
                    leadSectionId: j.options.leadSectionId,
                    sortedItems: i,
                    athleticPrivileges: j.athleticPrivileges
                }))
            })
        },
        render: function(i) {
            Hb.registerHelper("ScheduleDetailLink", function(k, j) {
                var l = "";
                if (k.ShowDetails) {
                    l += '<a href class="athletic-detail-link" data-schedule-id="' + k.ScheduleId + '" data-type="' + k.ScheduleTypeText + '">Directions & Details</a>'
                }
                return l
            });
            Hb.registerHelper("FormatDate", function(j) {
                var k = c.getDate(j),
                    l;
                l = "<h6>" + c.displayDate(k, "abbrDay") + "</h6>";
                l += "<h1>" + k.getDate() + "</h1>";
                return l
            });
            $(i).append(this.el);
            b.Us.updateSchedule()
        },
        showButtons: function(j) {
            var i = $(j.currentTarget).find("a.btn"),
                k, l;
            for (k = 0, l = i.length; k < l; k++) {
                $(i[k]).show()
            }
        },
        hideButtons: function(j) {
            var i = $(j.currentTarget).find("a.btn"),
                k, l;
            for (k = 0, l = i.length; k < l; k++) {
                $(i[k]).hide()
            }
        },
        showDeleteDialog: function(j) {
            var l = this,
                i = $(j.currentTarget),
                k = i.data("schedule-id");
            if (i.data("type") == "Game") {
                p3.showConfirm(null, "Warning: Once you hit confirm there is no undo button. Are you really sure you want to delete this forever?", null, function() {
                    var m = new b.Ms.GameDelete({
                        ScheduleId: k
                    });
                    m.destroy({
                        error: function() {
                            p3.displayError("Error deleting game")
                        },
                        success: function() {
                            b.Us.updateSchedule()
                        }
                    })
                })
            } else {
                p3.showConfirm(null, "Warning: Once you hit confirm there is no undo button. Are you really sure you want to delete this forever?", null, function() {
                    var m = new b.Ms.PracticeDelete({
                        PracticeId: k,
                        TeamId: l.options.sectionId
                    });
                    m.destroy({
                        error: function() {
                            p3.displayError("Error deleting practice")
                        },
                        success: function() {
                            b.Us.updateSchedule()
                        }
                    })
                })
            }
            return false
        },
        showEditDialog: function(j) {
            var n = this,
                i = $(j.currentTarget),
                m = i.data("schedule-id"),
                k, l;
            if (i.data("type") == "Game") {
                k = b.Us.getGameDetails(m);
                b.Us.openGameScheduleDialog(m, k, n.options.leadSectionId, false, null, false, n.isLite, n.athleticPrivileges)
            } else {
                l = b.Us.getPracticeItem(m, n.options.leadSectionId);
                b.Us.openEditPracticeDialog(m, l, n.options.leadSectionId, false, null, false, n.athleticPrivileges)
            }
            return false
        },
        showDetails: function(j) {
            var i = $(j.currentTarget),
                k = i.data("schedule-id"),
                l;
            if (i.data("type") == "Game") {
                l = b.Us.getGameDetails(k);
                p3.rV(new b.Vs.GameScheduleDetailsView({
                    scheduleItem: l.toJSON()
                }), p3.Layout.Containers.Modal, true)
            } else {
                l = b.Us.getPracticeDetails(k);
                p3.rV(new b.Vs.PracticeDetailsView({
                    scheduleItem: l.toJSON()
                }), p3.Layout.Containers.Modal, true)
            }
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        }
    });
    b.Vs.EditGameScheduleView = Bb.View.extend({
        template: "athleticschedule/gameschedule.edit.template.html",
        events: {
            "click #btnSaveGame": "saveGame",
            "click #btnSaveAddGame": "saveGame",
            "click #btn-add-oppponent": "showOpponents",
            "change #opponent-select-control": "addOpponent",
            "click .transportation-link": "addTransportation",
            "click .opponent-delete-button": "deleteOpponent",
            "click .transport-delete-button": "deleteTransportation",
            "change #rescheduleDropdown": "scheduleChange",
            "click #btnDeleteGame": "deleteGame",
            "click #switch-add-schedule-link": "switchAddMode",
            "change #teamDropdown": "teamChanged"
        },
        initialize: function() {
            this.sectionId = this.options.sectionId || 0;
            this.athleticPrivileges = this.options.athleticPrivileges || {};
            p3.Layout.Containers.Modal.on("shown.bs.modal", function() {
                window.setTimeout(function() {
                    d.Us.initialize(".date-input");
                    h.Us.initialize(".time-picker-field", {
                        placeholder: "TBA",
                        midnight: "TBA"
                    });
                    h.Us.initialize(".time-picker-field-no-tba", {
                        placeholder: "TBA",
                        midnight: "TBA"
                    });
                    window.setTimeout(function() {
                        $(".time-picker-field-no-tba").each(function() {
                            if ($(this).val() == "TBA") {
                                $(this).val("12:00 AM")
                            }
                        })
                    }, 400);
                    $("#send_notif_label").tooltip();
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                }, 400)
            })
        },
        render: function(i) {
            var j = this;
            p3.fT(j.template, function(o) {
                var l = false,
                    m = "",
                    k, n;
                if (j.options.scheduleId > 0) {
                    if (b.Data.editGameNotif && b.Data.editGameNotif.pk == j.options.sectionId) {
                        l = b.Data.editGameNotif.enabled;
                        m = b.Data.editGameNotif.tooltip
                    } else {
                        k = new f.Cs.NotificationActive({}, {
                            actionId: 43,
                            pk: j.options.sectionId
                        });
                        b.Data.editGameNotif = k;
                        k.fetch({
                            async: false,
                            success: function() {
                                k.setNotificationProperties();
                                l = b.Data.editGameNotif.enabled;
                                m = b.Data.editGameNotif.tooltip
                            },
                            error: function() {
                                p3.displayError("Error loading notification settings")
                            }
                        })
                    }
                } else {
                    if (b.Data.addGameNotif && b.Data.addGameNotif.pk == j.options.sectionId) {
                        l = b.Data.addGameNotif.enabled;
                        m = b.Data.addGameNotif.tooltip
                    }
                }
                n = [];
                if (j.options.showTeamPicker) {
                    n = b.Data.EditableTeams.toJSON()
                }
                _.each(j.options.scheduleItem.get("Vehicles"), function(p) {
                    if (p.BeginDate === p.EndDate && p.BeginTime === "00:00:00" && p.EndTime === "23:59:00") {
                        p.AllDaySelected = true
                    }
                });
                j.$el.html(o({
                    scheduleId: j.options.scheduleId,
                    notifEnabled: l,
                    notifTooltip: m,
                    scheduleItem: j.options.scheduleItem.toJSON(),
                    venues: b.Data.venues.toJSON(),
                    locations: b.Data.locations.toJSON(),
                    opponents: b.Data.opponents.toJSON(),
                    transportation: b.Data.transportation.toJSON(),
                    showTeamPicker: j.options.showTeamPicker,
                    teams: n,
                    cancelled: (j.options.scheduleItem.get("CancelType") == 1),
                    athleticPrivileges: j.athleticPrivileges
                }));
                $(i).html(j.el)
            })
        },
        teamChanged: function() {
            $("#teamGroup").removeClass("error");
            var l = $("#teamDropdown").val(),
                j = false,
                k = "",
                i;
            if (l > 0) {
                if (b.Data.addGameNotif && b.Data.addGameNotif.pk == l) {
                    j = b.Data.addGameNotif.enabled;
                    k = b.Data.addGameNotif.tooltip
                } else {
                    i = new f.Cs.NotificationActive({}, {
                        actionId: 42,
                        pk: l
                    });
                    b.Data.addGameNotif = i;
                    i.fetch({
                        async: false,
                        success: function() {
                            i.setNotificationProperties();
                            j = b.Data.addGameNotif.enabled;
                            k = b.Data.addGameNotif.tooltip
                        },
                        error: function() {
                            p3.displayError("Error loading notification settings")
                        }
                    })
                }
            }
            $("#send_notif_label").attr("data-original-title", k);
            if (!j) {
                $("#send_notif_check").addClass("disabled");
                $("#send_notif_check").removeClass("btn-approve")
            } else {
                $("#send_notif_check").removeClass("disabled");
                $("#send_notif_check").addClass("btn-approve")
            }
            if (j) {
                $("#send_notif_check").addClass("active")
            } else {
                $("#send_notif_check").removeClass("active")
            }
        },
        saveGame: function(j) {
            var s = true,
                u = this,
                m = [],
                t = [],
                l = [],
                o = u.options.sectionId,
                n, k, i, p, r, q;
            $("#btnSaveGame").button("loading");
            $("#btnSaveAddGame").button("loading");
            $(".error-message-container").html("");
            i = (j.target.id == "btnSaveAddGame");
            if ($("#gameDate").val().length == 0) {
                s = false;
                $(".game-date-time").addClass("error")
            }
            if (u.options.showTeamPicker) {
                if ($("#teamDropdown").val() == 0) {
                    s = false;
                    $("#teamGroup").addClass("error")
                } else {
                    o = $("#teamDropdown").val()
                }
            }
            if (s) {
                n = new b.Ms.ScheduleItem({
                    ScheduleId: u.options.scheduleId,
                    Opponents: m,
                    Vehicles: t,
                    SectionId: o,
                    DragAndDrop: false
                });
                k = $("#gameDate").val();
                if ($("#gameTime").val()) {
                    k += " " + $("#gameTime").getTime()
                }
                n.set("Gamedate", k);
                if (u.options.scheduleId == 0) {
                    n.set("CancelType", 0)
                } else {
                    if ($("#rescheduleDropdown").val() == 3) {
                        n.set("CancelType", 0);
                        n.set("ClearReschedule", true)
                    } else {
                        n.set("CancelType", $("#rescheduleDropdown").val());
                        if ($("#rescheduleDropdown").val() == "1") {
                            n.set("SkipValidation", true)
                        }
                    }
                }
                n.set("ScheduleType", 0);
                n.set("HomeAwayType", $("#homeAwayDropdown").val());
                if ($("#locationDropdown").val() != "0") {
                    n.set("LocationId", $("#locationDropdown").val());
                    if ($("#locationDropdown :selected").parent().attr("label") == "Venues") {
                        n.set("LocationInd", 0)
                    } else {
                        n.set("LocationInd", 1)
                    }
                }
                $("tr.opponent-row").each(function() {
                    if (!$(this).hasClass("delete-pending")) {
                        m.push({
                            Id: $(this).data("oppid")
                        })
                    }
                });
                $("tr.transport-row").each(function() {
                    if (!$(this).hasClass("delete-pending")) {
                        var z = "",
                            B = "",
                            C = false,
                            E = $(this).data("transid") || 0,
                            x, y, v, w, D, A;
                        if ($("input:radio[name=rdo" + E + "]:checked").val() == 0) {
                            C = true
                        } else {
                            x = $(this).find(".trans-start-date");
                            y = $(this).find(".trans-start-time");
                            v = $(this).find(".trans-end-date");
                            w = $(this).find(".trans-end-time");
                            if (x.val().length == 0 || y.getTime().length == 0 || v.val().length == 0 || w.getTime().length == 0) {
                                s = false;
                                x.addClass("error");
                                y.addClass("error");
                                v.addClass("error");
                                w.addClass("error");
                                if ($.inArray("Whoops! To reserve a vehicle you'll need to enter start and end dates and times.", l) === -1) {
                                    l.push("Whoops! To reserve a vehicle you'll need to enter start and end dates and times.")
                                }
                            }
                            z = x.val() + " " + y.getTime();
                            B = v.val() + " " + w.getTime();
                            D = Date.parse(z);
                            A = Date.parse(B);
                            if (D >= A) {
                                x.addClass("error");
                                y.addClass("error");
                                v.addClass("error");
                                w.addClass("error");
                                s = false;
                                if ($.inArray("Whoops! To reserve a vehicle the start date and time must come before the end date and time.", l) === -1) {
                                    l.push("Whoops! To reserve a vehicle the start date and time must come before the end date and time.")
                                }
                            }
                        }
                        $(this).find("div").removeClass("box-validate");
                        $(this).attr("data-original-title", "");
                        t.push({
                            TransportationId: E,
                            EntireDate: C,
                            BeginDate: z,
                            EndDate: B
                        })
                    }
                });
                p = c.getDateString(c.localDateTime());
                if ($("#dismissalTime").length > 0) {
                    r = $("#dismissalTime").val().trim()
                }
                q = r ? c.isMidnight(r) : false;
                if (r && !q) {
                    r = c.displayTime(c.getTimeString(c.getDate((p + " " + r))), true, "timeSpan");
                    n.set("DismissalTime", r)
                }
                if ($("#departureTime").length > 0) {
                    r = $("#departureTime").val().trim()
                }
                q = r ? c.isMidnight(r) : false;
                if (r && !q) {
                    r = c.displayTime(c.getTimeString(c.getDate((p + " " + r))), true, "timeSpan");
                    n.set("DepartureTime", r)
                }
                if ($("#pickupTime").length > 0) {
                    r = $("#pickupTime").val().trim()
                }
                q = r ? c.isMidnight(r) : false;
                if (r && !q) {
                    r = c.displayTime(c.getTimeString(c.getDate((p + " " + r))), true, "timeSpan");
                    n.set("PickupTime", r)
                }
                n.set("DepartureNote", $("#departureTextbox").val());
                n.set("PickupNote", $("#pickupTextbox").val());
                n.set("Title", $("#titleTextbox").val());
                if ($("#rdoLeague").hasClass("active")) {
                    n.set("LeagueInd", 1)
                } else {
                    n.set("LeagueInd", 0)
                }
                n.set("ScrimmageInd", $("#chkScrimmage").hasClass("active"));
                n.set("TournamentInd", $("#chkTournament").hasClass("active"));
                n.set("InvitationalInd", $("#chkInvitational").hasClass("active"));
                n.set("PlayoffInd", $("#chkPlayoff").hasClass("active"));
                n.set("AdditionalNotes", $("#txtNotes").val());
                n.set("SendNotification", $("#send_notif_check").hasClass("active"))
            }
            if (s) {
                n.save({}, {
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error saving Game")
                    },
                    success: function(w, x) {
                        var v = w.get("Conflicts"),
                            y = (!v || v.length == 0),
                            z;
                        if (!y) {
                            b.Us.openScheduleConfirmDialog(n, true, u.options.scheduleId > 0, b.Us.getConflictText(v), u.options.calendarView, false, i, null, u.sectionId, u.options.dashboardView, u.options.showTeamPicker, u);
                            $("#btnSaveGame").button("reset");
                            $("#btnSaveAddGame").button("reset")
                        }
                        if (y) {
                            if (i) {
                                z = new b.Ms.ScheduleItem({
                                    GameType: 0,
                                    HomeAway: 0,
                                    LocationId: -1,
                                    LeagueInd: 1
                                });
                                p3.rV(new b.Vs.EditGameScheduleView({
                                    scheduleId: 0,
                                    scheduleItem: z,
                                    sectionId: u.sectionId,
                                    calendarView: u.options.calendarView,
                                    showTeamPicker: u.options.showTeamPicker,
                                    isLite: u.options.isLite
                                }), p3.Layout.Containers.Modal, true);
                                d.Us.initialize(".date-input");
                                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TimePicker, function() {
                                    $(".time-picker-field").timepicker({
                                        placeholder: "TBA",
                                        midnight: "TBA",
                                        render24Hour: c.is24HourFormat()
                                    })
                                });
                                $("#send_notif_label").tooltip();
                                p3.setModalHeight(p3.Layout.Containers.Modal)
                            } else {
                                u.trigger("dataModified");
                                p3.showModal(p3.Layout.Containers.Modal, "hide")
                            }
                            if (u.options.dashboardView) {
                                u.options.dashboardView.refreshDashboard()
                            } else {
                                if (u.options.calendarView) {
                                    b.Us.updateCalendar(u.sectionId)
                                } else {
                                    b.Us.updateSchedule()
                                }
                            }
                        }
                    }
                })
            } else {
                $("#btnSaveGame").button("reset");
                $("#btnSaveAddGame").button("reset");
                _.each(l, function(v) {
                    p3.Us.InfoMessage.ErrorBox(v, ".error-message-container", false)
                })
            }
            return false
        },
        scheduleChange: function(i) {
            if ($("#rescheduleDropdown").val() == 2) {
                $("#original_date").show();
                $("#gameDate").val("");
                $("#gameTime").val("")
            } else {
                $("#original_date").hide()
            }
        },
        showOpponents: function(j) {
            var i = $("#opponent-select-control");
            if (i.is(":hidden")) {
                i.show()
            } else {
                i.hide()
            }
        },
        addOpponent: function(l) {
            var o = this,
                i = o.$("#opponent-select-control"),
                j = i.find(":selected"),
                n = j.val(),
                k = true,
                m;
            $("tr.opponent-row").each(function(p) {
                if ($(this).data("oppid") == n) {
                    k = false
                }
            });
            if (n === 0) {
                k = false
            }
            if (k) {
                m = '<tr class="opponent-row" data-oppid="' + n + '"><td width="95%">' + j.text() + "</td>";
                m += '<td><button data-oppid="' + n + '" data-add="1" class="btn opponent-delete-button"><i class="p3icon-delete"></i></button></td></tr>';
                $("#opponentTable tbody:last").append(m);
                p3.setModalHeight(p3.Layout.Containers.Modal)
            }
            j.removeAttr("selected");
            i.hide();
            return false
        },
        deleteOpponent: function(k) {
            var i = $(k.currentTarget),
                j;
            if (i.data("add") == "1") {
                i.closest("tr").remove()
            } else {
                i.closest("tr").addClass("delete-pending");
                j = i.closest("tr").find("td");
                j[0].innerHTML = '<div class="alert alert-error">This opponent will be deleted on save.</div>';
                j[1].innerHTML = "&nbsp;"
            }
        },
        addTransportation: function(j) {
            var m = $(j.currentTarget).data("id"),
                i = true,
                l, k;
            $("tr.transport-row").each(function(n) {
                if ($(this).data("transid") == m) {
                    i = false
                }
            });
            if (i) {
                l = $("#gameDate").val();
                k = '<tr class="transport-row" data-transid="' + m + '" ><td width="95%"><div>' + $(j.currentTarget).text() + "<br />";
                k += '<label class="radio"><input type="radio" name="rdo' + m + '" value="0" checked="">Entire Day</label>';
                k += '<label class="radio"><input type="radio" name="rdo' + m + '" value="1">Specific Time Period</label>';
                k += '&nbsp;&nbsp;&nbsp;&nbsp;Start:&nbsp;<input type="text" class="input-small trans-start-date date-input" style="margin-bottom:4px;" value="' + l + '"/>&nbsp;<input type="text" class="input-mini trans-start-time time-picker-field" style="margin-bottom:4px;"/><br />';
                k += '&nbsp;&nbsp;&nbsp;&nbsp;End:&nbsp;&nbsp;<input type="text" class="input-small trans-end-date date-input" value="' + l + '"/>&nbsp;<input type="text" class="input-mini trans-end-time time-picker-field"/>';
                k += "</div></td>";
                k += '<td><button data-transid="' + m + '" data-add="1" class="btn btn-default transport-delete-button"><i class="p3icon-delete"></i></button></td></tr>';
                $("#transportTable tbody:last").append(k);
                d.Us.initialize(".date-input");
                $(".time-picker-field").timepicker({
                    render24Hour: c.is24HourFormat()
                });
                p3.setModalHeight(p3.Layout.Containers.Modal)
            }
            $(".btn-group.open").removeClass("open");
            return false
        },
        deleteTransportation: function(k) {
            var i = $(k.currentTarget),
                j;
            if (i.data("add") == "1") {
                i.closest("tr").remove()
            } else {
                i.closest("tr").addClass("delete-pending");
                j = i.closest("tr").find("td");
                j[0].innerHTML = '<div class="alert alert-error">This vehicle will be deleted on save.</div>';
                j[1].innerHTML = "&nbsp;"
            }
            $(".tooltip").remove()
        },
        deleteGame: function(j) {
            var k = this,
                i = new b.Ms.GameDelete({
                    ScheduleId: k.options.scheduleId
                });
            b.Us.showDeleteConfirm(i, k.sectionId, k.options.calendarView, k)
        },
        switchAddMode: function(i) {
            var l = this,
                j, k;
            p3.showModal(p3.Layout.Containers.Modal, "hide");
            if (l.options.calendarView || l.options.dashboardView) {
                j = l.options.scheduleItem.get("Gamedate")
            }
            k = new b.Ms.ScheduleItem({
                PracticeDate: j
            });
            b.Us.openEditPracticeDialog(0, k, l.sectionId, l.options.calendarView, l.options.dashboardView, l.options.showTeamPicker, l.athleticPrivileges, l.options.dataModifiedCallback);
            return false
        }
    });
    b.Vs.GameScheduleDetailsView = Bb.View.extend({
        template: "athleticschedule/athleticschedule.details.template.html",
        events: {
            "change #calendarType": "addToCalendar"
        },
        initialize: function() {
            this.scheduleItem = this.options.scheduleItem;
            p3.Layout.Containers.Modal.on("shown.bs.modal", function() {
                window.setTimeout(function() {
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                }, 400)
            })
        },
        generateTitle: function() {
            var n = this,
                l = n.scheduleItem,
                k, j, i, m;
            k = l.Opponents.length === 0 ? "" : l.Opponents.length === 1 ? l.Opponents[0].Name : "Multiple";
            j = l.LeagueInd ? "League" : "Non-League";
            if (l.ScrimmageInd) {
                i = "Scrimmage"
            }
            if (l.TournamentInd) {
                i = "Tournament"
            }
            if (l.InvitationalInd) {
                i = "Invitational"
            }
            if (l.PlayoffInd) {
                i = "Playoff"
            }
            if (k && !i) {
                m = l.Team + " vs. " + k + " - " + j
            } else {
                if (k && i) {
                    m = l.Team + " vs. " + k + " - " + j + " - " + i
                } else {
                    if (!k && !i) {
                        m = l.Team + " - " + j
                    } else {
                        m = l.Team + " - " + j + " - " + i
                    }
                }
            }
            return m
        },
        addToCalendar: function() {
            var n = this,
                j = n.scheduleItem,
                m, l, k, i;
            m = $("#calendarType option:selected").val();
            if (m !== "") {
                l = j.Title !== "" ? j.Title : n.generateTitle();
                k = j.StartTime === "TBA" ? "12:00 AM" : j.StartTime;
                i = moment(j.Gamedate + " " + k).add(3, "hours");
                p3.ical_download(k, i.format("hh:mm:ss a"), j.Gamedate, i.format("MM/DD/YYYY"), l, j.AdditionalNotes, j.Location, m, $(".athletic-directions"))
            }
        },
        render: function(i) {
            var n = this,
                l = false,
                m = false,
                k = n.scheduleItem,
                j;
            if (k.DismissalTime || k.Vehicles.length > 0 || k.DepartureNote || k.DepartureTime || k.PickupNote || k.PickupTime || k.AdditionalNotes) {
                l = true
            }
            j = k.LocationDetail;
            if (j.Directions || j.MapUrl || j.AddressLine1 || k.RoomDirections) {
                m = true;
                if (j.Directions) {
                    j.Directions = j.Directions.replace(/\r/g, "<br />")
                }
                if (k.RoomDirections) {
                    k.RoomDirections = k.RoomDirections.replace(/\r/g, "<br />")
                }
            }
            p3.fT(n.template, function(q) {
                var p = "",
                    o = "";
                if (j.AddressLine1) {
                    p = j.AddressLine1;
                    o = j.AddressLine1;
                    if (j.AddressLine2) {
                        p += j.AddressLine2;
                        o += "<br />" + j.AddressLine2
                    }
                    if (j.AddressLine3) {
                        p += " " + j.AddressLine3;
                        o += "<br />" + j.AddressLine3
                    }
                    if (j.City) {
                        p += " " + j.City;
                        o += "<br />" + j.City
                    }
                    if (j.StateShort) {
                        p += " " + j.StateShort;
                        if (j.City) {
                            o += ", " + j.StateShort
                        } else {
                            o += "<br />" + j.StateShort
                        }
                    }
                    if (j.Zip) {
                        p += " " + j.Zip;
                        if (j.City || j.State) {
                            o += " " + j.Zip
                        } else {
                            o += "<br />" + j.Zip
                        }
                    }
                }
                n.$el.html(q({
                    scheduleItem: k,
                    showDetail: l,
                    showDirections: m,
                    address: o
                }));
                $(i).html(n.el);
                if (j.AddressLine1) {
                    b.Us.addMapScript(p)
                }
            })
        }
    });
    b.Vs.PracticeDetailsView = Bb.View.extend({
        template: "athleticschedule/practice.details.template.html",
        events: {
            "change #calendarType": "addToCalendar"
        },
        initialize: function() {
            this.scheduleItem = this.options.scheduleItem;
            p3.Layout.Containers.Modal.on("shown.bs.modal", function() {
                window.setTimeout(function() {
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                }, 400)
            })
        },
        addToCalendar: function() {
            var l = this,
                j = l.scheduleItem,
                k, i;
            k = $("#calendarType option:selected").val();
            i = j.practice_note || "";
            if (k !== "") {
                p3.ical_download(j.StartTime, j.EndTime, j.PracticeDate, j.PracticeDate, "Practice- " + j.groupname, i, j.location, k, $(".athletic-directions"))
            }
        },
        render: function(i) {
            var m = this,
                k = false,
                l = false,
                j = m.scheduleItem;
            if (j.DismissalTime || j.transportation_name || j.DepartureTime || j.PickupTime || j.practice_note) {
                k = true
            }
            if (j.directions || j.map_url || j.line_one) {
                l = true;
                if (j.directions) {
                    j.directions = j.directions.replace(/\r/g, "<br />")
                }
            }
            p3.fT(m.template, function(p) {
                var o = "",
                    n = "";
                if (j.line_one) {
                    o = j.line_one;
                    n = j.line_one;
                    if (j.line_two) {
                        o += j.line_two;
                        n += "<br />" + j.line_two
                    }
                    if (j.line_three) {
                        o += " " + j.line_three;
                        n += "<br />" + j.line_three
                    }
                    if (j.city) {
                        o += " " + j.city;
                        n += "<br />" + j.city
                    }
                    if (j.state_short) {
                        o += " " + j.state_short;
                        if (j.city) {
                            n += ", " + j.state_short
                        } else {
                            n += "<br />" + j.state_short
                        }
                    }
                    if (j.zip) {
                        o += " " + j.zip;
                        if (j.city || j.state_short) {
                            n += " " + j.zip
                        } else {
                            n += "<br />" + j.zip
                        }
                    }
                }
                m.$el.html(p({
                    scheduleItem: j,
                    showDetail: k,
                    showDirections: l,
                    address: n
                }));
                $(i).html(m.el);
                if (j.line_one) {
                    b.Us.addMapScript(o)
                }
            })
        }
    });
    b.Vs.CalendarView = Bb.View.extend({
        template: "page/page.1col.wide.template.html",
        events: {
            "click .scheduleTypeFilter": "setScheduleType",
            "click #week-view": "weekView",
            "click #month-view": "monthView",
            "click #button-today": "gotoToday",
            "click #button-previous": "movePrevious",
            "click #button-next": "moveNext"
        },
        initialize: function() {
            this.userHasFullAccess = this.options.userHasFullAccess || false;
            this.isOwner = this.options.isOwner || false;
            this.isManager = this.options.isManager || false;
            this.content = this.options.content;
            this.canEdit = false;
            this.isEditor = false;
            if (this.userHasFullAccess) {
                this.options.canEdit = true
            } else {
                var i = this.content.get(45);
                if (i && i.get("EditorAccess")) {
                    this.options.canEdit = true;
                    this.isEditor = true
                }
            }
            b.Us.initializeData(this.options.canEdit);
            b.Us.initializeNotifications(this.options.sectionId);
            b.Data.fullView = false
        },
        render: function(i) {
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                return true
            });
            var j = this;
            $(i).html(this.el);
            p3.fT(j.template, function(k) {
                j.$el.html(k());
                b.Data.leadSectionId = j.options.leadSectionId;
                b.Data.scheduleItems = new b.Cs.ScheduleItem({}, {
                    dateSort: 0,
                    scheduleType: 0,
                    startDate: null,
                    endDate: null,
                    sectionId: j.options.leadSectionId
                });
                b.Data.scheduleItems.fetch({
                    error: function(l, m) {
                        p3.displayError("Error loading schedule")
                    },
                    success: function(l, m) {
                        b.Us.BuildCalendarEventArray(j.options.leadSectionId, j.options.canEdit);
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.AthleticCalendar, j.initializeCalendar, j.options)
                    }
                })
            })
        },
        initializeCalendar: function(i) {
            b.Us.initializeCalendar(i)
        },
        setScheduleType: function(i) {
            b.Us.setScheduleType(i);
            b.Us.updateCalendar(b.Data.leadSectionId)
        },
        weekView: function(i) {
            $("#col-main").fullCalendar("changeView", "basicWeek")
        },
        monthView: function(i) {
            $("#col-main").fullCalendar("changeView", "month")
        },
        gotoToday: function(i) {
            $("#col-main").fullCalendar("today")
        },
        movePrevious: function(i) {
            $("#col-main").fullCalendar("prev")
        },
        moveNext: function(i) {
            $("#col-main").fullCalendar("next")
        }
    });
    b.Vs.FullCalendarView = Bb.View.extend({
        template: "page/page.1col.wide.template.html",
        events: {
            "click .scheduleTypeFilter": "setScheduleType",
            "click #week-view": "weekView",
            "click #month-view": "monthView",
            "click #button-today": "gotoToday",
            "click #button-previous": "movePrevious",
            "click #button-next": "moveNext",
            "click #sport-picker-button": "openSportPicker"
        },
        initialize: function() {
            var l = this,
                j = p3.Data.Context.getSelectedPersona().Id,
                k, i;
            if (j === 3 || j === 5 || j === 20 || j === 22) {
                l.options.canEdit = true
            } else {
                l.options.canEdit = false
            }
            l.options.fullCalendar = true;
            b.Us.initializeData(l.options.canEdit);
            b.Data.SelectedSportLevels = [];
            b.Data.SportLevels = new b.Cs.SportLevels();
            b.Data.SportLevels.fetch({
                error: function() {
                    p3.displayError("Error loading sport levels")
                }
            });
            b.Data.SelectedSports = new b.Cs.SportLevels();
            b.Data.SelectedSports.remove(b.Data.SelectedSports.at(0));
            l.todayDate = c.localDateTime();
            k = new Date(this.todayDate);
            k.setMonth(k.getMonth() - 3);
            i = new Date(this.todayDate);
            i.setMonth(i.getMonth() + 3);
            b.Data.startDate = k;
            b.Data.endDate = i;
            b.Data.fullView = true;
            l.options.athleticPrivileges = b.Us.getAthleticPrivileges(l.options.canEdit, false, true)
        },
        render: function(i) {
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                return true
            });
            var j = this;
            $(i).html(this.el);
            p3.fT(j.template, function(l) {
                j.$el.html(l());
                var k = '<div id="loading" class="alert alert-info" style="position: absolute; left: 47%; top: 38%; padding:6px; border:solid 1px #ff000;text-align: center;z-index: 1000; "><span id="load-icon"></span></div>';
                $("#col-main").prepend(k);
                p3.loadingIcon("#load-icon");
                b.Data.scheduleItems = new b.Cs.CalendarItem({}, {
                    startDate: c.getDateString(j.todayDate).ApiFormat(),
                    scheduleDuration: 0
                });
                b.Data.scheduleItems.fetch({
                    error: function(m, n) {
                        p3.displayError("Error loading schedule")
                    },
                    success: function(m, n) {
                        b.Us.BuildCalendarEventArray(0, j.options.canEdit);
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.AthleticCalendar, j.initializeCalendar, j.options);
                        $("#loading").remove()
                    }
                })
            })
        },
        initializeCalendar: function(i) {
            b.Us.initializeCalendar(i)
        },
        setScheduleType: function(i) {
            b.Us.setScheduleType(i);
            $("#col-main").fullCalendar("removeEvents");
            b.Us.BuildCalendarEventArray(0, true);
            $("#col-main").fullCalendar("addEventSource", b.Data.CalendarEvents)
        },
        weekView: function(i) {
            var j = this;
            $("#col-main").fullCalendar("changeView", "basicWeek");
            j.ensureData()
        },
        monthView: function(i) {
            var j = this;
            $("#col-main").fullCalendar("changeView", "month");
            j.ensureData()
        },
        gotoToday: function(j) {
            var m = this,
                l = c.localDateTime(),
                n = l.getFullYear(),
                k = l.getMonth(),
                i = l.getDate();
            if (l) {
                $("#col-main").fullCalendar("gotoDate", n, k, i);
                m.ensureData()
            }
        },
        movePrevious: function(i) {
            var j = this;
            $("#col-main").fullCalendar("prev");
            j.ensureData()
        },
        moveNext: function(i) {
            var j = this;
            $("#col-main").fullCalendar("next");
            j.ensureData()
        },
        ensureData: function() {
            var m = this,
                k = 0,
                l, j = $("#col-main").fullCalendar("getView"),
                i;
            if (j.visStart < b.Data.startDate) {
                k = -3;
                l = b.Data.startDate
            } else {
                if (j.visEnd > b.Data.endDate) {
                    k = 3;
                    l = b.Data.endDate
                }
            }
            if (k != 0) {
                i = new b.Cs.CalendarItem({}, {
                    startDate: c.getDateString(l).ApiFormat(),
                    scheduleDuration: k
                });
                i.fetch({
                    error: function(n, o) {
                        p3.displayError("Error loading additional events")
                    },
                    success: function(n, o) {
                        i.each(function(p) {
                            if (k == 3) {
                                b.Data.scheduleItems.push(p)
                            } else {
                                b.Data.scheduleItems.unshift(p)
                            }
                        });
                        if (k == 3) {
                            b.Data.endDate.setMonth(b.Data.endDate.getMonth() + 3)
                        } else {
                            b.Data.startDate.setMonth(b.Data.startDate.getMonth() - 3)
                        }
                        $("#col-main").fullCalendar("removeEvents");
                        b.Us.BuildCalendarEventArray(0, m.options.canEdit);
                        $("#col-main").fullCalendar("addEventSource", b.Data.CalendarEvents)
                    }
                })
            }
        },
        openSportPicker: function() {
            p3.rV(new b.Vs.TeamPicker({}), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        }
    });
    b.Vs.BulkAddPracticeView = Bb.View.extend({
        template: "athleticschedule/bulkpractice.template.html",
        events: {
            "click #btnSave": "savePractices",
            "click #btnApply": "applyPracticeOptions",
            "change #teamDropdown": "teamChanged"
        },
        initialize: function() {
            this.sectionId = this.options.sectionId || 0;
            p3.Layout.Containers.Modal.on("shown.bs.modal", function() {
                window.setTimeout(function() {
                    d.Us.initialize(".date-input");
                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TimePicker, function() {
                        $(".time-picker-field").timepicker({
                            render24Hour: c.is24HourFormat()
                        })
                    });
                    $("#send_notif_label").tooltip();
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                }, 400)
            })
        },
        render: function(i) {
            var k = this,
                j = [];
            if (k.options.showTeamPicker) {
                j = b.Data.EditableTeams.toJSON()
            }
            p3.fT(k.template, function(l) {
                k.$el.html(l({
                    venues: b.Data.venues.toJSON(),
                    locations: b.Data.locations.toJSON(),
                    transportation: b.Data.transportation.toJSON(),
                    showTeamPicker: k.options.showTeamPicker,
                    teams: j
                }));
                $(i).html(k.el)
            })
        },
        dayDifference: function(m, k) {
            var i = 1000 * 60 * 60 * 24,
                n = m.getTime(),
                l = k.getTime(),
                j = Math.abs(l - n);
            return Math.round(j / i)
        },
        teamChanged: function(i) {
            $("#practiceTable tbody").children().remove();
            if ($("#teamDropdown").val() != 0) {
                $("#teamDropdown").removeClass("box-validate")
            }
        },
        applyPracticeOptions: function(n) {
            var z = true,
                B = this,
                r = "",
                m = [],
                u, o, p, A, v, t, l, j, x, w, s, k, q, y;
            $("#practiceTable tbody").children().remove();
            $("#btnApply").button("loading");
            $(".modal-body").find("div.alert:first").remove();
            if ($("#startDate").val().length == 0) {
                z = false;
                $("#startDate").addClass("error");
                r = "Please enter a start date."
            } else {
                u = c.getDate($("#startDate").val());
                if ($("#endDate").val().length > 0) {
                    o = c.getDate($("#endDate").val())
                } else {
                    o = u
                }
                if ($(".day-button.active").length > 0) {
                    A = false;
                    v = c.getDate($("#startDate").val());
                    $(".day-button.active").each(function() {
                        m.push($(this).data("day"))
                    });
                    for (p = 0; p <= B.dayDifference(u, o); p++) {
                        if (m.indexOf(v.getDay()) > -1) {
                            A = true;
                            break
                        }
                        v.setDate(v.getDate() + 1)
                    }
                    if (!A) {
                        r = "No practices would be created for the date range and days of the week selected.";
                        z = false
                    }
                } else {
                    z = false;
                    r = "Please select a day of the week."
                }
            }
            t = B.options.sectionId;
            if (B.options.showTeamPicker) {
                if ($("#teamDropdown").val() == 0) {
                    z = false;
                    $("#teamDropdown").addClass("box-validate")
                } else {
                    t = $("#teamDropdown").val()
                }
            }
            if (z) {
                l = $("#startDate").val();
                l = l.ApiFormat();
                if ($("#endDate").val().length > 0) {
                    j = $("#endDate").val();
                    j = j.ApiFormat()
                } else {
                    j = l
                }
                x = $("#startTime").getTime();
                if (x) {
                    x = x.ApiFormat();
                    l += " " + x
                }
                w = $("#endTime").getTime();
                if (w) {
                    w = w.ApiFormat();
                    j += " " + w
                } else {
                    if ($("#startTime").getTime()) {
                        j += " " + x
                    }
                }
                s = 0;
                q = 0;
                y = 0;
                if ($("#locationDropdown").val() != "0") {
                    if ($("#locationDropdown :selected").parent().attr("label") == "Venues") {
                        s = $("#locationDropdown").val()
                    } else {
                        q = $("#locationDropdown").val()
                    }
                }
                if ($("#transportationDropdown").val() != "0") {
                    y = $("#transportationDropdown").val()
                }
                k = new b.Cs.PracticeDates({}, {
                    teamId: t,
                    dateStart: l,
                    dateEnd: j,
                    excludeGames: ($("#chkExcludeGame").is(":checked")),
                    weekdays: m,
                    roomId: s,
                    locationId: q,
                    transportationId: y
                });
                k.fetch({
                    error: function(i, C) {
                        p3.displayError("Error validating dates.")
                    },
                    success: function(i, C) {
                        $("#practiceContainer").show();
                        $("#btnSave").attr("disabled", false);
                        B.outputPotentialPractices(k.toJSON())
                    }
                })
            } else {
                if (r.length > 0) {
                    p3.Us.InfoMessage.ErrorBox(r, ".modal-body", false)
                }
                $("#btnSave").attr("disabled", true)
            }
            $("#btnApply").button("reset");
            return false
        },
        outputPotentialPractices: function(p) {
            var A = this,
                r, v, q, t = '<select class="location-dropdown span2 form-control"><option value="0">-- Select A Location --</option>',
                y = '<select class="transportation-dropdown span2 form-control"><option value="0">-- Select Vehicle --</option>',
                u, n, z, o, x, w, s, m = function(i) {
                    u += '<option value="' + i.get("id") + '"';
                    if (i.get("id") == p[r].RoomId && p[r].LocationInd == 0) {
                        u += " selected"
                    }
                    u += ">" + i.get("name") + "</option>"
                },
                k = function(i) {
                    u += '<option value="' + i.get("id") + '"';
                    if (i.get("id") == p[r].LocationId && p[r].LocationInd == 1) {
                        u += " selected"
                    }
                    u += ">" + i.get("name") + "</option>"
                },
                l = function(i) {
                    u += '<option value="' + i.get("id") + '"';
                    if (i.get("id") == p[r].TransportationId) {
                        u += " selected"
                    }
                    u += ">" + i.get("name") + "</option>"
                };
            A.tempDates = p;
            if (p.length == 0) {
                $("#practiceTable tbody:last").append('<tr><td colspan="5">No available dates.</td></tr>');
                $("#btnSave").attr("disabled", true)
            }
            u = "";
            for (r = 0; r < p.length; r++) {
                v = c.getDate(p[r].StartDate);
                q = c.getDate(p[r].EndDate);
                u = "<tr><td>" + c.displayDate(v, "shortDayDate") + "</td>";
                u += "<td>" + c.getTimeString(v) + " - " + c.getTimeString(q) + "</td>";
                u += "<td>" + t;
                if (b.Data.venues.length > 0) {
                    u += '<optgroup label="Venues">';
                    b.Data.venues.each(m);
                    u += "</optgroup>"
                }
                if (b.Data.locations.length > 0) {
                    u += '<optgroup label="Locations">';
                    b.Data.locations.each(k);
                    u += "</optgroup>"
                }
                u += "</select><td>" + y;
                if (b.Data.transportation.length > 0) {
                    b.Data.transportation.each(l)
                }
                u += "</select></td>";
                u += "<td>";
                z = "";
                n = p[r].Conflicts;
                if (n && n.length > 0) {
                    z = "<h4>Potential Conflicts</h4>";
                    o = -1;
                    for (s = 0; s < n.length; s++) {
                        x = c.getTimeString(c.getDate(c.getDateString(c.localDateTime()) + " " + n[s].ConflictTime));
                        w = c.isMidnight(x);
                        switch (n[s].ConflictType) {
                            case 0:
                                if (n[s].ConflictType != o) {
                                    z += "<h5>Game:</h5>"
                                }
                                z += "Start Time: " + x + "<br />";
                                break;
                            case 1:
                                if (n[s].ConflictType != o) {
                                    z += "<h5>Practice:</h5>"
                                }
                                z += "Start Time: " + x + "<br />";
                                break;
                            case 2:
                                if (n[s].ConflictType != o) {
                                    z += "<h5>Location:</h5>"
                                }
                                z += n[s].ConflictDescription + " by " + n[s].ConflictTeam + " at " + x + "<br />";
                                break;
                            case 3:
                                if (n[s].ConflictType != o) {
                                    z += "<h5>Vehicle:</h5>"
                                }
                                z += n[s].ConflictDescription + " by " + n[s].ConflictTeam;
                                if (w) {
                                    z += " all day<br />"
                                } else {
                                    z += " at ";
                                    z += x + "<br />"
                                }
                                break
                        }
                        o = n[s].ConflictType
                    }
                }
                if (z.length > 0) {
                    u += '<i class="p3icon-warning" rel="tooltip" data-original-title="' + z + '" ></i>'
                }
                u += "</td></tr>";
                $("#practiceTable tbody:last").append(u)
            }
            $(".p3icon-warning").tooltip();
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        savePractices: function(i) {
            var r = this,
                q = true,
                m = r.options.sectionId,
                k, j, l, n, p, o;
            if ($("#practiceTable tbody").children().length > 0) {
                if (r.options.showTeamPicker) {
                    if ($("#teamDropdown").val() == 0) {
                        q = false;
                        $("#teamDropdown").addClass("box-validate")
                    } else {
                        m = $("#teamDropdown").val()
                    }
                }
                if (q) {
                    k = [];
                    $("#practiceTable tbody").children().each(function(s) {
                        j = 0;
                        if ($(this).find(".location-dropdown").val() != "0") {
                            if ($(this).find(".location-dropdown :selected").parent().attr("label") == "Locations") {
                                j = 1
                            }
                        }
                        k.push({
                            StartDate: r.tempDates[s].StartDate,
                            EndDate: r.tempDates[s].EndDate,
                            TransportationId: $(this).find(".transportation-dropdown").val(),
                            LocationId: $(this).find(".location-dropdown").val(),
                            LocationInd: j
                        })
                    });
                    l = new b.Ms.PracticeItem({
                        PracticeId: 0,
                        TeamId: m,
                        SkipValidation: false,
                        PracticeList: k,
                        BulkAdd: true
                    });
                    n = c.getDateString(c.localDateTime());
                    p = $("#dismissalTime").val().trim();
                    o = p ? c.isMidnight(p) : false;
                    if (p && !o) {
                        p = c.displayTime(c.getTimeString(c.getDate((n + " " + p))), true, "timeSpan");
                        l.set("DismissalTime", p)
                    }
                    p = $("#departureTime").val().trim();
                    o = p ? c.isMidnight(p) : false;
                    if (p && !o) {
                        p = c.displayTime(c.getTimeString(c.getDate((n + " " + p))), true, "timeSpan");
                        l.set("DepartureTime", p)
                    }
                    p = $("#pickupTime").val().trim();
                    o = p ? c.isMidnight(p) : false;
                    if (p && !o) {
                        p = c.displayTime(c.getTimeString(c.getDate((n + " " + p))), true, "timeSpan");
                        l.set("PickupTime", p)
                    }
                    l.save({}, {
                        error: function() {
                            p3.showModal(p3.Layout.Containers.Modal, "hide");
                            p3.displayError("Error saving Practices")
                        },
                        success: function(v, x) {
                            var u = v.get("Conflicts"),
                                w = v.get("PracticeList"),
                                y = true,
                                z, t, s;
                            if (u && u.length > 0) {
                                y = false;
                                $("#practiceTable tbody").children().remove();
                                r.outputPotentialPractices(w);
                                z = '<div class="modal" data-keyboard="false" data-backdrop="static" tabindex="-1" id="validate-modal"></div>';
                                $(z).modal();
                                t = function() {
                                    $("#validate-modal").modal("hide");
                                    $("#validate-modal").remove();
                                    $(".modal-backdrop").css("z-index", "1100");
                                    l.set("SkipValidation", true);
                                    l.save({}, {
                                        error: function() {
                                            p3.showModal(p3.Layout.Containers.Modal, "hide");
                                            p3.displayError("Error saving Practices")
                                        },
                                        success: function(A, B) {
                                            p3.showModal(p3.Layout.Containers.Modal, "hide");
                                            if (r.options.dashboardView) {
                                                r.options.dashboardView.refreshDashboard()
                                            } else {
                                                if (r.options.calendarView) {
                                                    b.Us.updateCalendar(r.sectionId)
                                                } else {
                                                    b.Us.updateSchedule()
                                                }
                                            }
                                        }
                                    })
                                };
                                s = function() {
                                    $("#validate-modal").modal("hide");
                                    $("#validate-modal").remove();
                                    $(".modal-backdrop").css("z-index", "1100")
                                };
                                p3.rV(new a.Vs.Confirm({
                                    ConfirmationTitle: "Practice Conflicts",
                                    ConfirmationText: 'There are potential conflicts with the practice dates you are saving. Press "Confirm" to continue saving or "Cancel" to edit before saving.',
                                    ConfirmCallback: t,
                                    CancelCallback: s,
                                    KeepOpen: true
                                }), "#validate-modal", true);
                                $(".modal-backdrop").css("z-index", "1101")
                            }
                            if (y) {
                                p3.showModal(p3.Layout.Containers.Modal, "hide");
                                if (r.options.dashboardView) {
                                    r.options.dashboardView.refreshDashboard()
                                } else {
                                    if (r.options.calendarView) {
                                        b.Us.updateCalendar(r.sectionId)
                                    } else {
                                        b.Us.updateSchedule()
                                    }
                                }
                            }
                        }
                    })
                }
            } else {
                p3.Us.InfoMessage.ErrorBox("There are no practices to add.", ".modal-body", false)
            }
            return false
        }
    });
    b.Vs.EditPracticeView = Bb.View.extend({
        template: "athleticschedule/practice.edit.template.html",
        events: {
            "click #btnSave": "savePractice",
            "change #practiceDate": "removeDateValidation",
            "change #startTime": "removeTimeValidation",
            "change #endTime": "removeTimeValidation",
            "click #btnDeletePractice": "deletePractice",
            "click #switch-add-schedule-link": "switchAddMode",
            "change #teamDropdown": "teamChanged"
        },
        initialize: function() {
            this.sectionId = this.options.sectionId || 0;
            this.athleticPrivileges = this.options.athleticPrivileges || {};
            p3.Layout.Containers.Modal.on("shown.bs.modal", function() {
                window.setTimeout(function() {
                    d.Us.initialize(".date-input");
                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TimePicker, function() {
                        $(".time-picker-field").timepicker()
                    });
                    $("#send_notif_label").tooltip();
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                }, 400)
            })
        },
        render: function(i) {
            var j = this;
            p3.fT(j.template, function(p) {
                var n = j.options.practiceItem,
                    l, m, k, o;
                if (j.options.practiceId > 0) {
                    if (b.Data.editPracticeNotif && b.Data.editPracticeNotif.pk == j.options.sectionId) {
                        l = b.Data.editPracticeNotif.enabled;
                        m = b.Data.editPracticeNotif.tooltip
                    } else {
                        k = new f.Cs.NotificationActive({}, {
                            actionId: 48,
                            pk: j.options.sectionId
                        });
                        b.Data.editPracticeNotif = k;
                        k.fetch({
                            async: false,
                            success: function() {
                                k.setNotificationProperties();
                                l = b.Data.editPracticeNotif.enabled;
                                m = b.Data.editPracticeNotif.tooltip
                            },
                            error: function() {
                                p3.displayError("Error loading notification settings")
                            }
                        })
                    }
                } else {
                    if (b.Data.addPracticeNotif && b.Data.addPracticeNotif.pk == j.options.sectionId) {
                        l = b.Data.addPracticeNotif.enabled;
                        m = b.Data.addPracticeNotif.tooltip
                    }
                }
                o = [];
                if (j.options.showTeamPicker) {
                    o = b.Data.EditableTeams.toJSON()
                }
                j.$el.html(p({
                    venues: b.Data.venues.toJSON(),
                    locations: b.Data.locations.toJSON(),
                    transportation: b.Data.transportation.toJSON(),
                    practice: n.toJSON(),
                    notifEnabled: l,
                    notifTooltip: m,
                    practiceId: j.options.practiceId,
                    showTeamPicker: j.options.showTeamPicker,
                    teams: o,
                    athleticPrivileges: j.athleticPrivileges
                }));
                $(i).html(j.el)
            })
        },
        teamChanged: function() {
            $("#teamGroup").removeClass("error");
            var l = $("#teamDropdown").val(),
                j = false,
                k = "",
                i;
            if (l > 0) {
                if (b.Data.addPracticeNotif && b.Data.addPracticeNotif.pk == l) {
                    j = b.Data.addPracticeNotif.enabled;
                    k = b.Data.addPracticeNotif.tooltip
                } else {
                    i = new f.Cs.NotificationActive({}, {
                        actionId: 47,
                        pk: l
                    });
                    b.Data.addPracticeNotif = i;
                    i.fetch({
                        async: false,
                        success: function() {
                            i.setNotificationProperties();
                            j = b.Data.addPracticeNotif.enabled;
                            k = b.Data.addPracticeNotif.tooltip
                        },
                        error: function() {
                            p3.displayError("Error loading notification settings")
                        }
                    })
                }
            }
            $("#send_notif_label").attr("data-original-title", k);
            if (!j) {
                $("#send_notif_check").addClass("disabled");
                $("#send_notif_check").removeClass("btn-approve")
            } else {
                $("#send_notif_check").removeClass("disabled");
                $("#send_notif_check").addClass("btn-approve")
            }
            if (j) {
                $("#send_notif_check").addClass("active")
            } else {
                $("#send_notif_check").removeClass("active")
            }
        },
        removeDateValidation: function(i) {
            $("#practiceDateGroup").removeClass("error")
        },
        removeTimeValidation: function(i) {
            $("#timeGroup").removeClass("error")
        },
        savePractice: function(i) {
            var s = this,
                r = true,
                m = s.options.sectionId,
                k, j, n, l, o, q, p;
            $("#btnSave").button("loading");
            if ($("#practiceDate").val().length == 0) {
                r = false;
                $("#practiceDateGroup").addClass("error")
            }
            if (!$("#startTime").getTime() || $("#startTime").getTime().length == 0 || !$("#endTime").getTime() || $("#endTime").getTime().length == 0) {
                r = false;
                $("#timeGroup").addClass("error")
            }
            if (s.options.showTeamPicker) {
                if ($("#teamDropdown").val() == 0) {
                    r = false;
                    $("#teamGroup").addClass("error")
                } else {
                    m = $("#teamDropdown").val()
                }
            }
            if (r) {
                k = [];
                j = 0;
                if ($("#locationDropdown").val() != "0") {
                    if ($("#locationDropdown :selected").parent().attr("label") == "Locations") {
                        j = 1
                    }
                }
                k.push({
                    StartDate: $("#practiceDate").val() + " " + $("#startTime").getTime(),
                    EndDate: $("#practiceDate").val() + " " + $("#endTime").getTime(),
                    TransportationId: $("#transportDropdown").val(),
                    LocationId: $("#locationDropdown").val(),
                    LocationInd: j,
                    CancelledInd: $("#chkCancel").is(":checked"),
                    RowNumber: 0,
                    PracticeNote: $("#txtNotes").val()
                });
                n = $("#send_notif_check").hasClass("active");
                l = new b.Ms.PracticeItem({
                    PracticeId: s.options.practiceId,
                    TeamId: m,
                    SkipValidation: $("#chkCancel").is(":checked"),
                    PracticeList: k,
                    SendNotification: n
                });
                o = c.getDateString(c.localDateTime());
                q = $("#dismissalTime").val().trim();
                p = q ? c.isMidnight(q) : false;
                if (q && !p) {
                    q = c.displayTime(c.getTimeString(c.getDate((o + " " + q))), true, "timeSpan");
                    l.set("DismissalTime", q)
                }
                q = $("#departureTime").val().trim();
                p = q ? c.isMidnight(q) : false;
                if (q && !p) {
                    q = c.displayTime(c.getTimeString(c.getDate((o + " " + q))), true, "timeSpan");
                    l.set("DepartureTime", q)
                }
                q = $("#pickupTime").val().trim();
                p = q ? c.isMidnight(q) : false;
                if (q && !p) {
                    q = c.displayTime(c.getTimeString(c.getDate((o + " " + q))), true, "timeSpan");
                    l.set("PickupTime", q)
                }
                l.save({}, {
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error saving Practice")
                    },
                    success: function(u, v) {
                        var t = u.get("Conflicts"),
                            w = (!t || t.length == 0);
                        if (!w) {
                            b.Us.openScheduleConfirmDialog(l, false, s.options.practiceId > 0, b.Us.getConflictText(t), s.options.calendarView, false, false, null, s.options.sectionId, s.options.dashboardView, false, s);
                            $("#btnSave").button("reset")
                        }
                        if (w) {
                            s.trigger("dataModified");
                            p3.showModal(p3.Layout.Containers.Modal, "hide");
                            if (s.options.dashboardView) {
                                s.options.dashboardView.refreshDashboard()
                            } else {
                                if (s.options.calendarView) {
                                    b.Us.updateCalendar(s.sectionId)
                                } else {
                                    b.Us.updateSchedule()
                                }
                            }
                        }
                    }
                })
            }
            $("#btnSave").button("reset");
            return false
        },
        deletePractice: function(j) {
            var k = this,
                i = new b.Ms.PracticeDelete({
                    PracticeId: k.options.practiceId,
                    TeamId: k.sectionId
                });
            b.Us.showDeleteConfirm(i, k.sectionId, k.options.calendarView, k)
        },
        switchAddMode: function(i) {
            var k = this,
                j;
            p3.showModal(p3.Layout.Containers.Modal, "hide");
            j = new b.Ms.ScheduleItem({
                ScheduleType: 0,
                HomeAwayType: 0,
                LocationId: -1,
                LeagueInd: 1
            });
            if (k.options.calendarView) {
                j.set("Gamedate", k.options.practiceItem.get("Gamedate"))
            }
            b.Us.openGameScheduleDialog(0, j, k.sectionId, k.options.calendarView, null, k.options.showTeamPicker, false, k.athleticPrivileges);
            return false
        }
    });
    b.Vs.ConfirmView = Bb.View.extend({
        template: "athleticschedule/athleticschedule.confirm.template.html",
        events: {
            "click #btnSave": "saveSchedule",
            "click .closeConfirm": "closeModal"
        },
        initialize: function() {
            var i = this;
            i.saveModel = i.options.saveModel;
            i.isGame = i.options.isGame || false;
            i.isEdit = i.options.isEdit || false;
            i.isDragAndDrop = i.options.isDragAndDrop || false;
            i.potentialConflicts = i.options.potentialConflicts;
            i.calendarView = i.options.calendarView || false;
            i.modalView = i.options.modalView;
            i.addAnother = i.options.addAnother || false;
            i.revertFunc = i.options.revertFunc;
            i.sectionId = i.options.sectionId || 0;
            i.showTeamPicker = i.options.showTeamPicker;
            i.showNotification = false;
            if (i.isDragAndDrop) {
                if (i.isGame) {
                    i.showNotification = b.Data.editGameNotif.enabled;
                    i.notifEnabled = b.Data.editGameNotif.enabled;
                    i.notifTooltip = b.Data.editGameNotif.tooltip
                } else {
                    i.showNotification = b.Data.editPracticeNotif.enabled;
                    i.notifEnabled = b.Data.editPracticeNotif.enabled;
                    i.notifTooltip = b.Data.editPracticeNotif.tooltip
                }
            }
            $("#validate-modal").on("shown.bs.modal", function() {
                window.setTimeout(function() {
                    $("#send_notif_label").tooltip();
                    p3.setModalHeight("#validate-modal")
                }, 400)
            });
            $("#validate-modal").on("hide", function() {
                if (i.isDragAndDrop && i.revertFunc) {
                    i.revertFunc()
                }
            })
        },
        render: function(i) {
            var j = this;
            p3.fT(j.template, function(k) {
                j.$el.html(k({
                    potentialConflicts: j.potentialConflicts,
                    showNotification: j.showNotification,
                    showReschedule: j.isGame && j.isDragAndDrop,
                    notifEnabled: j.notifEnabled,
                    notifTooltip: j.notifTooltip
                }));
                $(i).html(j.el)
            })
        },
        saveSchedule: function(i) {
            var l = this,
                k = false,
                j = false;
            $("#btnSave").button("loading");
            l.saveModel.set("SkipValidation", true);
            if (l.isDragAndDrop) {
                if (l.showNotification && $("#send_notif_check").hasClass("active")) {
                    k = true
                }
                if (l.isGame && $("#send_reminder").is(":checked")) {
                    j = true
                }
                l.saveModel.set("sendNotification", k);
                l.saveModel.set("reschedule", j)
            }
            l.saveModel.save({}, {
                error: function() {
                    $("#validate-modal").modal("hide");
                    $("#validate-modal").remove();
                    l.setBackDropPosition();
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    if (l.isGame) {
                        p3.displayError("Error saving Game")
                    } else {
                        p3.displayError("Error saving Practice")
                    }
                },
                success: function(m, n) {
                    l.revertFunc = null;
                    $("#validate-modal").modal("hide");
                    $("#validate-modal").remove();
                    l.setBackDropPosition();
                    if (!l.isDragAndDrop) {
                        if (l.modalView) {
                            l.modalView.trigger("dataModified")
                        }
                        p3.showModal(p3.Layout.Containers.Modal, "hide")
                    }
                    if (l.options.dashboardView) {
                        l.options.dashboardView.refreshDashboard()
                    } else {
                        if (l.options.calendarView) {
                            b.Us.updateCalendar(l.sectionId)
                        } else {
                            b.Us.updateSchedule()
                        }
                    }
                    if (l.addAnother) {
                        var o = new b.Ms.ScheduleItem({
                            GameType: 0,
                            HomeAway: 0,
                            LocationId: -1,
                            LeagueInd: 1
                        });
                        p3.rV(new b.Vs.EditGameScheduleView({
                            scheduleId: 0,
                            scheduleItem: o,
                            sectionId: l.saveModel.get("SectionId"),
                            calendarView: l.calendarView,
                            showTeamPicker: l.showTeamPicker
                        }), p3.Layout.Containers.Modal, true);
                        p3.showModal(p3.Layout.Containers.Modal)
                    }
                }
            })
        },
        setBackDropPosition: function() {
            $(".modal-backdrop").css("z-index", "1100")
        },
        closeModal: function(i) {
            var k = this,
                j = $("#validate-modal");
            if (i !== undefined) {
                i.preventDefault()
            }
            j.modal("hide");
            j.remove();
            k.setBackDropPosition()
        }
    });
    b.Vs.PublishSettings = Bb.View.extend({
        template: "athleticschedule/publish.settings.template.html",
        events: {
            "click .practice-setting-button": "practiceSettingToggle",
            "click .game-setting-button": "gameSettingToggle",
            "click #save-settings-button": "doSave"
        },
        initialize: function(i) {
            var j = this;
            j.sectionId = i.sectionId || 0;
            j.settings = new b.Ms.PublishOptionsGet({
                teamId: j.sectionId
            });
            j.settings.fetch({
                async: false,
                success: function(k, l) {
                    if (k.get("publish_schedule") === true) {
                        j.setGamePublish = true
                    }
                    if (k.get("publish_practice_schedule") === true) {
                        j.setPracticePublish = true
                    }
                }
            })
        },
        render: function(i) {
            var j = this;
            p3.fT(j.template, function(k) {
                j.$el.html(k({
                    gamePublish: j.setGamePublish,
                    practicePublish: j.setPracticePublish,
                    isLite: j.options.isLite || false
                }));
                $(i).html(j.el)
            })
        },
        doSave: function(j) {
            j.preventDefault();
            var p = this,
                l = false,
                k = false,
                n = false,
                m = false,
                i = $("#settings-error-message-container"),
                o;
            if (i.html() !== "") {
                i.html("");
                i.removeClass("alert alert-error")
            }
            if ($("#gamesPublishSchedule").find(".active").hasClass("btn-approve")) {
                l = true
            }
            if ($("#gamesSendNotification").find(".active").hasClass("btn-approve")) {
                k = true
            }
            if ($("#practicesPublishSchedule").find(".active").hasClass("btn-approve")) {
                n = true
            }
            if ($("#practicesSendNotification").find(".active").hasClass("btn-approve")) {
                m = true
            }
            o = new b.Ms.PublishOptionsSave({
                teamId: p.sectionId,
                publishGameSchedule: l,
                sendGameNotif: k,
                publishPracticeSchedule: n,
                sendPracticeNotif: m
            });
            o.save({}, {
                success: function() {
                    $(p3.Layout.Containers.Modal).modal("hide")
                },
                error: function() {
                    i.addClass("alert alert-error");
                    i.html("<strong>Error:</strong> Settings were unable to be saved please try again.")
                }
            })
        },
        gameSettingToggle: function(l) {
            var k = $(l.currentTarget).parent(),
                m = k.data("type"),
                i, j;
            $(l.currentTarget).removeClass("active");
            if (m === 0) {
                i = $(l.currentTarget);
                j = $("#gamesSendNotification").find(".active");
                if (i.hasClass("btn-denied")) {
                    _.each(j.parent().children(), function(n) {
                        $(n).attr("disabled", true)
                    })
                } else {
                    _.each(j.parent().children(), function(n) {
                        $(n).removeAttr("disabled")
                    })
                }
            } else {
                i = $("#gamesPublishSchedule").find(".active");
                j = $(l.currentTarget)
            }
            if (i.hasClass("btn-approve") && j.hasClass("btn-approve")) {
                $("#gameMessages").addClass("alert alert-info").html('<p>Upon saving, all users that have subscribed to receive the "Game Schedule Published" Notification will receive an e-mail and/or text alert.</p><p>This is a one time alert, and users will not receive any further notice if you choose to unpublish this schedule in the future.</p>')
            } else {
                if (i.hasClass("btn-denied") && j.hasClass("btn-approve")) {
                    $("#gameMessages").addClass("alert alert-info").html('<p>This schedule was previously published and "Game Schedule Published" Notifications were sent out to subscribed users.</p><p>This was a one time alert, and users will not receive any further notice if you choose to unpublish this schedule</p>');
                    if (j.hasClass("active")) {
                        j.removeClass("active").parent().find(".btn-denied").addClass("active")
                    } else {
                        l.preventDefault()
                    }
                } else {
                    $("#gameMessages").removeClass("alert alert-info").html("")
                }
            }
        },
        practiceSettingToggle: function(l) {
            var k = $(l.currentTarget).parent(),
                m = k.data("type"),
                i, j;
            if (m === 0) {
                i = $(l.currentTarget);
                j = $("#practicesSendNotification").find(".active")
            } else {
                i = $("#practicesPublishSchedule").find(".active");
                j = $(l.currentTarget)
            }
            if (i.hasClass("btn-approve") && j.hasClass("btn-approve")) {
                $("#practiceMessages").addClass("alert alert-info").html('<p>Upon saving, all users that have subscribed to receive the "Practice Schedule Published" Notification will receive an e-mail and/or text alert.</p><p>This is a one time alert, and users will not receive any further notice if you choose to unpublish this schedule in the future.</p>')
            } else {
                if (i.hasClass("btn-denied") && j.hasClass("btn-approve")) {
                    $("#practiceMessages").addClass("alert alert-info").html('<p>This schedule was previously published and "Practice Schedule Published" Notifications were sent out to subscribed users.</p><p>This was a one time alert, and users will not receive any further notice if you choose to unpublish this schedule</p>')
                } else {
                    $("#practiceMessages").removeClass("alert alert-info").html("")
                }
            }
        }
    });
    b.Vs.TeamPicker = Bb.View.extend({
        template: "athleticschedule/team.picker.template.html",
        events: {
            "click #btnApply": "applyTeams",
            "click .season-toggle": "toggleSeason",
            "click .sport-toggle": "toggleSport",
            "click .select-all-season": "selectAllSeason",
            "click .select-all-sport": "selectAllSport",
            "click .btn-select-team": "selectTeam"
        },
        initialize: function() {
            p3.Layout.Containers.Modal.on("shown.bs.modal", function() {
                window.setTimeout(function() {
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                }, 300)
            })
        },
        render: function(i) {
            var j = this;
            p3.fT(j.template, function(r) {
                var o = [],
                    p = [],
                    q = [],
                    m = "",
                    n = "",
                    k, l;
                b.Data.SportLevels.each(function(s) {
                    if (s.get("season_id") != m) {
                        m = s.get("season_id");
                        p = [];
                        o.push({
                            seasonId: m,
                            season: s.get("season"),
                            sports: p,
                            selectAll: true
                        });
                        n = s.get("department_id");
                        q = [];
                        p.push({
                            sportId: n,
                            sport: s.get("department"),
                            seasonId: m,
                            teams: q,
                            isExpanded: false,
                            selectAll: true
                        })
                    } else {
                        if (s.get("department_id") != n) {
                            n = s.get("department_id");
                            q = [];
                            p.push({
                                sportId: n,
                                sport: s.get("department"),
                                seasonId: m,
                                teams: q,
                                selectAll: true
                            })
                        }
                    }
                    if (b.Data.SelectedSportLevels.indexOf(s.get("offering_id")) > -1) {
                        s.set("isSelected", true);
                        p[p.length - 1].isExpanded = true
                    } else {
                        s.set("isSelected", false);
                        p[p.length - 1].selectAll = false;
                        o[o.length - 1].selectAll = false
                    }
                    q.push(s.toJSON())
                });
                for (k = 0; k < o.length; k++) {
                    for (l = 0; l < o[k].sports.length; l++) {
                        o[k].sports[l].teamCount = o[k].sports[l].teams.length
                    }
                }
                j.$el.html(r({
                    seasons: o
                }));
                $(i).html(j.el)
            })
        },
        toggleSeason: function(j) {
            var i = $(j.currentTarget),
                k = i.data("season");
            if ($("#season" + k).is(":visible")) {
                $("#season" + k).hide(200)
            } else {
                $("#season" + k).show(200)
            }
        },
        toggleSport: function(j) {
            var i = $(j.currentTarget),
                k = i.data("sport");
            if ($("#sport" + k).is(":visible")) {
                $("#sport" + k).hide(200);
                i.find(".swaparrow").removeClass("arrow-s").addClass("arrow-e")
            } else {
                $("#sport" + k).show(200);
                i.find(".swaparrow").removeClass("arrow-e").addClass("arrow-s")
            }
        },
        selectAllSeason: function(j) {
            var i = $(j.currentTarget),
                k = i.data("season");
            if (i.hasClass("active")) {
                $(".btn-select-team[data-season='" + k + "']").removeClass("active");
                $(".select-all-sport[data-season='" + k + "']").removeClass("active")
            } else {
                $(".btn-select-team[data-season='" + k + "']").addClass("active");
                $(".select-all-sport[data-season='" + k + "']").addClass("active");
                if (!$("#season" + k).is(":visible")) {
                    $("#season" + k).show(200)
                }
                $(".sport-body[data-season='" + k + "']:hidden").show(200);
                $(".sport-toggle[data-season='" + k + "']").find(".arrow-e").removeClass("arrow-e").addClass("arrow-s")
            }
        },
        selectAllSport: function(k) {
            var i = $(k.currentTarget),
                l = i.data("season"),
                m = i.data("sport"),
                j;
            if (i.hasClass("active")) {
                i.removeClass("active");
                $(".btn-select-team[data-season='" + l + "'][data-sport='" + m + "']").removeClass("active")
            } else {
                i.addClass("active");
                $(".btn-select-team[data-season='" + l + "'][data-sport='" + m + "']").addClass("active");
                $("#sport" + l + "_" + m).show(200);
                $(".sport-toggle[data-sport='" + l + "_" + m + "']").find(".arrow-e").removeClass("arrow-e").addClass("arrow-s")
            }
            j = ($(".btn-select-team.active[data-season='" + l + "']").length == $(".btn-select-team[data-season='" + l + "']").length);
            if (j) {
                $(".select-all-season[data-season='" + l + "']").addClass("active")
            } else {
                $(".select-all-season[data-season='" + l + "']").removeClass("active")
            }
        },
        selectTeam: function(j) {
            var i = $(j.currentTarget),
                k = i.data("season"),
                l = i.data("sport");
            if (i.hasClass("active")) {
                $(".select-all-sport[data-season='" + k + "'][data-sport='" + l + "']").removeClass("active");
                $(".select-all-season[data-season='" + k + "']").removeClass("active")
            } else {
                if ($(".btn-select-team.active[data-season='" + k + "'][data-sport='" + l + "']").length + 1 == $(".btn-select-team[data-season='" + k + "'][data-sport='" + l + "']").length) {
                    $(".select-all-sport[data-season='" + k + "'][data-sport='" + l + "']").addClass("active")
                }
                if ($(".btn-select-team.active[data-season='" + k + "']").length + 1 == $(".btn-select-team[data-season='" + k + "']").length) {
                    $(".select-all-season[data-season='" + k + "']").addClass("active")
                }
            }
        },
        applyTeams: function(j) {
            var l = [],
                i, m, k;
            $(".btn-select-team.active").each(function() {
                l.push($(this).data("team"))
            });
            b.Data.SelectedSportLevels = l;
            i = $("#col-main").fullCalendar("getView");
            b.Data.scheduleItems.scheduleDuration = 0;
            b.Data.scheduleItems.startDate = c.getDateString(i.visEnd);
            m = new Date(i.visEnd);
            m.setMonth(m.getMonth() - 3);
            k = new Date(i.visEnd);
            k.setMonth(k.getMonth() + 3);
            b.Data.startDate = m;
            b.Data.endDate = k;
            b.Data.scheduleItems.reset({});
            b.Data.scheduleItems.fetch({
                error: function(n, o) {
                    p3.displayError("Error loading schedule")
                },
                success: function() {
                    $("#col-main").fullCalendar("removeEvents");
                    b.Us.BuildCalendarEventArray(0, true);
                    $("#col-main").fullCalendar("addEventSource", b.Data.CalendarEvents)
                }
            });
            p3.showModal(p3.Layout.Containers.Modal, "hide")
        }
    });
    b.Us.BuildCalendarEventArray = function(s, C) {
        var o = [],
            A = "",
            j = "",
            z = "",
            n = "",
            i = false,
            m = false,
            r = false,
            l = false,
            k, u = false,
            t = false,
            v = false,
            B = b.Data.scheduleItems.scheduleType,
            x, y, w, p, q;
        u = (B == 0) || (B == 1) || (B == 3) || (B == 5);
        t = (B == 0) || (B == 2) || (B == 3) || (B == 6);
        v = (B == 0) || (B == 4) || (B == 5) || (B == 6);
        p = b.Us.hasEditGameTask();
        q = b.Us.hasEditPracticeTask();
        b.Data.scheduleItems.each(function(D) {
            if (D.get("ScheduleTypeText") == "Game") {
                r = true
            } else {
                r = false
            }
            if (s > 0 || B == 0 || (u && r && D.get("HomeAway") == "Home") || (t && r && D.get("HomeAway") == "Away") || (v && !r)) {
                A = "<span style='font-size:12px;'>";
                k = "<br/><span style='color:#595858;'>";
                n = "";
                x = c.getDateString(c.getDate(D.get("Gamedate")));
                y = c.getTimeString(c.getDate(x + " " + D.get("StartTime")));
                w = c.getTimeString(c.getDate(x + " " + D.get("EndTimeSpan")));
                z = c.getDate(x + " " + y);
                if (!c.isMidnight(w)) {
                    n = c.getDate(x + " " + w)
                }
                if (c.isMidnight(y)) {
                    i = true
                } else {
                    i = false
                }
                if (b.Data.fullView) {
                    A += D.get("TeamName") + "<br />";
                    m = D.get("CanEdit")
                } else {
                    m = C
                }
                if (r) {
                    m = m && p
                } else {
                    m = m && q
                }
                if (D.get("CancelledInd") || D.get("RescheduledInd")) {
                    l = false
                } else {
                    l = m
                }
                if (D.get("CancelledInd")) {
                    A += '<span style="color:#e31d1d"><b>Canceled</b></span>';
                    if (r) {
                        if (D.get("OpponentNames")) {
                            k += "<b>VS</b> " + D.get("OpponentNames")
                        } else {
                            k += "Game"
                        }
                        j = "#F3F3F3"
                    } else {
                        k += "Practice";
                        j = "#d6d6d6"
                    }
                } else {
                    if (D.get("RescheduledInd")) {
                        m = false;
                        A += '<span style="color:#e31d1d"><b>Rescheduled</b></span>';
                        if (D.get("OpponentNames")) {
                            k += " <b>VS</b> " + D.get("OpponentNames")
                        }
                        if (D.get("RescheduledDate")) {
                            k += '<br><i style="font-size:11px">Resched Date: ' + c.displayDate(D.get("RescheduledDate"), "shortDayMonthDate") + "</i>"
                        }
                        j = "#F3F3F3"
                    } else {
                        if (D.get("Title")) {
                            A += D.get("Title") + "<br />"
                        }
                        if (D.get("InvitationalInd")) {
                            A += "Invitational<br />"
                        }
                        if (r && !D.get("LeagueInd")) {
                            A += "Non-League Game<br />"
                        }
                        if (D.get("PlayoffInd")) {
                            A += "Playoff Game<br />"
                        }
                        if (D.get("ScrimmageInd")) {
                            A += "Scrimmage<br />"
                        }
                        if (D.get("TournamentInd")) {
                            A += "Tournament<br />"
                        }
                        if (r) {
                            A += D.get("HomeAway");
                            j = "#F3F3F3"
                        } else {
                            A += "Practice";
                            j = "#d6d6d6"
                        }
                        A += "</span>";
                        if (D.get("BuildingName")) {
                            k += "Location: " + D.get("BuildingName") + " " + D.get("RoomName") + "<br />"
                        }
                        if (D.get("location")) {
                            k += "Location: " + D.get("location") + "<br />"
                        }
                        if (D.get("OpponentNames")) {
                            k += "<b>VS</b> " + D.get("OpponentNames") + "<br />"
                        }
                        if (D.get("RescheduledDate")) {
                            k += '<i style="font-size:11px">Resched from ' + c.displayDate(D.get("RescheduledDate"), "shortDayMonthDate") + "</i><br />"
                        }
                        if (D.get("ShowDetails")) {
                            k += '<a data-id="2" class="viewdetail" href>Directions & Details</a>'
                        }
                    }
                }
                k += "</span>";
                o.push({
                    title: A + k,
                    start: z,
                    end: n,
                    backgroundColor: j,
                    borderColor: "#c6c4c4",
                    allDay: i,
                    canEdit: m,
                    id: D.get("ScheduleId"),
                    isGame: r,
                    sectionId: s || D.get("SectionId"),
                    canDrag: l
                })
            }
        });
        b.Data.CalendarEvents = o
    };
    b.Us.getGameDetails = function(j) {
        var i = new b.Ms.GameGet({
            ScheduleId: j
        });
        i.fetch({
            async: false,
            error: function(k, l) {
                p3.displayError("Error loading game")
            },
            success: function() {
                var l = c.getDate(i.get("Gamedate")),
                    k = c.getDateString(l),
                    p = c.getTimeString(l),
                    m, n, o, q;
                if (c.isMidnight(p)) {
                    p = "TBA"
                }
                i.set("StartTime", p);
                i.set("StartDisplay", p);
                i.set("Gamedate", k);
                i.set("OpponentId", 0);
                if (i.get("ScheduleType") == 0 && i.get("Opponents").length == 1) {
                    i.set("OpponentId", i.get("Opponents")[0].Id)
                }
                if (i.get("Vehicles").length > 0) {
                    q = i.get("Vehicles");
                    for (m = 0; m < q.length; m++) {
                        n = c.getDate(q[m].BeginDate);
                        o = c.getDate(q[m].EndDate);
                        q[m].BeginTime = c.getTimeString(n);
                        q[m].BeginDate = c.getDateString(n);
                        q[m].EndTime = c.getTimeString(o);
                        q[m].EndDate = c.getDateString(o)
                    }
                }
                if (c.isMidnight(i.get("DismissalTime"))) {
                    i.set("DismissalTime", "")
                } else {
                    i.set("DismissalTime", c.getTimeString(c.getDate(k + " " + i.get("DismissalTime"))))
                }
                if (c.isMidnight(i.get("DepartureTime"))) {
                    i.set("DepartureTime", "")
                } else {
                    i.set("DepartureTime", c.getTimeString(c.getDate(k + " " + i.get("DepartureTime"))))
                }
                if (c.isMidnight(i.get("PickupTime"))) {
                    i.set("PickupTime", "")
                } else {
                    i.set("PickupTime", c.getTimeString(c.getDate(k + " " + i.get("PickupTime"))))
                }
            }
        });
        return i
    };
    b.Us.getPracticeItem = function(j, k) {
        var i = new b.Ms.PracticeGet({
            PracticeId: j,
            TeamId: k
        });
        i.fetch({
            async: false,
            error: function(l, m) {
                p3.displayError("Error loading practice")
            },
            success: function() {
                var q = c.getDate(i.get("StartDate")),
                    l = c.getDateString(q),
                    r = c.getTimeString(q),
                    o, n, m, p;
                i.set("StartTime", r);
                i.set("PracticeDate", l);
                if (i.get("EndDate")) {
                    o = c.getDate(i.get("EndDate"));
                    i.set("EndTime", c.getTimeString(o))
                }
                if (i.get("DismissalTime")) {
                    n = c.getDate(i.get("DismissalTime"));
                    i.set("DismissalTime", c.getTimeString(n))
                }
                if (i.get("DepartureTime")) {
                    m = c.getDate(i.get("DepartureTime"));
                    i.set("DepartureTime", c.getTimeString(m))
                }
                if (i.get("PickupTime")) {
                    p = c.getDate(i.get("PickupTime"));
                    i.set("PickupTime", c.getTimeString(p))
                }
            }
        });
        return i
    };
    b.Us.getPracticeDetails = function(j) {
        var i = new b.Ms.PracticeDetailsGet({
            ScheduleId: j
        });
        i.fetch({
            async: false,
            error: function(k, l) {
                p3.displayError("Error loading practice")
            },
            success: function() {
                var k = c.getDateString(c.localDateTime()),
                    l;
                i.set("PracticeDate", c.getDateString(c.getDate(i.get("event_date_start"))));
                l = c.getDate(k + " " + i.get("start_time"));
                i.set("StartTime", c.getTimeString(l));
                l = c.getDate(k + " " + i.get("end_time"));
                i.set("EndTime", c.getTimeString(l));
                if (i.get("student_dismissal_time")) {
                    l = c.getDate(i.get("student_dismissal_time"));
                    i.set("DismissalTime", c.getTimeString(l))
                }
                if (i.get("departure_time")) {
                    l = c.getDate(i.get("departure_time"));
                    i.set("DepartureTime", c.getTimeString(l))
                }
                if (i.get("pickuptime")) {
                    l = c.getDate(i.get("pickuptime"));
                    i.set("PickupTime", c.getTimeString(l))
                }
            }
        });
        return i
    };
    b.Us.updateSchedule = function() {
        if (b.Data.scheduleItems) {
            b.Data.scheduleItems.reset({});
            if (b.Data.scheduleItems.dateSort != null || (b.Data.scheduleItems != null && b.Data.scheduleItems.endDate != null)) {
                b.Data.scheduleItems.fetch({
                    error: function(i, j) {
                        p3.displayError("Error loading schedule")
                    },
                    success: function() {
                        $(".schedule-table-button").click(function() {
                            var m = $($(this).prev("table")[0]),
                                j = m.children("tbody").children("tr:hidden"),
                                k, l;
                            if (j.length < 11) {
                                $(this).hide()
                            }
                            for (k = 0, l = j.length; k < l && k < 10; k++) {
                                $(j[k]).show()
                            }
                            return false
                        })
                    }
                })
            }
        }
    };
    b.Us.updateCalendar = function(l) {
        if (b.Data.scheduleItems) {
            var j = $("#col-main").fullCalendar("getView"),
                m = new Date(j.visStart),
                k = new Date(j.visStart),
                i = new Date(m);
            m.setMonth(i.getMonth() - 3);
            k.setMonth(i.getMonth() + 3);
            b.Data.startDate = m;
            b.Data.endDate = k;
            b.Data.scheduleItems.startDate = c.getDateString(i).ApiFormat();
            b.Data.scheduleItems.reset({});
            b.Data.scheduleItems.fetch({
                error: function(n, o) {
                    p3.displayError("Error loading schedule")
                },
                success: function(n, o) {
                    var p = 0;
                    if (!b.Data.fullView) {
                        p = l
                    }
                    $("#col-main").fullCalendar("removeEvents");
                    b.Us.BuildCalendarEventArray(p, true);
                    $("#col-main").fullCalendar("addEventSource", b.Data.CalendarEvents)
                }
            })
        }
    };
    b.Us.openGameScheduleDialog = function(o, p, q, j, k, r, m, i, l) {
        m = m || false;
        var n = new b.Vs.EditGameScheduleView({
            scheduleId: o,
            scheduleItem: p,
            sectionId: q,
            calendarView: j,
            dashboardView: k,
            showTeamPicker: r,
            isLite: m,
            dataModifiedCallback: l,
            athleticPrivileges: i
        });
        if (l) {
            n.on("dataModified", function() {
                l()
            })
        }
        p3.rV(n, p3.Layout.Containers.Modal, true);
        p3.showModal(p3.Layout.Containers.Modal)
    };
    b.Us.openEditPracticeDialog = function(n, o, p, j, k, q, i, l) {
        var m = new b.Vs.EditPracticeView({
            practiceId: n,
            practiceItem: o,
            sectionId: p,
            calendarView: j,
            dashboardView: k,
            showTeamPicker: q,
            dataModifiedCallback: l,
            athleticPrivileges: i
        });
        if (l) {
            m.on("dataModified", function() {
                l()
            })
        }
        p3.rV(m, p3.Layout.Containers.Modal, true);
        p3.showModal(p3.Layout.Containers.Modal)
    };
    b.Us.openScheduleConfirmDialog = function(r, n, m, p, j, l, i, q, s, k, t, o) {
        var u = '<div class="modal" data-keyboard="false" data-backdrop="static" tabindex="-1" id="validate-modal"></div>';
        $(u).modal();
        p3.rV(new b.Vs.ConfirmView({
            saveModel: r,
            isGame: n,
            isEdit: m,
            potentialConflicts: p,
            calendarView: j,
            modalView: o,
            isDragAndDrop: l,
            addAnother: i,
            revertFunc: q,
            sectionId: s,
            dashboardView: k,
            showTeamPicker: t
        }), "#validate-modal", true);
        p3.setModalHeight($("#validate-modal"));
        $(".modal-backdrop").css("z-index", "1101")
    };
    b.Us.getConflictText = function(j) {
        var l = '<table style="margin-top:10px;" class="table table-striped"><tr><th>Type</th><th>Details</th></tr>',
            k, n, m;
        for (k = 0; k < j.length; k++) {
            n = c.getTimeString(c.getDate(c.getDateString(c.localDateTime()) + " " + j[k].ConflictTime));
            m = c.isMidnight(n);
            l += "<tr><td>";
            switch (j[k].ConflictType) {
                case 0:
                    l += "Game</td><td>Start Time: ";
                    l += n;
                    break;
                case 1:
                    l += "Practice</td><td>Start Time: ";
                    l += n;
                    break;
                case 2:
                    l += "Location</td><td>";
                    l += j[k].ConflictDescription;
                    l += " in use by ";
                    l += j[k].ConflictTeam;
                    l += " at ";
                    l += n;
                    break;
                case 3:
                    l += "Vehicle</td><td>";
                    l += j[k].ConflictDescription;
                    l += " in use by ";
                    l += j[k].ConflictTeam;
                    if (m) {
                        l += " all day"
                    } else {
                        l += " at ";
                        l += n
                    }
                    break
            }
            l += "</td></tr>"
        }
        l += "</table>";
        return l
    };
    b.Us.showDeleteConfirm = function(l, n, i, m) {
        var o = '<div class="modal" data-keyboard="false" data-backdrop="static" tabindex="-1" id="confirm-modal"></div>',
            k, j;
        $(o).modal();
        k = function() {
            $("#confirm-modal").modal("hide");
            $("#confirm-modal").remove();
            $(".modal-backdrop").css("z-index", "1100");
            l.destroy({
                error: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    p3.displayError("Error deleting schedule item")
                },
                success: function() {
                    if (m) {
                        m.trigger("dataModified")
                    }
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    if (i) {
                        b.Us.updateCalendar(n)
                    } else {
                        b.Us.updateSchedule()
                    }
                }
            })
        };
        j = function() {
            $("#confirm-modal").modal("hide");
            $("#confirm-modal").remove();
            $(".modal-backdrop").css("z-index", "1100")
        };
        p3.rV(new a.Vs.Confirm({
            ConfirmationTitle: "Confirm",
            ConfirmationText: "Warning: Once you hit confirm there is no undo button. Are you really sure you want to delete this forever?",
            ConfirmCallback: k,
            CancelCallback: j,
            KeepOpen: true
        }), "#confirm-modal", true);
        $(".modal-backdrop").css("z-index", "1101")
    };
    b.Us.addMapScript = function(i) {
        var l, j = $("#map-container"),
            k = $("#map-link");
        if (b.MapData.MQMap) {
            j.show();
            b.MapData.MQMap = new Microsoft.Maps.Map("#bing-map", {
                zoom: 12
            });
            b.MapData.MQMap.entities.clear();
            b.MapData.geocodeQuery(i)
        } else {
            if (window.location.protocol === "https:") {
                l = "https://www.bing.com/api/maps/mapcontrol?callback=GetMap&key=SOg3kx9B8b8QFO8qTAi6~aMoA9TLDaXoobrXJe8N9qg~AnFujmbftpAk0WjCGdragIldj-ac_00Qk8VXMb4HFwPyWXIRb2ckmwJdzusI2fiD"
            } else {
                l = "http://www.bing.com/api/maps/mapcontrol?callback=GetMap&key=SOg3kx9B8b8QFO8qTAi6~aMoA9TLDaXoobrXJe8N9qg~AnFujmbftpAk0WjCGdragIldj-ac_00Qk8VXMb4HFwPyWXIRb2ckmwJdzusI2fiD"
            }
            head.js(l, function() {
                window.GetMap = function() {
                    j.show();
                    b.MapData.MQMap = new Microsoft.Maps.Map("#bing-map", {
                        zoom: 12
                    });
                    b.MapData.geocodeQuery(i)
                }
            })
        }
        k.show();
        k.attr("href", "http://bing.com/maps/default.aspx?rtp=~adr." + encodeURIComponent(i))
    };
    b.MapData = {
        geocodeQuery: function(i) {
            if (!b.MapData.searchManager) {
                Microsoft.Maps.loadModule("Microsoft.Maps.Search", function() {
                    b.MapData.searchManager = new Microsoft.Maps.Search.SearchManager(b.MapData.MQMap);
                    b.MapData.geocodeQuery(i)
                })
            } else {
                var j = {
                    where: i,
                    callback: function(l) {
                        if (l && l.results && l.results.length > 0) {
                            var k = new Microsoft.Maps.Pushpin(l.results[0].location, {
                                icon: "/podium/images/mapMarker.png",
                                title: i
                            });
                            b.MapData.MQMap.entities.push(k);
                            b.MapData.MQMap.setView({
                                bounds: l.results[0].bestView,
                                padding: 80
                            })
                        }
                    }
                };
                b.MapData.searchManager.geocode(j)
            }
        }
    };
    b.Us.initializeNotifications = function(o, n) {
        var k = true,
            i, l, m, j;
        if (n) {
            k = false
        }
        i = new f.Cs.NotificationActive({}, {
            actionId: 42,
            pk: o
        });
        b.Data.addGameNotif = i;
        l = new f.Cs.NotificationActive({}, {
            actionId: 43,
            pk: o
        });
        b.Data.editGameNotif = l;
        m = new f.Cs.NotificationActive({}, {
            actionId: 48,
            pk: o
        });
        b.Data.editPracticeNotif = m;
        j = new f.Cs.NotificationActive({}, {
            actionId: 47,
            pk: o
        });
        b.Data.addPracticeNotif = j;
        i.fetch({
            async: k,
            success: function() {
                i.setNotificationProperties()
            },
            error: function() {
                p3.displayError("Error loading notification settings")
            }
        });
        l.fetch({
            async: k,
            success: function() {
                l.setNotificationProperties()
            },
            error: function() {
                p3.displayError("Error loading notification settings")
            }
        });
        m.fetch({
            async: k,
            success: function() {
                m.setNotificationProperties()
            },
            error: function() {
                p3.displayError("Error loading notification settings")
            }
        });
        j.fetch({
            async: k,
            success: function() {
                j.setNotificationProperties()
            },
            error: function() {
                p3.displayError("Error loading notification settings")
            }
        })
    };
    b.Us.initializeData = function(i) {
        var m = new b.Cs.Venue(),
            j, k, l;
        b.Data.venues = m;
        if (i) {
            m.fetch({
                async: false,
                error: function() {
                    p3.displayError("Error loading athletic venues")
                }
            })
        }
        j = new b.Cs.Location();
        b.Data.locations = j;
        if (i) {
            j.fetch({
                async: false,
                error: function() {
                    p3.displayError("Error loading athletic locations")
                }
            })
        }
        k = new b.Cs.Opponent();
        b.Data.opponents = k;
        if (i) {
            k.fetch({
                async: false,
                error: function() {
                    p3.displayError("Error loading athletic opponents")
                }
            })
        }
        l = new b.Cs.Transportation();
        b.Data.transportation = l;
        if (i) {
            l.fetch({
                async: false,
                error: function() {
                    p3.displayError("Error loading athletic transportation")
                }
            })
        }
    };
    b.Us.setScheduleType = function(j) {
        var i = $(j.currentTarget),
            k = 0;
        if (j.currentTarget.id != "scheduleFilterAll") {
            if (i.hasClass("active")) {
                i.removeClass("active cal-filter-on").addClass("cal-filter-off");
                i.find("i").removeClass("p3icon-ok").addClass("p3icon-check")
            } else {
                i.addClass("active cal-filter-on").removeClass("cal-filter-off");
                i.find("i").removeClass("p3icon-check").addClass("p3icon-ok")
            }
            $(".scheduleTypeFilter").each(function() {
                if ($(this).hasClass("active")) {
                    k += parseInt($(this).data("val"), 10)
                }
            });
            if (k == 7) {
                k = 0
            }
        }
        if (k == 0) {
            $(".scheduleTypeFilter").removeClass("active cal-filter-on").addClass("cal-filter-off");
            $("i.p3icon-ok").removeClass("p3icon-ok").addClass("p3icon-check");
            $("#scheduleFilterAll").addClass("active cal-filter-on").removeClass("cal-filter-off");
            $("#scheduleFilterAll").find("i").removeClass("p3icon-check").addClass("p3icon-ok")
        } else {
            $("#scheduleFilterAll").removeClass("active cal-filter-on").addClass("cal-filter-off");
            $("#scheduleFilterAll").find("i").removeClass("p3icon-ok").addClass("p3icon-check")
        }
        b.Data.scheduleItems.setScheduleTypeFilter(k)
    };
    b.Us.initializeCalendar = function(i) {
        var j;
        b.Data.Culture = p3.Data.SchoolContext.attributes.Culture;
        j = b.Data.Culture.App.ShortMonthDayYearPattern.split("Y").join("y").split("D").join("d");
        if (j.indexOf("d") < j.indexOf("M")) {
            j = j.split(" yyyy").join(" [yyyy]").split(" MMM").join(" [MMM]") + "{ '-' " + j + "}"
        } else {
            j = j.split(" yyyy").join(" [yyyy]") + "{ '-' " + j.split(" MMM").join(" [MMM]") + "}"
        }
        $("#col-main").fullCalendar({
            editable: i.canEdit,
            disableResizing: true,
            header: {
                left: "",
                center: "title",
                right: ""
            },
            defaultView: "month",
            year: c.localDateTime().getFullYear(),
            month: c.localDateTime().getMonth(),
            firstDay: b.Data.Culture.App.firstDay,
            timeFormat: b.Data.Culture.App.ShortTimePattern.replace(" A", "t"),
            columnFormat: {
                week: b.Data.Culture.App.ShortDayDatePattern.split("D").join("d")
            },
            titleFormat: {
                month: b.Data.Culture.App.YearMonthPattern.replace(",", "").split("Y").join("y"),
                week: j,
                day: b.Data.Culture.App.ShortMonthDayYearPattern
            },
            events: b.Data.CalendarEvents,
            eventRender: function(l, k) {
                k.find(".fc-event-title").html('<span style="font-size: 12px; font-weight: bold;">' + k.find(".fc-event-time").text() + "&nbsp;</span>" + k.find(".fc-event-title").text())
            },
            dayClick: function(m, k, o, r) {
                var l, q, p = b.Data.fullView,
                    n;
                if (r.calendar.options.editable) {
                    l = b.Us.getAthleticPrivileges(true, false, true);
                    if (l.canAddGame || l.canAddPractice) {
                        q = new b.Cs.EditableTeams({}, {
                            lookupDate: m
                        });
                        if (p) {
                            b.Data.EditableTeams = q;
                            q.fetch({
                                async: false,
                                error: function() {
                                    p3.displayError("Error loading sport levels")
                                }
                            })
                        }
                        if (!p || q.length > 0) {
                            if (l.canAddGame) {
                                n = new b.Ms.ScheduleItem({
                                    ScheduleType: 0,
                                    HomeAwayType: 0,
                                    LocationId: -1,
                                    LeagueInd: 1,
                                    Gamedate: c.getDateString(m)
                                });
                                b.Us.openGameScheduleDialog(0, n, b.Data.leadSectionId, true, null, p, false, l)
                            } else {
                                n = new b.Ms.ScheduleItem({
                                    PracticeDate: c.getDateString(m)
                                });
                                b.Us.openEditPracticeDialog(0, n, b.Data.leadSectionId, true, null, p, l)
                            }
                        }
                    }
                }
            },
            eventClick: function(l, m, p) {
                var o, n, k;
                k = b.Us.getAthleticPrivileges(true, false, true);
                if (m.target.className == "viewdetail") {
                    if (l.isGame) {
                        o = b.Us.getGameDetails(l.id);
                        p3.rV(new b.Vs.GameScheduleDetailsView({
                            scheduleItem: o.toJSON()
                        }), p3.Layout.Containers.Modal, true)
                    } else {
                        o = b.Us.getPracticeDetails(l.id);
                        p3.rV(new b.Vs.PracticeDetailsView({
                            scheduleItem: o.toJSON()
                        }), p3.Layout.Containers.Modal, true)
                    }
                    p3.showModal(p3.Layout.Containers.Modal)
                } else {
                    if (l.canEdit) {
                        if (l.isGame && k.canEditGame) {
                            o = b.Us.getGameDetails(l.id);
                            b.Us.openGameScheduleDialog(l.id, o, l.sectionId, true, null, false, false, k)
                        } else {
                            if (k.canEditPractice) {
                                n = b.Us.getPracticeItem(l.id, l.sectionId);
                                b.Us.openEditPracticeDialog(l.id, n, l.sectionId, true, null, false, k)
                            }
                        }
                    }
                }
                return false
            },
            eventDragStart: function(k, l, m, n) {
                if (!k.canDrag) {
                    l.preventDefault()
                }
            },
            eventDrop: function(p, m, r, k, v, q, w, y) {
                var t, s, x, u = "",
                    l, n, o;
                t = c.getDateString(p.start) + " " + c.getTimeString(p.start);
                if (p.isGame) {
                    l = new b.Cs.GameConflicts({}, {
                        teamId: p.sectionId,
                        gameDate: t.ApiFormat(),
                        scheduleId: p.id
                    });
                    x = new b.Ms.DateUpdate({
                        ScheduleId: p.id,
                        newDate: t,
                        endDate: t,
                        isGame: true
                    })
                } else {
                    s = c.getDateString(p.end) + " " + c.getTimeString(p.end);
                    l = new b.Cs.PracticeConflicts({}, {
                        teamId: p.sectionId,
                        dateStart: t.ApiFormat(),
                        practiceId: p.id,
                        dateEnd: s.ApiFormat()
                    });
                    x = new b.Ms.DateUpdate({
                        ScheduleId: p.id,
                        newDate: t,
                        endDate: s,
                        isGame: false,
                        reschedule: false
                    })
                }
                l.fetch({
                    async: false,
                    error: function(z, A) {
                        p3.displayError("Error validating schedule date.")
                    },
                    success: function(z, A) {
                        if (z && z.length > 0) {
                            u = b.Us.getConflictText(z.toJSON())
                        }
                    }
                });
                if (b.Data.fullView) {
                    if (p.isGame) {
                        if (!b.Data.editGameNotif || b.Data.editGameNotif.pk != p.sectionId) {
                            n = new f.Cs.NotificationActive({}, {
                                actionId: 43,
                                pk: p.sectionId
                            });
                            b.Data.editGameNotif = n;
                            n.fetch({
                                async: false,
                                success: function() {
                                    n.setNotificationProperties()
                                },
                                error: function() {
                                    p3.displayError("Error loading notification settings")
                                }
                            })
                        }
                    } else {
                        if (!b.Data.editPracticeNotif || b.Data.editPracticeNotif.pk != p.sectionId) {
                            o = new f.Cs.NotificationActive({}, {
                                actionId: 48,
                                pk: p.sectionId
                            });
                            b.Data.editPracticeNotif = o;
                            o.fetch({
                                async: false,
                                success: function() {
                                    o.setNotificationProperties()
                                },
                                error: function() {
                                    p3.displayError("Error loading notification settings")
                                }
                            })
                        }
                    }
                }
                if (p.isGame || (u.length > 0 || b.Data.editPracticeNotif.enabled)) {
                    b.Us.openScheduleConfirmDialog(x, p.isGame, true, u, true, true, false, v, p.sectionId, null, false, null)
                } else {
                    x.set("sendNotification", false);
                    x.save({}, {
                        error: function() {
                            p3.displayError("Error saving Practice")
                        }
                    })
                }
            },
            loading: function(k) {
                var l = '<div id="loading" class="alert alert-info" style="position: absolute; left: 47%; top: 38%; padding:6px; border:solid 1px #ff000;text-align: center;z-index: 1000; "><span id="load-icon"></span>Loading ...</div>';
                if (k) {
                    $("#col-main").prepend(l);
                    p3.loadingIcon("#load-icon")
                } else {
                    $("#loading").remove()
                }
            },
            viewDisplay: function(p) {
                var o = b.Data.scheduleItems.scheduleType,
                    m = 0,
                    l, k, n;
                l = '<div class="btn-group"><button class="btn btn-default btn-large btn-inverse" id="button-previous">&lt;</button><button class="btn btn-default btn-large btn-inverse" id="button-next">&gt;</button>';
                l += '<button class="btn btn-default btn-large btn-inverse" style="margin-left:10px;" id="button-today">Today</button>';
                l += '<button class="btn btn-default btn-large btn-inverse" style="margin-left:10px;" id="week-view">Week</button><button class="btn btn-default btn-large btn-inverse" id="month-view">Month</button></div>';
                $(".fc-header-left").html(l);
                if (!b.Data.fullView) {
                    m = b.Data.leadSectionId
                }
                p3.rV(new e.Vs.iCalTeamSchedule({
                    sectionId: m
                }), $(".fc-header-right"), true);
                window.setTimeout(function() {
                    if (!b.Data.fullView) {
                        var q = '<div class="pull-right" style="margin-top:8px;"><a class="btn btn-default btn-large btn-inverse" style="display:inline;" href="#athleticteam/' + b.Data.leadSectionId + '/schedule" >List View</a>&nbsp;&nbsp;</div>';
                        $(".fc-header-right").append(q)
                    }
                    $(".dropdown-toggle").addClass("btn-large").addClass("btn-inverse").css("display", "inline");
                    $(".dropdown").addClass("pull-right");
                    $(".p3icon-rssGreen").addClass("p3icon-rss").removeClass("p3icon-rssGreen")
                }, 300);
                $("tr.filter-row").remove();
                k = '<tr class="filter-row"><td colspan="3" style="padding-top:0px;padding-bottom:0px;"><div class="grayContainer">';
                k += '<div class="btn-toolbar" style="margin-top:10px; margin-bottom:8px"><table width="100%"><tr><td width="20%" style="padding-top:0px;padding-bottom:0px;margin-left:15px;"><div class="pull-left" style="padding-left:15px;"><a class="btn btn-default btn-large" href="javascript:history.go(-1)"><h4>&lt; Back</h4></a></div></td><td style="padding-top:0px;padding-bottom:0px;" align="center" width="60%">';
                k += '<div class="btn-group">';
                if (o == 0) {
                    k += '<button id="scheduleFilterAll" data-val="0" class="btn btn-default btn-large active scheduleTypeFilter cal-filter-on"><i class="p3icon-ok"></i> All</button>'
                } else {
                    k += '<button id="scheduleFilterAll" data-val="0" class="btn btn-default btn-large scheduleTypeFilter cal-filter-off"><i class="p3icon-check"></i> All</button>'
                }
                if (o == 1 || o == 3 || o == 5) {
                    k += '<button id="scheduleFilterHome" data-val="1" class="btn btn-default btn-large active scheduleTypeFilter cal-filter-on"><i class="p3icon-ok"></i> Home</button>'
                } else {
                    k += '<button id="scheduleFilterHome" data-val="1" class="btn btn-default btn-large scheduleTypeFilter cal-filter-off"><i class="p3icon-check"></i> Home</button>'
                }
                if (o == 2 || o == 3 || o == 6) {
                    k += '<button id="scheduleFilterAway" data-val="2" class="btn btn-default btn-large active scheduleTypeFilter cal-filter-on"><i class="p3icon-ok"></i> Away</button>'
                } else {
                    k += '<button id="scheduleFilterAway" data-val="2" class="btn btn-default btn-large scheduleTypeFilter cal-filter-off"><i class="p3icon-check"></i> Away</button>'
                }
                if (o == 4 || o == 5 || o == 6) {
                    k += '<button id="scheduleFilterPractice" data-val="4" class="btn btn-default btn-large active scheduleTypeFilter cal-filter-on"><i class="p3icon-ok"></i> Practice</button>'
                } else {
                    k += '<button id="scheduleFilterPractice" data-val="4" class="btn btn-default btn-large scheduleTypeFilter cal-filter-off"><i class="p3icon-check"></i> Practice</button>'
                }
                k += "</div></td>";
                k += '<td width="20%" style="padding-top:0px;padding-bottom:0px;"><div class="pull-right" style="padding-right:15px;">';
                if (b.Data.SportLevels && b.Data.SportLevels.length > 0) {
                    k += '<button id="sport-picker-button" class="btn btn-default btn-large"><h4><i class="p3icon-teams"></i> Select Teams</h4></button>'
                }
                k += "</div></td>";
                k += "</div></div></td></tr>";
                $(".fc-header tbody:last").append(k);
                $(".fc-widget-header").addClass("cal-column-header");
                $(".fc-header-title").html("<h1>" + p.title + "</h1>");
                $(".btn-inverse").removeClass("active");
                switch (p.name) {
                    case "basicWeek":
                        $("#week-view").addClass("active");
                        break;
                    case "month":
                        $("#month-view").addClass("active");
                        break
                }
                n = c.localDateTime().getTime();
                if (n >= p.visStart.getTime() && n <= p.visEnd.getTime()) {
                    $("#button-today").addClass("active")
                }
            }
        })
    };
    b.Us.hasAddGameTask = function() {
        return ((g.Us.getLinkById(1145).length) ? true : false)
    };
    b.Us.hasEditGameTask = function() {
        return ((g.Us.getLinkById(1146).length) ? true : false)
    };
    b.Us.hasAddPracticeTask = function() {
        return ((g.Us.getLinkById(4528).length) ? true : false)
    };
    b.Us.hasEditPracticeTask = function() {
        return ((g.Us.getLinkById(4529).length) ? true : false)
    };
    b.Us.getAthleticPrivileges = function(p, r, q) {
        var o = (r || false),
            k = (p || false),
            n = (q || false),
            i = o || (k && b.Us.hasAddGameTask()),
            l = o || (k && b.Us.hasEditGameTask()),
            j = (!o) && k && b.Us.hasAddPracticeTask(),
            m = (!o) && k && b.Us.hasEditPracticeTask();
        return {
            canAddGame: i,
            canAddPractice: j,
            canAddGameAndPractice: (i && j),
            canEditGame: l,
            canEditPractice: m,
            canEditGameAndPractice: (l && m),
            canAddBulkPractices: (j && (!n)),
            isLite: o
        }
    };
    Hb.registerHelper("FormatTime", function(i, l) {
        var k = "",
            j;
        if (c.isMidnight(l) || !l) {
            k = "TBA"
        } else {
            j = c.getDateString(c.getDate(i));
            j = c.getDate(j + " " + l);
            k = c.getTimeString(j)
        }
        return k
    });
    p3.router().route("athleticcalendar/:id", "athleticcalendar", function(i) {
        p3.renderMainPage(new b.Vs.FullCalendarView({
            sectionId: i
        }))
    })
}(p3.module("LMS/athleticschedule")));
(function(b) {
    var a = p3.module("LMS/athleticschedule"),
        d = p3.module("LMS/athleticroster"),
        c = p3.module("LMS/groupPageEdit");
    b.Pages = [{
        Id: 1,
        ContentId: 433,
        Label: "Team Page",
        RoutePage: "teampage",
        IconClass: "p3icon-page",
        HTMLID: "team-page-btn",
        Display: function(e) {
            var f = new c.Vs.LayoutView({
                sectionId: b.Data.sectionId,
                leadSectionId: b.Data.leadSectionId,
                content: b.Data.contentTypes,
                userHasFullAccess: b.Data.userHasFullAccess,
                isOwner: b.Data.IsOwner,
                isManager: b.Data.isManager,
                associationId: 2,
                contextLabelId: 3,
                preview: false,
                layoutId: b.Data.layoutId,
                pendingInd: false
            });
            p3.rV(f, e, true)
        },
        Active: true
    }, {
        Id: 2,
        ContentId: 268,
        Label: "Schedule",
        RoutePage: "schedule",
        IconClass: "p3icon-schedule",
        HTMLID: "schedule-btn",
        Display: function(e) {
            p3.rV(new a.Vs.TeamScheduleView({
                sectionId: b.Data.sectionId,
                leadSectionId: b.Data.leadSectionId,
                durationId: b.Data.durationId,
                content: b.Data.contentTypes,
                userHasFullAccess: b.Data.userHasFullAccess,
                isOwner: b.Data.IsOwner,
                isManager: b.Data.isManager
            }), e, true)
        },
        Active: false
    }, {
        Id: 3,
        ContentId: 434,
        Label: "Roster",
        RoutePage: "roster",
        IconClass: "p3icon-roster",
        HTMLID: "roster-btn",
        Display: function(e) {
            p3.rV(new d.Vs.RosterView({
                sectionId: b.Data.sectionId,
                leadSectionId: b.Data.leadSectionId,
                content: b.Data.contentTypes,
                coachId: b.Data.coachId,
                userHasFullAccess: b.Data.userHasFullAccess,
                isOwner: b.Data.IsOwner,
                isManager: b.Data.isManager,
                startDate: b.Data.StartDate,
                endDate: b.Data.EndDate,
                duration: b.Data.duration,
                enableSearch: true
            }), e, true)
        },
        Active: false
    }, {
        Id: 4,
        ContentId: 45,
        Label: "Calendar",
        RoutePage: "calendar",
        Hidden: true,
        Display: function(e) {
            p3.rV(new a.Vs.CalendarView({
                sectionId: b.Data.sectionId,
                leadSectionId: b.Data.leadSectionId,
                durationId: b.Data.durationId,
                content: b.Data.contentTypes,
                userHasFullAccess: b.Data.userHasFullAccess,
                isOwner: b.Data.IsOwner,
                isManager: b.Data.isManager
            }), e, true)
        },
        Active: false
    }];
    b.Ms.Section = Bbm.extend({
        url: function() {
            return ""
        }
    });
    b.Cs.Section = Bbc.extend({
        model: b.Ms.Section,
        initialize: function(e, f) {
            this.sectionId = f.sectionId || 0
        },
        url: function() {
            return aP + "datadirect/SectionInfoView/?format=json&sectionId=" + this.sectionId + "&associationId=2"
        }
    });
    b.Ms.Content = Bbm.extend({
        idAttribute: "ContentId",
        url: function() {
            return ""
        }
    });
    b.Cs.Content = Bbc.extend({
        model: b.Ms.Content,
        initialize: function(e, f) {
            this.sectionId = f.sectionId || 0;
            this.leadSectionId = f.leadSectionId || 0
        },
        url: function() {
            return aP + "datadirect/GroupPossibleContentGet/?format=json&leadSectionId=" + this.sectionId
        }
    });
    b.Data = {};
    b.Data.sectionId = 0;
    b.Data.leadSectionId = 0;
    b.Data.contentTypes = null;
    b.Data.MainViewRendered = false;
    b.Data.RenderedSectionId = 0;
    b.Data.coachId = 0;
    b.Data.durationId = 0;
    b.Data.StartDate = null;
    b.Data.EndDate = null;
    b.Data.duration = "";
    b.Vs.MainTeamView = Bb.View.extend({
        template: "athleticteam/athleticteammainview.template.html",
        initialize: function(e) {
            this.Containers = {};
            if (e) {
                b.Data.sectionId = b.Data.RenderedSectionId = this.SectionId = e.SectionId
            } else {
                b.Data.sectionId = b.Data.RenderedSectionId = this.SectionId = 0
            }
            b.Data.MainViewRendered = true
        },
        dispose: function() {
            b.Data.MainViewRendered = false
        },
        render: function(e) {
            var f = this;
            p3.fT(f.template, function(h) {
                f.$el.html(h({}));
                $(e).html(f.el);
                f.Containers.Navigation = $("#athleticteamnavmenu");
                f.Containers.MainContent = $("#athleticteammaincontainer");
                var g = new b.Cs.Section({}, {
                    sectionId: f.SectionId
                });
                p3.rV(new b.Vs.NavigationView({
                    ParentView: f,
                    collection: g
                }), f.Containers.Navigation, false);
                g.fetch({
                    error: function() {
                        p3.displayError("Error loading section information")
                    }
                })
            })
        }
    });
    b.Vs.NavigationView = Bb.View.extend({
        template: "athleticteam/athleticteamnavigationmenu.template.html",
        initialize: function(e) {
            this.collection.bind("reset change", this.renderTemplate, this);
            this.Containers = {};
            if (e) {
                this.ParentView = e.ParentView
            }
            this.enableScrollNav()
        },
        dispose: function() {
            this.disableScrollNav()
        },
        renderTemplate: function() {
            var v = this,
                e, l, f, s, h, n, p, j, m, t, k, i, o, r, u, q, g;
            v.collection.each(function(w) {
                if (w.get("Id") == b.Data.sectionId) {
                    e = w.get("Teacher");
                    l = w.get("GroupName");
                    s = w.get("SchoolYear");
                    h = w.get("Description");
                    n = w.get("IsOwner");
                    m = w.get("IsManager");
                    f = w.get("TeacherId");
                    p = w.get("LeadSectionId");
                    j = w.get("DurationId");
                    t = w.get("StartDate");
                    k = w.get("EndDate");
                    i = w.get("Duration");
                    o = w.get("LayoutId")
                }
            });
            b.Data.IsOwner = n;
            b.Data.isManager = m;
            b.Data.coachId = f;
            b.Data.leadSectionId = p;
            b.Data.durationId = j;
            b.Data.StartDate = t;
            b.Data.EndDate = k;
            b.Data.duration = i;
            r = p3.Data.Context.getSelectedPersona().Id;
            b.Data.userHasFullAccess = (r == 3 && b.Data.IsOwner) || b.Data.isManager;
            b.Data.layoutId = o;
            u = false;
            if (e !== "" || h || s) {
                u = true
            }
            g = new b.Cs.Content({}, {
                sectionId: b.Data.sectionId
            });
            q = [];
            g.fetch({
                error: function() {
                    p3.displayError("Error loading available content")
                },
                success: function() {
                    var y, x, w;
                    b.Data.contentTypes = g;
                    g.each(function(A) {
                        var z = A.get("ContentId"),
                            C = _.find(b.Pages, function(D) {
                                return D.ContentId === z
                            }),
                            B = A.get("ShowContentType");
                        if (C && B && !C.Hidden) {
                            q.push({
                                sort: C.Id,
                                title: C.Label,
                                iconClass: C.IconClass,
                                status: C.Active ? "active" : "inactive",
                                link: "athleticteam/" + b.Data.sectionId + "/" + C.RoutePage,
                                pId: C.Id,
                                HTMLID: C.HTMLID
                            });
                            C.Enabled = true
                        } else {
                            if (C) {
                                C.Enabled = false
                            }
                        }
                    });
                    y = _.find(b.Pages, function(z) {
                        return z.ContentId === 268
                    });
                    if (y && y.Enabled) {
                        x = _.find(b.Pages, function(z) {
                            return z.ContentId === 45
                        });
                        if (x) {
                            x.Enabled = true
                        }
                    }
                    q = _.sortBy(q, "sort");
                    p3.fT(v.template, function(z) {
                        v.$el.html(z({
                            Info: u,
                            Coach: e,
                            GroupName: l,
                            SchoolYear: s,
                            Description: h,
                            navigationItems: q
                        }))
                    });
                    w = _.find(b.Pages, function(z) {
                        return z.Active
                    });
                    if (w && w.Enabled) {
                        w.Display($("#athleticteammaincontainer"))
                    }
                }
            });
            return this
        },
        events: {
            "click #section-description-toggle": "toggleDescription",
            "click [data-pid]": "switchTab"
        },
        render: function(e) {
            $(e).append(this.el);
            return this
        },
        toggleDescription: function(f) {
            var e = $("#section-description-content");
            if (e) {
                if (e.filter(":visible").length) {
                    e.hide(400)
                } else {
                    e.show(400)
                }
            }
            return false
        },
        switchTab: function(e) {
            if ($(e.currentTarget).attr("data-pid") === "4") {
                _.find(b.Pages, function(f) {
                    return f.Id === 4
                }).Display();
                return false
            }
        },
        enableScrollNav: function(g) {
            var f = $(document),
                e = $(".subnavbar"),
                j = e.length && e.offset().top - 120,
                i = false,
                h = false;

            function k() {
                if (e.length === 0) {
                    e = $(".subnavbar");
                    j = e.length && e.offset().top - 120
                }
                var l = f.scrollTop();
                i = e.hasClass("subnavbar-fixed");
                if (h) {
                    h = false
                } else {
                    if (l >= j && !i) {
                        e.addClass("subnavbar-fixed");
                        h = true
                    } else {
                        if (l <= j && i) {
                            e.removeClass("subnavbar-fixed")
                        }
                    }
                }
            }
            f.on("scroll", k)
        },
        disableScrollNav: function(f) {
            var e = $(document);
            e.off("scroll")
        }
    });
    b.Us.LoadPage = function(e, g) {
        p3.loadingIcon("#athleticteammaincontainer");
        var f;
        _.each(b.Pages, function(h) {
            if (h.RoutePage.toLowerCase() === g.toLowerCase()) {
                h.Active = true
            } else {
                h.Active = false
            }
            if (h.Active) {
                f = h
            }
        });
        if (!b.Data.MainViewRendered || b.Data.RenderedSectionId != e) {
            p3.renderMainPage(new b.Vs.MainTeamView({
                SectionId: e
            }))
        } else {
            if (f && f.Enabled) {
                f.Display($("#athleticteammaincontainer"));
                b.Us.SwitchTabs(f)
            }
        }
    };
    b.Us.SwitchTabs = function(f) {
        var e = $(".nav-tabs").children();
        $.each(e, function() {
            var g = $(this);
            if (g.data("pid") === f.Id || (f.Id === 4 && g.data("pid") === 2)) {
                g.removeClass("inactive");
                g.addClass("active")
            } else {
                if (g.hasClass("active")) {
                    g.removeClass("active");
                    g.addClass("inactive")
                }
            }
        })
    };
    p3.router().route("athleticteam/:id", "athleticteam", function(e) {
        if (e.indexOf("&pk=") > -1) {
            e = e.substring(4)
        }
        b.Us.LoadPage(e, "teampage")
    });
    p3.router().route("athleticteam/:id/:page", "athleticteam", b.Us.LoadPage)
}(p3.module("LMS/athleticteam")));
(function(a) {
    var b = p3.module("LMS/groupPageEdit");
    a.Ms.Sections = Bbm.extend({
        idAttribute: "SectionId",
        url: function() {
            return ""
        }
    });
    a.Cs.Sections = Bbc.extend({
        model: a.Ms.Sections,
        initialize: function(c, d) {
            this.sectionId = d.sectionId || 0
        },
        url: function() {
            return aP + "datadirect/SectionsForTeacher/?format=json"
        }
    });
    p3.router().route("academicclassedit/:sectionId/:leadSectionId", "academicclassedit", function(d, c) {
        p3.setTitle("Edit Bulletinboard");
        b.Us.loadPageEditor(c, d, 1, 2)
    })
}(p3.module("LMS/classpage")));
(function(a) {
    var b = p3.module("LMS/groupPageEdit");
    p3.router().route("communitypageedit/:sectionId/:leadSectionId", "communitypageedit", function(d, c) {
        p3.setTitle("Edit Bulletinboard");
        b.Us.loadPageEditor(c, d, 3, 12)
    })
}(p3.module("LMS/communitybulletinboard")));
(function(a) {
    var d = p3.module("shared/task"),
        e = p3.module("LMS/topic"),
        c = p3.module("LMS/roster"),
        b = p3.module("LMS/groupPageEdit");
    a.Data = {};
    a.Pages = [{
        Id: 1,
        ContentId: 433,
        Label: "Bulletin Board",
        RoutePage: "bulletinboard",
        IconClass: "p3icon-page",
        HTMLID: "bulletin-board-btn",
        LinkId: "bulletin-board-link",
        Display: function(f) {
            var g;
            g = new b.Vs.LayoutView({
                sectionId: a.Data.sectionId,
                leadSectionId: a.Data.leadSectionId,
                content: a.Data.contentTypes,
                userHasFullAccess: a.Data.userHasFullAccess,
                isOwner: a.Data.IsOwner,
                isManager: a.Data.isManager,
                associationId: 3,
                contextLabelId: 12,
                preview: false,
                layoutId: a.Data.layoutId,
                pendingInd: false
            });
            p3.rV(g, f, true)
        },
        Active: true
    }, {
        Id: 2,
        ContentId: 386,
        Label: "Topics",
        RoutePage: "topics",
        IconClass: "p3icon-topics",
        HTMLID: "topics-btn",
        LinkId: "topics-link",
        Display: function(f) {
            p3.rV(new e.Vs.TopicManageView({
                sectionId: a.Data.sectionId,
                leadSectionId: a.Data.leadSectionId,
                active: true,
                future: false,
                expired: false,
                userHasFullAccess: a.Data.userHasFullAccess,
                isOwner: a.Data.IsOwner,
                isManager: a.Data.isManager,
                content: a.Data.contentTypes,
                levelNum: a.Data.levelNum || -1,
                durationId: a.Data.durationId,
                schoolYearLabel: a.Data.schoolYear,
                contextLabelId: 12
            }), f, true)
        },
        Active: false
    }, {
        Id: 3,
        ContentId: 434,
        Label: "Roster",
        RoutePage: "roster",
        IconClass: "p3icon-roster",
        HTMLID: "roster-btn",
        LinkId: "roster-link",
        Display: function(f) {
            p3.rV(new c.Vs.RosterView({
                sectionId: a.Data.sectionId,
                leadSectionId: a.Data.leadSectionId,
                durationId: a.Data.durationId,
                associationId: 3,
                isOwner: a.Data.IsOwner,
                enableSearch: true,
                disableLearningProfiles: true
            }), f, true)
        },
        Active: false
    }];
    a.Ms.Section = Bbm.extend({
        url: function() {
            return ""
        }
    });
    a.Cs.Section = Bbc.extend({
        model: a.Ms.Section,
        initialize: function(f, g) {
            this.sectionId = g.sectionId || 0
        },
        url: function() {
            return aP + "datadirect/SectionInfoView/?format=json&sectionId=" + this.sectionId + "&associationId=3"
        }
    });
    a.Ms.Content = Bbm.extend({
        idAttribute: "ContentId",
        url: function() {
            return ""
        }
    });
    a.Cs.Content = Bbc.extend({
        model: a.Ms.Content,
        initialize: function(f, g) {
            this.sectionId = g.sectionId || 0;
            this.leadSectionId = g.leadSectionId || 0
        },
        url: function() {
            return aP + "datadirect/GroupPossibleContentGet/?format=json&leadSectionId=" + this.leadSectionId
        }
    });
    a.Data = {};
    a.Data.leadSectionId = 0;
    a.Data.durationId = 0;
    a.Data.sectionId = 0;
    a.Data.contentTypes = null;
    a.Data.MainViewRendered = false;
    a.Data.RenderedSectionId = 0;
    a.Data.schoolYear = "";
    a.Vs.MainGroupView = Bb.View.extend({
        template: "communitygroup/communitygroupmainview.template.html",
        initialize: function(f) {
            this.Containers = {};
            if (f) {
                a.Data.sectionId = a.Data.RenderedSectionId = this.SectionId = f.SectionId
            } else {
                a.Data.sectionId = a.Data.RenderedSectionId = this.SectionId = 0
            }
            a.Data.MainViewRendered = true
        },
        dispose: function() {
            a.Data.MainViewRendered = false
        },
        render: function(f) {
            var g = this;
            p3.fT(g.template, function(i) {
                g.$el.html(i({}));
                $(f).html(g.el);
                g.Containers.Navigation = $("#communitypagenavmenu");
                g.Containers.MainContent = $("#communitypagecontainer");
                var h = new a.Cs.Section({}, {
                    sectionId: g.SectionId
                });
                p3.rV(new a.Vs.NavigationView({
                    ParentView: g,
                    collection: h
                }), g.Containers.Navigation, false);
                h.fetch({
                    error: function() {
                        p3.displayError("Error loading section information")
                    }
                })
            })
        }
    });
    a.Vs.NavigationView = Bb.View.extend({
        template: "communitygroup/communitygroupnavigationmenu.template.html",
        initialize: function(f) {
            this.collection.bind("reset change", this.renderTemplate, this);
            this.Containers = {};
            if (f) {
                this.ParentView = f.ParentView
            }
            this.enableScrollNav()
        },
        dispose: function() {
            this.disableScrollNav()
        },
        renderTemplate: function() {
            var u = this,
                k, t, i, q, r, p, o, j, l, m, n, h, g = false,
                f, s = [];
            u.collection.each(function(v) {
                if (v.get("Id") === parseInt(a.Data.sectionId, 10)) {
                    k = v.get("GroupName");
                    if (v.get("Identifier")) {
                        k += " " + v.get("Identifier")
                    }
                    i = v.get("Duration");
                    j = v.get("DurationId");
                    h = v.get("Description");
                    q = v.get("Level");
                    r = v.get("LevelNum");
                    t = v.get("SchoolYear");
                    if (v.get("Length")) {
                        if (v.get("Length") === 1) {
                            p = "1 Term"
                        } else {
                            p = v.get("Length") + " Terms"
                        }
                    }
                    o = v.get("LeadSectionId");
                    m = v.get("IsOwner");
                    l = v.get("IsManager");
                    n = v.get("LayoutId")
                }
            });
            a.Data.IsOwner = m;
            a.Data.leadSectionId = o;
            a.Data.durationId = j;
            a.Data.levelNum = r;
            a.Data.schoolYear = t;
            a.Data.isManager = l;
            a.Data.userHasFullAccess = a.Data.IsOwner || a.Data.isManager;
            a.Data.layoutId = n;
            if (i || j || h || q || p) {
                g = true
            }
            f = new a.Cs.Content({}, {
                sectionId: a.Data.sectionId,
                leadSectionId: a.Data.leadSectionId
            });
            f.fetch({
                error: function() {
                    p3.displayError("Error loading available content")
                },
                success: function() {
                    a.Data.contentTypes = f;
                    f.each(function(x) {
                        var w = x.get("ContentId"),
                            y = true,
                            A, z = _.find(a.Pages, function(B) {
                                return B.ContentId === w
                            });
                        y = x.get("ShowContentType");
                        if (y & w === 386) {
                            y = a.Data.userHasFullAccess || x.get("EditorAccess");
                            if (!y) {
                                A = new e.Cs.Topic({}, {
                                    sectionId: 0,
                                    leadSectionId: a.Data.leadSectionId,
                                    active: true,
                                    future: false,
                                    expired: false
                                });
                                A.fetch({
                                    async: false,
                                    success: function() {
                                        if (A.length > 0) {
                                            y = true
                                        }
                                    },
                                    error: function() {
                                        p3.displayError("Error loading topics")
                                    }
                                })
                            }
                        }
                        if (z && y) {
                            s.push({
                                sort: z.Id,
                                title: z.Label,
                                iconClass: z.IconClass,
                                status: z.Active ? "active" : "inactive",
                                link: d.Us.getUrlById(247, a.Data.sectionId + "/" + z.RoutePage),
                                pId: z.Id,
                                HTMLID: z.HTMLID,
                                LinkId: z.LinkId
                            });
                            z.Enabled = true
                        } else {
                            if (z) {
                                z.Enabled = false
                            }
                        }
                    });
                    s = _.sortBy(s, "sort");
                    p3.fT(u.template, function(w) {
                        u.$el.html(w({
                            Info: g,
                            GroupName: k,
                            Duration: i,
                            Level: q,
                            Length: p,
                            Description: h,
                            navigationItems: s
                        }))
                    });
                    var v = _.find(a.Pages, function(w) {
                        return w.Active
                    });
                    if (v && v.Enabled) {
                        v.Display($("#communitypagecontainer"))
                    }
                }
            });
            return this
        },
        events: {
            "click #section-description-toggle": "toggleDescription",
            "click [data-pid]": "switchTab"
        },
        render: function(f) {
            $(f).append(this.el);
            return this
        },
        toggleDescription: function(g) {
            var f = $("#section-description-content");
            if (f && f.filter(":visible").length) {
                f.hide(400)
            } else {
                f.show(400)
            }
            return false
        },
        switchTab: function(f) {
            if ($(f.currentTarget).attr("data-pid") === "4") {
                _.find(a.Pages, function(g) {
                    return g.Id === 4
                }).Display();
                return false
            }
        },
        enableScrollNav: function(h) {
            var g = $(document),
                f = $(".subnavbar"),
                i = f.length && f.offset().top - 101;

            function j() {
                if (f.length === 0) {
                    f = $(".subnavbar");
                    i = f.length && f.offset().top - 101
                }
                var l = g.scrollTop(),
                    k = f.hasClass("subnavbar-fixed");
                if (l >= i && !k) {
                    f.addClass("subnavbar-fixed")
                } else {
                    if (l <= i && k) {
                        f.removeClass("subnavbar-fixed")
                    }
                }
            }
            g.on("scroll", j)
        },
        disableScrollNav: function(g) {
            var f = $(document);
            f.off("scroll")
        }
    });
    a.Us.LoadPage = function(f, h) {
        p3.loadingIcon("#communitypagecontainer");
        var g;
        _.each(a.Pages, function(i) {
            if (i.RoutePage.toLowerCase() === h.toLowerCase()) {
                i.Active = true;
                g = i
            } else {
                i.Active = false
            }
        });
        if (!a.Data.MainViewRendered || a.Data.RenderedSectionId !== f) {
            p3.renderMainPage(new a.Vs.MainGroupView({
                SectionId: f
            }))
        } else {
            if (g && g.Enabled) {
                g.Display($("#communitypagecontainer"));
                a.Us.SwitchTabs(g)
            }
        }
    };
    a.Us.SwitchTabs = function(g) {
        var f = $(".nav-tabs").children();
        $.each(f, function() {
            var h = $(this);
            if (h.data("pid") === g.Id || (g.Id === 8 && h.data("pid") === 3)) {
                h.removeClass("inactive");
                h.addClass("active")
            } else {
                if (h.hasClass("active")) {
                    h.removeClass("active");
                    h.addClass("inactive")
                }
            }
        })
    };
    p3.router().route("communitypage/:id", "communitypage", function(f) {
        if (f.indexOf("&pk=") > -1) {
            f = f.substring(4)
        }
        a.Us.LoadPage(f, p3.Data.Context.get("UserInfo").UserId, "bulletinboard")
    });
    p3.router().route("communitypage/:id/:page", "communitypage", function(f, g) {
        a.Us.LoadPage(f, g)
    })
}(p3.module("LMS/communitygroup")));
(function(b) {
    var d = p3.module("pager"),
        c = p3.Us.Culture,
        a = p3.module("app");
    b.Data = {};
    b.Ms.SchoolInfoGet = Bbm.extend({
        url: function() {
            return aP + "integration/schoolinfoget/?format=json"
        }
    });
    b.Cs.VendorRoles = Bbc.extend({
        url: "integration/vendorrolesget/?format=json"
    });
    b.Ms.SettingsSave = Bbm.extend({
        url: function() {
            return aP + "eeconnect/InitialSettingsSave/?format=json"
        }
    });
    b.Ms.GetAccessToken = Bbm.extend({
        url: function() {
            return aP + "eeconnect/GetAccessToken/?format=json"
        }
    });
    b.Ms.EETypes = Bbm.extend({
        url: function() {
            return aP + "eeconnect/EETypesGet/?format=json"
        }
    });
    b.Ms.EEAttendanceTypes = Bbm.extend({
        url: function() {
            return aP + "eeconnect/EEAttendanceTypesGet/?format=json"
        }
    });
    b.Ms.EEMarkingColumns = Bbm.extend({
        url: function() {
            return aP + "eeconnect/EEMarkingColumnsGet/?format=json"
        }
    });
    b.Cs.Settings = Bbc.extend({
        url: "eeconnect/settingsget/?format=json"
    });
    b.Ms.WHType = Bbm.extend({
        idAttribute: "dd_id"
    });
    b.Cs.PhoneTypes = Bbc.extend({
        model: b.Ms.WHType,
        url: "datadirect/PhoneTypesGet/?format=json"
    });
    b.Cs.AddressTypes = Bbc.extend({
        model: b.Ms.WHType,
        url: "datadirect/AddressTypesGet/?format=json"
    });
    b.Cs.GradeLevels = Bbc.extend({
        model: b.Ms.WHType,
        url: "datadirect/GradeLevelsGet/?format=json"
    });
    b.Cs.AttendanceTypes = Bbc.extend({
        url: "eeconnect/AttendanceTypesGet/?format=json"
    });
    b.Cs.EEWHUnmatched = Bbc.extend({
        url: "datadirect/EEWHUnmatchedGet/?format=json"
    });
    b.Cs.EEUnmatched = Bbc.extend({
        url: "datadirect/EEUnmatchedGet/?format=json"
    });
    b.Cs.EEMatched = Bbc.extend({
        url: "datadirect/EEMatchedGet/?format=json"
    });
    b.Ms.EEMatchingStatistics = Bbm.extend({
        url: "datadirect/EEMatchingStatisticsGet/?format=json"
    });
    b.Cs.EEWHUser = Bbc.extend({
        url: "datadirect/EEWHUserGet/?format=json"
    });
    b.Ms.RelationshipType = Bbm.extend({
        idAttribute: "RelationshipId"
    });
    b.Cs.RelationshipType = Bbc.extend({
        model: b.Ms.RelationshipType,
        url: "eeconnect/RelationshipTypesGet/?format=json"
    });
    b.Ms.EEUser = Bbm.extend({
        url: function() {
            return aP + "eeconnect/EEUserGet/?format=json"
        }
    });
    b.Ms.UnlinkUser = Bbm.extend({
        url: function() {
            return aP + "eeconnect/UnlinkUser/?format=json"
        }
    });
    b.Ms.LinkUsers = Bbm.extend({
        url: function() {
            return aP + "eeconnect/LinkUsers/?format=json"
        }
    });
    b.Ms.CreateUsers = Bbm.extend({
        url: function() {
            return aP + "eeconnect/CreateUsers/?format=json"
        }
    });
    b.Cs.PossibleMatches = Bbc.extend({
        url: "datadirect/EEPossibleMatchGet/?format=json"
    });
    b.Ms.EETerms = Bbm.extend({
        url: function() {
            return aP + "eeconnect/EETermsGet/?format=json"
        }
    });
    b.Ms.WHTerm = Bbm.extend({
        idAttribute: "duration_id"
    });
    b.Cs.WHTerms = Bbc.extend({
        model: b.Ms.WHTerm,
        url: "datadirect/DurationPlusLevelGet/?format=json"
    });
    b.Cs.SchoolLevels = Bbc.extend({
        url: function() {
            return aP + "datadirect/SchoolLevelGet/1"
        }
    });
    b.Ms.WHMarkingPeriod = Bbm.extend({
        idAttribute: "marking_period_id"
    });
    b.Cs.WHMarkingPeriods = Bbc.extend({
        model: b.Ms.WHMarkingPeriod,
        url: "datadirect/MarkingPeriodsGet/?format=json"
    });
    b.Cs.EECourseLog = Bbc.extend({
        url: "datadirect/EECourseLogGet/?format=json"
    });
    b.Cs.EEAttendanceLog = Bbc.extend({
        url: "datadirect/EEAttendanceLogGet/?format=json"
    });
    b.Cs.EEGradeLog = Bbc.extend({
        url: "datadirect/EEGradeLogGet/?format=json"
    });
    b.Cs.SyncErrorList = Bbc.extend({
        url: "datadirect/EESyncErrorsGet/?format=json"
    });
    b.Cs.SectionGradeLog = Bbc.extend({
        url: "datadirect/EESectionGradeLogGet/?format=json"
    });
    b.Cs.EEUserLog = Bbc.extend({
        url: "datadirect/EEUserLogGet/?format=json"
    });
    b.Ms.LinkMismatchUser = Bbm.extend({
        url: function() {
            return aP + "eeconnect/LinkMismatchUser/?format=json"
        }
    });
    b.Ms.CreateMismatchUser = Bbm.extend({
        url: function() {
            return aP + "eeconnect/CreateMismatchUser/?format=json"
        }
    });
    b.Ms.RemoveRepositoryLink = Bbm.extend({
        url: function() {
            return aP + "eeconnect/RemoveRepositoryLink/?format=json"
        }
    });
    b.Ms.GradeRefresh = Bbm.extend({
        url: function() {
            return aP + "eeconnect/RefreshGrades/?format=json"
        }
    });
    b.Vs.SettingsMain = Bb.View.extend({
        template: "connectee/layout.template.html",
        events: {
            "click #setup-button": "openInitSettings",
            "click #edit-settings-button": "openSettings",
            "click #unmatched-ee-button": "showUnmatchedEEUsers",
            "click #unmatched-onsuite-button": "showUnmatchedOnSuiteUsers",
            "click #matched-button": "showMatchedUsers",
            "click #course-summary-link": "showCourseSummary",
            "click #attendance-summary-link": "showAttendanceSummary",
            "click #grade-summary-link": "showGradeSummary",
            "click #auth-settings-button": "openInitSettings",
            "click #user-log-link": "showUserLog",
            "click #grade-refresh-button": "gradeRefresh"
        },
        renderTemplate: function() {
            var e = this;
            p3.fT(e.template, function(f) {
                e.$el.html(f({
                    congrats: e.showCongrats,
                    enabled: e.enabled,
                    stats: e.stats.toJSON(),
                    haveToken: b.Data.AuthToken && b.Data.AuthToken.length > 0
                }))
            });
            e.showCongrats = false;
            e.Containers.UserList = "#user-list-container"
        },
        initialize: function() {
            this.showCongrats = false;
            this.Containers = {}
        },
        render: function(e) {
            var g = this,
                f;
            $(e).append(this.el);
            f = new b.Ms.SchoolInfoGet();
            f.fetch({
                data: {
                    vendorId: 95,
                    integrationTypeId: 5
                },
                success: function() {
                    g.enabled = f.get("enabled_ind");
                    if (!g.enabled) {
                        g.checkForSettings()
                    }
                    if (g.enabled && !b.Data.AuthToken) {
                        b.Us.GetAccessToken()
                    }
                    g.stats = new b.Ms.EEMatchingStatistics();
                    g.stats.fetch({
                        success: function(h, i) {
                            g.renderTemplate()
                        },
                        error: function(h, i) {
                            p3.displayError("Error loading matching statistics")
                        }
                    })
                },
                error: function(h, i) {
                    p3.displayError("Error getting Connect EE School Info")
                }
            })
        },
        openInitSettings: function(f) {
            var i = this,
                g, h = new b.Cs.Settings();
            h.fetch({
                success: function() {
                    g = new b.Vs.InitialSettings({
                        settings: h.models[0],
                        firstSetup: f.currentTarget.id === "setup-button"
                    });
                    p3.rV(g, p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal);
                    g.on("settingsInitialized", function(j, e) {
                        i.settingsInitialized(j, e)
                    })
                },
                error: function(e, j) {
                    p3.displayError("Error getting Connect EE parameters")
                }
            })
        },
        settingsInitialized: function(f, e) {
            var h = this,
                g;
            h.enabled = true;
            h.renderTemplate();
            p3.Layout.Containers.Modal.modal("hide");
            if (e) {
                g = new b.Vs.Settings({
                    settings: f,
                    initialSetup: true
                });
                p3.rV(g, p3.Layout.Containers.Modal, true);
                p3.showModal(p3.Layout.Containers.Modal);
                g.on("settingsSaved", function(i) {
                    h.settingsSaved(i, true)
                })
            } else {
                h.openSettings()
            }
        },
        openSettings: function(f) {
            var h = this,
                g = new b.Cs.Settings();
            g.fetch({
                success: function() {
                    var e = new b.Vs.Settings({
                        settings: g.models[0],
                        initialSetup: false
                    });
                    p3.rV(e, p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal);
                    e.on("settingsSaved", function(i) {
                        h.settingsSaved(i, false)
                    })
                },
                error: function(e, i) {
                    p3.displayError("Error getting Connect EE parameters")
                }
            })
        },
        settingsSaved: function(f, e) {
            var g = this;
            g.enabled = true;
            g.showCongrats = e;
            g.renderTemplate();
            p3.Layout.Containers.Modal.modal("hide")
        },
        showUnmatchedEEUsers: function(f) {
            this.showUserList("Unmatched Records in Education Edge", 0)
        },
        showUnmatchedOnSuiteUsers: function(f) {
            this.showUserList("Unmatched Records in Core", 1)
        },
        showMatchedUsers: function(f) {
            this.showUserList("Matched Records", 2)
        },
        showUserList: function(e, f) {
            var h = this,
                g;
            g = new b.Vs.UserList({
                label: e,
                type: f
            });
            p3.rV(g, h.Containers.UserList, true);
            g.on("countChange", function() {
                h.updateCounts()
            })
        },
        updateCounts: function() {
            var e = this;
            e.stats.fetch({
                success: function(f, g) {
                    $("#unmatched-ee-label").html(e.stats.get("vendor_unmatched"));
                    $("#unmatched-onsuite-label").html(e.stats.get("wh_unmatched"));
                    $("#matched-count").html(e.stats.get("matched_count"))
                },
                error: function(f, g) {
                    p3.displayError("Error loading matching statistics")
                }
            })
        },
        checkForSettings: function() {
            var f = this,
                e = new b.Cs.Settings();
            e.fetch({
                async: false,
                success: function() {
                    if (e.models[0].get("ApiUrl") && e.models[0].get("ApiUrl").length > 0) {
                        f.enabled = true
                    }
                },
                error: function(g, h) {
                    p3.displayError("Error getting Connect EE parameters")
                }
            })
        },
        showCourseSummary: function(g) {
            var h = this,
                f;
            f = new b.Vs.CourseList();
            p3.rV(f, h.Containers.UserList, true);
            g.preventDefault()
        },
        showAttendanceSummary: function(f) {
            var h = this,
                g;
            g = new b.Vs.LogList({
                grades: false
            });
            p3.rV(g, h.Containers.UserList, true);
            f.preventDefault()
        },
        showGradeSummary: function(f) {
            var h = this,
                g;
            g = new b.Vs.LogList({
                grades: true
            });
            p3.rV(g, h.Containers.UserList, true);
            f.preventDefault()
        },
        showUserLog: function(f) {
            var h = this,
                g;
            g = new b.Vs.LogList({
                grades: false,
                users: true
            });
            p3.rV(g, h.Containers.UserList, true);
            f.preventDefault()
        },
        gradeRefresh: function(f) {
            var g;
            p3.showConfirm("Full Grade Refresh", "Are you sure you want to queue refresh of all grades?", null, function() {
                g = new b.Ms.GradeRefresh();
                g.save({}, {
                    success: function() {
                        p3.displaySiteMessage("All grades have been queued for refresh.", "alert-success")
                    },
                    error: function() {
                        p3.displayError("Grade refresh error.")
                    }
                })
            });
            f.preventDefault()
        }
    });
    b.Vs.UserList = Bb.View.extend({
        template: "connectee/user-list.template.html",
        events: {
            "keyup #search-box": "checkTextKey",
            "click #search-button": "searchClick",
            "click .select-link-button": "setBulkCreateStatus",
            "click #select-all-link-button": "selectAllLink",
            "click .link-unmatched-link": "linkUnmatched",
            "click #bulk-create-button": "bulkCreateNew",
            "click .review-matched-link": "reviewMatch"
        },
        renderTemplate: function() {
            var f = this,
                e;
            if (f.Collection.length === 1) {
                e = "1 Result"
            } else {
                e = f.Collection.length + " Results"
            }
            p3.fT(f.template, function(g) {
                f.$el.html(g({
                    label: f.options.label,
                    users: f.getCurrentUsers(),
                    searchText: f.searchText,
                    countLabel: e,
                    listType: f.options.type
                }))
            });
            if (f.Collection.length > 20) {
                window.setTimeout(function() {
                    var h = new d.Cs.Pager(),
                        g;
                    h.getPages(f.Collection.length, f.currentPage, 20);
                    g = new d.Vs.PagerView({
                        collection: h,
                        prefix: "user",
                        itemCount: f.Collection.length,
                        currentPage: f.currentPage,
                        pageSize: 20,
                        scrollTop: true,
                        clickCallback: "pagerClick",
                        parentView: f
                    });
                    p3.rV(g, $("#user-pager"), true);
                    g.on("pagerClick", f.pageChanged)
                }, 100)
            }
        },
        pageChanged: function(e) {
            var f = this.options.parentView;
            if (e !== f.currentPage) {
                f.currentPage = e;
                f.renderTemplate()
            }
        },
        initialize: function() {
            this.Containers = {};
            this.searchText = "";
            this.instantiateCollection();
            this.currentPage = 1
        },
        render: function(e) {
            var f = this;
            $(e).append(this.el);
            f.getList("")
        },
        getList: function(e) {
            var f = this;
            f.searchText = e;
            f.Collection.fetch({
                data: {
                    searchText: e
                },
                success: function() {
                    f.renderTemplate()
                },
                error: function(g, h) {
                    p3.displayError("Error getting Connect EE user list")
                }
            })
        },
        getCurrentUsers: function() {
            var i = this,
                h = i.Collection.toJSON(),
                g = 0,
                e, f;
            if (h.length > 20) {
                if (i.currentPage > 1) {
                    g = (i.currentPage - 1) * 20
                }
                e = g + 20;
                f = h.slice(g, e)
            } else {
                f = h
            }
            return f
        },
        instantiateCollection: function() {
            var e = this;
            switch (e.options.type) {
                case 0:
                    e.Collection = new b.Cs.EEUnmatched();
                    break;
                case 1:
                    e.Collection = new b.Cs.EEWHUnmatched();
                    break;
                case 2:
                    e.Collection = new b.Cs.EEMatched();
                    break
            }
        },
        searchClick: function() {
            var e = this;
            e.getList($("#search-box").val().trim())
        },
        checkTextKey: function(e) {
            if (e.keyCode === 13) {
                this.getList($("#search-box").val().trim())
            }
        },
        setBulkCreateStatus: function(h) {
            var f = $(h.currentTarget),
                g = $(".select-link-button.active").length;
            if (f.hasClass("active")) {
                g -= 1
            } else {
                g += 1
            }
            if (g === 0) {
                $("#bulk-create-button").attr("disabled", "disabled")
            } else {
                $("#bulk-create-button").removeAttr("disabled")
            }
        },
        selectAllLink: function(f) {
            $(".select-link-button").addClass("active");
            $("#bulk-create-button").removeAttr("disabled")
        },
        linkUnmatched: function(g) {
            var i = this,
                f = $(g.currentTarget),
                h = new b.Vs.linkUsers({
                    eeId: f.data("extid"),
                    objectId: f.data("objectid")
                });
            p3.rV(h, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            h.on("userLinked", function() {
                i.getList();
                i.trigger("countChange")
            });
            h.on("userCreated", function() {
                i.getList();
                i.trigger("countChange")
            });
            g.preventDefault()
        },
        bulkCreateNew: function(g) {
            var j = this,
                i = [],
                h, f = $(".select-link-button.active");
            if (f.length > 0) {
                f.each(function(e, k) {
                    i.push($(k).data("objectid"))
                });
                h = new b.Ms.CreateUsers({
                    CreateUserList: i
                });
                h.save({}, {
                    success: function(e, k) {
                        j.getList();
                        j.trigger("countChange")
                    },
                    error: function(e, k) {
                        p3.displayError("Error creating users.")
                    }
                })
            }
        },
        reviewMatch: function(g) {
            var i = this,
                f = $(g.currentTarget),
                h = new b.Vs.ReviewMatch({
                    userId: f.data("id"),
                    eeId: f.data("extid"),
                    repoId: f.data("repoid")
                });
            p3.rV(h, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            h.on("userUnlinked", function() {
                i.getList();
                i.trigger("countChange")
            });
            g.preventDefault()
        }
    });
    b.Vs.SyncErrorsModal = Bb.View.extend({
        template: "connectee/syncerror.list.template.html",
        events: {
            "click .error-review-btn": "reviewError",
            "click .error-remove-btn": "removeLink"
        },
        render: function(e) {
            this.renderTemplate();
            $(e).append(this.el)
        },
        renderTemplate: function() {
            var g = this,
                e, f = g.options.typeId || 0;
            e = new b.Cs.SyncErrorList();
            e.fetch({
                data: {
                    logId: g.options.logId,
                    logTypeId: f
                },
                success: function() {
                    e.each(function(i) {
                        var h = i.get("action");
                        switch (h) {
                            case "External Repository ID's Don't Match":
                                i.set("reviewable", true);
                                break;
                            case "Section Repository Orphan - Section is linked in onCampus but is not being sent from EE":
                                i.set("canRemove", true);
                                i.set("objectId", 1);
                                break;
                            case "Course Repository Orphan - Course is linked in onCampus but is not being sent from EE":
                                i.set("canRemove", true);
                                i.set("objectId", 2);
                                break;
                            case "Department Repository Orphan - Department is linked in onCampus but is not being sent from EE":
                                i.set("canRemove", true);
                                i.set("objectId", 3);
                                break
                        }
                    });
                    p3.fT(g.template, function(h) {
                        g.$el.html(h({
                            type: g.options.type,
                            logId: g.options.logId,
                            date: g.options.date,
                            time: g.options.time,
                            SyncErrors: e.toJSON()
                        }))
                    })
                },
                error: function(h, i) {
                    p3.displayError("Error getting Connect EE SyncError list")
                }
            })
        },
        reviewError: function(h) {
            var f = $(h.currentTarget),
                j = f.data("id"),
                i = f.data("eeid"),
                k, l = '<div class="modal" data-keyboard="false" data-backdrop="static" tabindex="-1" id="error-review-modal"></div>',
                g;
            $(l).modal();
            g = $("#error-review-modal");
            k = new b.Vs.UserErrorReview({
                id: j,
                eeid: i,
                $btn: f
            });
            p3.rV(k, g, true);
            p3.setModalHeight(g);
            $(".modal-backdrop").css("z-index", "1101")
        },
        removeLink: function(j) {
            var f = $(j.currentTarget),
                k = f.data("id"),
                l = f.data("objectid"),
                m = (l === 3 ? "department" : (l === 2 ? "course" : "section")),
                n = '<div class="modal" data-keyboard="false" data-backdrop="static" tabindex="-1" id="error-remove-modal"></div>',
                g, i, h, o;
            $(n).modal();
            g = $("#error-remove-modal");
            i = function() {
                g.modal("hide");
                g.remove();
                $(".modal-backdrop").css("z-index", "1100");
                o = new b.Ms.RemoveRepositoryLink({
                    internalId: k,
                    objectId: l
                });
                o.save({}, {
                    success: function(e, p) {
                        f.parents("tr").remove()
                    },
                    error: function(e, p) {
                        p3.displayError("Error removing " + m + " link.")
                    }
                })
            };
            h = function() {
                g.modal("hide");
                g.remove();
                $(".modal-backdrop").css("z-index", "1100")
            };
            p3.rV(new a.Vs.Confirm({
                ConfirmationTitle: "Confirm",
                ConfirmationText: "Are you sure you wish to remove the link to this " + m + "?",
                ConfirmCallback: i,
                CancelCallback: h,
                KeepOpen: true
            }), g, true);
            $(".modal-backdrop").css("z-index", "1101")
        }
    });
    b.Vs.UserErrorReview = Bb.View.extend({
        template: "connectee/link.usererror.template.html",
        events: {
            "click .match-selector": "showPotentialMatch",
            "click #link-account-button": "linkClick",
            "click #create-new-link": "createNewClick",
            "click #link-confirm-button": "linkRecords",
            "click #create-confirm-button": "createRecord",
            "click .closeConfirm": "closeModal"
        },
        renderTemplate: function() {
            var p = this,
                g, h, l, m, n, e, q, o = p.WHUser.toJSON(),
                f;
            p3.fT(p.template, function(i) {
                p.$el.html(i({}))
            });
            p.Containers.whUsers = "#wh-user-container";
            p.Containers.eeUsers = "#ee-user-container";
            g = new b.Ms.EEUser();
            g.fetch({
                data: {
                    eeId: p.options.eeid,
                    accessToken: b.Data.AuthToken
                },
                success: function(r, s) {
                    var t = JSON.parse(s.ResponseString),
                        i, u = [],
                        k, j;
                    k = s.Mappings;
                    if (t.people && t.people.length > 0) {
                        i = t.people[0].bio;
                        e = t.people[0].contact_info;
                        if (e) {
                            for (h = 0; h < e.length; h++) {
                                q = "";
                                for (l = 0; l < k.length; l++) {
                                    if (k[l].EEFieldId === e[h].type_id) {
                                        j = k[l];
                                        break
                                    }
                                }
                                if (j) {
                                    switch (j.WHFieldId) {
                                        case -1:
                                            q = p.WHUser.models[0].get("email");
                                            break;
                                        case -2:
                                            q = p.WHUser.models[0].get("cc_email");
                                            break;
                                        default:
                                            for (m = 0; m < o.length; m++) {
                                                if (o[m].phone_type_id === j.WHFieldId) {
                                                    q = o[m].phone_number;
                                                    break
                                                }
                                            }
                                            break
                                    }
                                    u.push({
                                        EEDescription: j.EEDescription,
                                        WHDescription: j.WHDescription,
                                        EEValue: e[h].value,
                                        WHValue: q
                                    })
                                }
                            }
                        }
                    }
                    switch (i.record_type) {
                        case 1:
                            n = "Parent";
                            break;
                        case 6:
                        case 2:
                            n = "Student";
                            break;
                        case 8:
                            n = "Faculty";
                            break
                    }
                    u.push({
                        EEDescription: "Role",
                        WHDescription: "Role",
                        EEValue: n,
                        WHValue: p.WHUser.models[0].get("roles")
                    });
                    if (i.deceased || p.WHUser.models[0].get("deceased")) {
                        if (i.deceased) {
                            f = "Yes"
                        }
                        if (p.WHUser.models[0].get("deceased")) {
                            q = "Yes"
                        } else {
                            q = "No"
                        }
                        u.push({
                            EEDescription: "Deceased",
                            EEValue: f,
                            WHDescription: "Deceased",
                            WHValue: q
                        })
                    }
                    p.renderWHUser(u);
                    p.renderEEUser(i, u)
                },
                error: function(i, j) {
                    p3.displayError("Error loading EE User.")
                }
            })
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(e) {
            var f = this;
            $(e).append(this.el);
            f.WHUser = new b.Cs.EEWHUser();
            f.WHUser.fetch({
                data: {
                    userId: f.options.id
                },
                success: function() {
                    f.renderTemplate()
                },
                error: function(g, h) {
                    p3.displayError("Error loading WH User.")
                }
            })
        },
        renderEEUser: function(e, i) {
            var j = this,
                g, h, f;
            if (e.birth_date === "0001-01-01T00:00:00") {
                e.birth_date = ""
            } else {
                g = e.birth_date.split("T");
                h = g[0].split("-");
                e.birth_date = c.buildDateString(h[0], h[1] - 1, h[2])
            }
            f = new b.Vs.EEUserDetail({
                eeUser: e,
                eeId: j.options.eeId,
                userContacts: i
            });
            p3.rV(f, j.Containers.eeUsers, true)
        },
        renderWHUser: function(f) {
            var g = this,
                e = g.WHUser.models[0],
                h;
            if (e.get("birth_date")) {
                e.set("birth_date", c.getDateString(c.getDate(e.get("birth_date"))))
            }
            h = new b.Vs.WHUserDetail({
                whUser: e,
                userContacts: f
            });
            p3.rV(h, g.Containers.whUsers, true)
        },
        linkClick: function(f) {
            $("#link-confirm").show();
            $("#link-confirm-button").show();
            $("#link-account-button").hide();
            $("#or-header").hide();
            $("#create-new-link").hide();
            p3.setModalHeight("#error-review-modal")
        },
        createNewClick: function(f) {
            $("#create-confirm").show();
            $("#create-confirm-button").show();
            $("#link-account-button").hide();
            $("#or-header").hide();
            $("#create-new-link").hide();
            $("#wh-user-container").hide();
            p3.setModalHeight("#error-review-modal")
        },
        linkRecords: function(g) {
            var i = this,
                h, f = $("#error-review-modal");
            h = new b.Ms.LinkMismatchUser({
                eeId: i.options.eeid,
                userId: i.options.id
            });
            h.save({}, {
                success: function(e, j) {
                    f.modal("hide");
                    f.remove();
                    i.setBackDropPosition();
                    i.options.$btn.parent().html("<h5>Linked ID updated</h5>")
                },
                error: function(e, j) {
                    p3.displayError("Error linking user.")
                }
            })
        },
        createRecord: function(g) {
            var i = this,
                h, f = $("#error-review-modal");
            h = new b.Ms.CreateMismatchUser({
                eeId: i.options.eeid
            });
            h.save({}, {
                success: function(e, j) {
                    f.modal("hide");
                    f.remove();
                    i.setBackDropPosition();
                    i.options.$btn.parent().html("<h5>New user queued</h5>")
                },
                error: function(e, j) {
                    p3.displayError("Error creating user.")
                }
            })
        },
        setBackDropPosition: function() {
            $(".modal-backdrop").css("z-index", "1100")
        },
        closeModal: function(f) {
            var h = this,
                g = $("#error-review-modal");
            if (f !== undefined) {
                f.preventDefault()
            }
            g.modal("hide");
            g.remove();
            h.setBackDropPosition()
        }
    });
    b.Vs.GradeLogModal = Bb.View.extend({
        template: "connectee/grade.log.template.html",
        render: function(e) {
            this.renderTemplate();
            $(e).append(this.el)
        },
        renderTemplate: function() {
            var f = this,
                e;
            e = new b.Cs.SectionGradeLog();
            e.fetch({
                data: {
                    logId: f.options.logId
                },
                success: function() {
                    p3.fT(f.template, function(j) {
                        var g = "",
                            h = [],
                            i = [];
                        e.each(function(k) {
                            if (g !== k.get("section_name")) {
                                g = k.get("section_name");
                                i = [];
                                h.push({
                                    section: k.get("section_name") + " - " + k.get("marking_period_description"),
                                    students: i
                                })
                            }
                            i.push(k.toJSON())
                        });
                        f.$el.html(j({
                            grades: h
                        }))
                    })
                },
                error: function(g, h) {
                    p3.displayError("Error getting grade log")
                }
            })
        }
    });
    b.Vs.CourseList = Bb.View.extend({
        template: "connectee/course-list.template.html",
        events: {
            "click .SyncErrorLink": "showSyncErrorList"
        },
        renderTemplate: function(e) {
            var f = this;
            p3.fT(f.template, function(g) {
                f.$el.html(g({
                    counts: e
                }))
            })
        },
        render: function(e) {
            var f = this;
            $(e).append(this.el);
            f.getList()
        },
        showSyncErrorList: function(g) {
            var l = this,
                i, h, k, f = $(g.currentTarget),
                j;
            g.preventDefault();
            k = f.attr("data-type");
            h = f.attr("data-logid");
            i = f.attr("data-rowid");
            j = new b.Vs.SyncErrorsModal({
                type: k,
                logId: h,
                date: l.counts[i].Date,
                time: l.counts[i].Time
            });
            p3.showModal(p3.Layout.Containers.Modal, {
                backOnHide: false
            });
            p3.rV(j, p3.Layout.Containers.Modal, true)
        },
        getList: function() {
            var j = this,
                f, h, e = 0,
                g = -1,
                i = 600000000;
            j.counts = [];
            f = new b.Cs.EECourseLog();
            f.fetch({
                success: function() {
                    f.each(function(k) {
                        if (e === 0 || e - k.get("log_dateTicks") > i) {
                            g += 1;
                            h = c.getDate(k.get("log_date"));
                            j.counts.push({
                                Date: c.getDateString(h),
                                Time: c.getTimeString(h),
                                Departments: 0,
                                Courses: 0,
                                Sections: 0,
                                Rosters: 0,
                                DepartmentsLogId: 0,
                                CoursesLogId: 0,
                                SectionsLogId: 0,
                                RostersLogId: 0,
                                RowIndex: g
                            });
                            e = k.get("log_dateTicks")
                        }
                        switch (k.get("log_type")) {
                            case 2:
                                j.counts[g].Courses = k.get("row_count");
                                j.counts[g].CoursesLogId = k.get("connect_ee_log_id");
                                break;
                            case 3:
                                j.counts[g].Sections = k.get("row_count");
                                j.counts[g].SectionsLogId = k.get("connect_ee_log_id");
                                break;
                            case 4:
                                j.counts[g].Departments = k.get("row_count");
                                j.counts[g].DepartmentsLogId = k.get("connect_ee_log_id");
                                break;
                            case 5:
                                j.counts[g].Rosters = k.get("row_count");
                                j.counts[g].RostersLogId = k.get("connect_ee_log_id");
                                break
                        }
                    });
                    j.renderTemplate(j.counts)
                },
                error: function(k, l) {
                    p3.displayError("Error getting Connect EE academic log")
                }
            })
        }
    });
    b.Vs.LogList = Bb.View.extend({
        template: "connectee/log-list.template.html",
        events: {
            "click .grade-error-link": "showGradeErrorLog",
            "click .grade-log-link": "showGradeLog",
            "click .SyncErrorLink": "showErrorLog"
        },
        renderTemplate: function(e) {
            var f = this;
            p3.fT(f.template, function(g) {
                f.$el.html(g({
                    logs: e.toJSON(),
                    grades: f.options.grades
                }))
            })
        },
        render: function(e) {
            var f = this;
            $(e).append(this.el);
            if (f.options.users) {
                f.template = "connectee/user-log-template.html"
            }
            f.getList()
        },
        getList: function() {
            var g = this,
                e, f;
            if (g.options.grades) {
                e = new b.Cs.EEGradeLog()
            } else {
                if (g.options.users) {
                    e = new b.Cs.EEUserLog()
                } else {
                    e = new b.Cs.EEAttendanceLog()
                }
            }
            e.fetch({
                success: function() {
                    e.each(function(h) {
                        f = c.getDate(h.get("log_date"));
                        h.set("Date", c.getDateString(f));
                        h.set("Time", c.getTimeString(f))
                    });
                    g.counts = e.toJSON();
                    g.renderTemplate(e)
                },
                error: function(h, i) {
                    p3.displayError("Error getting Connect EE log")
                }
            })
        },
        showGradeErrorLog: function(g) {
            var h, f = $(g.currentTarget),
                i;
            g.preventDefault();
            h = f.data("id");
            i = new b.Vs.SyncErrorsModal({
                type: "Grade",
                logId: h,
                typeId: 7
            });
            p3.showModal(p3.Layout.Containers.Modal, {
                backOnHide: false
            });
            p3.rV(i, p3.Layout.Containers.Modal, true)
        },
        showGradeLog: function(g) {
            var h, f = $(g.currentTarget),
                i;
            g.preventDefault();
            h = f.data("id");
            i = new b.Vs.GradeLogModal({
                logId: h
            });
            p3.showModal(p3.Layout.Containers.Modal, {
                backOnHide: false
            });
            p3.rV(i, p3.Layout.Containers.Modal, true)
        },
        showErrorLog: function(g) {
            var m = this,
                i, h, l, k, f = $(g.currentTarget),
                j;
            g.preventDefault();
            l = parseInt(f.attr("data-type"), 10);
            h = f.attr("data-logid");
            i = f.attr("data-rowid");
            switch (l) {
                case 1:
                    k = "Users";
                    break;
                case 8:
                    k = "Addresses";
                    break;
                case 9:
                    k = "Contacts";
                    break;
                case 10:
                    k = "Relationships";
                    break
            }
            j = new b.Vs.SyncErrorsModal({
                type: k,
                typeId: l,
                logId: h,
                date: m.counts[i].Date,
                time: m.counts[i].Time
            });
            p3.showModal(p3.Layout.Containers.Modal, {
                backOnHide: false
            });
            p3.rV(j, p3.Layout.Containers.Modal, true)
        }
    });
    b.Vs.InitialSettings = Bb.View.extend({
        template: "connectee/initial.setup.template.html",
        events: {
            "click #btnSave": "saveSettings",
            "click .btn-role": "removeRoleValidation",
            "change .input-medium": "removeTextValidation"
        },
        renderTemplate: function() {
            var e = this;
            p3.fT(e.template, function(f) {
                e.$el.html(f({
                    roles: e.Roles.toJSON(),
                    settings: e.options.settings.toJSON()
                }))
            })
        },
        render: function(e) {
            var f = this;
            $(e).append(this.el);
            f.Roles = new b.Cs.VendorRoles();
            f.Roles.fetch({
                data: {
                    vendorId: 95,
                    integrationTypeId: 5
                },
                success: function() {
                    f.renderTemplate()
                },
                error: function(g, h) {
                    p3.displayError("Error loading Vendor Roles.")
                }
            })
        },
        saveSettings: function(j) {
            var o = this,
                n = true,
                k = [],
                m, l, f = $("#btnSave"),
                g = $("#database-key-box"),
                h = $("#database-number-box"),
                i = $("#url-box");
            $(".control-group.error").removeClass("error");
            f.attr("disabled", "disabled");
            $(".alert-error").remove();
            if (i.val().length === 0) {
                $("#url-group").addClass("error");
                n = false
            }
            if (g.val().length === 0) {
                $("#database-key-group").addClass("error");
                n = false
            }
            if (h.val().length === 0) {
                $("#database-number-group").addClass("error");
                n = false
            }
            if ($(".btn-role.active").length === 0) {
                $("#roles-group").addClass("error");
                n = false
            }
            if (n) {
                $(".btn-role").each(function(p, q) {
                    var e = $(q);
                    k.push({
                        role_id: e.data("id"),
                        enabled_ind: e.hasClass("active")
                    })
                });
                m = new b.Ms.GetAccessToken({
                    VendorId: 95,
                    IntegrationType: 5,
                    Roles: k,
                    ApiUrl: i.val(),
                    DatabaseId: h.val(),
                    DatabaseKey: g.val(),
                    ApiVendorId: o.options.settings.get("ApiVendorId"),
                    ApiVendorKey: o.options.settings.get("ApiVendorKey")
                });
                m.save({}, {
                    success: function(e, p) {
                        var q = JSON.parse(p.ResponseString);
                        if (q && q.token && q.token.length > 0) {
                            b.Data.AuthToken = q.token;
                            l = new b.Ms.SettingsSave({
                                VendorId: 95,
                                IntegrationType: 5,
                                Roles: k,
                                ApiUrl: i.val(),
                                DatabaseId: h.val(),
                                DatabaseKey: g.val()
                            });
                            l.save({}, {
                                success: function(r, s) {
                                    r.set("ApiVendorId", o.options.settings.get("ApiVendorId"));
                                    r.set("ApiVendorKey", o.options.settings.get("ApiVendorKey"));
                                    o.trigger("settingsInitialized", r, o.options.firstSetup)
                                },
                                error: function(r, s) {
                                    f.removeAttr("disabled");
                                    p3.displayError("Error saving settings.")
                                }
                            })
                        } else {
                            p3.Us.InfoMessage.ErrorBox("Authorization failed please check that the parameters are correct.", ".modal-body", false);
                            p3.setModalHeight(p3.Layout.Containers.Modal);
                            f.removeAttr("disabled")
                        }
                    },
                    error: function(e, p) {
                        p3.Us.InfoMessage.ErrorBox("Authorization failed please check that the parameters are correct.", ".modal-body", false);
                        p3.setModalHeight(p3.Layout.Containers.Modal);
                        f.removeAttr("disabled")
                    }
                })
            } else {
                f.removeAttr("disabled")
            }
        },
        removeRoleValidation: function(f) {
            $("#roles-group").removeClass("error")
        },
        removeTextValidation: function(f) {
            $(f.currentTarget).parent().removeClass("error")
        }
    });
    b.Vs.Settings = Bb.View.extend({
        template: "connectee/setup.template.html",
        events: {
            "click #btnSave": "saveClick",
            "click .btn-role": "removeRoleValidation",
            "change .input-medium": "removeTextValidation",
            "click #authorize-link": "activateAuthorize",
            "click #user-link": "activateUser",
            "click #course-link": "activateCourses",
            "click #attendance-link": "activateAttendance",
            "click #grading-link": "activateGrading",
            "click .add-address-type": "addAddressDropdown",
            "click .delete-address-type": "deleteAddressDropdown",
            "click .add-phone-type": "addPhoneDropdown",
            "click .delete-phone-type": "deletePhoneDropdown",
            "click .add-email-type": "addEmailDropdown",
            "click .delete-email-type": "deleteEmailDropdown",
            "click .add-grade-type": "addGradeDropdown",
            "click .delete-grade-type": "deleteGradeDropdown",
            "click .add-level": "addLevelDropdown",
            "click .delete-level": "deleteLevelDropdown",
            "click .add-term": "addTermDropdown",
            "click .delete-term": "deleteTermDropdown",
            "click #default-user-button": "defaultUserClick",
            "click #user-type-button": "userTypeClick",
            "change #user-type-dropdown": "userTypeChange",
            "click .btn-select-year": "academicYearChange",
            "click .add-relationship-type": "addRelationshipDropdown",
            "click .delete-relationship-type": "deleteRelationshipDropdown"
        },
        initialize: function() {
            this.userMappings = [];
            this.userMappings.push({
                id: 0,
                mappings: []
            });
            this.userMappings.push({
                id: 1,
                mappings: []
            });
            this.userMappings.push({
                id: 2,
                mappings: []
            });
            this.byUser = false;
            this.userType = 0
        },
        renderTemplate: function() {
            var s = this,
                q = s.options.settings.get("Mappings"),
                r, l = 0,
                h = 0,
                m, g = s.AttendanceTypes.toJSON(),
                p = s.Levels.toJSON(),
                n, o, f = [],
                e = [];
            if (q && q.length > 0) {
                for (m = 0; m < q.length; m++) {
                    switch (q[m].MappingTypeId) {
                        case 1:
                            if (q[m].UserTypeId === 0) {
                                r = s.AddressTypes.get(q[m].WHFieldId);
                                if (r.get("EEId") > 0) {
                                    r.get("AdditionalIds").push({
                                        EEId: q[m].EEFieldId
                                    })
                                } else {
                                    r.set("EEId", q[m].EEFieldId);
                                    r.set("AdditionalIds", [])
                                }
                            } else {
                                s.setUserMappingValue(q[m].UserTypeId, q[m]);
                                s.byUser = true
                            }
                            break;
                        case 2:
                            if (q[m].UserTypeId === 0) {
                                switch (q[m].WHFieldId) {
                                    case -1:
                                        if (l > 0) {
                                            f.push({
                                                EEId: q[m].EEFieldId
                                            })
                                        } else {
                                            l = q[m].EEFieldId
                                        }
                                        break;
                                    case -2:
                                        if (h > 0) {
                                            e.push({
                                                EEId: q[m].EEFieldId
                                            })
                                        } else {
                                            h = q[m].EEFieldId
                                        }
                                        break;
                                    default:
                                        r = s.PhoneTypes.get(q[m].WHFieldId);
                                        if (r.get("EEId") > 0) {
                                            r.get("AdditionalIds").push({
                                                EEId: q[m].EEFieldId
                                            })
                                        } else {
                                            r.set("EEId", q[m].EEFieldId);
                                            r.set("AdditionalIds", [])
                                        }
                                        break
                                }
                            } else {
                                s.setUserMappingValue(q[m].UserTypeId, q[m]);
                                s.byUser = true
                            }
                            break;
                        case 3:
                            if (q[m].UserTypeId === 0) {
                                r = s.GradeLevels.get(q[m].WHFieldId);
                                if (r.get("EEId") > 0) {
                                    r.get("AdditionalIds").push({
                                        EEId: q[m].EEFieldId
                                    })
                                } else {
                                    r.set("EEId", q[m].EEFieldId);
                                    r.set("AdditionalIds", [])
                                }
                            } else {
                                s.setUserMappingValue(q[m].UserTypeId, q[m]);
                                s.byUser = true
                            }
                            break;
                        case 4:
                            r = s.Terms.get(q[m].WHFieldId);
                            if (r) {
                                if (r.get("EEId") > 0) {
                                    r.get("AdditionalIds").push({
                                        EEId: q[m].EEFieldId
                                    })
                                } else {
                                    r.set("EEId", q[m].EEFieldId);
                                    r.set("AdditionalIds", [])
                                }
                            }
                            break;
                        case 5:
                            for (n = 0; n < g.length; n++) {
                                for (o = 0; o < g[n].ExcuseList.length; o++) {
                                    if (g[n].ExcuseList[o].ExcuseTypeId === q[m].WHFieldId) {
                                        g[n].ExcuseList[o].EEId = q[m].EEFieldId;
                                        break
                                    }
                                }
                            }
                            break;
                        case 6:
                            for (n = 0; n < p.length; n++) {
                                if (p[n].LevelNum === q[m].WHFieldId) {
                                    if (p[n].EEId && p[n].EEId > 0) {
                                        p[n].AdditionalIds.push({
                                            EEId: q[m].EEFieldId
                                        })
                                    } else {
                                        p[n].EEId = q[m].EEFieldId;
                                        p[n].AdditionalIds = []
                                    }
                                    break
                                }
                            }
                            break;
                        case 7:
                            r = s.MarkingPeriods.get(q[m].WHFieldId);
                            if (r) {
                                r.set("EEId", q[m].EEFieldId);
                                r.set("EEDescription", q[m].EEDescription)
                            }
                            break;
                        case 8:
                            r = s.getRelationshipType(q[m].WHFieldId);
                            if (r) {
                                if (r[0].EEId && r[0].EEId > 0) {
                                    r[0].AdditionalIds.push({
                                        EEId: q[m].EEFieldId
                                    })
                                } else {
                                    r[0].EEId = q[m].EEFieldId;
                                    r[0].AdditionalIds = []
                                }
                            }
                            break
                    }
                }
            }
            p3.fT(s.template, function(i) {
                s.$el.html(i({
                    roles: s.Roles.toJSON(),
                    settings: s.options.settings.toJSON(),
                    initial: s.options.initialSetup,
                    EEPhoneTypes: b.Data.EEPhoneTypes,
                    EEAddressTypes: b.Data.EEAddressTypes,
                    EEGradeLevels: b.Data.EEGradeLevels,
                    AddressTypes: s.AddressTypes.toJSON(),
                    PhoneTypes: s.PhoneTypes.toJSON(),
                    GradeLevels: s.GradeLevels.toJSON(),
                    emailId: l,
                    ccEmailId: h,
                    Terms: s.Terms.toJSON(),
                    EETerms: b.Data.EETerms,
                    AttendanceTypes: g,
                    EEAttendanceTypes: b.Data.EEAttendanceTypes,
                    showAttendance: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ATTENDANCELITE),
                    EELevels: b.Data.EELevels,
                    Levels: p,
                    MarkingPeriods: s.MarkingPeriods.toJSON(),
                    EEMarkingColumns: b.Data.EEMarkingColumns,
                    additionalEmail: f,
                    additionalCC: e,
                    byUser: s.byUser,
                    EEYears: b.Data.EEYears,
                    Relationships: s.RelationshipTypes,
                    EERelationships: b.Data.EERelationships
                }))
            })
        },
        render: function(e) {
            var r = this,
                g, f, p, h, l, m, q = r.options.settings.get("AcademicYears"),
                s = false,
                n = [],
                o;
            $(e).append(this.el);
            if (!b.Data.EEPhoneTypes) {
                g = new b.Ms.EETypes();
                g.fetch({
                    async: false,
                    data: {
                        typeId: 8,
                        accessToken: b.Data.AuthToken
                    },
                    success: function(i, j) {
                        var k = JSON.parse(j.ResponseString);
                        b.Data.EEPhoneTypes = k.table_entries
                    },
                    error: function(i, j) {
                        p3.displayError("Error loading EE Phone Types.")
                    }
                })
            }
            if (!b.Data.EEAddressTypes) {
                g = new b.Ms.EETypes();
                g.fetch({
                    async: false,
                    data: {
                        typeId: 86,
                        accessToken: b.Data.AuthToken
                    },
                    success: function(i, j) {
                        var k = JSON.parse(j.ResponseString);
                        b.Data.EEAddressTypes = k.table_entries
                    },
                    error: function(i, j) {
                        p3.displayError("Error loading EE Address Types.")
                    }
                })
            }
            if (!b.Data.EEGradeLevels) {
                g = new b.Ms.EETypes();
                g.fetch({
                    async: false,
                    data: {
                        typeId: 74,
                        accessToken: b.Data.AuthToken
                    },
                    success: function(i, j) {
                        var k = JSON.parse(j.ResponseString);
                        b.Data.EEGradeLevels = k.table_entries
                    },
                    error: function(i, j) {
                        p3.displayError("Error loading EE Grade Levels.")
                    }
                })
            }
            if (!b.Data.EETerms) {
                f = new b.Ms.EETerms();
                p = p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel;
                f.fetch({
                    async: false,
                    data: {
                        schoolYear: p,
                        accessToken: b.Data.AuthToken
                    },
                    success: function(i, j) {
                        var k = JSON.parse(j.ResponseString);
                        b.Data.EETerms = [];
                        b.Data.EELevels = [];
                        b.Data.EESessions = [];
                        b.Data.EEYears = [];
                        b.Data.YearJSON = k;
                        for (h = 0; h < k.academic_years.length; h++) {
                            if (n.indexOf(k.academic_years[h].school_id) === -1) {
                                b.Data.EELevels.push({
                                    eeSchoolId: k.academic_years[h].school_id,
                                    name: k.academic_years[h].school_name
                                });
                                n.push(k.academic_years[h].school_id)
                            }
                            s = q.indexOf(k.academic_years[h].ea7_academic_year_id) > -1;
                            b.Data.EEYears.push({
                                eeAcademicYearId: k.academic_years[h].ea7_academic_year_id,
                                eeAcademicYear: k.academic_years[h].description + " - " + k.academic_years[h].school_name,
                                Selected: s
                            });
                            if (s && k.academic_years[h].sessions) {
                                for (l = 0; l < k.academic_years[h].sessions.length; l++) {
                                    b.Data.EESessions.push({
                                        eeSessionId: k.academic_years[h].sessions[l].ea7_session_id,
                                        name: k.academic_years[h].school_name + " - " + k.academic_years[h].sessions[l].name
                                    });
                                    for (m = 0; m < k.academic_years[h].sessions[l].terms.length; m++) {
                                        b.Data.EETerms.push({
                                            eeTermId: k.academic_years[h].sessions[l].terms[m].ea7_term_id,
                                            name: k.academic_years[h].school_name + " - " + k.academic_years[h].sessions[l].name + " - " + k.academic_years[h].sessions[l].terms[m].name
                                        })
                                    }
                                }
                            }
                        }
                    },
                    error: function(i, j) {
                        p3.displayError("Error loading EE Terms.")
                    }
                })
            }
            if (!b.Data.EEAttendanceTypes) {
                g = new b.Ms.EEAttendanceTypes();
                g.fetch({
                    async: false,
                    data: {
                        accessToken: b.Data.AuthToken
                    },
                    success: function(i, j) {
                        var k = JSON.parse(j.ResponseString);
                        b.Data.EEAttendanceTypes = k.attendance_codes
                    },
                    error: function(i, j) {
                        p3.displayError("Error loading EE Attendance Types.")
                    }
                })
            }
            if (!b.Data.EERelationships) {
                g = new b.Ms.EETypes();
                g.fetch({
                    async: false,
                    data: {
                        typeId: 87,
                        accessToken: b.Data.AuthToken
                    },
                    success: function(i, j) {
                        var k = JSON.parse(j.ResponseString);
                        b.Data.EERelationships = k.table_entries
                    },
                    error: function(i, j) {
                        p3.displayError("Error loading EE Relationship Types.")
                    }
                })
            }
            if (!b.Data.EEMarkingColumns) {
                b.Data.EEMarkingColumns = [];
                for (h = 0; h < b.Data.EESessions.length; h++) {
                    r.getMarkingColumns(b.Data.EESessions[h].eeSessionId, b.Data.EESessions[h].name)
                }
            }
            r.PhoneTypes = new b.Cs.PhoneTypes();
            r.PhoneTypes.fetch({
                async: false,
                error: function(i, j) {
                    p3.displayError("Error loading Phone Types.")
                }
            });
            r.AddressTypes = new b.Cs.AddressTypes();
            r.AddressTypes.fetch({
                async: false,
                error: function(i, j) {
                    p3.displayError("Error loading Address Types.")
                }
            });
            o = new b.Cs.RelationshipType();
            o.fetch({
                async: false,
                success: function() {
                    r.RelationshipTypes = [];
                    _.each(o.toJSON(), function(i) {
                        if (i.RelationshipTypeId === 1) {
                            r.RelationshipTypes.push(i)
                        }
                    })
                },
                error: function(i, j) {
                    p3.displayError("Error loading Relationship Types.")
                }
            });
            r.GradeLevels = new b.Cs.GradeLevels();
            r.GradeLevels.fetch({
                async: false,
                error: function(i, j) {
                    p3.displayError("Error loading Grade Levels.")
                }
            });
            r.Terms = new b.Cs.WHTerms();
            r.Terms.fetch({
                data: {
                    schoolYear: p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel
                },
                error: function(i, j) {
                    p3.displayError("Error loading Terms.")
                }
            });
            r.AttendanceTypes = new b.Cs.AttendanceTypes();
            r.AttendanceTypes.fetch({
                async: false,
                error: function(i, j) {
                    p3.displayError("Error loading Attendance Types.")
                }
            });
            r.Levels = new b.Cs.SchoolLevels();
            r.Levels.fetch({
                async: false,
                error: function(i, j) {
                    p3.displayError("Error loading School Levels.")
                }
            });
            r.MarkingPeriods = new b.Cs.WHMarkingPeriods();
            r.MarkingPeriods.fetch({
                async: false,
                error: function(i, j) {
                    p3.displayError("Error loading Marking Periods.")
                }
            });
            r.Roles = new b.Cs.VendorRoles();
            r.Roles.fetch({
                data: {
                    vendorId: 95,
                    integrationTypeId: 5
                },
                success: function() {
                    r.renderTemplate()
                },
                error: function(i, j) {
                    p3.displayError("Error loading Vendor Roles.")
                }
            })
        },
        getMarkingColumns: function(h, j) {
            var e = new b.Ms.EEMarkingColumns(),
                g, f, k = this;
            e.fetch({
                async: false,
                data: {
                    sessionId: h,
                    accessToken: b.Data.AuthToken
                },
                success: function(i, l) {
                    var m = JSON.parse(l.ResponseString);
                    for (g = 0; g < m.marking_columns.length; g++) {
                        f = k.locateMarkingColumn(m.marking_columns[g].marking_column_table_entry_id);
                        if (!f) {
                            b.Data.EEMarkingColumns.push(m.marking_columns[g])
                        }
                    }
                },
                error: function(i, l) {
                    p3.displayError("Error loading EE Marking Columns.")
                }
            })
        },
        locateMarkingColumn: function(f) {
            var e;
            e = _.find(b.Data.EEMarkingColumns, function(g) {
                return g.marking_column_table_entry_id === f
            });
            return e
        },
        validate: function(f) {
            var g = true;
            $(".control-group.error").removeClass("error");
            $("#btnSave").attr("disabled", "disabled");
            $(".alert-error").remove();
            if ($("#url-box").val().length === 0) {
                $("#url-group").addClass("error");
                g = false
            }
            if ($("#database-key-box").val().length === 0) {
                $("#database-key-group").addClass("error");
                g = false
            }
            if ($("#database-number-box").val().length === 0) {
                $("#database-number-group").addClass("error");
                g = false
            }
            if ($(".btn-role.active").length === 0) {
                $("#roles-group").addClass("error");
                g = false
            }
            return g
        },
        authSettingsChanged: function() {
            var f = this,
                e = f.options.settings.toJSON();
            if (e.ApiUrl !== $("#url-box").val()) {
                return true
            }
            if (e.DataBaseId !== parseInt($("#database-number-box").val(), 10)) {
                return true
            }
            if (e.DatabaseKey !== $("#database-key-box").val()) {
                return true
            }
            return false
        },
        saveSettings: function() {
            var j = this,
                h = [],
                f = [],
                i, e = [],
                g = [];
            if (j.yearChange) {
                j.checkYears()
            }
            $(".btn-role").each(function(l, m) {
                var k = $(m);
                h.push({
                    role_id: k.data("id"),
                    enabled_ind: k.hasClass("active")
                })
            });
            j.collectUserMappings();
            if (j.byUser) {
                g = _.pluck(j.getSelectedRelationships(), "eeId");
                _.each(j.userMappings, function(k) {
                    if (k.id > 0 && (k.id === 1 || k.id === 2 || g.indexOf(k.id.toString()) > -1)) {
                        if (f.length > 0) {
                            f = f.concat(k.mappings)
                        } else {
                            f = k.mappings
                        }
                    }
                })
            } else {
                f = j.userMappings[0].mappings
            }
            $(".term-dd").each(function(l, m) {
                var k = $(m);
                if (k.val() > 0) {
                    f.push({
                        MappingTypeId: 4,
                        WHFieldId: k.data("id"),
                        EEFieldId: k.val(),
                        EEDescription: k.find("option:selected").text(),
                        WHDescription: k.parents("td").siblings().html()
                    })
                }
            });
            $(".attendance-dd").each(function(l, m) {
                var k = $(m);
                if (k.val() > 0) {
                    f.push({
                        MappingTypeId: 5,
                        WHFieldId: k.data("id"),
                        EEFieldId: k.val(),
                        EEDescription: k.find("option:selected").text(),
                        WHDescription: k.parent().siblings().html()
                    })
                }
            });
            $(".level-dd").each(function(l, m) {
                var k = $(m);
                if (k.val() > 0) {
                    f.push({
                        MappingTypeId: 6,
                        WHFieldId: k.data("id"),
                        EEFieldId: k.val(),
                        EEDescription: k.find("option:selected").text(),
                        WHDescription: k.parents("td").siblings().html()
                    })
                }
            });
            $(".marking-period-dd").each(function(l, m) {
                var k = $(m);
                if (k.val() > 0) {
                    f.push({
                        MappingTypeId: 7,
                        WHFieldId: k.data("id"),
                        EEFieldId: k.val(),
                        EEDescription: k.find("option:selected").text(),
                        WHDescription: k.parent().siblings().html()
                    })
                }
            });
            $(".btn-select-year.active").each(function(k, l) {
                e.push($(l).data("year"))
            });
            $(".relationship-type-dd").each(function(l, m) {
                var k = $(m);
                if (k.val() > 0) {
                    f.push({
                        MappingTypeId: 8,
                        WHFieldId: k.data("id"),
                        EEFieldId: k.val(),
                        EEDescription: k.find("option:selected").text(),
                        WHDescription: k.parents("td").siblings().html()
                    })
                }
            });
            i = new b.Ms.SettingsSave({
                VendorId: 95,
                IntegrationType: 5,
                Roles: h,
                ApiUrl: $("#url-box").val(),
                DatabaseId: $("#database-number-box").val(),
                DatabaseKey: $("#database-key-box").val(),
                SyncUsers: $("#user-sync-active").hasClass("active"),
                UserSyncInd: $("#user-manual-button").hasClass("active"),
                Mappings: f,
                SyncCourses: $("#course-sync-active").hasClass("active"),
                SyncAttendance: $("#attendance-sync-active").hasClass("active"),
                SyncGrading: $("#grading-sync-active").hasClass("active"),
                ForceRefresh: $("#force-refresh-button").hasClass("active"),
                AcademicYears: e,
                UpdateDepartments: $("#dept-update-active").hasClass("active"),
                UpdateCourses: $("#course-update-active").hasClass("active"),
                UseOCAttendace: $("#onCampus-active").hasClass("active"),
                UpdateUserName: $("#username-active").hasClass("active"),
                UpdateHostId: $("#hostid-active").hasClass("active")
            });
            i.save({}, {
                success: function(k, l) {
                    j.trigger("settingsSaved", k)
                },
                error: function(k, l) {
                    $("#btnSave").removeAttr("disabled");
                    p3.displayError("Error saving settings.")
                }
            })
        },
        saveClick: function(g) {
            var j = this,
                i = j.validate(),
                h, f = $("#btnSave");
            if (i) {
                if (j.authSettingsChanged()) {
                    h = new b.Ms.GetAccessToken({
                        VendorId: 95,
                        IntegrationType: 5,
                        ApiUrl: $("#url-box").val(),
                        DatabaseId: $("#database-number-box").val(),
                        DatabaseKey: $("#database-key-box").val(),
                        ApiVendorId: j.options.settings.get("ApiVendorId"),
                        ApiVendorKey: j.options.settings.get("ApiVendorKey")
                    });
                    h.save({}, {
                        success: function(e, k) {
                            var l = JSON.parse(k.ResponseString);
                            if (l && l.token && l.token.length > 0) {
                                b.Data.AuthToken = l.token;
                                j.saveSettings()
                            } else {
                                p3.Us.InfoMessage.ErrorBox("Authorization failed please check that the parameters are correct.", ".modal-body", false);
                                p3.setModalHeight(p3.Layout.Containers.Modal);
                                f.removeAttr("disabled")
                            }
                        },
                        error: function(e, k) {
                            p3.Us.InfoMessage.ErrorBox("Authorization failed please check that the parameters are correct.", ".modal-body", false);
                            p3.setModalHeight(p3.Layout.Containers.Modal);
                            f.removeAttr("disabled")
                        }
                    })
                } else {
                    j.saveSettings()
                }
            } else {
                f.removeAttr("disabled")
            }
        },
        removeRoleValidation: function(f) {
            $("#roles-group").removeClass("error")
        },
        removeTextValidation: function(f) {
            $(f.currentTarget).parent().removeClass("error")
        },
        activateAuthorize: function(f) {
            this.checkYears();
            this.activateTab(f, "#authorize-tab")
        },
        activateUser: function(f) {
            this.checkYears();
            this.syncUserTypes();
            this.activateTab(f, "#user-tab")
        },
        activateCourses: function(f) {
            this.checkYears();
            this.activateTab(f, "#course-tab")
        },
        activateAttendance: function(f) {
            this.checkYears();
            this.activateTab(f, "#attendance-tab")
        },
        activateGrading: function(f) {
            this.checkYears();
            this.activateTab(f, "#grading-tab")
        },
        activateTab: function(g, h) {
            var f = $(g.currentTarget);
            $(".nav-tabs li").removeClass("active");
            $(".nav-tabs li a").addClass("nav-tab-text");
            f.parent().addClass("active");
            f.removeClass("nav-tab-text");
            $(".tab-pane").removeClass("active");
            $(h).addClass("active");
            p3.setModalHeight(p3.Layout.Containers.Modal);
            g.preventDefault()
        },
        addAddressDropdown: function(h, g, o) {
            var j, l, f, n = true,
                k = n ? "fa fa-trash" : "p3icon-delete",
                m = n ? "width:200px;display:inline;" : "";
            if (h === null) {
                f = $(g)
            } else {
                f = $(h.currentTarget)
            }
            l = '<div class="additional-address-type"><select class="address-type-dd input-medium form-control" data-id="' + f.data("id") + '" style="margin-top:2px;margin-right:3px;' + m + '">';
            l += '<option value="0">-- Please Select --</option>';
            for (j = 0; j < b.Data.EEAddressTypes.length; j++) {
                l += '<option value="' + b.Data.EEAddressTypes[j].id + '"';
                if (o && o === b.Data.EEAddressTypes[j].id) {
                    l += ' selected="selected"'
                }
                l += ">" + b.Data.EEAddressTypes[j].name + "</option>"
            }
            l += '</select><div class="btn btn-default btn-mini delete-address-type btn-link" data-toggle="button" style="margin-left:5px;"><i class="' + k + '" style="margin-left:2px;margin-right:1px;"></i></div></div>';
            f.parent().append(l)
        },
        deleteAddressDropdown: function(f) {
            $(f.currentTarget).parents(".additional-address-type").remove()
        },
        addPhoneDropdown: function(j, h, p) {
            var k, m, f, o = true,
                l = o ? "fa fa-trash" : "p3icon-delete",
                n = o ? "width:200px;display:inline;" : "",
                g = o ? "btn-link" : "btn-mini";
            if (j === null) {
                f = $(h)
            } else {
                f = $(j.currentTarget)
            }
            m = '<div class="additional-phone-type"><select class="phone-type-dd input-medium form-control" data-id="' + f.data("id") + '" style="margin-top:2px;margin-right:3px;' + n + '">';
            m += '<option value="0">-- Please Select --</option>';
            for (k = 0; k < b.Data.EEPhoneTypes.length; k++) {
                m += '<option value="' + b.Data.EEPhoneTypes[k].id + '"';
                if (p && p === b.Data.EEPhoneTypes[k].id) {
                    m += ' selected="selected"'
                }
                m += ">" + b.Data.EEPhoneTypes[k].name + "</option>"
            }
            m += '</select><div class="btn btn-default ' + g + ' delete-phone-type" data-toggle="button" style="margin-left:5px;"><i class="' + l + '" style="margin-left:2px;margin-right:1px;"></i></div></div>';
            f.parent().append(m)
        },
        deletePhoneDropdown: function(f) {
            $(f.currentTarget).parents(".additional-phone-type").remove()
        },
        addEmailDropdown: function(j, h, p) {
            var k, m, f, o = true,
                l = o ? "fa fa-trash" : "p3icon-delete",
                n = o ? "width:200px;display:inline;" : "",
                g = o ? "btn-link" : "btn-mini";
            if (j === null) {
                f = $(h)
            } else {
                f = $(j.currentTarget)
            }
            m = '<div class="additional-email-type"><select class="email-type-dd input-medium form-control" data-id="' + f.data("id") + '" style="margin-top:2px;margin-right:3px;' + n + '">';
            m += '<option value="0">-- Please Select --</option>';
            for (k = 0; k < b.Data.EEPhoneTypes.length; k++) {
                m += '<option value="' + b.Data.EEPhoneTypes[k].id + '"';
                if (p && p === b.Data.EEPhoneTypes[k].id) {
                    m += ' selected="selected"'
                }
                m += ">" + b.Data.EEPhoneTypes[k].name + "</option>"
            }
            m += '</select><div class="btn btn-default btn-default ' + g + ' delete-email-type" data-toggle="button" style="margin-left:5px;"><i class="' + l + '" style="margin-left:2px;margin-right:1px;"></i></div></div>';
            f.parent().append(m)
        },
        deleteEmailDropdown: function(f) {
            $(f.currentTarget).parents(".additional-email-type").remove()
        },
        addGradeDropdown: function(j, h, p) {
            var k, m, f, o = true,
                l = o ? "fa fa-trash" : "p3icon-delete",
                n = o ? "width:200px;display:inline;" : "",
                g = o ? "btn-link" : "btn-mini";
            if (j === null) {
                f = $(h)
            } else {
                f = $(j.currentTarget)
            }
            m = '<div class="additional-grade-type"><select class="grade-level-dd input-medium form-control" data-id="' + f.data("id") + '" style="margin-top:2px;margin-right:3px;' + n + '">';
            m += '<option value="0">-- Please Select --</option>';
            for (k = 0; k < b.Data.EEGradeLevels.length; k++) {
                m += '<option value="' + b.Data.EEGradeLevels[k].id + '"';
                if (p && p === b.Data.EEGradeLevels[k].id) {
                    m += ' selected="selected"'
                }
                m += ">" + b.Data.EEGradeLevels[k].name + "</option>"
            }
            m += '</select><div class="btn btn-default ' + g + ' delete-grade-type" data-toggle="button" style="margin-left:5px;"><i class="' + l + '" style="margin-left:2px;margin-right:1px;"></i></div></div>';
            f.parent().append(m)
        },
        deleteGradeDropdown: function(f) {
            $(f.currentTarget).parents(".additional-grade-type").remove()
        },
        addLevelDropdown: function(h) {
            var j, l, f = $(h.currentTarget),
                n = true,
                k = n ? "fa fa-trash" : "p3icon-delete",
                m = n ? "width:200px;display:inline;" : "",
                g = n ? "btn-link" : "btn-mini";
            l = '<div class="additional-level"><select class="level-dd input-medium form-control" data-id="' + f.data("id") + '" style="margin-top:2px;margin-right:3px;' + m + '">';
            l += '<option value="0">-- Please Select --</option>';
            for (j = 0; j < b.Data.EELevels.length; j++) {
                l += '<option value="' + b.Data.EELevels[j].eeSchoolId + '">' + b.Data.EELevels[j].name + "</option>"
            }
            l += '</select><div class="btn btn-default ' + g + ' delete-level" data-toggle="button" style="margin-left:5px;"><i class="' + k + '" style="margin-left:2px;margin-right:1px;"></i></div></div>';
            f.parent().append(l)
        },
        deleteLevelDropdown: function(f) {
            $(f.currentTarget).parents(".additional-level").remove()
        },
        addTermDropdown: function(h) {
            var j, l, f = $(h.currentTarget),
                n = true,
                k = n ? "fa fa-trash" : "p3icon-delete",
                m = n ? "width:200px;display:inline;" : "",
                g = n ? "btn-link" : "btn-mini";
            l = '<div class="additional-term"><select class="term-dd input-medium form-control" data-id="' + f.data("id") + '" style="margin-top:2px;margin-right:3px;' + m + '">';
            l += '<option value="0">-- Please Select --</option>';
            for (j = 0; j < b.Data.EETerms.length; j++) {
                l += '<option value="' + b.Data.EETerms[j].eeTermId + '">' + b.Data.EETerms[j].name + "</option>"
            }
            l += '</select><div class="btn btn-default ' + g + ' delete-term" data-toggle="button" style="margin-left:5px;"><i class="' + k + '" style="margin-left:2px;margin-right:1px;"></i></div></div>';
            f.parent().append(l)
        },
        deleteTermDropdown: function(f) {
            $(f.currentTarget).parents(".additional-term").remove()
        },
        addRelationshipDropdown: function(j, h, p) {
            var k, m, f, o = true,
                l = o ? "fa fa-trash" : "p3icon-delete",
                n = o ? "width:200px;display:inline;" : "",
                g = o ? "btn-link" : "btn-mini";
            if (j === null) {
                f = $(h)
            } else {
                f = $(j.currentTarget)
            }
            m = '<div class="additional-relationship-type"><select class="relationship-type-dd input-medium form-control" data-id="' + f.data("id") + '" style="margin-top:2px;margin-right:3px;' + n + '">';
            m += '<option value="0">-- Please Select --</option>';
            for (k = 0; k < b.Data.EERelationships.length; k++) {
                m += '<option value="' + b.Data.EERelationships[k].id + '"';
                if (p && p === b.Data.EERelationships[k].id) {
                    m += ' selected="selected"'
                }
                m += ">" + b.Data.EERelationships[k].name + "</option>"
            }
            m += '</select><div class="btn ' + g + ' delete-relationship-type" data-toggle="button" style="margin-left:5px;"><i class="' + l + '" style="margin-left:2px;margin-right:1px;"></i></div></div>';
            f.parent().append(m)
        },
        deleteRelationshipDropdown: function(f) {
            $(f.currentTarget).parents(".additional-relationship-type").remove()
        },
        defaultUserClick: function(f) {
            if (!$(f.currentTarget).hasClass("active")) {
                this.collectUserMappings();
                this.byUser = false;
                this.userType = 0;
                this.displayUserMappings();
                $("#user-type-region").hide();
                $("#user-options").show();
                $("#gradelevel").show()
            }
        },
        userTypeClick: function(f) {
            if (!$(f.currentTarget).hasClass("active")) {
                this.collectUserMappings();
                this.byUser = true;
                this.userType = 0;
                $("#user-type-region").show();
                $("#user-options").hide();
                this.syncUserTypes()
            }
        },
        userTypeChange: function(i) {
            var f = $("#gradelevel"),
                g = $("#user-options"),
                h = $("#user-type-dropdown");
            this.collectUserMappings();
            this.userType = parseInt(h.val(), 10);
            switch (h.val()) {
                case "0":
                    $("#user-options").hide();
                    break;
                case "2":
                    this.displayUserMappings();
                    g.show();
                    f.show();
                    break;
                default:
                    this.displayUserMappings();
                    g.show();
                    f.hide();
                    break
            }
        },
        collectUserMappings: function() {
            var h = [],
                i = 0,
                f = 0,
                j = this,
                e, g;
            if (!j.byUser || j.userType > 0) {
                $(".address-type-dd").each(function(l, m) {
                    var k = $(m);
                    if (k.val() > 0) {
                        e = k.data("id");
                        if (e === f) {
                            i += 1
                        } else {
                            i = 0;
                            f = e
                        }
                        h.push({
                            MappingTypeId: 1,
                            WHFieldId: e,
                            EEFieldId: parseInt(k.val(), 10),
                            EEDescription: k.find("option:selected").text(),
                            WHDescription: k.parents("td").siblings().html(),
                            SortOrder: i,
                            UserTypeId: j.userType
                        })
                    }
                });
                i = 0;
                f = 0;
                $(".phone-type-dd").each(function(l, m) {
                    var k = $(m);
                    if (k.val() > 0) {
                        e = k.data("id");
                        if (e === f) {
                            i += 1
                        } else {
                            i = 0;
                            f = e
                        }
                        h.push({
                            MappingTypeId: 2,
                            WHFieldId: e,
                            EEFieldId: parseInt(k.val(), 10),
                            EEDescription: k.find("option:selected").text(),
                            WHDescription: k.parents("td").siblings().html(),
                            SortOrder: i,
                            UserTypeId: j.userType
                        })
                    }
                });
                i = 0;
                f = 0;
                $(".email-type-dd").each(function(l, m) {
                    var k = $(m);
                    if (k.val() > 0) {
                        e = k.data("id");
                        if (e === f) {
                            i += 1
                        } else {
                            i = 0;
                            f = e
                        }
                        h.push({
                            MappingTypeId: 2,
                            WHFieldId: e,
                            EEFieldId: parseInt(k.val(), 10),
                            EEDescription: k.find("option:selected").text(),
                            WHDescription: k.parents("td").siblings().html(),
                            SortOrder: i,
                            UserTypeId: j.userType
                        })
                    }
                });
                if (!this.byUser || this.userType === 2) {
                    i = 0;
                    f = 0;
                    $(".grade-level-dd").each(function(l, m) {
                        var k = $(m);
                        if (k.val() > 0) {
                            e = k.data("id");
                            if (e === f) {
                                i += 1
                            } else {
                                i = 0;
                                f = e
                            }
                            h.push({
                                MappingTypeId: 3,
                                WHFieldId: e,
                                EEFieldId: parseInt(k.val(), 10),
                                EEDescription: k.find("option:selected").text(),
                                WHDescription: k.parents("td").siblings().html(),
                                SortOrder: i,
                                UserTypeId: j.userType
                            })
                        }
                    })
                }
                g = _.filter(j.userMappings, function(k) {
                    return k.id === j.userType
                });
                if (g.length === 0) {
                    j.userMappings.push({
                        id: j.userType,
                        mappings: h
                    })
                } else {
                    g[0].mappings = h
                }
            }
        },
        displayUserMappings: function() {
            var k = this,
                h = _.filter(k.userMappings, function(i) {
                    return i.id === k.userType
                }),
                j = h[0].mappings,
                e, g = 0,
                f = 0;
            $(".additional-address-type").remove();
            $(".address-type-dd").val(0);
            $(".additional-phone-type").remove();
            $(".phone-type-dd").val(0);
            $(".additional-email-type").remove();
            $(".email-type-dd").val(0);
            $(".additional-grade-type").remove();
            $(".grade-level-dd").val(0);
            for (e = 0; e < j.length; e++) {
                switch (j[e].MappingTypeId) {
                    case 1:
                        if (f !== j[e].WHFieldId || g !== j[e].MappingTypeId) {
                            $(".address-type-dd[data-id='" + j[e].WHFieldId + "']").val(j[e].EEFieldId)
                        } else {
                            k.addAddressDropdown(null, $(".address-type-dd[data-id='" + j[e].WHFieldId + "']")[0], j[e].EEFieldId)
                        }
                        break;
                    case 2:
                        if (j[e].WHFieldId > 0) {
                            if (f !== j[e].WHFieldId || g !== j[e].MappingTypeId) {
                                $(".phone-type-dd[data-id='" + j[e].WHFieldId + "']").val(j[e].EEFieldId)
                            } else {
                                k.addPhoneDropdown(null, $(".phone-type-dd[data-id='" + j[e].WHFieldId + "']")[0], j[e].EEFieldId)
                            }
                        } else {
                            if (f !== j[e].WHFieldId || g !== j[e].MappingTypeId) {
                                $(".email-type-dd[data-id='" + j[e].WHFieldId + "']").val(j[e].EEFieldId)
                            } else {
                                k.addEmailDropdown(null, $(".email-type-dd[data-id='" + j[e].WHFieldId + "']")[0], j[e].EEFieldId)
                            }
                        }
                        break;
                    case 3:
                        if (f !== j[e].WHFieldId || g !== j[e].MappingTypeId) {
                            $(".grade-level-dd[data-id='" + j[e].WHFieldId + "']").val(j[e].EEFieldId)
                        } else {
                            k.addGradeDropdown(null, $(".grade-level-dd[data-id='" + j[e].WHFieldId + "']")[0], j[e].EEFieldId)
                        }
                        break
                }
                f = j[e].WHFieldId;
                g = j[e].MappingTypeId
            }
        },
        academicYearChange: function(f) {
            this.yearChange = true
        },
        checkYears: function(l) {
            var p = [],
                h, m, n, o, f = $(".marking-period-dd"),
                g = $(".term-dd");
            if (this.yearChange) {
                $(".btn-select-year.active").each(function(e, i) {
                    p.push($(i).data("year"))
                });
                for (m = 0; m < b.Data.EEYears.length; m++) {
                    if (p.indexOf(b.Data.EEYears[m].eeAcademicYearId) > -1) {
                        b.Data.EEYears[m].Selected = true
                    } else {
                        b.Data.EEYears[m].Selected = false
                    }
                }
                this.options.settings.set("AcademicYears", p);
                $(".additional-term").remove();
                g.empty();
                g.append($("<option>", {
                    value: "0",
                    text: "-- Please Select --"
                }, "<option/>"));
                f.empty();
                f.append($("<option>", {
                    value: "0",
                    text: "-- Please Select --"
                }, "<option/>"));
                b.Data.EESessions = [];
                b.Data.EETerms = [];
                b.Data.EEMarkingColumns = [];
                if (p.length > 0) {
                    h = b.Data.YearJSON.academic_years;
                    for (m = 0; m < h.length; m++) {
                        if (p.indexOf(h[m].ea7_academic_year_id) > -1 && h[m].sessions) {
                            for (n = 0; n < h[m].sessions.length; n++) {
                                b.Data.EESessions.push({
                                    eeSessionId: h[m].sessions[n].ea7_session_id,
                                    name: h[m].school_name + " - " + h[m].sessions[n].name
                                });
                                for (o = 0; o < h[m].sessions[n].terms.length; o++) {
                                    b.Data.EETerms.push({
                                        eeTermId: h[m].sessions[n].terms[o].ea7_term_id,
                                        name: h[m].school_name + " - " + h[m].sessions[n].name + " - " + h[m].sessions[n].terms[o].name
                                    });
                                    g.append($("<option>", {
                                        value: h[m].sessions[n].terms[o].ea7_term_id,
                                        text: h[m].school_name + " - " + h[m].sessions[n].name + " - " + h[m].sessions[n].terms[o].name
                                    }, "<option/>"))
                                }
                            }
                        }
                    }
                    for (m = 0; m < b.Data.EESessions.length; m++) {
                        this.getMarkingColumns(b.Data.EESessions[m].eeSessionId, b.Data.EESessions[m].name)
                    }
                    if (b.Data.EEMarkingColumns.length > 0) {
                        for (m = 0; m < b.Data.EEMarkingColumns.length; m++) {
                            f.append($("<option>", {
                                value: b.Data.EEMarkingColumns[m].marking_column_table_entry_id,
                                text: b.Data.EEMarkingColumns[m].description
                            }, "<option/>"))
                        }
                    }
                }
                this.yearChange = false
            }
        },
        syncUserTypes: function() {
            var i = this,
                h = [],
                g, f, e = $("#user-type-dropdown");
            if (i.byUser) {
                h = i.getSelectedRelationships();
                e.empty();
                e.append($("<option>", {
                    value: "0",
                    text: "-- Select A User Type --"
                }, "<option/>"));
                e.append($("<option>", {
                    value: "2",
                    text: "For Students"
                }, "<option/>"));
                e.append($("<option>", {
                    value: "1",
                    text: "For Faculty"
                }, "<option/>"));
                _.each(h, function(j) {
                    f = parseInt(j.eeId, 10);
                    e.append($("<option>", {
                        value: f,
                        text: "For " + j.name
                    }, "<option/>"));
                    g = _.filter(i.userMappings, function(k) {
                        return k.id === f
                    });
                    if (g.length === 0) {
                        i.userMappings.push({
                            id: f,
                            mappings: []
                        })
                    }
                });
                e.val(i.userType);
                if (parseInt(e.val(), 10) !== i.userType) {
                    i.userType = 0
                }
            }
        },
        getSelectedRelationships: function() {
            var e = [];
            $(".relationship-type-dd").each(function(g, h) {
                var f = $(h);
                if (f.val() > 0) {
                    e.push({
                        eeId: f.val(),
                        name: f.find("option:selected").text()
                    })
                }
            });
            return e
        },
        setUserMappingValue: function(h, e) {
            var i = this,
                f = _.filter(i.userMappings, function(j) {
                    return j.id === h
                }),
                g = [];
            if (f.length > 0) {
                f[0].mappings.push(e)
            } else {
                g.push(e);
                i.userMappings.push({
                    id: h,
                    mappings: g
                })
            }
        },
        getRelationshipType: function(e) {
            var f = this;
            return _.filter(f.RelationshipTypes, function(g) {
                return e === g.RelationshipId
            })
        }
    });
    b.Vs.ReviewMatch = Bb.View.extend({
        template: "connectee/review.template.html",
        events: {
            "click #unlink-button": "unlinkClick",
            "click #unlink-confirm-button": "confirmClick"
        },
        renderTemplate: function() {
            var o = this,
                l, e, f, g, n = o.WHUser.toJSON(),
                h, m;
            if (o.WHUser.length > 0) {
                l = o.WHUser.models[0].get("linked_date")
            }
            p3.fT(o.template, function(i) {
                o.$el.html(i({
                    linkDate: l,
                    repoId: o.options.repoId
                }))
            });
            o.Containers.whUsers = "#wh-user-container";
            o.Containers.eeUsers = "#ee-user-container";
            e = new b.Ms.EEUser();
            e.fetch({
                data: {
                    eeId: o.options.eeId,
                    accessToken: b.Data.AuthToken
                },
                success: function(r, s) {
                    var t = JSON.parse(s.ResponseString),
                        k, q = s.Mappings,
                        u = [],
                        i, p, v, j = "No";
                    if (t.people && t.people.length > 0) {
                        k = t.people[0].bio;
                        i = t.people[0].contact_info;
                        if (i) {
                            for (f = 0; f < i.length; f++) {
                                v = "";
                                for (g = 0; g < q.length; g++) {
                                    if (q[g].EEFieldId === i[f].type_id) {
                                        p = q[g];
                                        break
                                    }
                                }
                                if (p) {
                                    switch (p.WHFieldId) {
                                        case -1:
                                            v = o.WHUser.models[0].get("email");
                                            break;
                                        case -2:
                                            v = o.WHUser.models[0].get("cc_email");
                                            break;
                                        default:
                                            for (h = 0; h < n.length; h++) {
                                                if (n[h].phone_type_id === p.WHFieldId) {
                                                    v = n[h].phone_number;
                                                    break
                                                }
                                            }
                                            break
                                    }
                                    if (p.UserTypeId === 0 || v === i[f].value) {
                                        u.push({
                                            EEDescription: p.EEDescription,
                                            WHDescription: p.WHDescription,
                                            EEValue: i[f].value,
                                            WHValue: v
                                        })
                                    }
                                }
                            }
                        }
                    }
                    switch (k.record_type) {
                        case 1:
                            m = "Parent";
                            break;
                        case 6:
                        case 2:
                            m = "Student";
                            break;
                        case 8:
                            m = "Faculty";
                            break
                    }
                    u.push({
                        EEDescription: "Role",
                        WHDescription: "Role",
                        EEValue: m,
                        WHValue: o.WHUser.models[0].get("roles")
                    });
                    if (k.deceased || o.WHUser.models[0].get("deceased")) {
                        if (k.deceased) {
                            j = "Yes"
                        }
                        if (o.WHUser.models[0].get("deceased")) {
                            v = "Yes"
                        } else {
                            v = "No"
                        }
                        u.push({
                            EEDescription: "Deceased",
                            EEValue: j,
                            WHDescription: "Deceased",
                            WHValue: v
                        })
                    }
                    o.renderWHUser(u);
                    o.renderEEUser(k, u)
                },
                error: function(i, j) {
                    p3.displayError("Error loading EE User.")
                }
            })
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(e) {
            var f = this;
            $(e).append(this.el);
            f.WHUser = new b.Cs.EEWHUser();
            f.WHUser.fetch({
                data: {
                    userId: f.options.userId
                },
                success: function() {
                    f.renderTemplate()
                },
                error: function(g, h) {
                    p3.displayError("Error loading WH User.")
                }
            })
        },
        renderEEUser: function(e, i) {
            var j = this,
                g, h, f;
            if (!e.birth_date || e.birth_date === "0001-01-01T00:00:00") {
                e.birth_date = ""
            } else {
                g = e.birth_date.split("T");
                h = g[0].split("-");
                e.birth_date = c.buildDateString(h[0], h[1] - 1, h[2])
            }
            f = new b.Vs.EEUserDetail({
                eeUser: e,
                eeId: j.options.eeId,
                userContacts: i
            });
            p3.rV(f, j.Containers.eeUsers, true)
        },
        renderWHUser: function(e) {
            var f = this,
                g;
            if (f.WHUser.models[0].get("birth_date")) {
                f.WHUser.models[0].set("birth_date", c.getDateString(c.getDate(f.WHUser.models[0].get("birth_date"))))
            }
            g = new b.Vs.WHUserDetail({
                whUser: f.WHUser.models[0],
                userContacts: e
            });
            p3.rV(g, f.Containers.whUsers, true)
        },
        unlinkClick: function(f) {
            $("#unlink-button").hide();
            $("#unlink-confirm").show();
            $("#unlink-confirm-button").show();
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        confirmClick: function(f) {
            var h = this,
                g;
            g = new b.Ms.UnlinkUser({
                repositoryId: h.options.repoId
            });
            g.save({}, {
                success: function(e, i) {
                    h.trigger("userUnlinked", e);
                    p3.Layout.Containers.Modal.modal("hide")
                },
                error: function(e, i) {
                    p3.displayError("Error unlinking user.")
                }
            })
        }
    });
    b.Vs.linkUsers = Bb.View.extend({
        template: "connectee/link.user.template.html",
        events: {
            "click .match-selector": "showPotentialMatch",
            "click #link-account-button": "linkClick",
            "click #create-new-link": "createNewClick",
            "click #link-confirm-button": "linkRecords",
            "click #create-confirm-button": "createRecord"
        },
        renderTemplate: function() {
            var k = this,
                e, f, g, h;
            p3.fT(k.template, function(i) {
                k.$el.html(i({
                    matchCount: k.dropdownList.length,
                    matches: k.dropdownList
                }))
            });
            k.Containers.whUsers = "#wh-user-container";
            k.Containers.eeUsers = "#ee-user-container";
            e = new b.Ms.EEUser();
            e.fetch({
                data: {
                    eeId: k.options.eeId,
                    accessToken: b.Data.AuthToken
                },
                success: function(j, l) {
                    var m = JSON.parse(l.ResponseString),
                        i, n = [];
                    k.mappings = l.Mappings;
                    if (m.people && m.people.length > 0) {
                        i = m.people[0].bio;
                        k.contactInfo = m.people[0].contact_info;
                        if (k.contactInfo) {
                            for (f = 0; f < k.contactInfo.length; f++) {
                                for (g = 0; g < k.mappings.length; g++) {
                                    if (k.mappings[g].EEFieldId === k.contactInfo[f].type_id) {
                                        n.push({
                                            EEDescription: k.mappings[g].EEDescription,
                                            EEValue: k.contactInfo[f].value
                                        });
                                        break
                                    }
                                }
                            }
                        }
                    }
                    switch (i.record_type) {
                        case 1:
                            h = "Parent";
                            break;
                        case 6:
                            h = "Student";
                            break;
                        case 8:
                            h = "Faculty";
                            break
                    }
                    n.push({
                        EEDescription: "Role",
                        EEValue: h
                    });
                    k.renderEEUser(i, n)
                },
                error: function(i, j) {
                    p3.displayError("Error loading EE User.")
                }
            })
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(e) {
            var f = this;
            $(e).append(this.el);
            f.Matches = new b.Cs.PossibleMatches();
            f.Matches.fetch({
                data: {
                    objectDataId: f.options.objectId
                },
                success: function() {
                    f.dropdownList = [];
                    var h = 0,
                        g;
                    f.Matches.each(function(i) {
                        if (i.get("user_id") !== h) {
                            h = i.get("user_id");
                            g = "";
                            if (i.get("prefix") && i.get("prefix").length > 0) {
                                g = i.get("prefix") + " "
                            }
                            g += i.get("firstname");
                            if (i.get("middlename") && i.get("middlename").length > 0) {
                                g += " " + i.get("middlename")
                            }
                            g += " " + i.get("lastname");
                            if (i.get("suffix") && i.get("suffix").length > 0) {
                                g += " " + i.get("suffix")
                            }
                            f.dropdownList.push({
                                id: h,
                                name: g,
                                last: i.get("lastname")
                            })
                        }
                    });
                    f.renderTemplate()
                },
                error: function(g, h) {
                    p3.displayError("Error loading possible matches.")
                }
            })
        },
        renderEEUser: function(e, i) {
            var j = this,
                g, h, f;
            if (e.birth_date === "0001-01-01T00:00:00") {
                e.birth_date = ""
            } else {
                g = e.birth_date.split("T");
                h = g[0].split("-");
                e.birth_date = c.buildDateString(h[0], h[1] - 1, h[2])
            }
            f = new b.Vs.EEUserDetail({
                eeUser: e,
                eeId: j.options.eeId,
                userContacts: i
            });
            p3.rV(f, j.Containers.eeUsers, true)
        },
        renderWHUser: function() {
            var o = this,
                m, n = [],
                h, p, e, f, q, l = o.Matches.toJSON(),
                g;
            o.Matches.each(function(i) {
                if (!m && i.get("user_id") === o.selectedUser) {
                    m = i
                }
            });
            if (o.contactInfo) {
                for (e = 0; e < o.contactInfo.length; e++) {
                    p = "";
                    for (f = 0; f < o.mappings.length; f++) {
                        if (o.mappings[f].EEFieldId === o.contactInfo[e].type_id) {
                            h = o.mappings[f];
                            break
                        }
                    }
                    if (h) {
                        switch (h.WHFieldId) {
                            case -1:
                                p = m.get("email");
                                break;
                            case -2:
                                p = m.get("cc_email");
                                break;
                            default:
                                for (g = 0; g < l.length; g++) {
                                    if (l[g].user_id === o.selectedUser && l[g].phone_type_id === h.WHFieldId) {
                                        p = l[g].phone_number;
                                        break
                                    }
                                }
                                break
                        }
                        n.push({
                            EEDescription: h.EEDescription,
                            WHDescription: h.WHDescription,
                            EEValue: o.contactInfo[e].value,
                            WHValue: p
                        })
                    }
                }
            }
            if (m.get("roles") && m.get("roles").length > 0) {
                n.push({
                    WHDescription: "Role",
                    WHValue: m.get("roles")
                })
            } else {
                n.push({
                    WHDescription: "Role",
                    WHValue: ""
                })
            }
            if (m.get("birth_date")) {
                m.set("birth_date", c.getDateString(c.getDate(m.get("birth_date"))))
            }
            q = new b.Vs.WHUserDetail({
                whUser: m,
                userContacts: n,
                noHeader: true
            });
            p3.rV(q, o.Containers.whUsers, true)
        },
        showPotentialMatch: function(g) {
            var h = this,
                f = $(g.currentTarget);
            $("#selected-user-name").replaceWith('<h2 style="line-height:26px;text-align:left;" id="selected-user-name">' + f.html() + "</h3>");
            $("#match-count").hide();
            $("#or-header").addClass("pull-left").css("text-align", "left").css("margin", "5px 10px 0px 10px").show();
            $("#create-new-link").css("margin", "5px 0px 0px 0px").css("width", "").removeClass("btn-large").show();
            $("#create-new-label").replaceWith($('<h5><i class="p3icon-addNew"></i> Create A New User Record</h5>'));
            $("#link-account-button").show();
            $("#link-confirm").hide();
            $("#link-confirm-button").hide();
            h.selectedUser = f.data("id");
            h.renderWHUser();
            p3.setModalHeight(p3.Layout.Containers.Modal);
            g.preventDefault()
        },
        linkClick: function(f) {
            $("#link-confirm").show();
            $("#link-confirm-button").show();
            $("#link-account-button").hide();
            $("#or-header").hide();
            $("#create-new-link").hide();
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        createNewClick: function(f) {
            $("#create-confirm").show();
            $("#create-confirm-button").show();
            $("#link-account-button").hide();
            $("#or-header").hide();
            $("#create-new-link").hide();
            $("#wh-user-container").hide();
            $("#match-group").hide();
            $("#match-count").hide();
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        linkRecords: function(f) {
            var h = this,
                g;
            g = new b.Ms.LinkUsers({
                eeId: h.options.eeId,
                userId: h.selectedUser
            });
            g.save({}, {
                success: function(e, i) {
                    h.trigger("userLinked", e);
                    p3.Layout.Containers.Modal.modal("hide")
                },
                error: function(e, i) {
                    p3.displayError("Error linking user.")
                }
            })
        },
        createRecord: function(f) {
            var i = this,
                h = [],
                g;
            h.push(i.options.objectId);
            g = new b.Ms.CreateUsers({
                CreateUserList: h
            });
            g.save({}, {
                success: function(e, j) {
                    i.trigger("userCreated", e);
                    p3.Layout.Containers.Modal.modal("hide")
                },
                error: function(e, j) {
                    p3.displayError("Error creating user.")
                }
            })
        }
    });
    b.Vs.EEUserDetail = Bb.View.extend({
        template: "connectee/ee.user.detail.template.html",
        renderTemplate: function() {
            var e = this;
            p3.fT(e.template, function(f) {
                e.$el.html(f({
                    eeUser: e.options.eeUser,
                    eeId: e.options.eeId,
                    userContacts: e.options.userContacts
                }))
            });
            window.setTimeout(function() {
                p3.setModalHeight(p3.Layout.Containers.Modal)
            }, 100)
        },
        render: function(e) {
            var f = this;
            $(e).append(this.el);
            f.renderTemplate()
        }
    });
    b.Vs.WHUserDetail = Bb.View.extend({
        template: "connectee/wh.user.detail.template.html",
        renderTemplate: function() {
            var e = this;
            p3.fT(e.template, function(f) {
                e.$el.html(f({
                    whUser: e.options.whUser.toJSON(),
                    schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                    userContacts: e.options.userContacts,
                    noHeader: e.options.noHeader
                }))
            })
        },
        render: function(e) {
            var f = this;
            $(e).append(this.el);
            f.renderTemplate()
        }
    });
    b.Us.GetAccessToken = function() {
        var e = new b.Ms.GetAccessToken();
        e.save({}, {
            success: function(f, g) {
                var h = JSON.parse(g.ResponseString);
                if (h && h.token && h.token.length > 0) {
                    b.Data.AuthToken = h.token;
                    $("#edit-settings-button").show()
                } else {
                    p3.displayError("Error getting Connect EE Authorization Token");
                    $("#auth-settings-button").show()
                }
            },
            error: function(f, g) {
                p3.displayError("Error getting Connect EE Authorization Token");
                $("#auth-settings-button").show()
            }
        })
    };
    p3.router().route("ConnectEESettings", "ConnectEESettings", function() {
        p3.setTitle("Connect Education Edge Settings");
        p3.renderMainPage(new b.Vs.SettingsMain())
    })
}(p3.module("LMS/connectee")));
(function(d) {
    var f = p3.module("lists"),
        b = p3.Us.Culture,
        e = p3.module("shared/datepicker"),
        c = p3.module("shared/dashboard"),
        h = p3.module("LMS/teampage"),
        a = p3.module("LMS/athleticschedule"),
        g = p3.module("lms/scoreboard");
    d.Ms.AssignmentChart = Bbm.extend({
        url: function() {
            return ""
        }
    });
    d.Cs.AssignmentChart = Bbc.extend({
        model: d.Ms.AssignmentChart,
        initialize: function(i, j) {
            this.groupBy = j.groupBy || 0;
            this.numberOfItems = j.numberOfItems || 8
        },
        url: function() {
            return aP + "datadirect/assignmentchartget/?format=json&groupBy=" + this.groupBy + "&numberOfItems=" + this.numberOfItems
        }
    });
    d.Ms.DashboardCounts = Bbm.extend({
        url: function() {
            return aP + "datadirect/DashboardCountsGet/?format=json&lookupDate=" + this.get("lookupDate").ApiFormat()
        }
    });
    d.Ms.AthleticsDashboardCounts = Bbm.extend({
        url: function() {
            return aP + "datadirect/DashboardAthCountsGet/?format=json&lookupDate=" + this.get("lookupDate").ApiFormat()
        }
    });
    d.Cs.AthleticsByDay = Bbc.extend({
        initialize: function(i, j) {
            this.lookupDate = j.lookupDate
        },
        url: function() {
            return aP + "datadirect/DashboardAthEventsGet/?format=json&lookupDate=" + this.lookupDate.ApiFormat()
        }
    });
    d.Cs.AthleticScoreboard = Bbc.extend({
        initialize: function(i, j) {
            this.lookupDate = j.lookupDate
        },
        url: function() {
            return aP + "datadirect/DashboardScoreboardGet/?format=json&lookupDate=" + this.lookupDate.ApiFormat()
        }
    });
    d.Cs.AthleticScorelist = Bbc.extend({
        initialize: function(i, j) {
            this.lookupDate = j.lookupDate
        },
        url: function() {
            return aP + "datadirect/DashboardScoreboardGet/?format=json&lookupDate=" + this.lookupDate.ApiFormat()
        },
        parse: function(j) {
            var i = [];
            _.each(j, function(k) {
                var l, m = _.find(i, function(n) {
                    return n.ath_schedule_id === k.ath_schedule_id
                });
                if (m === undefined) {
                    m = k;
                    i.push(m);
                    m.display_date = k.schedule_date;
                    if (k.news_id || k.result || k.score) {
                        m.edit = true
                    }
                }
                l = m.opponents;
                if (l === undefined || l === null) {
                    l = [];
                    m.opponents = l
                }
                l.push({
                    name: k.name,
                    result: k.result,
                    score: k.score,
                    score_vs: k.score_vs
                })
            });
            return i
        },
        comparator: "course_title"
    });
    d.Cs.AthleticLocationByDay = Bbc.extend({
        initialize: function(i, j) {
            this.lookupDate = j.lookupDate
        },
        url: function() {
            return aP + "datadirect/DashboardLocationGet/?format=json&lookupDate=" + this.lookupDate.ApiFormat()
        }
    });
    d.Cs.AthleticTransByDay = Bbc.extend({
        initialize: function(i, j) {
            this.lookupDate = j.lookupDate
        },
        url: function() {
            return aP + "datadirect/DashboardTransportationGet/?format=json&lookupDate=" + this.lookupDate.ApiFormat()
        }
    });
    d.Vs.LayoutView = Bb.View.extend({
        template: "dashboard/dashboard.oncampus.layout.template.html",
        initialize: function() {
            f.loadLists()
        },
        dispose: function() {
            $("BODY").removeClass("background-gray-texture")
        },
        render: function(l) {
            var m = this,
                i, j, k;
            $("BODY").addClass("background-gray-texture");
            p3.setTitle("Dashboard");
            p3.fT(m.template, function(o) {
                m.$el.html(o());
                i = m.$el.find("#page-2col-wideleft");
                j = m.$el.find("#page-2col-slimright");
                k = new d.Cs.AssignmentChart({}, {});
                k.fetch({
                    success: function() {
                        if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.COURSEMANAGEMENT)) {
                            p3.rV(new d.Vs.AssignmentChart({
                                collection: k
                            }), i, false)
                        } else {
                            i.html("&nbsp;")
                        }
                    },
                    error: function() {
                        p3.displayError("Error assignment chart data")
                    }
                });
                p3.rV(new c.Vs.FeatureSet({
                    persona: 5
                }), j, false);
                if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ATHLETICGROUPS)) {
                    var n = new d.Vs.DashboardCounts();
                    p3.rV(n, p3.Layout.Containers.MainPage, false)
                }
            });
            $(l).html(this.el)
        }
    });
    d.Vs.DashboardCounts = Bb.View.extend({
        template: "dashboard/dashboard.oncampus.count.template.html",
        className: "wContainer noshadow",
        attributes: {
            style: "margin-top:-32px; margin-bottom:25px; padding:0px;"
        },
        initialize: function() {
            var j = this,
                i = new d.Ms.DashboardCounts({
                    lookupDate: b.getDateString(b.localDateTime())
                });
            j.countModel = i
        },
        render: function(i) {
            i.before(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var k = this,
                j, i;
            k.countModel.fetch({
                success: function() {
                    j = false;
                    i = p3.Data.Context.findByTaskId(53100);
                    if (i) {
                        j = true
                    }
                    p3.fT(k.template, function(l) {
                        k.$el.html(l({
                            counts: k.countModel.attributes[0],
                            showAthletics: j
                        }))
                    })
                },
                error: function() {
                    p3.displayError("Error loading dashboard counts")
                }
            })
        }
    });
    d.Vs.AssignmentChart = Bb.View.extend({
        template: "shared/shared.chart.template.html",
        events: {},
        initialize: function(i) {
            var j = this;
            i.chart = function(k) {
                j.options.collection.fetch({
                    data: {
                        numberOfItems: 6
                    },
                    success: function(l) {
                        d3.select("#chart-container svg").datum(j.newChartData(l)).transition().duration(500).call(k)
                    }
                })
            }
        },
        render: function(i) {
            var j = this;
            j.$el.appendTo(i);
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.Chart, function() {
                nv.addGraph(function() {
                    var k = nv.models.multiBarChart().x(function(l, m) {
                        return l.label
                    }).y(function(l) {
                        return l.value
                    }).showControls(true);
                    k.xAxis.tickFormat(function(l) {
                        return l
                    });
                    k.yAxis.tickFormat(function(l) {
                        return l
                    });
                    j.options.chart(k);
                    return k
                });
                j.renderTemplate()
            })
        },
        renderTemplate: function() {
            var i = this;
            p3.fT(i.template, function(j) {
                i.$el.html(j({
                    title: "Assignment Activity",
                    height: 400
                }))
            })
        },
        newChartData: function(j) {
            var m = this,
                i, l, k;
            m.newChartData = [];
            m.newTicks = [];
            i = _.groupBy(j.models, function(n) {
                return n.get("DataLabel1")
            });
            l = _.groupBy(j.models, function(n) {
                return n.get("DataLabel2")
            });
            _.each(i, function(n) {
                k = [];
                _.each(n, function(p, o) {
                    k.push({
                        label: p.get("AxisLabel"),
                        value: p.get("DataValue1")
                    })
                });
                m.newChartData.push({
                    key: n[0].get("DataLabel1"),
                    values: k
                })
            });
            _.each(l, function(n) {
                k = [];
                _.each(n, function(p, o) {
                    k.push({
                        label: p.get("AxisLabel"),
                        value: p.get("DataValue2")
                    })
                });
                m.newChartData.push({
                    key: n[0].get("DataLabel2"),
                    values: k
                })
            });
            return m.newChartData
        }
    });
    d.Vs.AthleticDashboardCounts = Bb.View.extend({
        template: "dashboard/dashboard.athletics.tiles.template.html",
        events: {
            "click .aem-action-btn": "buttonClicked"
        },
        renderTemplate: function() {
            var i = this;
            i.countModel.fetch({
                success: function() {
                    var j = i.options.currentDate,
                        l = j.getMonth() + 1,
                        k = l + "-" + j.getDate() + "-" + j.getFullYear(),
                        m = i.options.parentView.listType;
                    p3.fT(i.template, function(n) {
                        i.$el.html(n({
                            counts: i.countModel.attributes[0],
                            currentDate: k,
                            event: m == 0,
                            location: m == 1,
                            trans: m == 2,
                            scoreboard: m == 3,
                            scorelist: m == 4
                        }))
                    });
                    i.delegateEvents()
                },
                error: function() {
                    p3.displayError("Error loading dashboard counts")
                }
            })
        },
        initialize: function() {
            var j = this,
                i = new d.Ms.AthleticsDashboardCounts({
                    lookupDate: b.getDateString(j.options.currentDate)
                });
            j.countModel = i
        },
        render: function(i) {
            $(i).append(this.el);
            this.renderTemplate()
        },
        changeListType: function(j) {
            var k = this,
                i = $(j.currentTarget);
            k.options.parentView.listType = i.data("type");
            k.options.parentView.refreshList();
            $(".btn-gray").removeClass("active");
            i.addClass("active")
        },
        buttonClicked: function(i) {
            var j = $(i.currentTarget).data("link");
            if (j && j.indexOf("#") === 0) {
                p3.router().navigate(j, true)
            }
            i.stopPropagation()
        }
    });
    d.Vs.AthleticsDashboardView = Bb.View.extend({
        template: "dashboard/dashboard.athletics.template.html",
        events: {},
        initialize: function() {
            var i = this;
            i.currentDate = i.options.currentDate;
            i.listType = i.options.listType;
            i.athleticPrivileges = a.Us.getAthleticPrivileges(true, false, false)
        },
        render: function(i) {
            p3.setTitle("Dashboard");
            var j = this;
            p3.fT(j.template, function(o) {
                j.$el.html(o({
                    displayDate: b.getDateString(j.currentDate),
                    athleticPrivileges: j.athleticPrivileges
                }));
                var k = j.$el.find("#athletic-tiles"),
                    l = j.$el.find("#list-container"),
                    m, n;
                switch (j.listType) {
                    case d.Us.DashboardType.Event:
                        m = new d.Vs.AthleticList({
                            parentView: j,
                            currentDate: j.currentDate
                        });
                        p3.rV(m, l, true);
                        break;
                    case d.Us.DashboardType.Scoreboard:
                        m = new d.Vs.Scoreboard({
                            parentView: j,
                            currentDate: j.currentDate
                        });
                        p3.rV(m, l, true);
                        break;
                    case d.Us.DashboardType.Location:
                        m = new d.Vs.AthleticLocation({
                            parentView: j,
                            currentDate: j.currentDate
                        });
                        p3.rV(m, l, true);
                        break;
                    case d.Us.DashboardType.Transportation:
                        m = new d.Vs.AthleticTransportation({
                            parentView: j,
                            currentDate: j.currentDate
                        });
                        p3.rV(m, l, true);
                        break;
                    case d.Us.DashboardType.Scorelist:
                        m = new d.Vs.ScoreList({
                            parentView: j,
                            currentDate: j.currentDate
                        });
                        p3.rV(m, l, true);
                        break
                }
                n = new d.Vs.AthleticDashboardCounts({
                    parentView: j,
                    currentDate: j.currentDate
                });
                p3.rV(n, k, true);
                window.setTimeout(function() {
                    $("#site-main").removeClass("container");
                    $("body").addClass("containerBack");
                    e.Us.initialize("#datedropdown", {
                        showOn: "button",
                        buttonText: 'Date Picker <i class="p3icon-downArrow"></i>',
                        onClose: function(p) {
                            j.switchDate(p)
                        },
                        beforeShow: function() {
                            setTimeout(function() {
                                $(".ui-datepicker").css("z-index", 2)
                            }, 0)
                        }
                    });
                    window.setTimeout(function() {
                        $(".ui-datepicker-trigger").addClass("btn btn-default pull-right").css("color", "#9f9f9f")
                    }, 200);
                    $("#add-game-button").bind("click", function(p) {
                        j.showAddGameDialog(p)
                    });
                    $("#bulk-practice-button").bind("click", function(p) {
                        j.showBulkPracticeDialog(p)
                    })
                }, 100)
            });
            $(i).html(this.el)
        },
        showBulkPracticeDialog: function() {
            var i = this;
            a.Data.EditableTeams = new a.Cs.EditableTeams({}, {
                lookupDate: i.options.currentDate
            });
            a.Data.EditableTeams.fetch({
                async: false,
                error: function() {
                    p3.displayError("Error loading teams")
                }
            });
            p3.rV(new a.Vs.BulkAddPracticeView({
                sectionId: 0,
                showTeamPicker: true,
                dashboardView: i
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        },
        showAddGameDialog: function() {
            var j = this,
                i;
            a.Data.EditableTeams = new a.Cs.EditableTeams({}, {
                lookupDate: j.options.currentDate
            });
            a.Data.EditableTeams.fetch({
                async: false,
                error: function() {
                    p3.displayError("Error loading teams")
                }
            });
            if (j.athleticPrivileges.canAddGame) {
                i = new a.Ms.ScheduleItem({
                    ScheduleType: 0,
                    HomeAwayType: 0,
                    LocationId: -1,
                    LeagueInd: 1,
                    Gamedate: b.getDateString(j.options.currentDate)
                });
                a.Us.openGameScheduleDialog(0, i, 0, false, j, true, j.athleticPrivileges.isLite, j.athleticPrivileges)
            } else {
                i = new a.Ms.ScheduleItem({
                    PracticeDate: b.getDateString(j.options.currentDate)
                });
                a.Us.openEditPracticeDialog(0, i, 0, false, j, true, j.athleticPrivileges)
            }
        },
        dispose: function() {
            $("#site-main").addClass("container");
            $("body").removeClass("containerBack")
        },
        switchDate: function(k) {
            var m = this,
                l, i, j;
            if (k.length && b.getDateString(b.getDate(k)) != b.getDateString(m.currentDate)) {
                l = "";
                switch (m.listType) {
                    case d.Us.DashboardType.Event:
                        l = "Events/";
                        break;
                    case d.Us.DashboardType.Location:
                        l = "Locations/";
                        break;
                    case d.Us.DashboardType.Transportation:
                        l = "Transportation/";
                        break;
                    case d.Us.DashboardType.Scoreboard:
                        l = "Scoreboard/";
                        break;
                    case d.Us.DashboardType.Scorelist:
                        l = "Scorelist/";
                        break
                }
                i = b.getDate(k);
                j = i.getMonth() + 1;
                p3.router().navigate("#AthleticsDashboard/" + l + j + "-" + i.getDate() + "-" + i.getFullYear(), true)
            }
        },
        refreshDashboard: function() {
            var j = this,
                i;
            j.refreshList();
            i = new d.Vs.AthleticDashboardCounts({
                parentView: j,
                currentDate: j.currentDate
            });
            p3.rV(i, "#athletic-tiles", true)
        },
        refreshList: function() {
            var j = this,
                i;
            switch (j.listType) {
                case d.Us.DashboardType.Event:
                    i = new d.Vs.AthleticList({
                        parentView: j,
                        currentDate: j.currentDate
                    });
                    p3.rV(i, "#list-container", true);
                    break;
                case d.Us.DashboardType.Scoreboard:
                    i = new d.Vs.Scoreboard({
                        parentView: j,
                        currentDate: j.currentDate
                    });
                    p3.rV(i, "#list-container", true);
                    break;
                case d.Us.DashboardType.Location:
                    i = new d.Vs.AthleticLocation({
                        parentView: j,
                        currentDate: j.currentDate
                    });
                    p3.rV(i, "#list-container", true);
                    break;
                case d.Us.DashboardType.Transportation:
                    i = new d.Vs.AthleticTransportation({
                        parentView: j,
                        currentDate: j.currentDate
                    });
                    p3.rV(i, "#list-container", true);
                    break;
                case d.Us.DashboardType.Scorelist:
                    i = new d.Vs.ScoreList({
                        parentView: j,
                        currentDate: j.currentDate
                    });
                    p3.rV(i, "#list-container", true);
                    break
            }
        }
    });
    d.Vs.AthleticList = Bb.View.extend({
        template: "dashboard/dashboard.athletics.list.template.html",
        events: {},
        initialize: function() {
            var i = this;
            i.parentView = i.options.parentView;
            i.collection = new d.Cs.AthleticsByDay({}, {
                lookupDate: b.getDateString(i.options.currentDate)
            });
            a.Us.initializeData(true);
            i.athleticPrivileges = a.Us.getAthleticPrivileges(true, false, false)
        },
        render: function(i) {
            $(i).append(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var i = this;
            i.collection.fetch({
                success: function() {
                    var j = -1,
                        k = "",
                        l = "";
                    i.collection.each(function(n) {
                        j += 1;
                        n.set("index", j);
                        if (n.get("StartTime") != k) {
                            k = n.get("StartTime");
                            n.set("newTime", true)
                        }
                        var m = b.getTimeString(b.getDate(b.getDateString(b.localDateTime()) + " " + n.get("StartTime")));
                        n.set("StartTime", (b.isMidnight(m) ? "TBA" : m));
                        l = n.get("Opponents");
                        if (l != null) {
                            switch (n.get("HomeAway")) {
                                case "Home":
                                    n.set("opponentDisplay", "<strong>vs</strong> " + l);
                                    break;
                                case "Away":
                                    n.set("opponentDisplay", "<strong>@</strong> " + l);
                                    break
                            }
                        }
                    });
                    p3.fT(i.template, function(m) {
                        i.$el.html(m({
                            events: i.collection.toJSON()
                        }));
                        $("button.btn.delete").bind("click", function(n) {
                            i.showDeleteDialog(n)
                        });
                        $("button.btn.edit").bind("click", function(n) {
                            i.showEditDialog(n)
                        });
                        $(".detail-link").bind("click", function(n) {
                            i.showDetails(n)
                        })
                    })
                },
                error: function() {
                    p3.displayError("Error loading dashboard counts")
                }
            })
        },
        showDeleteDialog: function(k) {
            var o = this,
                j, i = $(k.currentTarget),
                l = i.data("id"),
                m = i.data("team-id"),
                n = i.data("type");
            if (n == "0" || n == "r") {
                if (n == "r") {
                    j = "Are you sure you want to delete this reference to the original game date/time? "
                } else {
                    j = "Warning: Once you hit confirm there is no undo button. Are you really sure you want to delete this forever?"
                }
                p3.showConfirm(null, j, null, function() {
                    var p = new a.Ms.GameDelete({
                        ScheduleId: l
                    });
                    p.destroy({
                        error: function() {
                            p3.displayError("Error deleting game")
                        },
                        success: function() {
                            o.parentView.refreshDashboard()
                        }
                    })
                })
            } else {
                p3.showConfirm(null, "Warning: Once you hit confirm there is no undo button. Are you really sure you want to delete this forever?", null, function() {
                    var p = new a.Ms.PracticeDelete({
                        PracticeId: l,
                        TeamId: m
                    });
                    p.destroy({
                        error: function() {
                            p3.displayError("Error deleting practice")
                        },
                        success: function() {
                            o.parentView.refreshDashboard()
                        }
                    })
                })
            }
            return false
        },
        showEditDialog: function(j) {
            var n = this,
                i = $(j.currentTarget),
                l = i.data("id"),
                m = i.data("team-id"),
                k;
            a.Us.initializeNotifications(m, true);
            if (i.data("type") == 0) {
                k = a.Us.getGameDetails(l);
                a.Us.openGameScheduleDialog(l, k, m, false, n.parentView, false, n.athleticPrivileges.isLite, n.athleticPrivileges)
            } else {
                k = a.Us.getPracticeItem(l, m);
                a.Us.openEditPracticeDialog(l, k, m, false, n.parentView, false, n.athleticPrivileges)
            }
            return false
        },
        showDetails: function(j) {
            var i = $(j.currentTarget);
            d.Us.showDetails(i.data("id"), i.data("type"));
            j.preventDefault()
        }
    });
    d.Vs.Scoreboard = Bb.View.extend({
        template: "dashboard/dashboard.athletics.scoreboard.template.html",
        events: {},
        renderTemplate: function() {
            var j = this,
                i = new g.Ms.Settings();
            j.defaultLogo = "";
            i.fetch({
                async: false,
                error: function() {
                    p3.displayError("Error getting settings");
                    j.renderTemplate2()
                },
                success: function() {
                    if (i.get("LogoId") > 0) {
                        j.defaultLogo = i.get("Filename")
                    }
                    j.renderTemplate2()
                }
            })
        },
        renderTemplate2: function() {
            var i = this;
            i.collection.fetch({
                success: function() {
                    var j = 0,
                        k;
                    i.collection.each(function(m, l) {
                        m.set("startIndex", l);
                        if (m.get("ath_schedule_id") != j) {
                            j = m.get("ath_schedule_id");
                            k = [];
                            m.set("opponents", k);
                            m.set("haveOpponent", (m.get("sort_order") != null))
                        } else {
                            m.set("hide", true)
                        }
                        k.push({
                            name: m.get("name"),
                            result: m.get("result"),
                            score: m.get("score"),
                            score_vs: m.get("score_vs")
                        });
                        var n = b.getDateString(b.getDate(m.get("schedule_date")));
                        m.set("display_date", b.displayDate(n, "longDate"));
                        if (m.get("news_id") || m.get("result") || m.get("score")) {
                            m.set("edit", true)
                        }
                    });
                    p3.fT(i.template, function(l) {
                        i.$el.html(l({
                            events: i.collection.toJSON(),
                            schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                            schoolName: p3.Data.SchoolContext.get("SchoolInfo").SchoolName,
                            DefaultLogo: i.defaultLogo
                        }));
                        $(".btn-add").bind("click", function(m) {
                            i.showAddDialog(m)
                        });
                        $(".btn-edit").bind("click", function(m) {
                            i.showEditDialog(m)
                        })
                    });
                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.Isotope, function() {
                        window.setTimeout(function() {
                            $(".scoreboard-container").isotope({
                                itemSelector: ".score-container"
                            })
                        }, 200)
                    })
                },
                error: function() {
                    p3.displayError("Error loading dashboard counts")
                }
            })
        },
        initialize: function() {
            var i = this;
            i.parentView = i.options.parentView;
            i.collection = new d.Cs.AthleticScoreboard({}, {
                lookupDate: b.getDateString(i.options.currentDate)
            });
            a.Us.initializeData(true)
        },
        render: function(i) {
            $(i).append(this.el);
            this.renderTemplate()
        },
        showAddDialog: function(i) {
            var j = this;
            j.showResultDialog(false, i);
            return false
        },
        showEditDialog: function(i) {
            var j = this;
            j.showResultDialog(true, i);
            return false
        },
        showResultDialog: function(j, k) {
            var m = this,
                i = $(k.currentTarget),
                l = i.data("sectionid");
            m.options.sections = new h.Cs.Sections({}, {
                sectionId: l
            });
            m.options.sections.models[0].set({
                GroupName: i.data("team"),
                IsSelected: 1,
                SectionId: l,
                LeadSectionId: l,
                ContextLabelId: 3,
                AssociationId: 2,
                Association: "Athletics",
                Primary: true
            });
            p3.rV(new h.Vs.EditResultsView({
                gameId: i.data("id"),
                existingData: j,
                parentView: m,
                newsId: i.data("newsid"),
                siteInd: i.data("siteind")
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        }
    });
    d.Vs.ScoreList = Bb.View.extend({
        template: "dashboard/dashboard.athletics.scorelist.template.html",
        events: {
            "click .btn-add": "showAddDialog",
            "click .btn-edit": "showEditDialog"
        },
        initialize: function() {
            var i = this;
            i.parentView = i.options.parentView;
            i.collection = new d.Cs.AthleticScorelist({}, {
                lookupDate: b.getDateString(i.options.currentDate)
            });
            a.Us.initializeData(true);
            i.collection.on("reset", i.renderItems, i)
        },
        dispose: function() {
            var i = this;
            i.collection.off("reset", i.renderItems)
        },
        render: function(i) {
            var j = this;
            $(i).append(this.el);
            p3.fT(j.template, function(k) {
                j.$el.html(k({
                    schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                    schoolName: p3.Data.SchoolContext.get("SchoolInfo").SchoolName
                }));
                j.collection.fetch()
            })
        },
        renderTemplate: function() {
            this.collection.fetch()
        },
        renderItems: function() {
            var i = this;
            $("#dashboard-athletic-scorelist").html("");
            i.collection.each(function(j) {
                if (!j.get("hide")) {
                    p3.rV(new d.Vs.ScoreListItem({
                        model: j
                    }), "#dashboard-athletic-scorelist", false)
                }
            })
        },
        showAddDialog: function(i) {
            var j = this;
            j.showResultDialog(false, i);
            return false
        },
        showEditDialog: function(i) {
            var j = this;
            j.showResultDialog(true, i);
            return false
        },
        showResultDialog: function(j, k) {
            var m = this,
                i = $(k.currentTarget),
                l = i.data("sectionid") || i.data("teamId");
            m.options.sections = new h.Cs.Sections({}, {
                sectionId: l
            });
            m.options.sections.models[0].set({
                GroupName: i.data("team"),
                IsSelected: 1,
                SectionId: l,
                LeadSectionId: l,
                ContextLabelId: 3,
                AssociationId: 2,
                Association: "Athletics",
                Primary: true
            });
            p3.rV(new h.Vs.EditResultsView({
                gameId: i.data("id"),
                existingData: j,
                parentView: m,
                newsId: i.data("newsid"),
                siteInd: i.data("siteind")
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        }
    });
    d.Vs.ScoreListItem = Bb.View.extend({
        template: "dashboard/dashboard.athletics.scorelist.item.template.html",
        events: {},
        tagName: "tr",
        render: function(i) {
            var j = this;
            $(i).append(this.el);
            p3.fT(j.template, function(k) {
                j.$el.html(k({
                    item: j.model.toJSON(),
                    schoolName: p3.Data.SchoolContext.get("SchoolInfo").SchoolName,
                    canEdit: true
                }))
            })
        }
    });
    d.Vs.AthleticLocation = Bb.View.extend({
        template: "dashboard/dashboard.athletics.location.template.html",
        events: {},
        renderTemplate: function() {
            var i = this;
            i.collection.fetch({
                success: function() {
                    var j = -1,
                        k = "",
                        l = -1,
                        m = "";
                    i.collection.each(function(o) {
                        j += 1;
                        o.set("index", j);
                        if (o.get("Location") != k) {
                            k = o.get("Location");
                            o.set("newLocation", true)
                        }
                        if (o.get("LocationInd") != l) {
                            l = o.get("LocationInd");
                            if (l == 0) {
                                o.set("newLocType", "Home Venues")
                            } else {
                                o.set("newLocType", "Away Venues")
                            }
                        }
                        o.set("Location", o.get("Location"));
                        m = o.get("Opponents");
                        if (m != null) {
                            switch (o.get("HomeAway")) {
                                case "Home":
                                    o.set("opponentDisplay", "<strong>vs</strong> " + m);
                                    break;
                                case "Away":
                                    o.set("opponentDisplay", "<strong>@</strong> " + m);
                                    break
                            }
                        }
                        var n = b.getTimeString(b.getDate(b.getDateString(b.localDateTime()) + " " + o.get("StartTime")));
                        o.set("eventTime", (b.isMidnight(n) ? "TBA" : n))
                    });
                    p3.fT(i.template, function(n) {
                        i.$el.html(n({
                            events: i.collection.toJSON()
                        }));
                        $("button.btn.delete").bind("click", function(o) {
                            i.showDeleteDialog(o)
                        });
                        $("button.btn.edit").bind("click", function(o) {
                            i.showEditDialog(o)
                        });
                        $(".detail-link").bind("click", function(o) {
                            i.showDetails(o)
                        })
                    })
                },
                error: function() {
                    p3.displayError("Error loading dashboard counts")
                }
            })
        },
        initialize: function() {
            var i = this;
            i.parentView = i.options.parentView;
            i.collection = new d.Cs.AthleticLocationByDay({}, {
                lookupDate: b.getDateString(i.options.currentDate)
            });
            a.Us.initializeData(true);
            i.athleticPrivileges = a.Us.getAthleticPrivileges(true, false, false)
        },
        render: function(i) {
            $(i).append(this.el);
            this.renderTemplate()
        },
        showDeleteDialog: function(j) {
            var m = this,
                i = $(j.currentTarget),
                k = i.data("id"),
                l = i.data("team-id");
            if (i.data("type") == 0) {
                p3.showConfirm(null, "Warning: Once you hit confirm there is no undo button. Are you really sure you want to delete this forever?", null, function() {
                    var n = new a.Ms.GameDelete({
                        ScheduleId: k
                    });
                    n.destroy({
                        error: function() {
                            p3.displayError("Error deleting game")
                        },
                        success: function() {
                            m.parentView.refreshDashboard()
                        }
                    })
                })
            } else {
                p3.showConfirm(null, "Warning: Once you hit confirm there is no undo button. Are you really sure you want to delete this forever?", null, function() {
                    var n = new a.Ms.PracticeDelete({
                        PracticeId: k,
                        TeamId: l
                    });
                    n.destroy({
                        error: function() {
                            p3.displayError("Error deleting practice")
                        },
                        success: function() {
                            m.parentView.refreshDashboard()
                        }
                    })
                })
            }
            return false
        },
        showEditDialog: function(j) {
            var o = this,
                i = $(j.currentTarget),
                m = i.data("id"),
                n = i.data("team-id"),
                k, l;
            a.Us.initializeNotifications(n, true);
            if (i.data("type") == 0) {
                k = a.Us.getGameDetails(m);
                a.Us.openGameScheduleDialog(m, k, n, false, o.parentView, false, o.athleticPrivileges.isLite, o.athleticPrivileges)
            } else {
                l = a.Us.getPracticeItem(m, n);
                a.Us.openEditPracticeDialog(m, l, n, false, o.parentView, false, o.athleticPrivileges)
            }
            return false
        },
        showDetails: function(j) {
            var i = $(j.currentTarget);
            d.Us.showDetails(i.data("id"), i.data("type"));
            j.preventDefault()
        }
    });
    d.Vs.AthleticTransportation = Bb.View.extend({
        template: "dashboard/dashboard.athletics.trans.template.html",
        events: {},
        renderTemplate: function() {
            var i = this;
            i.collection.fetch({
                success: function() {
                    var l = -1,
                        m = "",
                        n = "",
                        o, j, k;
                    i.collection.each(function(p) {
                        l += 1;
                        p.set("index", l);
                        if (p.get("Transportation") != m) {
                            m = p.get("Transportation");
                            p.set("newTrans", true)
                        }
                        p.set("Transportation", p.get("Transportation"));
                        n = p.get("Opponents");
                        if (n != null) {
                            switch (p.get("HomeAway")) {
                                case "Home":
                                    p.set("opponentDisplay", "<strong>vs</strong> " + n);
                                    break;
                                case "Away":
                                    p.set("opponentDisplay", "<strong>@</strong> " + n);
                                    break
                            }
                        }
                        k = b.getTimeString(b.getDate(b.getDateString(b.localDateTime()) + " " + p.get("EventStartTime")));
                        p.set("eventTime", (b.isMidnight(k) ? "TBA" : k));
                        if (!p.get("AllDayInd")) {
                            o = b.getTimeString(b.getDate(b.getDateString(b.localDateTime()) + " " + p.get("StartTime")));
                            j = b.getTimeString(b.getDate(b.getDateString(b.localDateTime()) + " " + p.get("EndTime")));
                            p.set("reservedTime", o + " - " + j)
                        }
                    });
                    p3.fT(i.template, function(p) {
                        i.$el.html(p({
                            events: i.collection.toJSON()
                        }));
                        $("button.btn.delete").bind("click", function(q) {
                            i.showDeleteDialog(q)
                        });
                        $("button.btn.edit").bind("click", function(q) {
                            i.showEditDialog(q)
                        });
                        $(".detail-link").bind("click", function(q) {
                            i.showDetails(q)
                        })
                    })
                },
                error: function() {
                    p3.displayError("Error loading dashboard counts")
                }
            })
        },
        initialize: function() {
            var i = this;
            i.parentView = i.options.parentView;
            i.collection = new d.Cs.AthleticTransByDay({}, {
                lookupDate: b.getDateString(i.options.currentDate)
            });
            a.Us.initializeData(true);
            i.athleticPrivileges = a.Us.getAthleticPrivileges(true, false, false)
        },
        render: function(i) {
            $(i).append(this.el);
            this.renderTemplate()
        },
        showDeleteDialog: function(k) {
            var n = this,
                i = $(k.currentTarget),
                l = i.data("id"),
                m = i.data("team-id"),
                j;
            if (i.data("type") == 0) {
                p3.showConfirm(null, "Warning: Once you hit confirm there is no undo button. Are you really sure you want to delete this forever?", null, function() {
                    j = new a.Ms.GameDelete({
                        ScheduleId: l
                    });
                    j.destroy({
                        error: function() {
                            p3.displayError("Error deleting game")
                        },
                        success: function() {
                            n.parentView.refreshDashboard()
                        }
                    })
                })
            } else {
                p3.showConfirm(null, "Warning: Once you hit confirm there is no undo button. Are you really sure you want to delete this forever?", null, function() {
                    j = new a.Ms.PracticeDelete({
                        PracticeId: l,
                        TeamId: m
                    });
                    j.destroy({
                        error: function() {
                            p3.displayError("Error deleting practice")
                        },
                        success: function() {
                            n.parentView.refreshDashboard()
                        }
                    })
                })
            }
            return false
        },
        showEditDialog: function(j) {
            var o = this,
                i = $(j.currentTarget),
                m = i.data("id"),
                n = i.data("team-id"),
                k, l;
            a.Us.initializeNotifications(n, true);
            if (i.data("type") == 0) {
                k = a.Us.getGameDetails(m);
                a.Us.openGameScheduleDialog(m, k, n, false, o.parentView, false, o.athleticPrivileges.isLite, o.athleticPrivileges)
            } else {
                l = a.Us.getPracticeItem(m, n);
                a.Us.openEditPracticeDialog(m, l, n, false, o.parentView, false, o.athleticPrivileges)
            }
            return false
        },
        showDetails: function(j) {
            var i = $(j.currentTarget);
            d.Us.showDetails(i.data("id"), i.data("type"));
            j.preventDefault()
        }
    });
    d.Us.DashboardType = {
        Event: 0,
        Location: 1,
        Transportation: 2,
        Scoreboard: 3,
        Scorelist: 4
    };
    d.Us.showDetails = function(i, k) {
        var j;
        if (k == 0) {
            j = a.Us.getGameDetails(i);
            p3.rV(new a.Vs.GameScheduleDetailsView({
                scheduleItem: j.toJSON()
            }), p3.Layout.Containers.Modal, true)
        } else {
            j = a.Us.getPracticeDetails(i);
            p3.rV(new a.Vs.PracticeDetailsView({
                scheduleItem: j.toJSON()
            }), p3.Layout.Containers.Modal, true)
        }
        p3.showModal(p3.Layout.Containers.Modal)
    };
    p3.router().route("dashboard/onCampus", "dashboard", function() {
        p3.renderMainPage(new d.Vs.LayoutView(), true)
    });
    p3.router().route("AthleticsDashboard/:page/:date", "AthleticsDashboard", function(l, j) {
        var k, i, m;
        switch (l) {
            case "Events":
                k = d.Us.DashboardType.Event;
                break;
            case "Locations":
                k = d.Us.DashboardType.Location;
                break;
            case "Transportation":
                k = d.Us.DashboardType.Transportation;
                break;
            case "Scoreboard":
                k = d.Us.DashboardType.Scoreboard;
                break;
            case "Scorelist":
                k = d.Us.DashboardType.Scorelist;
                break
        }
        if (j == "today") {
            i = b.localDateTime()
        } else {
            m = j.split("-");
            i = new Date(m[2], m[0] - 1, m[1])
        }
        p3.renderMainPage(new d.Vs.AthleticsDashboardView({
            currentDate: i,
            listType: k || d.Us.DashboardType.Event
        }), true)
    })
}(p3.module("dashboardoncourse")));
(function(f) {
    var c = p3.module("shared/base"),
        a = p3.module("LMS/assignment"),
        e = p3.Us.Culture,
        b = p3.module("LMS/Shared/assignmentdetail"),
        h = p3.module("shared/fileselection"),
        g = p3.module("cms/shared/download"),
        i = p3.module("gradebook"),
        d = p3.module("LMS/classpage");
    f.Ms.DiscussionStatus = Bbm.extend({
        url: function() {
            return aP + "DataDirect/DiscussionStatusGet/?format=json&assignmentIndexId=" + this.get("assignmentIndexId")
        }
    });
    f.Ms.DiscussionItem = Bbm.extend({
        idAttribute: "MessageId",
        url: function() {
            return aP
        }
    });
    f.Cs.DiscussionItem = Bbc.extend({
        model: f.Ms.DiscussionItem,
        initialize: function(j, k) {
            this.contentIndexId = k.contentIndexId || 0;
            this.lastDate = k.lastDate || "";
            this.contentId = k.contentId || 58;
            this.sectionView = k.sectionView || false;
            this.studentId = k.studentId || 0;
            this.assignment = k.assignment
        },
        url: function() {
            return aP + "discussionitem/discussionitemsget/?format=json&contentIndexId=" + this.contentIndexId + "&viewDate=" + this.lastDate + "&contentId=" + this.contentId + "&userId=" + this.studentId + "&sectionView=" + this.sectionView
        }
    });
    f.Cs.DiscussionItemRefresh = c.Cs.Stream.extend({
        model: f.Ms.DiscussionItem,
        initialize: function(j, k) {
            this.contentIndexId = k.contentIndexId || 0;
            this.lastDate = k.lastDate || "";
            this.contentId = k.contentId || 0;
            this.sectionView = k.sectionView || false;
            this.studentId = k.studentId || 0;
            this.count = 0
        },
        add: function(r, s) {
            var m = [],
                k, o, l, p, q, n, u, t;
            if (r.length) {
                l = 0;
                p = _.max(r, function(j) {
                    return j.ModifiedDateTicks
                });
                if (p && p.ModifiedDateTicks) {
                    this.lastDate = p.ModifiedDateTicks
                }
                t = function(j, v) {
                    if (v.options.parentMessageId == q.MessageId) {
                        v.options.item = new f.Ms.DiscussionItem(q);
                        v.renderTemplate();
                        if (v.childMessages && v.childMessages.length > 0) {
                            for (k = 0; k < v.childMessages.length; k++) {
                                n = new f.Vs.DiscussionItem({
                                    assignment: v.options.assignment,
                                    staus: v.options.status,
                                    item: v.childMessages[k],
                                    isChild: true,
                                    parentMessageId: q.MessageId,
                                    assignmentIndexId: v.options.assignmentIndexId
                                });
                                p3.rV(n, "#child-messages-" + q.MessageId, false)
                            }
                        }
                    } else {
                        if (v.childMessages && v.childMessages.length > 0) {
                            for (o = 0; o < v.childMessages.length; o++) {
                                if (v.childMessages[o].get("MessageId") == q.MessageId) {
                                    u = new f.Ms.DiscussionItem(q);
                                    v.childMessages[o] = u;
                                    $("#child-messages-" + v.options.parentMessageId).data("views")[o].options.item = u;
                                    $("#child-messages-" + v.options.parentMessageId).data("views")[o].renderTemplate();
                                    break
                                }
                            }
                        }
                    }
                };
                for (k = 0; k < r.length; k++) {
                    q = r[k];
                    switch (q.AuditAction) {
                        case "D":
                            $('.message-display[data-id="' + q.MessageId + '"]').remove();
                            break;
                        case "I":
                            if (_.isUndefined(this.get(q.MessageId))) {
                                l += 1;
                                m.push(q)
                            }
                            break;
                        case "U":
                            $.each($("#message-region").data("views"), t);
                            break;
                        default:
                            break
                    }
                }
                this.count = this.count + l;
                if (l > 0) {
                    $("#messageLoadButton").html("(  <strong>" + this.count + "</strong> ) Load New Content");
                    $("#messageLoadRegion").show()
                }
            }
            return Bbc.prototype.add.call(this, m, s)
        },
        url: function() {
            return aP + "discussionitem/discussionitemsrefresh/?format=json&contentIndexId=" + this.contentIndexId + "&viewDate=" + this.lastDate + "&contentId=" + this.contentId + "&userId=" + this.studentId + "&sectionView=" + this.sectionView
        }
    });
    f.Ms.DiscussionItemCreate = Bbm.extend({
        idAttribute: "MessageId",
        url: function() {
            return aP + "discussionitem/create/?format=json"
        }
    });
    f.Ms.DiscussionItemUpdate = Bbm.extend({
        idAttribute: "MessageId",
        url: function() {
            return aP + "discussionitem/update/?format=json"
        }
    });
    f.Ms.DiscussionItemDelete = Bbm.extend({
        idAttribute: "Id",
        url: function() {
            return aP + "discussionitem/delete/" + this.get("Id") + "/?format=json&contextLabelId=5&contextValue=" + this.get("contextValue")
        }
    });
    f.Data = {};
    f.Vs.StudentDiscussion = Bb.View.extend({
        template: "discussion/discussion.student.detail.template.html",
        initialize: function(j) {
            this.Containers = {}
        },
        events: {
            "click #BackButton": "moveBack"
        },
        render: function(j) {
            var k = this;
            $(j).html(k.el);
            k.renderTemplate()
        },
        renderTemplate: function() {
            var t = this,
                m, l = "",
                p, q, r, j, k = "",
                u, s, n = _.find(t.options.assignment.get("SectionLinks"), function(v) {
                    return v.AssignmentIndexId == t.options.assignmentIndexId
                }),
                o = new f.Ms.DiscussionStatus({
                    assignmentIndexId: t.options.assignmentIndexId
                });
            o.fetch({
                error: function() {
                    p3.displayError("Error loading discussion status")
                },
                success: function(v, w) {
                    switch (w[0].discussion_status) {
                        case -1:
                            m = "#d3f1fb";
                            j = f.Us.getDayDifference(e.localDateTime(), e.getDate(n.DueDate));
                            switch (j) {
                                case 0:
                                    l = "Due Today";
                                    break;
                                case 1:
                                    l = "Due in 1 Day";
                                    break;
                                default:
                                    l = "Due in " + j + " Days";
                                    break
                            }
                            p = "#2d9bbb";
                            q = "p3icon-socialMedia";
                            r = "To Do";
                            u = "60px";
                            break;
                        case 1:
                            m = "#dbf3db";
                            s = e.getDate(w[0].first_post);
                            l = "submitted on " + f.Us.formatDateTime(s);
                            p = "#50a94f";
                            q = "p3icon-check";
                            r = "Completed";
                            u = "85px";
                            break;
                        case 2:
                            m = "#eed3d7";
                            j = f.Us.getDayDifference(e.localDateTime(), e.getDate(n.DueDate));
                            switch (j) {
                                case 0:
                                    l = "Due Today";
                                    break;
                                case 1:
                                    l = "Due 1 Day Ago";
                                    break;
                                default:
                                    l = "Due " + j + " Days Ago";
                                    break
                            }
                            p = "#b94a48";
                            q = "p3icon-warning";
                            r = "Overdue";
                            u = "85px";
                            break;
                        case 4:
                            m = "#dbf3db";
                            p = "#50a94f";
                            q = "p3icon-ok";
                            if (w[0].letter) {
                                k = w[0].letter
                            } else {
                                if (w[0].pointsEarned) {
                                    k = w[0].pointsEarned + " of " + t.options.assignment.get("MaxPoints")
                                } else {
                                    if (w[0].points_earned) {
                                        k = w[0].points_earned + " of " + t.options.assignment.get("MaxPoints")
                                    }
                                }
                            }
                            r = "Graded: " + k;
                            u = "140px";
                            break;
                        case 5:
                            m = "#e9e9e9";
                            j = f.Us.getDayDifference(e.localDateTime(), e.getDate(n.DueDate));
                            switch (j) {
                                case 0:
                                    l = "Available Today";
                                    break;
                                case 1:
                                    l = "Available Tomorrow";
                                    break;
                                default:
                                    l = "Available in " + j + " Days";
                                    break
                            }
                            p = "#e1e1e1";
                            q = "p3icon-socialMedia";
                            r = "Upcoming";
                            u = "85px";
                            break
                    }
                    p3.fT(t.template, function(x) {
                        t.$el.html(x({
                            assignment: t.options.assignment.toJSON(),
                            adate: n.AssignmentDate,
                            ddate: n.DueDate,
                            sectionName: n.Section.Name,
                            regionBackcolor: m,
                            message: l,
                            statusBackcolor: p,
                            statusIcon: q,
                            statusText: r,
                            width: u
                        }));
                        t.Containers.DiscussionDetails = $("#discussion-details-container");
                        t.renderDetail(w[0])
                    })
                }
            })
        },
        moveBack: function(j) {
            window.history.go(-1)
        },
        renderDetail: function(k) {
            var j = new f.Vs.DiscussionDetail({
                assignment: this.options.assignment,
                status: k,
                assignmentIndexId: this.options.assignmentIndexId,
                sectionDetail: false,
                studentId: 0
            });
            p3.rV(j, this.Containers.DiscussionDetails, true)
        }
    });
    f.Vs.DiscussionDetail = Bb.View.extend({
        className: "clearfix",
        template: "discussion/discussion.detail.template.html",
        initialize: function(l) {
            this.Containers = {};
            var j = this.options.assignment.get("DownloadItems"),
                k;
            for (k = 0; k < j.length; k++) {
                j[k].isImage = f.Us.isImage(j[k].FileName)
            }
        },
        dispose: function() {
            $(window).unbind("scroll");
            this.stopStream()
        },
        events: {
            "click #original-response-button": "showResponseRegion",
            "click #messageLoadButton": "displayInsertedMessages"
        },
        render: function(j) {
            var k = this;
            $(j).html(k.el);
            k.renderTemplate()
        },
        renderTemplate: function() {
            var n = this,
                j, k = "",
                m, l;
            if (n.options.viewOnly) {
                j = false
            } else {
                if (n.options.sectionDetail) {
                    j = true
                } else {
                    j = n.options.status.discussion_status != 5
                }
            }
            p3.fT(n.template, function(o) {
                n.$el.html(o({
                    assignment: n.options.assignment.toJSON(),
                    status: n.options.status,
                    schoolId: p3.Data.SchoolContext.attributes.SchoolInfo.SchoolId,
                    canPost: j,
                    studentId: n.options.studentId
                }));
                if (!n.options.viewOnly) {
                    n.Containers.ResponseRegion = $("#original-response-region");
                    n.Containers.MessagesRegion = $("#message-region");
                    if (n.options.sectionDetail || n.options.assignment.get("AlwaysShowDiscussion") || n.options.status.message_count > 0) {
                        n.renderMessages();
                        n.messagesRendered = true
                    } else {
                        $("#message-region").html('<h5 class="noShow" style="text-align:center; margin:15px 20px 0px 10px; font-weight:400">You will not be able to view or respond to other classmates responses until you have added a response of your own.</h5>');
                        n.messagesRendered = false
                    }
                }
            });
            if (n.options.studentId <= 0) {
                m = new Date();
                if (p3.Data.SchoolContext.attributes.SchoolInfo.HoursFromCentral != 0) {
                    m = new Date(m.setHours(m.getHours() + p3.Data.SchoolContext.attributes.SchoolInfo.HoursFromCentral))
                }
                l = m.getTime() - (m.getTimezoneOffset() * 60000);
                k = (l * 10000) + 6.21355968e+17;
                n.refreshCollection = new f.Cs.DiscussionItemRefresh({}, {
                    contentIndexId: n.options.assignmentIndexId,
                    contentId: 58,
                    sectionView: n.options.sectionDetail,
                    studentId: n.options.studentId,
                    lastDate: k,
                    assignment: n.options.assignment
                });
                f.Data.refreshCollection = n.refreshCollection;
                n.startStream()
            }
        },
        showResponseRegion: function(j) {
            var l = this,
                k = new f.Vs.DiscussionPost({
                    assignment: l.options.assignment,
                    staus: l.options.status,
                    messageId: 0,
                    parentId: 0,
                    assignmentIndexId: l.options.assignmentIndexId
                });
            p3.rV(k, l.Containers.ResponseRegion, true);
            k.on("messageCreated", function(n) {
                if ($("#post-count").length > 0) {
                    n.set("OwnerPost", true)
                }
                $("#original-response-region").html('<div style="margin: 10px 10px 5px 90px; cursor: pointer;color: #0088cc;" id="original-response-button"><h3><i class="p3icon-comment iconSmall p3Blue"></i> &nbsp; add new response</h3></div>');
                if (l.messagesRendered) {
                    var m = new f.Vs.DiscussionItem({
                        assignment: l.options.assignment,
                        staus: l.options.status,
                        item: n,
                        isChild: false,
                        parentMessageId: 0,
                        prepend: true,
                        assignmentIndexId: l.options.assignmentIndexId,
                        viewOnly: l.options.viewOnly
                    });
                    p3.rV(m, l.Containers.MessagesRegion, false)
                } else {
                    $(l.Containers.MessagesRegion).html("");
                    l.messagesRendered = true;
                    l.renderMessages()
                }
                if (l.options.sectionDetail) {
                    f.Us.showPostTotal()
                }
            })
        },
        renderMessages: function() {
            var n = this,
                l = 0,
                j = false,
                m, k = new f.Cs.DiscussionItem({}, {
                    contentIndexId: n.options.assignmentIndexId,
                    contentId: 58,
                    sectionView: n.options.sectionDetail,
                    studentId: n.options.studentId
                });
            k.fetch({
                success: function() {
                    if (k.length == 0 && n.options.studentId > 0) {
                        $(n.Containers.MessagesRegion).html('<div align="center" style="padding:10px"><i class="p3icon-trash"></i><h3>This student has not submitted a response.</h3></div>')
                    } else {
                        k.each(function(o) {
                            if (o.get("ChildRank") == 0) {
                                j = false;
                                l = o.get("MessageId")
                            } else {
                                j = true
                            }
                            var p = new f.Vs.DiscussionItem({
                                assignment: n.options.assignment,
                                staus: n.options.status,
                                item: o,
                                isChild: j,
                                parentMessageId: l,
                                assignmentIndexId: n.options.assignmentIndexId,
                                viewOnly: n.options.viewOnly
                            });
                            if (j) {
                                m.childMessages.push(o);
                                p.parentView = m;
                                window.setTimeout(function(q) {
                                    p3.rV(p, q, false);
                                    if (n.options.sectionDetail) {
                                        f.Us.showPostTotal()
                                    }
                                }, 1000, "#child-messages-" + l)
                            } else {
                                p3.rV(p, $(n.Containers.MessagesRegion), false);
                                m = p;
                                m.childMessages = []
                            }
                        })
                    }
                    if (n.options.sectionDetail) {
                        f.Us.showPostTotal()
                    }
                },
                error: function() {
                    p3.displayError("Error loading discussion thread")
                }
            })
        },
        stopStream: function() {
            var j = this;
            if (j.refreshCollection) {
                j.refreshCollection.unstream()
            }
        },
        startStream: function() {
            var j = this;
            j.refreshCollection.stream({
                interval: 60000,
                add: true
            })
        },
        displayInsertedMessages: function() {
            var o = this,
                j, l, m, k, n;
            $("#messageLoadRegion").hide();
            $(".added-note").removeClass("added-note");
            o.refreshCollection.count = 0;
            f.Us.showPostTotal();
            n = function(p, q) {
                if (q.options.parentMessageId == m) {
                    q.childMessages.push(l)
                }
            };
            for (j = 0; j < o.refreshCollection.models.length; j++) {
                l = o.refreshCollection.models[j];
                $('.message-display[data-id="' + l.get("MessageId") + '"]').remove();
                m = l.get("ParentMessageId");
                k = new f.Vs.DiscussionItem({
                    assignment: o.options.assignment,
                    staus: o.options.status,
                    item: l,
                    isChild: m > 0,
                    parentMessageId: m,
                    assignmentIndexId: o.options.assignmentIndexId,
                    inserted: true,
                    prepend: m == 0
                });
                if (m > 0) {
                    p3.rV(k, "#child-messages-" + m, false);
                    $.each($("#message-region").data("views"), n)
                } else {
                    p3.rV(k, $(o.Containers.MessagesRegion), false)
                }
            }
            o.refreshCollection.remove(o.refreshCollection.models);
            if (o.options.sectionDetail) {
                f.Data.roster.fetch({
                    data: {
                        aiid: o.options.assignmentIndexId,
                        viewerId: p3.Data.Context.get("UserInfo").UserId
                    },
                    error: function(p, q) {
                        p3.displayError("Error loading Roster.")
                    }
                })
            }
            return false
        }
    });
    f.Vs.DiscussionItem = Bb.View.extend({
        template: "discussion/discussion.item.template.html",
        initialize: function(j) {
            this.Containers = {}
        },
        events: {
            "click .add-child-response-btn": "showResponseRegion",
            "click .message-edit-btn": "editMessage",
            "click .message-delete-btn": "deleteMessage",
            "click .message-hide-btn": "hideMessage",
            "click .message-show-btn": "showMessage"
        },
        render: function(j) {
            var k = this;
            if (k.options.prepend) {
                $(j).prepend(k.el)
            } else {
                $(j).append(k.el)
            }
            k.renderTemplate()
        },
        renderTemplate: function() {
            var q = this,
                o, n = true,
                l = false,
                k = false,
                m = false,
                p = p3.Data.Context.getSelectedPersona().Id,
                j;
            if (q.options.viewOnly) {
                l = false;
                m = false;
                k = false
            } else {
                if (p3.Data.Context.get("UserInfo").UserId == q.options.item.get("UserId")) {
                    l = true;
                    k = p == 3
                }
                if (p == 3) {
                    m = true;
                    k = true
                }
            }
            j = q.options.item.get("Attachments");
            if (j && j.length > 0) {
                for (o = 0; o < j.length; o++) {
                    j[o].isImage = f.Us.isImage(j[o].AttachmentFilename)
                }
            }
            p3.fT(q.template, function(r) {
                q.$el.html(r({
                    message: q.options.item.toJSON(),
                    schoolId: p3.Data.SchoolContext.attributes.SchoolInfo.SchoolId,
                    canPost: n,
                    isChild: q.options.isChild,
                    canEdit: l,
                    canDelete: k,
                    canHide: m,
                    parentId: q.options.parentMessageId,
                    inserted: q.options.inserted,
                    viewOnly: q.options.viewOnly,
                    ApprovalInd: q.options.item.get("ApprovalInd")
                }));
                q.Containers.ResponseRegion = q.$(".response-region")
            })
        },
        showResponseRegion: function(j) {
            var m = this,
                k = $(j.currentTarget).data("id"),
                l = new f.Vs.DiscussionPost({
                    assignment: m.options.assignment,
                    staus: m.options.status,
                    messageId: 0,
                    parentId: k,
                    assignmentIndexId: m.options.assignmentIndexId
                });
            p3.rV(l, "#child-response-container-" + k, true);
            l.on("messageCreated", function(o) {
                if ($("#post-count").length > 0) {
                    o.set("OwnerPost", true)
                }
                $("#child-response-container-" + k).html('<div class="feed muted" style="margin-left: 8px; margin-top: 3px; margin-bottom: 3px;"><a href="#" class="add-child-response-btn" data-id="' + k + '"><i class="p3icon-comment iconSmall"></i> &nbsp; add response</a></div>');
                var n = new f.Vs.DiscussionItem({
                    assignment: m.options.assignment,
                    item: o,
                    isChild: true,
                    parentMessageId: k,
                    prepend: false,
                    assignmentIndexId: m.options.assignmentIndexId,
                    viewOnly: m.options.viewOnly
                });
                p3.rV(n, $("#child-messages-" + k), false);
                if (m.childMessages) {
                    m.childMessages.push(o)
                }
                f.Us.showPostTotal()
            });
            return false
        },
        editMessage: function(k) {
            var q = this,
                j = $(k.currentTarget),
                n = j.data("id"),
                o = j.data("parentid"),
                l, m, p = new f.Vs.DiscussionPost({
                    assignment: q.options.assignment,
                    staus: q.options.status,
                    messageId: n,
                    parentId: o,
                    message: q.options.item,
                    assignmentIndexId: q.options.assignmentIndexId
                });
            q.$(".message-display").hide();
            q.$(".message-edit-container").show();
            p3.rV(p, q.$(".message-edit-container"), true);
            p.on("messageUpdated", function(r) {
                q.options.item = r;
                q.renderTemplate();
                q.$(".message-display").show();
                q.$(".message-edit-container").hide().html("");
                if (q.childMessages && q.childMessages.length > 0) {
                    for (l = 0; l < q.childMessages.length; l++) {
                        m = new f.Vs.DiscussionItem({
                            assignment: q.options.assignment,
                            staus: q.options.status,
                            item: q.childMessages[l],
                            isChild: true,
                            parentMessageId: n,
                            assignmentIndexId: q.options.assignmentIndexId,
                            viewOnly: this.options.viewOnly
                        });
                        p3.rV(m, "#child-messages-" + n, false)
                    }
                }
                if (q.options.isChild && q.parentView) {
                    for (l = 0; l < q.parentView.childMessages.length; l++) {
                        if (q.parentView.childMessages[l].get("MessageId") == n) {
                            q.parentView.childMessages[l] = r;
                            break
                        }
                    }
                }
            });
            p.on("editCancel", function() {
                q.$(".message-display").show();
                q.$(".message-edit-container").hide().html("")
            });
            k.stopPropagation();
            k.preventDefault()
        },
        deleteMessage: function(l) {
            var o = this,
                j = $(l.currentTarget),
                n = j.data("id"),
                k, m;
            p3.showConfirm(null, "Are you sure you want to delete this?", null, function() {
                k = new f.Ms.DiscussionItemDelete({
                    Id: n,
                    contextLabelId: 5,
                    contextValue: o.options.assignment.get("AssignmentId")
                });
                k.destroy({
                    error: function() {
                        p3.displayError("Error deleting message")
                    },
                    success: function() {
                        j.parent().remove();
                        f.Us.showPostTotal();
                        f.Data.roster.fetch({
                            data: {
                                aiid: o.options.assignmentIndexId,
                                viewerId: p3.Data.Context.get("UserInfo").UserId
                            },
                            error: function(p, q) {
                                p3.displayError("Error loading Roster.")
                            }
                        });
                        if (o.parentView && o.parentView.childMessages) {
                            for (m = 0; m < o.parentView.childMessages; m++) {
                                if (o.parentView.childMessages[m].get("MessageId") == n) {
                                    o.parentView.childMessages.splice(m, 1);
                                    break
                                }
                            }
                        }
                    }
                })
            });
            l.stopPropagation();
            l.preventDefault()
        },
        hideMessage: function(m) {
            var o = this,
                l = $(m.currentTarget),
                j, k = $("#child-response-container-" + m.currentTarget.dataset.id),
                n;
            l.removeClass("message-hide-btn").addClass("message-show-btn badge").html('Response is Hidden&nbsp;<i class="p3icon-reviewReady iconColor"></i>');
            o.setMessageVisibility(false, o.options.item);
            for (n = 0; n < o.childMessages.length; n++) {
                j = $('.message-hide-btn[data-id="' + o.childMessages[n].get("MessageId") + '"]');
                if (j.length) {
                    j.removeClass("message-hide-btn").addClass("message-show-btn badge").html('Response is Hidden&nbsp;<i class="p3icon-reviewReady iconColor"></i>');
                    o.setMessageVisibility(false, o.childMessages[n])
                }
            }
            if (k.length) {
                k.hide()
            }
            m.stopPropagation()
        },
        showMessage: function(l) {
            var m = this,
                k = $(l.currentTarget),
                j = $("#child-response-container-" + l.currentTarget.dataset.id);
            if (!m.parentView || m.parentView.options.item.get("ApprovalInd")) {
                k.removeClass("message-show-btn badge").addClass("message-hide-btn").html('<i class="p3icon-reviewReady"></i>');
                m.setMessageVisibility(true, m.options.item);
                if (j.length) {
                    j.show()
                }
            }
            l.stopPropagation()
        },
        setMessageVisibility: function(l, j) {
            var n = this,
                k;
            k = new f.Ms.DiscussionItemUpdate({
                MessageId: j.get("MessageId"),
                Message: j.get("Message"),
                ParentMessageId: j.get("ParentMessageId"),
                ContextLabelId: 5,
                ContextValue: n.options.assignment.get("AssignmentId"),
                Attachments: j.get("Attachments"),
                ApprovalInd: l
            });
            k.save({}, {
                success: function() {
                    n.options.item.set({
                        ApprovalInd: l
                    })
                },
                error: function() {
                    p3.displayError("Error saving response")
                }
            })
        }
    });
    f.Vs.DiscussionPost = Bb.View.extend({
        template: "discussion/discussion.post.template.html",
        initialize: function(j) {
            this.Containers = {};
            _.bindAll(this, "doAttachFiles")
        },
        events: {
            "click .post-message-btn": "saveDiscussionItem",
            "click .attach-files-btn": "launchAttachmentBrowser",
            "click .attach-delete": "deleteAttachment",
            "click .embed-text-btn": "openEmbedDialog",
            "click .embed-delete": "deleteEmbed",
            "click .response-close-btn": "closeResponse"
        },
        render: function(j) {
            var k = this;
            $(j).html(k.el);
            k.renderTemplate()
        },
        renderTemplate: function() {
            var m = this,
                k = p3.Data.Context.get("UserInfo"),
                l, j = "";
            if (k.ProfilePhoto && k.ProfilePhoto.ThumbFilenameUrl) {
                l = k.ProfilePhoto.ThumbFilenameUrl
            } else {
                l = "/app/content/images/user.png"
            }
            if (m.options.messageId == 0) {
                m.attachments = [];
                m.embedId = 0;
                m.embedText = ""
            } else {
                m.attachments = m.options.message.get("Attachments");
                if (m.attachments == null) {
                    m.attachments = []
                }
                m.embedId = m.options.message.get("EmbedId");
                m.embedText = m.options.message.get("EmbedText");
                m.embedTitle = m.options.message.get("EmbedTitle");
                j = m.options.message.toJSON()
            }
            p3.fT(m.template, function(o) {
                m.$el.html(o({
                    userName: k.FirstName + " " + k.LastName,
                    userPhoto: l,
                    messageId: m.options.messageId,
                    parentId: m.options.parentId,
                    message: j,
                    allowAttach: m.options.assignment.get("AllowDiscussionAttach")
                }));
                var n = "response-text";
                if (m.options.parentId > 0) {
                    n += "_" + m.options.parentId
                }
                p3.showHtmlEditor(n, p3.Us.Enum.HtmlEditorCategories.FULL, false, undefined, p3.Us.Enum.HtmlEditorEncoding.NUMERIC)
            })
        },
        saveDiscussionItem: function(k) {
            var t = this,
                n = t.options.messageId,
                o = t.options.parentId,
                j = t.options.assignment.get("AssignmentId"),
                r, p, s, m = "response-text",
                l, q;
            if (t.options.parentId > 0) {
                m += "_" + t.options.parentId
            }
            l = tinyMCE.get(m);
            l.save();
            r = f.Us.removeWordMarkup($("#" + m).val(), true);
            if (t.embedId > 0 || t.embedText.length > 0) {
                if (t.embedText.length == 0) {
                    t.attachments.push({
                        AttachmentType: 1,
                        DeleteInd: true,
                        ContentItemId: t.embedId
                    })
                } else {
                    t.attachments.push({
                        AttachmentType: 1,
                        DeleteInd: false,
                        ContentItemId: t.embedId,
                        AttachmentDescription: t.embedTitle,
                        AttachmentText: t.embedText
                    })
                }
            }
            if (n == 0) {
                q = _.find(t.options.assignment.get("SectionLinks"), function(u) {
                    return u.AssignmentIndexId == t.options.assignmentIndexId
                });
                p = new f.Ms.DiscussionItemCreate({
                    MessageId: n,
                    Message: r,
                    ParentMessageId: o,
                    ContextLabelId: 5,
                    ContextValue: j,
                    Attachments: t.attachments,
                    ApprovalInd: true,
                    SectionId: q.SectionId
                });
                if (t.options.staus && t.options.staus.message_count == 0) {
                    s = true
                }
            } else {
                p = new f.Ms.DiscussionItemUpdate({
                    MessageId: n,
                    Message: r,
                    ParentMessageId: o,
                    ContextLabelId: 5,
                    ContextValue: j,
                    Attachments: t.attachments,
                    ApprovalInd: t.options.message.get("ApprovalInd")
                })
            }
            p.save({}, {
                error: function() {
                    p3.displayError("Error saving response")
                },
                success: function(u, v) {
                    if (!n) {
                        t.trigger("messageCreated", u)
                    } else {
                        t.trigger("messageUpdated", u)
                    }
                    if (s) {
                        $("#status-region").css("background-color", "#dbf3db").html('<h5 class="pull-right" style="padding:0px 15px 0px 8px; font-weight:400; margin:6px 0px 0px 0px">submitted on ' + f.Us.formatDateTime(e.getDate(u.get("MessageDate"))) + '</h5><div style="width:90px; background-color:#50a94f;padding:5px"><h5 class="p3formWhite"><i class="p3icon-check iconColor"></i> Completed</h5></div>')
                    }
                }
            })
        },
        launchAttachmentBrowser: function(j) {
            var k = new h.Vs.AttachFilesModal({
                googleDriveAllowed: true,
                googleLinksPermitted: false,
                permittedFileCount: this.options.assignment.get("DropboxNumFiles") > 0 ? this.options.assignment.get("DropboxNumFiles") : 10,
                visibleFileLimit: false,
                receiveFilesCallback: this.doAttachFiles
            });
            p3.rV(k, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            p3.initModalHeightTimer(p3.Layout.Containers.Modal)
        },
        doAttachFiles: function(j) {
            var k = this;
            j.each(function(n) {
                var o = n.getTempFileName(),
                    m, l;
                if (!p3.Data.fileTypes) {
                    m = new g.Cs.FileTypes({}, {});
                    p3.Data.fileTypes = m;
                    m.fetch({
                        async: false,
                        error: function() {
                            p3.displayError("Error loading filetypes")
                        }
                    })
                }
                l = p3.Data.fileTypes.get(o.substring(o.lastIndexOf(".")).toLowerCase());
                if (l) {
                    k.attachments.push({
                        AttachmentType: 0,
                        DeleteInd: false,
                        ContentItemId: 0,
                        AttachmentDescription: n.getFileName(),
                        AttachmentFilename: n.getFileName(),
                        Tempfilename: o,
                        AttachmentFileTypeId: l.get("fileTypeId")
                    });
                    if (f.Us.isImage(o)) {
                        $("#attached-files-region").append('<div class="attached-file" style="margin-top:5px;"><img style="max-height:200px;" src="/ftpimages/pdTemp/' + o + '"><button class="btn btn-default attach-delete" data-attachid="0" data-attachtemp="' + o + '" style="margin-left:5px;"><i class="p3icon-delete"></i></button></div>')
                    } else {
                        $("#attached-files-region").append('<div class="attached-file" style="margin-top:5px;"><a target="_blank" href="/ftpimages/pdTemp/' + o + '">' + n.get("fileName") + '</a><button class="btn btn-default attach-delete" data-attachid="0" data-attachtemp="' + o + '" style="margin-left:5px;"><i class="p3icon-delete"></i></button></div>')
                    }
                }
            })
        },
        deleteAttachment: function(k) {
            var o = this,
                j = $(k.currentTarget),
                m = j.data("attachid"),
                l, n;
            if (m > 0) {
                for (l = 0; l < o.attachments.length; l++) {
                    if (o.attachments[l].ContentItemId == m) {
                        o.attachments[l].DeleteInd = true;
                        break
                    }
                }
                j.parent().html('<div class="alert alert-error">This attachment will be deleted when the response is posted.</div>')
            } else {
                n = j.data("attachtemp");
                for (l = 0; l < o.attachments.length; l++) {
                    if (o.attachments[l].Tempfilename == n) {
                        o.attachments.splice(l, 1);
                        break
                    }
                }
                j.parent().remove()
            }
        },
        openEmbedDialog: function(j) {
            var l = this,
                k = new f.Vs.EmbedEditView({
                    title: l.embedTitle,
                    text: l.embedText,
                    embedId: l.embedId
                });
            p3.rV(k, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            k.on("embedSaved", function(m, n) {
                l.embedTitle = n;
                l.embedText = m;
                l.$("#embed-region").html('<div class="pull-left" style="margin-right:5px;"><button class="btn btn-default embed-delete"><i class="p3icon-delete"></i></button></div>' + m)
            })
        },
        deleteEmbed: function(j) {
            var k = this;
            if (k.embedId > 0) {
                k.$("#embed-region").html('<div class="alert alert-error">The embed will be deleted when the response is posted.</div>')
            } else {
                k.$("#embed-region").html("")
            }
            k.embedText = "";
            k.embedTitle = ""
        },
        closeResponse: function(j) {
            var k = this;
            if (k.options.messageId > 0) {
                k.trigger("editCancel")
            } else {
                if (k.options.parentId > 0) {
                    $("#child-response-container-" + k.options.parentId).html('<div class="feed muted" style="margin-left: 8px; margin-top: 3px; margin-bottom: 3px;"><a href="#" class="add-child-response-btn" data-id="' + k.options.parentId + '"><i class="p3icon-comment iconSmall"></i> &nbsp; add response</a></div>')
                } else {
                    $("#original-response-region").html('<div style="margin: 10px 10px 5px 90px; cursor: pointer;color: #0088cc;" id="original-response-button"><h3><i class="p3icon-comment iconSmall p3Blue"></i> &nbsp; add new response</h3></div>')
                }
            }
            return false
        }
    });
    f.Vs.EmbedEditView = Bb.View.extend({
        template: "discussion/discussion.embed.template.html",
        events: {
            "click #btnSaveEmbed": "doSave"
        },
        render: function(j) {
            $(j).append(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var j = this;
            p3.fT(j.template, function(k) {
                j.$el.html(k());
                $("#embed-text").height(110);
                this.$("#embed-title").val(j.options.title);
                this.$("#embed-text").val(j.options.text)
            })
        },
        doSave: function(k) {
            var n = this,
                l = n.$("#embed-title").val(),
                j = n.$("#embed-text").val(),
                m = true;
            $("#btnSaveEmbed").button("loading");
            if (typeof l !== "string" || l === "") {
                n.$("#embed-title").closest(".control-group").addClass("error");
                m = false
            } else {
                n.$("#embed-title").closest(".control-group").removeClass("error")
            }
            if (typeof j !== "string" || j === "") {
                n.$("#embed-text").closest(".control-group").addClass("error");
                m = false
            } else {
                n.$("#embed-text").closest(".control-group").removeClass("error")
            }
            if (m) {
                n.trigger("embedSaved", n.$("#embed-text").val(), n.$("#embed-title").val());
                p3.showModal(p3.Layout.Containers.Modal, "hide")
            } else {
                $("#btnSaveEmbed").button("reset")
            }
            return false
        }
    });
    f.Vs.SectionDiscussion = Bb.View.extend({
        template: "discussion/discussion.section.layout.template.html",
        initialize: function(j) {
            var k = this;
            k.Containers = {};
            b.Data.Assignment = k.options.assignment;
            b.Data.Aiid = k.options.assignmentIndexId;
            b.Data.Aid = k.options.assignmentId;
            b.Data.SchoolYear = p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel;
            b.Data.MarkingPeriods = new b.Cs.MarkingPeriods();
            b.Data.Gradebook = new i.Cs.Gradebook();
            b.Data.GradeBookIndicator = k.options.assignment.get("IncGradeBook");
            b.Data.DropBoxIndicator = false;
            k.studentId = 0
        },
        events: {
            "click #BackButton": "moveBack",
            "click #edit-discussion-btn": "editDiscussion"
        },
        render: function(j) {
            var o = this,
                m, k, l, n = b.Data.Assignment.get("SectionLinks");
            if (p3.Data.Context.getSelectedPersona().Id === 3) {
                for (k = 0; k < n.length; k++) {
                    if (n[k].AssignmentIndexId == b.Data.Aiid) {
                        m = n[k].SectionId;
                        break
                    }
                }
                new d.Cs.Sections({}, {
                    sectionId: m
                }).fetch({
                    data: {
                        sectionId: m,
                        associationId: 1,
                        teacherId: 0
                    },
                    error: function() {
                        p3.displayError("Error loading teacher sections")
                    },
                    success: function(p) {
                        l = p.findWhere({
                            SectionId: m
                        });
                        o.viewOnly = l ? !l.get("AssignmentEdit") : true;
                        o.renderTemplate()
                    }
                })
            } else {
                o.renderTemplate()
            }
            $(j).html(o.el)
        },
        renderTemplate: function() {
            var j = this;
            p3.fT(j.template, function(l) {
                j.$el.html(l({
                    viewOnly: j.viewOnly
                }));
                j.Containers.Roster = $("#roster-sidebar");
                j.Containers.Assignment = $("#assignment-detail-container");
                j.Containers.Discussion = $("#discussion-container");
                j.renderRoster();
                var k = new f.Ms.DiscussionStatus({
                    assignmentIndexId: j.options.assignmentIndexId
                });
                k.fetch({
                    error: function() {
                        p3.displayError("Error loading discussion status")
                    },
                    success: function(m, n) {
                        j.lastStatusResponse = n[0];
                        j.renderDetail(j.lastStatusResponse)
                    }
                })
            })
        },
        moveBack: function(j) {
            window.history.go(-1);
            j.preventDefault()
        },
        renderDetail: function(k) {
            var j = new f.Vs.DiscussionDetail({
                assignment: this.options.assignment,
                status: k,
                assignmentIndexId: this.options.assignmentIndexId,
                sectionDetail: true,
                studentId: this.studentId,
                viewOnly: this.viewOnly
            });
            p3.rV(j, this.Containers.Discussion, true)
        },
        renderAssignment: function() {
            var j = new f.Vs.AssignmentDetail({
                assignment: this.options.assignment,
                assignmentIndexId: this.options.assignmentIndexId,
                viewOnly: this.viewOnly
            });
            p3.rV(j, this.Containers.Assignment, true)
        },
        renderRoster: function() {
            var l = this,
                j = new b.Cs.AssignmentRoster(),
                k;
            f.Data.roster = j;
            if (l.viewOnly) {
                j.fetch({
                    data: {
                        aiid: b.Data.Aiid,
                        viewerId: p3.Data.Context.get("UserInfo").UserId
                    },
                    success: function(m, n) {
                        l.renderAssignment()
                    },
                    error: function(m, n) {
                        p3.displayError("Error loading Roster.")
                    }
                })
            } else {
                j.on("reset", this.renderAssignment, this);
                k = new b.Vs.AssignmentGradesViewNew({
                    collection: j,
                    gradebookInd: l.options.assignment.get("IncGradeBook"),
                    dropboxInd: false,
                    discussionInd: true
                });
                p3.rV(k, this.Containers.Roster, true);
                k.on("studentSelected", function(m) {
                    l.studentId = m;
                    l.renderDetail()
                });
                k.on("detailsSelected", function() {
                    l.studentId = 0;
                    l.renderDetail(l.lastStatusResponse)
                })
            }
        },
        editDiscussion: function(k) {
            var l = this,
                j = new a.Ms.Assignment();
            j.set("AssignmentId", l.options.assignment.get("AssignmentId"));
            j.fetch({
                async: false,
                error: function() {
                    p3.displayError("Error loading assignment")
                },
                success: function(n, o) {
                    var m = a.Us.AddDiscussionView(j, 0);
                    m.on("saveDiscussion", function() {
                        l.options.assignment.fetch({
                            async: false,
                            error: function() {
                                p3.displayError("Error loading assignment")
                            },
                            success: function(p, q) {
                                l.renderTemplate()
                            }
                        })
                    })
                }
            });
            return false
        }
    });
    f.Vs.AssignmentDetail = Bb.View.extend({
        template: "discussion/discussion.assignment.detail.template.html",
        events: {},
        render: function(j) {
            $(j).append(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var k = this,
                j = f.Data.roster.at(0);
            p3.fT(k.template, function(n) {
                var l = k.options.assignment,
                    m = _.find(l.get("SectionLinks"), function(o) {
                        return o.AssignmentIndexId == k.options.assignmentIndexId
                    });
                if (!_.isUndefined(m.SectionId) && m.SectionId > 0) {
                    f.Data.SectionId = m.SectionId;
                    b.Data.SectionId = m.SectionId;
                    f.Data.DurationId = m.Section.Duration.Id;
                    if (_.isUndefined(f.Data.MarkingPeriods)) {
                        f.Data.MarkingPeriods = new b.Cs.MarkingPeriods()
                    }
                    if (f.Data.MarkingPeriods.length <= 0) {
                        f.Data.MarkingPeriods.fetch({
                            data: {
                                sectionList: f.Data.SectionId
                            },
                            error: function(o, p) {
                                p3.displayError("Error retreiving Marking Period Information.")
                            }
                        })
                    }
                    b.Data.MarkingPeriods = f.Data.MarkingPeriods
                }
                k.$el.html(n({
                    print: k.options.print,
                    rootUrl: p3.Config.RootPath,
                    aid: l.get("AssignmentId"),
                    aiid: k.options.assignmentIndexId,
                    title: l.get("ShortDescription"),
                    adate: m.AssignmentDate,
                    ddate: m.DueDate,
                    graded: j.get("graded_count"),
                    enrolled: j.get("enrollment_count"),
                    average: b.Us.getAverageGrade(l.get("MaxPoints"), f.Data.roster),
                    gradebookInd: l.get("IncGradeBook"),
                    viewOnly: k.options.viewOnly
                }));
                f.Us.showPostTotal()
            })
        }
    });
    f.Us.showStudentDiscussion = function(k, l) {
        var j = new a.Ms.AssignmentGet();
        j.set("AssignmentId", k);
        j.fetch({
            error: function() {
                p3.displayError("Error loading assignment")
            },
            success: function(n, o) {
                var m = new f.Vs.StudentDiscussion({
                    assignment: j,
                    assignmentId: k,
                    assignmentIndexId: l
                });
                p3.renderMainPage(m)
            }
        })
    };
    f.Us.showSectionDiscussion = function(k, l) {
        var j = new a.Ms.AssignmentGet();
        j.set("AssignmentId", k);
        j.fetch({
            error: function() {
                p3.displayError("Error loading assignment")
            },
            success: function(m, n) {
                var o = new f.Vs.SectionDiscussion({
                    assignment: j,
                    assignmentId: k,
                    assignmentIndexId: l
                });
                p3.renderMainPage(o)
            }
        })
    };
    f.Us.getDayDifference = function(j, k) {
        j = Date.UTC(j.getFullYear(), j.getMonth(), j.getDate());
        k = Date.UTC(k.getFullYear(), k.getMonth(), k.getDate());
        var l = Math.abs(j - k);
        return Math.floor(l / 1000 / 60 / 60 / 24)
    };
    f.Us.formatDateTime = function(j) {
        var k = "";
        if (j) {
            k = e.displayDate(e.getDateString(j), "abbrDay") + " " + e.getDateString(j) + " at " + e.getTimeString(j)
        }
        return k
    };
    f.Us.isImage = function(j) {
        var k = false;
        if (j && j.indexOf(".") > -1) {
            switch (j.split(".").pop().toLowerCase()) {
                case "jpg":
                case "jpeg":
                case "png":
                case "gif":
                case "bmp":
                    k = true;
                    break
            }
        }
        return k
    };
    f.Us.showPostTotal = function() {
        $("#post-count").html($(".student-message").length)
    };
    f.Us.removeWordMarkup = function(n, k) {
        var p = "<!--",
            m = "-->",
            o, l, q, j;
        if (k) {
            q = document.createElement("DIV");
            q.innerHTML = n;
            j = q.innerText;
            $(q).remove()
        } else {
            j = n
        }
        if (j.indexOf("<w:WordDocument>") > -1) {
            while (j.indexOf(p) > -1 && j.indexOf(m) > -1) {
                o = j.indexOf(p);
                if (o > -1) {
                    l = j.indexOf(m, o);
                    if (l > -1) {
                        j = j.substring(0, o) + j.substring(l + m.length)
                    }
                }
            }
            n = j
        }
        return n
    };
    p3.router().route("discussiondetail/:id/:index", "discussiondetail", function(j, k) {
        f.Us.showStudentDiscussion(j, k)
    });
    p3.router().route("discussionsectiondetail/:id/:index/:print", "discussionsectiondetail", function(j, k, l) {
        f.Us.showSectionDiscussion(j, k, l == "1")
    })
}(p3.module("LMS/discussion")));
(function(a) {
    var b = p3.module("LMS/groupPageEdit");
    p3.router().route("dormpageedit/:sectionId/:leadSectionId", "dormpageedit", function(d, c) {
        p3.setTitle("Edit Bulletinboard");
        b.Us.loadPageEditor(c, d, 7, 23)
    })
}(p3.module("LMS/dormbulletinboard")));
(function(c) {
    var b = p3.module("shared/datepicker"),
        a = p3.Us.Culture;
    c.Data = {};
    c.Cs.SchoolYears = Bbc.extend({
        url: "datadirect/SchoolYearsGet"
    });
    c.Ms.Dorm = Bbm.extend({
        idAttribute: "BuildingId"
    });
    c.Cs.Dorms = Bbc.extend({
        model: c.Ms.Dorm,
        url: "dorm/dormsGet"
    });
    c.Ms.Member = Bbm.extend({
        idAttribute: "user_id"
    });
    c.Cs.ManageMembers = Bbc.extend({
        model: c.Ms.Member,
        url: "datadirect/managerosterget",
        getOwners: function() {
            return new Bbc(this.filter(function(d) {
                return d.get("owner_ind") === 1
            }))
        },
        getMembers: function() {
            return new Bbc(this.filter(function(d) {
                return d.get("owner_ind") !== 1
            }))
        }
    });
    c.Ms.ResidentSave = Bbm.extend({
        url: "roster/managesave"
    });
    c.Cs.FacultyRoles = Bbc.extend({
        url: "datadirect/facultyroleget"
    });
    c.Cs.DormLevels = Bbc.extend({
        url: function() {
            return aP + "datadirect/SchoolLevelGet/?offeringType=4"
        }
    });
    c.Vs.LayoutView = Bb.View.extend({
        template: "dormmanagement/layout.template.html",
        initialize: function(d) {
            this.Containers = {}
        },
        events: {
            "click .type-filter": "filterChange",
            "click .all-type-filter": "showAll",
            "change #year-dropdown": "yearChanged",
            "click #dorm-leader-button": "manageLeaders",
            "change #level-dropdown": "levelChanged"
        },
        renderTemplate: function() {
            var e = this,
                d = new c.Cs.DormLevels();
            d.fetch({
                async: false,
                success: function() {
                    if (d.length > 0) {
                        c.Data.levelNum = d.models[0].get("LevelNum")
                    }
                }
            });
            p3.fT(e.template, function(f) {
                e.$el.html(f({
                    schoolYears: e.schoolYears.toJSON(),
                    dormLevels: d.toJSON(),
                    showLevels: d.length > 1
                }))
            });
            e.selectedYear = p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel;
            e.getList("-1")
        },
        render: function(d) {
            var e = this;
            $(d).append(this.el);
            e.leaderTypes = new c.Cs.FacultyRoles();
            e.leaderTypes.fetch({
                data: {
                    associationId: 7
                },
                error: function() {
                    p3.displayError("Error leader types")
                }
            });
            e.schoolYears = new c.Cs.SchoolYears();
            e.schoolYears.fetch({
                success: function() {
                    e.renderTemplate()
                },
                error: function() {
                    p3.displayError("Error school years")
                }
            })
        },
        renderList: function(e, f) {
            var d, i = this,
                g = true,
                h = function(j) {
                    i.dorms = j
                };
            i.Containers.ListContainer = $("#list-container");
            e.each(function(k, j) {
                if (k.get("Rooms") && k.get("Rooms").length > 0) {
                    d = new c.Vs.BuildingView({
                        building: k,
                        filter: f,
                        leaderTypes: i.leaderTypes
                    });
                    p3.rV(d, i.Containers.ListContainer, g);
                    g = false;
                    d.on("buildingChange", h)
                }
            });
            if (g) {
                if (f === "-1") {
                    $("#list-container").html("<h5>Use this task to manage residents and dorm supervisors. Not seeing any Dorms below? Double check your set up under Core > School. You set up terms for your Dorms as well as create Dorm Buildings.</h5>")
                } else {
                    $("#list-container").html("<h5>No dorms found</h5>")
                }
            }
        },
        getList: function(e) {
            var f = this,
                d = new c.Cs.Dorms();
            d.fetch({
                data: {
                    schoolYear: f.selectedYear,
                    filter: e,
                    levelNum: c.Data.levelNum
                },
                success: function() {
                    if (f.Containers.ListContainer === undefined) {
                        f.Containers.ListContainer = $("#list-container")
                    }
                    f.dorms = d;
                    f.renderList(d, e)
                },
                error: function(g, h) {
                    p3.displayError("Error getting dorms")
                }
            })
        },
        displayAllOn: function() {
            $(".type-desc").css("color", "#999");
            $(".type-icon").removeClass("p3icon-ok").addClass("p3icon-check");
            $(".all-desc").css("color", "#424242");
            $(".all-icon").removeClass("p3icon-check").addClass("p3icon-ok")
        },
        filterChange: function(f) {
            var d = $(f.currentTarget),
                h = $(".type-icon").length,
                g = $(".type-icon.p3icon-ok").length;
            if (d.find(".type-icon").hasClass("p3icon-ok")) {
                if (g === 1) {
                    this.displayAllOn();
                    this.getList("-1")
                } else {
                    $(".all-desc").css("color", "#999");
                    $(".all-icon").removeClass("p3icon-ok").addClass("p3icon-check");
                    d.find(".type-desc").css("color", "#999");
                    d.find(".type-icon").removeClass("p3icon-ok").addClass("p3icon-check");
                    this.getList(this.getSelectedTypes())
                }
            } else {
                if (h - g === 1) {
                    this.displayAllOn();
                    this.getList("-1")
                } else {
                    $(".all-desc").css("color", "#999");
                    $(".all-icon").removeClass("p3icon-ok").addClass("p3icon-check");
                    d.find(".type-desc").css("color", "#424242");
                    d.find(".type-icon").removeClass("p3icon-check").addClass("p3icon-ok");
                    this.getList(this.getSelectedTypes())
                }
            }
            f.preventDefault()
        },
        showAll: function(f) {
            var d = $(f.currentTarget);
            if (!d.find(".all-icon").hasClass("p3icon-ok")) {
                this.displayAllOn();
                this.getList("-1")
            }
            f.preventDefault()
        },
        getSelectedTypes: function() {
            var e = "",
                d;
            $(".type-filter").each(function() {
                if ($(this).find(".type-icon").hasClass("p3icon-ok")) {
                    d = $(this).data("value");
                    if (e.length > 0) {
                        e += ","
                    }
                    e += d
                }
            });
            if (e.length === 0) {
                e = "-1"
            }
            return e
        },
        yearChanged: function(d) {
            this.selectedYear = $("#year-dropdown").val();
            this.getList(this.getSelectedTypes())
        },
        levelChanged: function(d) {
            c.Data.levelNum = $("#level-dropdown").val();
            this.getList(this.getSelectedTypes())
        },
        manageLeaders: function(d) {
            var g = this,
                f = new c.Vs.BulkLeaders({
                    dorms: g.dorms,
                    leaderTypes: g.leaderTypes
                });
            p3.rV(f, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            f.on("ownerChange", function() {
                g.getList(g.getSelectedTypes())
            });
            d.preventDefault()
        }
    });
    c.Vs.BuildingView = Bb.View.extend({
        template: "dormmanagement/building.template.html",
        events: {
            "show .collapse": "showAccordion",
            "hide .collapse": "hideAccordion",
            "click .available-spots-button": "manageAvailableSpots",
            "click .residents-button": "showResidents",
            "click .manage-leaders-button": "manageLeaders",
            "click .room-sort": "updateSort"
        },
        initialize: function(d) {
            this.Containers = {};
            this.Sort = "DisplayName";
            this.SortDesc = false;
            this.haveNumbers = false
        },
        renderTemplate: function(f, d) {
            var g = this,
                e = g.options.building.get("Rooms");
            p3.fT(g.template, function(h) {
                g.$el.html(h({
                    building: g.options.building.toJSON(),
                    Sort: g.Sort,
                    SortDesc: g.SortDesc,
                    open: f || d
                }))
            });
            if (e && e.length > 0) {
                if (!f) {
                    g.setRoomAttributes(g.options.building)
                }
                e = g.sortRooms(e);
                g.Containers.RoomContainer = g.$(".room-table");
                if (g.Containers.RoomContainer.length > 0) {
                    g.renderRooms(e)
                } else {
                    window.setTimeout(function() {
                        g.Containers.RoomContainer = g.$(".room-table");
                        g.renderRooms(e)
                    }, 400)
                }
            }
        },
        render: function(d) {
            var e = this;
            $(d).append(this.el);
            e.renderTemplate(false, false)
        },
        renderRooms: function(e) {
            var h = this,
                f, d, g = function() {
                    h.updateBuilding()
                };
            for (d = 0; d < e.length; d++) {
                f = new c.Vs.RoomView({
                    room: e[d],
                    building: h.options.building
                });
                p3.rV(f, h.Containers.RoomContainer, false);
                f.on("roomChange", g)
            }
        },
        showAccordion: function(d) {
            p3.slideArrowS(this.$("I.change-arrow"))
        },
        hideAccordion: function(d) {
            p3.slideArrowE(this.$("I.change-arrow"))
        },
        manageAvailableSpots: function(g) {
            var i = this,
                d, h, f;
            if (i.options.filter === "-1") {
                d = i.options.building
            } else {
                f = new c.Cs.Dorms();
                f.fetch({
                    async: false,
                    data: {
                        schoolYear: $("#year-dropdown").val(),
                        filter: "-1",
                        levelNum: c.Data.levelNum
                    },
                    success: function() {
                        d = f.get(i.options.building.get("BuildingId"));
                        i.setRoomAttributes(d)
                    },
                    error: function(e, j) {
                        p3.displayError("Error getting dorms")
                    }
                })
            }
            h = new c.Vs.AvailableSpots({
                building: d
            });
            p3.rV(h, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            h.on("residentChange", function() {
                i.updateBuilding()
            });
            g.preventDefault()
        },
        showResidents: function(d) {
            var g = this,
                f;
            f = new c.Vs.ResidentList({
                building: g.options.building
            });
            p3.rV(f, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            f.on("residentChange", function() {
                g.updateBuilding()
            });
            d.preventDefault()
        },
        manageLeaders: function(d) {
            var g = this,
                f = new c.Vs.BuildingLeaders({
                    building: g.options.building,
                    leaderTypes: g.options.leaderTypes
                });
            p3.rV(f, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            f.on("ownerChange", function() {
                g.updateBuilding()
            });
            d.preventDefault()
        },
        setRoomAttributes: function(d) {
            var p = this,
                l, m = d.get("Rooms"),
                n, o, f, e, k, h, g = true;
            for (h = 0; h < m.length; h++) {
                n = "--";
                o = "";
                f = 0;
                l = m[h];
                if (!l.Name) {
                    l.DisplayName = l.Number
                } else {
                    if (l.Name !== l.Number) {
                        l.DisplayName = l.Number + " " + l.Name
                    } else {
                        l.DisplayName = l.Name
                    }
                }
                if (isNaN(l.Number)) {
                    g = false
                }
                if (l.Capacity && l.Capacity > 0) {
                    e = parseInt(l.Capacity, 10);
                    if (l.RoomEnrollment && l.RoomEnrollment > 0) {
                        f = l.RoomEnrollment
                    }
                    if (f > e) {
                        n = "Over";
                        o = "p3Red"
                    } else {
                        if (e === f) {
                            n = "Full"
                        } else {
                            n = "Available";
                            o = "p3Green"
                        }
                    }
                    if (l.RoomEnrollment < 0) {
                        l.RoomEnrollment = 0
                    }
                    for (k = 0; k < (l.Capacity - l.RoomEnrollment); k++) {
                        l.Residents.push({
                            StudentDisplay: "-- empty --"
                        })
                    }
                }
                l.Status = n;
                l.StatusClass = o
            }
            p.haveNumbers = g
        },
        sortRooms: function(e) {
            var f = this,
                d = "";
            e = _.sortBy(e, function(g) {
                switch (f.Sort) {
                    case "Status":
                        d = g.Status;
                        break;
                    case "Capacity":
                        d = g.Capacity;
                        break;
                    default:
                        if (f.haveNumbers) {
                            d = parseInt(g.Number, 10)
                        } else {
                            d = g.DisplayName
                        }
                }
                return d
            });
            if (this.SortDesc) {
                e.reverse()
            }
            return e
        },
        updateSort: function(f) {
            var h = this,
                d = $(f.currentTarget),
                g = d.data("sort");
            if (g !== undefined) {
                if (g === h.Sort) {
                    h.SortDesc = !h.SortDesc
                } else {
                    h.SortDesc = false
                }
                h.Sort = g;
                h.renderTemplate(true, false)
            }
            f.preventDefault()
        },
        updateBuilding: function() {
            var f = this,
                e = new c.Cs.Dorms(),
                d = f.options.building.get("BuildingId");
            e.fetch({
                data: {
                    schoolYear: $("#year-dropdown").val(),
                    filter: f.options.filter,
                    levelNum: c.Data.levelNum
                },
                success: function() {
                    f.options.building = e.get(d);
                    f.renderTemplate(false, true);
                    f.trigger("buildingChange", e)
                },
                error: function(g, h) {
                    p3.displayError("Error getting dorms")
                }
            })
        }
    });
    c.Vs.RoomView = Bb.View.extend({
        template: "dormmanagement/room.template.html",
        tagName: "tr",
        events: {
            "click .manage-residents": "manageResidents"
        },
        renderTemplate: function() {
            var d = this;
            p3.fT(d.template, function(e) {
                d.$el.html(e({
                    room: d.options.room
                }))
            })
        },
        render: function(d) {
            var e = this;
            $(d).append(this.el);
            e.renderTemplate()
        },
        manageResidents: function(d) {
            var g = this,
                f = new c.Vs.ManageResidents({
                    room: g.options.room,
                    building: g.options.building
                });
            p3.rV(f, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            f.on("residentChange", function() {
                g.trigger("roomChange")
            });
            d.preventDefault()
        }
    });
    c.Vs.ManageResidents = Bb.View.extend({
        template: "dormmanagement/manage.residents.template.html",
        events: {
            "click #add-resident-link": "addResidentRow",
            "click .remove-btn": "removeResidentRow",
            "click .btn-denied": "dropSelected",
            "click #btnSave": "saveResidents"
        },
        renderTemplate: function() {
            var g = this,
                e, d, f = g.options.room;
            g.collection = new c.Cs.ManageMembers();
            g.collection.fetch({
                data: {
                    sectionId: g.options.building.get("SectionId"),
                    associationId: 7
                },
                success: function() {
                    if (f.Residents && f.Residents.length > 0) {
                        for (e = 0; e < f.Residents.length; e++) {
                            if (f.Residents[e].UserId) {
                                d = g.collection.get(f.Residents[e].UserId);
                                f.Residents[e].enroll_date = d.get("enroll_date")
                            }
                        }
                    }
                    p3.fT(g.template, function(h) {
                        g.$el.html(h({
                            room: g.options.room,
                            building: g.options.building.toJSON(),
                            schoolYear: $("#year-dropdown").val(),
                            dropDate: a.getDateString(a.localDateTime())
                        }))
                    });
                    if ($(".add-resident-box").length > 0) {
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TokenInput, g.initializeTokenInput, {
                            context: g
                        })
                    } else {
                        window.setTimeout(function() {
                            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TokenInput, g.initializeTokenInput, {
                                context: g
                            })
                        }, 400)
                    }
                    b.Us.initialize(".date-input")
                }
            })
        },
        render: function(d) {
            var e = this;
            $(d).append(this.el);
            e.renderTemplate()
        },
        addResidentRow: function(d) {
            var f = "add-box-" + $("#resident-table tr").length;
            $("#resident-table").append('<tr class="add-resident-row"><td colspan="3"><input id="' + f + '" type="text" class="input-xlarge add-resident-box col-sm-4" style="margin:0px"></td></tr>');
            p3.setModalHeight(p3.Layout.Containers.Modal);
            this.initializeTokenInput({
                context: this
            }, f);
            d.preventDefault()
        },
        initializeTokenInput: function(g, d) {
            g = g || {};
            var i = g.context || this,
                f = i.collection.getMembers(),
                e = [],
                h;
            if (d) {
                h = "#" + d
            } else {
                h = ".add-resident-box"
            }
            f.each(function(k) {
                if (k.get("enrolled_ind") !== 1) {
                    var m = k.get("nickname"),
                        j = k.get("grad_year"),
                        l = k.get("lastname") + ", " + k.get("firstname") + ((m !== undefined && m !== null && m !== "") ? (" (" + m + ") ") : " ") + ((j !== "undefined" && j !== null && j !== "") ? (" '" + j.substring(2)) : (""));
                    e.push({
                        id: k.get("user_id"),
                        name: l
                    })
                }
            });
            $(h).tokenInput(e, {
                minChars: 2,
                searchDelay: 100,
                preventDuplicates: true,
                animateDropdown: false,
                placeholder: "-- Add a Resident --",
                classes: {
                    tokenList: "token-input-list typeAheadFauxFocus input-medium col-sm-4",
                    token: "token-input-token token-input-token-hide",
                    dropdown: "token-input-dropdown"
                },
                resultsFormatter: function(j) {
                    var k = "";
                    k += j.name;
                    return "<li>" + k + "</li>"
                },
                onAdd: function(k) {
                    var j = "";
                    this.parents("tr").data("id", k.id);
                    j = '<td width="27%">';
                    j += '<p style="margin:3px 0px 3px 0px">' + k.name + "</p>";
                    j += '</td><td width="33%">';
                    j += '<div class="muted text-muted" style="margin-top:3px;">Started: <span class="enroll-date-val">' + a.getDateString(a.localDateTime()) + "</span></div>";
                    j += '</td><td width="40%">';
                    j += '<div class="pull-right"><button type="button" class="btn btn-default remove-btn"><i class="p3icon-delete"></i></button></div>';
                    j += "</td>";
                    this.parents("tr").html(j);
                    p3.setModalHeight(p3.Layout.Containers.Modal);
                    b.Us.initialize(".date-picker")
                }
            });
            $(".add-resident-box").each(function() {
                $("#token-input-" + $(this).attr("id")).attr("placeholder", "Add a Resident")
            })
        },
        removeResidentRow: function(d) {
            $(d.currentTarget).parents("tr").remove()
        },
        dropSelected: function(g) {
            var f = $(g.currentTarget),
                d = f.parents("tr").find(".drop-details");
            if (f.attr("disabled") === undefined) {
                f.siblings().removeClass("active");
                if (f.hasClass("active")) {
                    f.removeClass("active");
                    d.hide()
                } else {
                    f.addClass("active");
                    if (!d.hasClass("in")) {
                        d.show()
                    }
                }
                b.Us.initialize(".date-picker");
                p3.setModalHeight(p3.Layout.Containers.Modal)
            }
        },
        saveResidents: function(d) {
            var m = this,
                h = [],
                l = true,
                f = false,
                k, j, i = m.options.room.RoomId,
                g = [];
            this.$el.find(".error").removeClass("error");
            $("#manage-roster-error-messages").html("").hide();
            $("#resident-table tr").each(function() {
                k = $(this).data("id");
                if ($(this).hasClass("add-resident-row")) {
                    if (k) {
                        f = true;
                        h.push({
                            UserId: k,
                            EnrollDate: $(this).find(".enroll-date-val").html(),
                            DeleteInd: false,
                            RoomId: i
                        })
                    }
                } else {
                    if ($(this).find(".btn-denied.active").length > 0) {
                        f = true;
                        h.push({
                            UserId: k,
                            EnrollDate: $(this).find(".enroll-date-val").html(),
                            DeleteInd: true,
                            RoomId: i,
                            DropType: $(this).find(".btn-denied.active").data("drop-type"),
                            DropComment: "",
                            DropDate: $(this).find(".date-picker").val()
                        });
                        if ($(this).find(".date-picker").val().length === 0) {
                            l = false;
                            $(this).find(".date-picker").addClass("error");
                            if (g.indexOf("A date is required in order to drop someone from the roster") === -1) {
                                g.push("A date is required in order to drop someone from the roster")
                            }
                        }
                    } else {
                        h.push({
                            UserId: k,
                            EnrollDate: $(this).find(".enroll-date-val").html(),
                            DeleteInd: false,
                            RoomId: i
                        })
                    }
                }
            });
            if (f) {
                if (l) {
                    j = new c.Ms.ResidentSave();
                    j.save({
                        sectionId: m.options.building.get("SectionId"),
                        members: h
                    }, {
                        success: function() {
                            m.trigger("residentChange");
                            p3.Layout.Containers.Modal.modal("hide")
                        },
                        error: function() {
                            p3.Us.InfoMessage.ErrorBox("An error was encountered while trying to save the resident changes.", "#manage-roster-error-messages", false);
                            $("#manage-roster-error-messages").show()
                        }
                    })
                } else {
                    _.each(g, function(e) {
                        p3.Us.InfoMessage.ErrorBox(e, "#manage-roster-error-messages", false)
                    });
                    if (g.length > 0) {
                        $("#manage-roster-error-messages").show()
                    }
                }
            } else {
                p3.Layout.Containers.Modal.modal("hide")
            }
        }
    });
    c.Vs.AvailableSpots = Bb.View.extend({
        template: "dormmanagement/available.spots.template.html",
        events: {
            "click #btnSave": "saveResidents"
        },
        renderTemplate: function() {
            var d = this;
            d.collection = new c.Cs.ManageMembers();
            d.collection.fetch({
                data: {
                    sectionId: d.options.building.get("SectionId"),
                    associationId: 7
                },
                success: function() {
                    p3.fT(d.template, function(e) {
                        d.$el.html(e({
                            building: d.options.building.toJSON(),
                            addDate: a.getDateString(a.localDateTime())
                        }))
                    });
                    if ($(".add-resident-box").length > 0) {
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TokenInput, d.initializeTokenInput, {
                            context: d
                        })
                    } else {
                        window.setTimeout(function() {
                            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TokenInput, d.initializeTokenInput, {
                                context: d
                            })
                        }, 400)
                    }
                }
            })
        },
        render: function(d) {
            var e = this;
            $(d).append(this.el);
            e.renderTemplate()
        },
        initializeTokenInput: function(f) {
            f = f || {};
            var g = f.context || this,
                e = g.collection.getMembers(),
                d = [];
            e.each(function(i) {
                if (i.get("enrolled_ind") !== 1) {
                    var k = i.get("nickname"),
                        h = i.get("grad_year"),
                        j = i.get("lastname") + ", " + i.get("firstname") + ((k !== undefined && k !== null && k !== "") ? (" (" + k + ") ") : " ") + ((h !== "undefined" && h !== null && h !== "") ? (" '" + h.substring(2)) : (""));
                    d.push({
                        id: i.get("user_id"),
                        name: j
                    })
                }
            });
            $(".add-resident-box").tokenInput(d, {
                minChars: 2,
                searchDelay: 100,
                preventDuplicates: true,
                animateDropdown: false,
                placeholder: "-- Add a Resident --",
                classes: {
                    tokenList: "token-input-list typeAheadFauxFocus input-medium",
                    token: "token-input-token token-input-token-hide",
                    dropdown: "token-input-dropdown"
                },
                resultsFormatter: function(h) {
                    var i = "";
                    i += h.name;
                    return "<li>" + i + "</li>"
                },
                onAdd: function(h) {
                    this.parents(".add-resident-row").data("id", h.id);
                    this.parents(".add-resident-row").html('<p style="margin:3px 0px 3px 0px">' + h.name + "</p>")
                }
            });
            $(".add-resident-box").each(function() {
                $("#token-input-" + $(this).attr("id")).attr("placeholder", "Add a Resident")
            })
        },
        saveResidents: function(f) {
            var l = this,
                i = [],
                h = false,
                k, j, d, g = a.getDateString(a.localDateTime());
            this.$el.find(".error").removeClass("error");
            $("#manage-roster-error-messages").html("").hide();
            $("#spots-table tr.room-row").each(function() {
                d = $(this).find(".resident-cell");
                j = d.data("id");
                d.find(".add-resident-row").each(function() {
                    if ($(this).data("id")) {
                        h = true;
                        i.push({
                            UserId: $(this).data("id"),
                            EnrollDate: g,
                            DeleteInd: false,
                            RoomId: j
                        })
                    }
                })
            });
            if (h) {
                k = new c.Ms.ResidentSave();
                k.save({
                    sectionId: l.options.building.get("SectionId"),
                    members: i
                }, {
                    success: function() {
                        l.trigger("residentChange");
                        p3.Layout.Containers.Modal.modal("hide")
                    },
                    error: function() {
                        p3.Us.InfoMessage.ErrorBox("An error was encountered while trying to save the resident changes.", "#manage-roster-error-messages", false);
                        $("#manage-roster-error-messages").show()
                    }
                })
            } else {
                p3.Layout.Containers.Modal.modal("hide")
            }
        }
    });
    c.Vs.BuildingLeaders = Bb.View.extend({
        template: "dormmanagement/building.leaders.template.html",
        events: {
            "click #btnSave": "saveLeaders",
            "click .head-button": "setHead"
        },
        renderTemplate: function() {
            var d = this;
            d.collection = new c.Cs.ManageMembers();
            d.collection.fetch({
                data: {
                    sectionId: d.options.building.get("SectionId"),
                    associationId: 7
                },
                success: function() {
                    p3.fT(d.template, function(e) {
                        d.$el.html(e({
                            building: d.options.building.toJSON(),
                            addDate: a.getDateString(a.localDateTime()),
                            leaderTypes: d.options.leaderTypes.toJSON()
                        }))
                    });
                    if ($("#add-leader-box").length > 0) {
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TokenInput, d.initializeTokenInput, {
                            context: d
                        })
                    } else {
                        window.setTimeout(function() {
                            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TokenInput, d.initializeTokenInput, {
                                context: d
                            })
                        }, 400)
                    }
                }
            })
        },
        render: function(d) {
            var e = this;
            $(d).append(this.el);
            e.renderTemplate()
        },
        initializeTokenInput: function(g) {
            g = g || {};
            var h = g.context || this,
                f = h.collection.getOwners(),
                e = [],
                d = "fa fa-trash";
            f.each(function(i) {
                if (i.get("enrolled_ind") !== 1) {
                    e.push({
                        id: i.get("user_id"),
                        name: i.get("firstname") + " " + i.get("lastname")
                    })
                }
            });
            $("#add-leader-box").tokenInput(e, {
                minChars: 2,
                searchDelay: 100,
                preventDuplicates: true,
                animateDropdown: false,
                classes: {
                    tokenList: "token-input-list typeAheadFauxFocus input-medium",
                    token: "token-input-token token-input-token-hide",
                    dropdown: "token-input-dropdown"
                },
                resultsFormatter: function(i) {
                    var j = "";
                    j += i.name;
                    return "<li>" + j + "</li>"
                },
                onAdd: function(j) {
                    var k, i = h.$(".head-button.active").length === 0;
                    k = '<tr class="leader-row" data-id="' + j.id + '">';
                    k += '<td><div class="btn btn-default btn-mini btn-denied pull-right remove-leader-button" data-toggle="button" style="margin-left:10px"><i class="' + d + '"></i></div><div class="btn btn-mini btn-default btn-approve pull-right ';
                    if (i) {
                        k += " active"
                    }
                    k += ' head-button" data-toggle="button" style="margin-left:10px"><i class="p3icon-check"></i> Head</div>';
                    k += '<div class="pull-right"><select class="input-medium form-control leader-type-dropdown" style="margin: 0px 10px 0px 0px">';
                    h.options.leaderTypes.each(function(l) {
                        k += '<option value="' + l.get("role") + '">' + l.get("role_type") + "</option>"
                    });
                    k += "</select></div> " + j.name + "</td></tr>";
                    $("#leader-table").append(k);
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                }
            });
            $("#token-input-add-leader-box").attr("placeholder", "Search by name").css("min-width", "150px")
        },
        saveLeaders: function(i) {
            var m = this,
                k = [],
                j = false,
                l, g = $("#manage-roster-error-messages"),
                h, f, d;
            this.$el.find(".error").removeClass("error");
            g.html("").hide();
            $(".leader-row").each(function() {
                h = $(this);
                f = h.find(".leader-type-dropdown");
                d = h.find(".head-button");
                if (h.find(".remove-leader-button").hasClass("active")) {
                    k.push({
                        UserId: h.data("id"),
                        DeleteInd: true,
                        OwnerType: f.val()
                    })
                } else {
                    if (d.hasClass("active")) {
                        j = true
                    }
                    k.push({
                        UserId: h.data("id"),
                        DeleteInd: false,
                        Head: d.hasClass("active"),
                        OwnerType: f.val()
                    })
                }
            });
            if (j) {
                l = new c.Ms.ResidentSave();
                l.save({
                    sectionId: m.options.building.get("SectionId"),
                    members: k
                }, {
                    success: function() {
                        m.trigger("ownerChange");
                        p3.Layout.Containers.Modal.modal("hide")
                    },
                    error: function() {
                        p3.Us.InfoMessage.ErrorBox("An error was encountered while trying to save the resident changes.", g, false);
                        g.show().addClass("alert-danger")
                    }
                })
            } else {
                p3.Us.InfoMessage.ErrorBox("A head leader is required.", g, false);
                g.show().addClass("alert-danger")
            }
        },
        setHead: function(f) {
            var d = $(f.currentTarget);
            if (d.hasClass("active")) {
                f.stopPropagation();
                f.preventDefault()
            } else {
                $(".head-button").removeClass("active")
            }
        }
    });
    c.Vs.BulkLeaders = Bb.View.extend({
        template: "dormmanagement/bulk.leaders.template.html",
        events: {
            "click #btnSave": "saveLeaders",
            "click .head-button": "setHead"
        },
        renderTemplate: function() {
            var d = this;
            d.collection = new c.Cs.ManageMembers();
            d.collection.fetch({
                data: {
                    sectionId: d.options.dorms.models[0].get("SectionId"),
                    associationId: 7
                },
                success: function() {
                    p3.fT(d.template, function(e) {
                        d.$el.html(e({
                            dorms: d.options.dorms.toJSON(),
                            addDate: a.getDateString(a.localDateTime()),
                            leaderTypes: d.options.leaderTypes.toJSON()
                        }))
                    });
                    if ($(".add-leader-box").length > 0) {
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TokenInput, d.initializeTokenInput, {
                            context: d
                        })
                    } else {
                        window.setTimeout(function() {
                            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TokenInput, d.initializeTokenInput, {
                                context: d
                            })
                        }, 400)
                    }
                }
            })
        },
        render: function(d) {
            var e = this;
            $(d).append(this.el);
            e.renderTemplate()
        },
        initializeTokenInput: function(g) {
            g = g || {};
            var h = g.context || this,
                f = h.collection.getOwners(),
                e = [],
                d;
            h.options.dorms.each(function(i) {
                d = _.pluck(i.get("Leaders"), "UserId");
                e = [];
                f.each(function(j) {
                    if (d.indexOf(j.get("user_id")) === -1) {
                        e.push({
                            id: j.get("user_id"),
                            name: j.get("firstname") + " " + j.get("lastname")
                        })
                    }
                });
                $("#add-leader-box-" + i.get("SectionId")).tokenInput(e, {
                    minChars: 2,
                    searchDelay: 100,
                    preventDuplicates: true,
                    animateDropdown: false,
                    classes: {
                        tokenList: "token-input-list typeAheadFauxFocus input-medium",
                        token: "token-input-token token-input-token-hide",
                        dropdown: "token-input-dropdown"
                    },
                    resultsFormatter: function(j) {
                        var k = "";
                        k += j.name;
                        return "<li>" + k + "</li>"
                    },
                    onAdd: function(k) {
                        var l, j = $(".leader-table[data-id='" + i.get("SectionId") + "']").find(".head-button.active").length === 0;
                        l = '<tr class="leader-row" data-id="' + k.id + '">';
                        l += '<td><div class="btn btn-default btn-mini btn-denied pull-right remove-leader-button" data-toggle="button" style="margin-left:10px;"><i class="p3icon-delete"></i></div><div class="btn btn-default btn-mini btn-approve pull-right ';
                        if (j) {
                            l += " active"
                        }
                        l += ' head-button" data-toggle="button" style="margin-left:10px;"><i class="p3icon-check"></i> Head</div>';
                        l += '<div class="pull-right"><select class="input-medium form-control leader-type-dropdown" style="margin: 0px 10px 0px 0px">';
                        h.options.leaderTypes.each(function(m) {
                            l += '<option value="' + m.get("role") + '">' + m.get("role_type") + "</option>"
                        });
                        l += "</select></div> " + k.name + "</td></tr>";
                        $("#empty-row-" + i.get("SectionId")).remove();
                        $(".leader-table[data-id='" + i.get("SectionId") + "']").append(l);
                        p3.setModalHeight(p3.Layout.Containers.Modal)
                    }
                });
                $("#token-input-add-leader-box-" + i.get("SectionId")).attr("placeholder", "Type a name")
            })
        },
        saveLeaders: function(j) {
            var o = this,
                k = [],
                n = true,
                l, m, d = $("#manage-roster-error-messages"),
                h, g, i, f;
            d.html("").hide();
            $(".leader-table").each(function() {
                h = $(this);
                g = h.find(".leader-row");
                if (g.length > 0) {
                    if (h.find(".head-button.active").length > 0) {
                        m = h.data("id");
                        g.each(function() {
                            f = $(this);
                            i = f.find(".leader-type-dropdown");
                            if (f.find(".remove-leader-button").hasClass("active")) {
                                k.push({
                                    UserId: f.data("id"),
                                    DeleteInd: true,
                                    OwnerType: i.val(),
                                    SectionId: m
                                })
                            } else {
                                k.push({
                                    UserId: f.data("id"),
                                    DeleteInd: false,
                                    Head: f.find(".head-button").hasClass("active"),
                                    OwnerType: i.val(),
                                    SectionId: m
                                })
                            }
                        })
                    } else {
                        n = false
                    }
                }
            });
            if (n) {
                l = new c.Ms.ResidentSave();
                l.save({
                    members: k
                }, {
                    success: function() {
                        o.trigger("ownerChange");
                        p3.Layout.Containers.Modal.modal("hide")
                    },
                    error: function() {
                        p3.Us.InfoMessage.ErrorBox("An error was encountered while trying to save the leader changes.", d, false);
                        d.show().addClass("alert-danger")
                    }
                })
            } else {
                p3.Us.InfoMessage.ErrorBox("A head leader is required for each building.", d, false);
                d.show().addClass("alert-danger")
            }
        },
        setHead: function(f) {
            var d = $(f.currentTarget);
            if (d.hasClass("active")) {
                f.stopPropagation();
                f.preventDefault()
            } else {
                d.parents("tbody").find(".head-button").removeClass("active")
            }
        }
    });
    c.Vs.ResidentList = Bb.View.extend({
        template: "dormManagement/resident.list.template.html",
        events: {
            "click .btn-denied": "dropSelected",
            "click #btnSave": "saveResidents",
            "click .resident-sort": "updateSort",
            "click #print-button": "printResidents",
            "change .room-dropdown": "roomChange"
        },
        initialize: function() {
            this.Sort = "RoomDisplay";
            this.SortDesc = false;
            this.haveNumbers = false
        },
        renderTemplate: function() {
            var d = this;
            p3.fT(d.template, function(e) {
                d.$el.html(e({
                    building: d.options.building.toJSON(),
                    schoolYear: $("#year-dropdown").val(),
                    dropDate: a.getDateString(a.localDateTime()),
                    residents: d.residents,
                    Sort: d.Sort,
                    SortDesc: d.SortDesc,
                    haveNoRoom: d.haveNoRoom
                }))
            });
            if ($("#add-resident-box").length > 0) {
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TokenInput, d.initializeTokenInput, {
                    context: d
                })
            } else {
                window.setTimeout(function() {
                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TokenInput, d.initializeTokenInput, {
                        context: d
                    })
                }, 400)
            }
            b.Us.initialize(".date-input")
        },
        buildResidentList: function() {
            var k = this,
                e, f, g = [],
                h = k.options.building.get("Rooms"),
                d = true;
            k.collection = new c.Cs.ManageMembers();
            k.collection.fetch({
                async: false,
                data: {
                    sectionId: k.options.building.get("SectionId"),
                    associationId: 7
                },
                success: function() {
                    for (e = 0; e < h.length; e++) {
                        if (isNaN(h[e].Number)) {
                            d = false
                        }
                        for (f = 0; f < h[e].Residents.length; f++) {
                            if (h[e].Residents[f].UserId > 0) {
                                g.push({
                                    StudentDisplay: h[e].Residents[f].StudentDisplay,
                                    UserId: h[e].Residents[f].UserId,
                                    RoomDisplay: h[e].DisplayName,
                                    RoomId: h[e].RoomId,
                                    RoomNumber: h[e].Number,
                                    RoomName: h[e].Name
                                })
                            }
                        }
                        if (h[e].RoomId === 0) {
                            k.haveNoRoom = true
                        }
                    }
                    k.residents = g;
                    k.haveNumbers = d
                }
            })
        },
        orderResidents: function() {
            var e = this,
                d;
            e.residents = _.sortBy(e.residents, function(f) {
                switch (e.Sort) {
                    case "StudentDisplay":
                        d = f.StudentDisplay;
                        break;
                    default:
                        if (e.haveNumbers) {
                            d = parseInt(f.RoomNumber, 10)
                        } else {
                            d = f.RoomDisplay
                        }
                }
                return d
            });
            if (e.SortDesc) {
                e.residents.reverse()
            }
        },
        render: function(d) {
            var e = this;
            $(d).append(this.el);
            e.buildResidentList();
            e.orderResidents();
            e.renderTemplate()
        },
        dropSelected: function(g) {
            var f = $(g.currentTarget),
                d = f.parents("tr").find(".drop-details");
            if (f.attr("disabled") === undefined) {
                f.siblings().removeClass("active");
                if (f.hasClass("active")) {
                    f.removeClass("active");
                    d.hide()
                } else {
                    f.addClass("active");
                    if (!d.hasClass("in")) {
                        d.show()
                    }
                }
                b.Us.initialize(".date-picker");
                p3.setModalHeight(p3.Layout.Containers.Modal);
                g.preventDefault();
                g.stopPropagation()
            }
        },
        saveResidents: function(d) {
            var n = this,
                i = [],
                m = true,
                g = false,
                l, k, h = [],
                f, j;
            this.$el.find(".error").removeClass("error");
            $("#manage-roster-error-messages").html("").hide();
            $("#resident-table .existing-resident-row").each(function() {
                l = $(this).data("id");
                f = n.collection.get(l);
                j = parseInt($(this).find(".room-dropdown").val(), 10);
                if ($(this).find(".btn-denied.active").length > 0) {
                    g = true;
                    i.push({
                        UserId: l,
                        EnrollDate: f.get("enroll_date"),
                        DeleteInd: true,
                        RoomId: $(this).data("room"),
                        DropType: $(this).find(".btn-denied.active").data("drop-type"),
                        DropComment: "",
                        DropDate: $(this).find(".date-picker").val()
                    });
                    if ($(this).find(".date-picker").val().length === 0) {
                        m = false;
                        $(this).find(".date-picker").addClass("error");
                        if (h.indexOf("A date is required in order to drop someone from the roster") === -1) {
                            h.push("A date is required in order to drop someone from the roster")
                        }
                    }
                } else {
                    if ($(this).data("room") !== j) {
                        g = true;
                        i.push({
                            UserId: l,
                            EnrollDate: f.get("enroll_date"),
                            DeleteInd: false,
                            RoomId: j || null
                        })
                    }
                }
            });
            $("#resident-table .new-resident-row").each(function() {
                g = true;
                l = $(this).data("id");
                j = parseInt($(this).find(".room-dropdown").val(), 10);
                i.push({
                    UserId: l,
                    EnrollDate: a.getDateString(a.localDateTime()),
                    DeleteInd: false,
                    RoomId: j || null
                })
            });
            if (g) {
                if (m) {
                    k = new c.Ms.ResidentSave();
                    k.save({
                        sectionId: n.options.building.get("SectionId"),
                        members: i
                    }, {
                        success: function() {
                            n.trigger("residentChange");
                            p3.Layout.Containers.Modal.modal("hide")
                        },
                        error: function() {
                            p3.Us.InfoMessage.ErrorBox("An error was encountered while trying to save the resident changes.", "#manage-roster-error-messages", false);
                            $("#manage-roster-error-messages").show()
                        }
                    })
                } else {
                    _.each(h, function(e) {
                        p3.Us.InfoMessage.ErrorBox(e, "#manage-roster-error-messages", false)
                    });
                    if (h.length > 0) {
                        $("#manage-roster-error-messages").show()
                    }
                }
            } else {
                p3.Layout.Containers.Modal.modal("hide")
            }
        },
        updateSort: function(f) {
            var h = this,
                d = $(f.currentTarget),
                g = d.data("sort");
            if (g !== undefined) {
                if (g === h.Sort) {
                    h.SortDesc = !h.SortDesc
                } else {
                    h.SortDesc = false
                }
                h.Sort = g;
                h.orderResidents();
                h.renderTemplate()
            }
            f.preventDefault()
        },
        printResidents: function(d) {
            var g = this,
                f;
            $("#print-area").empty();
            g.frame = $('<iframe id="print-frame" border="0" frameborder="0" name="print-frame" height="100%" width="100%"><html></html></iframe>');
            $(".edit-cell").hide();
            $(".resident-sort").hide();
            $(".print-header").show();
            $(".room-dropdown").hide();
            $(".room-display").show();
            f = '<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><title>' + g.options.building.get("BuildingName") + ' Residents</title><link rel="stylesheet" type="text/css" href="/app/src/css/p3._global.css"><link type="text/css" rel="stylesheet" href="/ftpimages/999/podium/libs/bootstrap/2.0.4/css/bootstrap.css"><link rel="stylesheet" type="text/css" href="/app/src/css/p3.bootstrap.css"></head><body>' + $("#resident-list").html() + "</body></html>";
            g.frame.load(function() {
                $(this).contents().find("html").html(f)
            }).appendTo("#print-area");
            window.setTimeout(function() {
                window.frames["print-frame"].focus();
                window.frames["print-frame"].print();
                $("#print-area").empty()
            }, 200);
            $(".edit-cell").show();
            $(".resident-sort").show();
            $(".print-header").hide();
            $(".room-dropdown").show();
            $(".room-display").hide()
        },
        roomChange: function(f) {
            var n = this,
                d = $(f.currentTarget),
                m = d.data("id"),
                j = parseInt(d.val(), 10),
                l = n.options.building.get("Rooms"),
                k, h, g;
            if (j === 0) {
                k = 0;
                h = "No Room"
            } else {
                for (g = 0; g < l.length; g++) {
                    if (l[g].RoomId === j) {
                        k = l[g].Number;
                        h = l[g].DisplayName;
                        break
                    }
                }
            }
            d.siblings(".room-display").html(h);
            for (g = 0; g < n.residents.length; g++) {
                if (n.residents[g].UserId === m) {
                    n.residents[g].RoomId = j;
                    n.residents[g].RoomNumber = k;
                    n.residents[g].RoomDisplay = h;
                    break
                }
            }
        },
        initializeTokenInput: function(f) {
            f = f || {};
            var g = f.context || this,
                e = g.collection.getMembers(),
                d = [];
            e.each(function(i) {
                if (i.get("enrolled_ind") !== 1) {
                    var k = i.get("nickname"),
                        h = i.get("grad_year"),
                        j = i.get("lastname") + ", " + i.get("firstname") + ((k !== undefined && k !== null && k !== "") ? (" (" + k + ") ") : " ") + ((h !== "undefined" && h !== null && h !== "") ? (" '" + h.substring(2)) : (""));
                    d.push({
                        id: i.get("user_id"),
                        name: j
                    })
                }
            });
            $("#add-resident-box").tokenInput(d, {
                minChars: 2,
                searchDelay: 100,
                preventDuplicates: true,
                animateDropdown: false,
                placeholder: "-- Add a Resident --",
                classes: {
                    tokenList: "token-input-list typeAheadFauxFocus input-medium",
                    token: "token-input-token token-input-token-hide",
                    dropdown: "token-input-dropdown"
                },
                resultsFormatter: function(h) {
                    var i = "";
                    i += h.name;
                    return "<li>" + i + "</li>"
                },
                onAdd: function(j) {
                    var h, l = g.options.building.get("Rooms"),
                        k = '<tr class="new-resident-row" data-id="' + j.id + '">';
                    k += '<td><select class="room-dropdown input-small" data-id="' + j.id + '">';
                    for (h = 0; h < l.length; h++) {
                        if (l[h].RoomId > 0) {
                            k += '<option value="' + l[h].RoomId + '">' + l[h].DisplayName + "</option>"
                        }
                    }
                    k += '<option value="0" selected="selected">No Room</option></select>';
                    k += '<p style="margin:3px 0px 3px 0px;display: none;" class="room-display">No Room</p></td>';
                    k += '<td><p style="margin:3px 0px 3px 0px">' + j.name + "</p>";
                    k += "</td><td></td></tr>";
                    $("#resident-table").append(k);
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                }
            });
            $("#token-input-add-resident-box").attr("placeholder", "Add a Resident")
        }
    });
    p3.router().route("Dorms", "Dorms", function() {
        p3.renderMainPage(new c.Vs.LayoutView({}))
    })
}(p3.module("lms/dormmanagement")));
(function(j) {
    var g = p3.module("shared/datepicker"),
        k = p3.module("cms/shared/link"),
        q = p3.module("cms/shared/text"),
        h = p3.module("cms/shared/download"),
        l = p3.module("cms/shared/media"),
        a = p3.module("LMS/academicclass"),
        f = p3.Us.Culture,
        e = p3.module("cms/shared/content"),
        c = p3.module("cms/shared/announcement"),
        m = p3.module("cms/shared/news"),
        i = p3.module("cms/shared/event"),
        o = p3.module("lms/rssreader"),
        n = p3.module("cms/shared/photo"),
        d = p3.module("cms/shared/audio"),
        r = p3.module("cms/shared/video"),
        b = p3.module("lms/academiccontent"),
        p = p3.module("LMS/teampage");
    j.Data = {};
    j.Cs.Section = Bbc.extend({
        initialize: function(s, t) {
            this.sectionId = t.sectionId || 0;
            this.associationId = t.associationId || 0
        },
        url: function() {
            return aP + "datadirect/SectionInfoView/?format=json&sectionId=" + this.sectionId + "&associationId=" + this.associationId
        }
    });
    j.Ms.Content = Bbm.extend({
        idAttribute: "ContentId"
    });
    j.Cs.Content = Bbc.extend({
        model: j.Ms.Content,
        initialize: function(s, t) {
            this.sectionId = t.sectionId || 0;
            this.leadSectionId = t.leadSectionId || 0
        },
        url: function() {
            return aP + "datadirect/GroupPossibleContentGet/?format=json&leadSectionId=" + this.leadSectionId
        }
    });
    j.Cs.BulletinBoardContent = Bbc.extend({
        initialize: function(s, t) {
            this.sectionId = t.sectionId || 0;
            this.associationId = t.associationId || 0;
            this.pendingInd = t.pendingInd || false
        },
        url: function() {
            return aP + "datadirect/BulletinBoardContentGet/?format=json&sectionId=" + this.sectionId + "&associationId=" + this.associationId + "&pendingInd=" + this.pendingInd
        }
    });
    j.Ms.LayoutSave = Bbm.extend({
        url: function() {
            return aP + "bulletinboard/LayoutSave/?format=json"
        }
    });
    j.Ms.Sections = Bbm.extend({
        idAttribute: "SectionId",
        url: function() {
            return ""
        }
    });
    j.Cs.Sections = Bbc.extend({
        model: j.Ms.Sections,
        initialize: function(s, t) {
            this.sectionId = t.sectionId || 0
        },
        url: function() {
            return aP + "datadirect/SectionsForTeacher/?format=json"
        }
    });
    j.Cs.ExistingSchoolYears = Bbc.extend({
        url: "datadirect/SchoolYearsGet/"
    });
    j.Cs.ExistingSections = Bbc.extend({
        url: "datadirect/AssignmentSectionsForTeacher/"
    });
    j.Cs.ExistingSectionContent = Bbc.extend({
        url: "datadirect/ExistingSectionContent/"
    });
    j.Ms.ImportContent = Bbm.extend({
        url: function() {
            return aP + "content/importexistingcontent/?format=json"
        }
    });
    j.Cs.DefaultLayouts = Bbc.extend({
        url: "bulletinboard/DefaultBulletinBoardsGet/"
    });
    j.Cs.BulletinBoardLayout = Bbc.extend({
        url: "bulletinboard/BulletinBoardLayoutGet/"
    });
    j.Cs.PossibleContent = Bbc.extend({
        url: "bulletinboard/BulletinBoardPossibleContentGet/"
    });
    j.Ms.DefaultLayoutSave = Bbm.extend({
        idAttribute: "BulletinBoardLayoutId",
        url: function() {
            return aP + "bulletinboard/BulletinBoardDefaultLayoutSave/?format=json"
        }
    });
    j.Ms.RemoveDefault = Bbm.extend({
        idAttribute: "BulletinBoardLayoutId",
        url: function() {
            return aP + "bulletinboard/BulletinBoardRemoveDefault/?format=json&bulletinBoardLayoutId=" + this.get("BulletinBoardLayoutId")
        }
    });
    j.Ms.CreateDefault = Bbm.extend({
        url: function() {
            return aP + "bulletinboard/BulletinBoardCreateDefault/?format=json"
        }
    });
    j.Ms.WidgetCreate = Bbm.extend({
        idAttribute: "WidgetId",
        url: function() {
            return aP + "widget/create/?format=json"
        }
    });
    j.Ms.WidgetUpdate = Bbm.extend({
        idAttribute: "WidgetId",
        url: function() {
            return aP + "widget/update/" + this.get("WidgetId") + "/?format=json"
        }
    });
    j.Ms.WidgetDelete = Bbm.extend({
        idAttribute: "Id",
        url: function() {
            return aP + "widget/delete/" + this.get("Id") + "/?format=json"
        }
    });
    j.Ms.Widget = Bbm.extend({
        url: function() {
            return aP + "widget/WidgetGet/"
        }
    });
    j.Vs.EditDetail = Bb.View.extend({
        template: "grouppage/detail.edit.template.html",
        events: {
            "click #expand-channels-button": "expandChannels",
            "click #collapse-channels-button": "collapseChannels"
        },
        initialize: function() {
            this.Containers = {}
        },
        dispose: function() {
            p3.closeFixedSidebar();
            p3.closeFixedFooter()
        },
        render: function(s) {
            var t = this;
            $(s).html(t.el);
            p3.fT(t.template, function(v) {
                t.$el.html(v({}));
                t.Containers.WorkspaceWrap = $(".group-page-wrap");
                t.Containers.Workspace = $("#group-workspace");
                t.registrations = new i.Cs.Registrations();
                t.registrations.fetch({
                    error: function() {
                        p3.displayError("Error loading event registrations")
                    }
                });
                t.buildings = new i.Cs.Buildings();
                t.buildings.fetch({
                    error: function() {
                        p3.displayError("Error loading buildings")
                    }
                });
                var u = new j.Cs.Section({}, {
                    sectionId: t.options.leadSectionId,
                    associationId: t.options.associationId
                });
                u.fetch({
                    error: function() {
                        p3.displayError("Error loading section information")
                    },
                    success: function() {
                        t.isOwner = false;
                        u.each(function(w) {
                            if (w.get("Id") === parseInt(t.options.leadSectionId, 10)) {
                                t.GroupName = w.get("GroupName");
                                t.Identifier = w.get("Identifier");
                                if (w.get("Block") !== "Random") {
                                    t.Block = w.get("Block")
                                }
                                t.isManager = w.get("IsManager");
                                if (w.get("PendingLayoutId") !== null) {
                                    t.LayoutId = w.get("PendingLayoutId");
                                    t.pendingInd = true
                                } else {
                                    t.LayoutId = w.get("LayoutId");
                                    t.pendingInd = false
                                }
                            }
                            if (w.get("IsOwner")) {
                                t.isOwner = true
                            }
                        });
                        t.renderFooter();
                        t.selectedContent = new j.Cs.BulletinBoardContent({}, {
                            sectionId: t.options.leadSectionId,
                            associationId: t.options.associationId,
                            pendingInd: t.pendingInd
                        });
                        t.selectedContent.fetch({
                            error: function() {
                                p3.displayError("Error loading selected content")
                            },
                            success: function() {
                                t.renderSidebar();
                                t.renderBuilder()
                            }
                        })
                    }
                })
            })
        },
        renderSidebar: function() {
            var t = this,
                s = {};
            t.options.sidebarView = new j.Vs.Sidebar({
                parentView: t,
                sectionId: t.options.sectionId,
                associationId: t.options.associationId,
                leadSectionId: t.options.leadSectionId,
                GroupName: t.GroupName,
                Identifier: t.Identifier,
                Block: t.Block,
                isOwner: t.isOwner,
                LayoutId: t.LayoutId,
                selectedContent: t.selectedContent,
                isManager: t.isManager
            });
            p3.renderFixedSidebar(t.options.sidebarView, s);
            t.options.sidebarView.on("layoutChange", function(u) {
                t.LayoutId = u;
                t.pendingInd = true;
                t.selectedContent.pendingInd = true;
                t.selectedContent.fetch({
                    error: function() {
                        p3.displayError("Error loading selected content")
                    },
                    success: function() {
                        t.renderBuilder()
                    }
                });
                t.renderFooter()
            });
            t.options.sidebarView.on("dataImported", function(w) {
                if (w && w.length > 0) {
                    var v = t.builder.getLayoutOrder(0, 0, 0),
                        u, x;
                    if (w.length > 1) {
                        for (u = 0; u < v.length; u++) {
                            if (v[u].RowIndex === 0 && v[u].ColumnIndex === 0) {
                                v[u].CellIndex += w.length - 1
                            }
                        }
                    }
                    for (u = 0; u < w.length; u++) {
                        v.push({
                            ContentId: w[u],
                            ContentIndexId: 0,
                            RowIndex: 0,
                            ColumnIndex: 0,
                            CellIndex: u
                        })
                    }
                    x = new j.Ms.LayoutSave({
                        SectionId: t.options.leadSectionId,
                        AssociationId: t.options.associationId,
                        LayoutId: t.layoutId,
                        ChangeLayout: false,
                        PendingInd: true,
                        ContentItems: v
                    });
                    x.save({}, {
                        success: function(y, z) {
                            t.pendingInd = true;
                            t.selectedContent.pendingInd = true;
                            t.selectedContent.fetch({
                                error: function() {
                                    p3.displayError("Error loading selected content")
                                },
                                success: function() {
                                    t.renderSidebar();
                                    t.renderBuilder()
                                }
                            });
                            t.renderFooter()
                        },
                        error: function(y, z) {
                            p3.displayError("Error changing layout")
                        }
                    })
                } else {
                    t.renderBuilder()
                }
            })
        },
        renderBuilder: function() {
            var t = this,
                s;
            s = new j.Vs.Builder({
                layoutId: t.LayoutId,
                content: t.selectedContent,
                leadSectionId: t.options.leadSectionId,
                associationId: t.options.associationId,
                sectionId: t.options.sectionId,
                isOwner: t.isOwner,
                isManager: t.isManager,
                buildings: t.buildings,
                registrations: t.registrations
            });
            t.builder = s;
            p3.rV(s, t.Containers.Workspace, true);
            s.on("contentChange", function() {
                t.pendingInd = true;
                t.selectedContent.pendingInd = true;
                t.selectedContent.fetch({
                    error: function() {
                        p3.displayError("Error loading selected content")
                    },
                    success: function() {
                        t.renderBuilder()
                    }
                });
                t.renderFooter()
            });
            s.on("contentRemoved", function() {
                t.pendingInd = true;
                t.selectedContent.pendingInd = true;
                t.selectedContent.fetch({
                    error: function() {
                        p3.displayError("Error loading selected content")
                    },
                    success: function() {
                        t.renderSidebar()
                    }
                });
                t.renderFooter()
            });
            s.on("contentMove", function() {
                t.pendingInd = true;
                t.renderFooter()
            })
        },
        renderFooter: function() {
            var t = this,
                s;
            s = new j.Vs.Footer({
                leadSectionId: t.options.leadSectionId,
                sectionId: t.options.sectionId,
                pendingInd: t.pendingInd,
                associationId: t.options.associationId,
                layoutId: t.LayoutId
            });
            p3.renderFixedFooter(s);
            s.on("pendingCleared", function(u) {
                t.pendingInd = false;
                if (!u) {
                    var v = new j.Cs.Section({}, {
                        sectionId: t.options.leadSectionId,
                        associationId: t.options.associationId
                    });
                    v.fetch({
                        async: false,
                        error: function() {
                            p3.displayError("Error loading section information")
                        },
                        success: function() {
                            v.each(function(w) {
                                if (w.get("Id") === parseInt(t.options.sectionId, 10)) {
                                    t.LayoutId = w.get("LayoutId")
                                }
                            })
                        }
                    });
                    t.selectedContent.pendingInd = false;
                    t.selectedContent.fetch({
                        error: function() {
                            p3.displayError("Error loading selected content")
                        },
                        success: function() {
                            t.renderBuilder();
                            t.renderSidebar()
                        }
                    })
                }
                t.renderFooter()
            })
        },
        expandChannels: function(s) {
            $(".pages-layout-block-detail").show();
            $(".content-filter-options").show();
            return false
        },
        collapseChannels: function(s) {
            $(".pages-layout-block-detail").hide();
            $(".content-filter-options").hide();
            return false
        }
    });
    j.Vs.Footer = Bb.View.extend({
        template: "grouppage/footer.template.html",
        events: {
            "click #btn-cancel-pending": "cancelClick",
            "click #btn-publish": "publishClick",
            "click #btn-publish-view": "publishViewClick"
        },
        render: function(s) {
            var t = this;
            $(s).html(t.el);
            t.renderTemplate()
        },
        renderTemplate: function() {
            var s = this;
            p3.fT(s.template, function(t) {
                s.$el.html(t({
                    leadSectionId: s.options.leadSectionId,
                    sectionId: s.options.sectionId,
                    pendingInd: s.options.pendingInd,
                    association: s.options.associationId,
                    layoutId: s.options.layoutId
                }))
            })
        },
        cancelClick: function() {
            this.savePendingStatus(false, true, false)
        },
        publishClick: function() {
            this.savePendingStatus(true, false, false)
        },
        publishViewClick: function() {
            this.savePendingStatus(true, false, true)
        },
        savePendingStatus: function(u, s, t) {
            var w = this,
                v;
            v = new j.Ms.LayoutSave({
                SectionId: w.options.leadSectionId,
                AssociationId: w.options.associationId,
                PendingInd: false,
                CancelPending: s,
                PublishBulletinBoard: u
            });
            v.save({}, {
                success: function(x, y) {
                    if (t) {
                        p3.router().navigate(j.Us.getBulletinBoardUrl(w.options.associationId, w.options.sectionId), true)
                    } else {
                        w.trigger("pendingCleared", u)
                    }
                },
                error: function(x, y) {
                    p3.displayError("Error saving layout")
                }
            })
        }
    });
    j.Vs.Sidebar = Bb.View.extend({
        template: "grouppage/sidebar.template.html",
        className: "workspace-sidebar",
        events: {
            "click .page-layout-link": "saveLayoutChange",
            "click #import-button": "openImportDialog"
        },
        initialize: function() {
            this.Containers = {};
            this.schoolYears = new j.Cs.ExistingSchoolYears();
            this.schoolYears.fetch({
                error: function() {
                    p3.displayError("Error loading schoolYears")
                }
            })
        },
        render: function(s) {
            var u = this,
                t;
            $(s).html(u.el);
            t = new j.Cs.Content({}, {
                sectionId: u.options.sectionId,
                leadSectionId: u.options.leadSectionId
            });
            t.fetch({
                error: function() {
                    p3.displayError("Error loading available content")
                },
                success: function() {
                    var x = [],
                        w, v;
                    w = u.options.selectedContent.pluck("ContentId");
                    if (u.options.associationId.toString() === "2") {
                        w.push(268)
                    }
                    t.each(function(y) {
                        if (y.get("ShowContentType")) {
                            if (w.indexOf(y.get("ContentId")) === -1) {
                                v = e.Us.findContentById(y.get("ContentId"));
                                if (v) {
                                    x.push({
                                        Id: y.get("ContentId"),
                                        Name: v.Name,
                                        IconClass: v.IconClass
                                    })
                                }
                            }
                        }
                    });
                    u.unusedContent = x;
                    u.renderTemplate()
                }
            })
        },
        renderTemplate: function() {
            var s = this;
            p3.fT(s.template, function(v) {
                var u = j.Us.getLayoutIcon(s.options.LayoutId),
                    w = j.Us.getBulletinBoardUrl(s.options.associationId, s.options.sectionId),
                    t = [];
                t.push({
                    Id: 408,
                    Name: "Horizontal Line",
                    IconClass: "p3icon-line"
                });
                t.push({
                    Id: 407,
                    Name: "Spacer",
                    IconClass: "p3icon-spacer"
                });
                s.$el.html(v({
                    sectionId: s.options.sectionId,
                    GroupName: s.options.GroupName,
                    Identifier: s.options.Identifier,
                    Block: s.options.Block,
                    isOwner: s.options.isOwner,
                    groupLink: w,
                    elements: t,
                    unusedContent: s.unusedContent,
                    layoutIcon: u,
                    canEdit: s.options.isOwner || s.options.isManager
                }));
                if (s.options.isOwner || s.options.isManager) {
                    j.Us.initDraggable()
                }
            })
        },
        saveLayoutChange: function(t) {
            var w = this,
                s = $(t.currentTarget),
                u = s.data("id"),
                v;
            $(".btn-group").removeClass("open");
            if (u !== w.options.LayoutId) {
                $("#selected-layout-icon").removeClass().addClass(s.find("i").attr("class"));
                v = new j.Ms.LayoutSave({
                    SectionId: w.options.leadSectionId,
                    AssociationId: w.options.associationId,
                    LayoutId: u,
                    ChangeLayout: true,
                    PendingInd: true
                });
                v.save({}, {
                    async: false,
                    success: function(x, y) {
                        w.options.LayoutId = u;
                        w.trigger("layoutChange", u)
                    },
                    error: function(x, y) {
                        p3.displayError("Error changing layout")
                    }
                })
            }
            return false
        },
        openImportDialog: function() {
            var v = this,
                t, s, u;
            t = new j.Vs.ImportContent({
                schoolYears: v.schoolYears,
                currentSections: j.Data.sections,
                leadSectionId: v.options.leadSectionId,
                associationId: v.options.associationId
            });
            t.on("save", function(w) {
                var x = [];
                for (s = 0; s < w.length; s++) {
                    for (u = 0; u < v.unusedContent.length; u++) {
                        if (v.unusedContent[u].Id === w[s]) {
                            x.push(w[s]);
                            break
                        }
                    }
                }
                v.trigger("dataImported", x)
            });
            p3.rV(t, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        }
    });
    j.Vs.Builder = Bb.View.extend({
        template: "grouppage/builder.template.html",
        events: {
            "click .pages-layout-block-delete": "deleteContent",
            "click .block-options": "editOptions"
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(s) {
            var t = this;
            $(s).html(t.el);
            t.renderTemplate()
        },
        renderTemplate: function() {
            var u = this,
                t = j.Us.buildRows(u.options.layoutId),
                s = (p3.Config.IsSmallCollege) ? "Error retreiving faculty." : "Error retreiving teachers.";
            p3.fT(u.template, function(z) {
                u.$el.html(z({
                    rows: t
                }));
                var v = $("#group-workspace"),
                    y, x, w;
                v.css({
                    "background-color": "rgb(242,249,255)",
                    "background-image": "linear-gradient(90deg, transparent 28px, rgba(255,255,255,61) 38px)",
                    "background-size": "38px"
                });
                y = new j.Cs.Sections({}, {
                    sectionId: u.options.leadSectionId
                });
                j.Data.sections = y;
                if (u.options.isOwner) {
                    x = 0
                } else {
                    if (u.options.isManager) {
                        x = 1
                    } else {
                        x = 2
                    }
                }
                y.fetch({
                    async: false,
                    data: {
                        sectionId: u.options.leadSectionId,
                        filterInd: x
                    },
                    success: function() {
                        if (y.length > 0) {
                            var A = -1;
                            y.each(function(B) {
                                if (B.get("SectionId") === parseInt(u.options.leadSectionId, 10)) {
                                    B.set("Primary", true)
                                }
                                if (B.get("ContextLabelId") !== A) {
                                    B.set("GroupHead", B.get("Association"));
                                    B.set("ShowHead", (A === -1));
                                    A = B.get("ContextLabelId")
                                }
                            })
                        }
                    },
                    error: function() {
                        p3.displayError(s)
                    }
                });
                if (!u.options.isOwner && !u.options.isManager) {
                    w = new a.Cs.Content({}, {
                        sectionId: u.options.leadSectionId,
                        leadSectionId: u.options.leadSectionId
                    });
                    w.fetch({
                        async: false,
                        error: function() {
                            p3.displayError("Error loading available content")
                        }
                    })
                }
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                    window.setTimeout(function() {
                        if (u.options.isOwner || u.options.isManager) {
                            u.initSortable()
                        }
                        u.options.content.each(function(E) {
                            var C = false,
                                A, D, B;
                            if (u.options.isOwner || u.options.isManager) {
                                E.set("canEdit", true)
                            } else {
                                A = w.get(E.get("ContentId"));
                                if (A) {
                                    C = A.get("EditorAccess") === 1
                                }
                                E.set("canEdit", C)
                            }
                            D = e.Us.findContentById(E.get("ContentId"));
                            if (D) {
                                E.set("Name", D.Name);
                                E.set("IconClass", D.IconClass)
                            }
                            B = new j.Vs.ContentItem({
                                model: E,
                                leadSectionId: u.options.leadSectionId,
                                associationId: u.options.associationId,
                                sectionId: u.options.sectionId,
                                sections: y,
                                buildings: u.options.buildings,
                                registrations: u.options.registrations,
                                active: true,
                                future: false,
                                expired: false,
                                isNarrow: j.Us.isNarrowColumn(E.get("RowIndex"), E.get("ColumnIndex"), u.options.layoutId),
                                canRemove: u.options.isOwner || u.options.isManager
                            });
                            p3.rV(B, $("#column" + E.get("RowIndex") + "_" + E.get("ColumnIndex")), false)
                        });
                        _.delay(function() {
                            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.MathJax, function() {
                                MathJax.Hub.Queue(["Typeset", MathJax.Hub])
                            })
                        }, 400)
                    }, 400)
                })
            })
        },
        initSortable: function() {
            var s = this;
            $(".pages-layout-col").sortable({
                items: "> DIV.pages-layout-block.editable",
                connectWith: ".pages-layout-col.editable",
                handle: ".pages-layout-block-header",
                placeholder: "pages-layout-placeholder",
                forcePlaceholderSize: true,
                tolerance: "pointer",
                delay: 300,
                stop: function(y, B) {
                    var u = $(B.item),
                        t = u.closest(".pages-layout-col"),
                        w = t.data("col"),
                        A = t.data("row"),
                        x = u.data("id"),
                        v = u.index(),
                        z;
                    if (u.hasClass("workspace-draggable-item")) {
                        _.defer(function() {
                            u.remove();
                            if (x < 407) {
                                $(".pages-layout-draggable-content[data-id='" + x + "']").remove()
                            }
                        });
                        z = s.getLayoutOrder(A, w, v);
                        s.addContent(z, x, 0, A, w, v)
                    } else {
                        z = s.getLayoutOrder(-1, -1, -1);
                        s.saveLayout(z, false, false)
                    }
                }
            })
        },
        getLayoutOrder: function(z, t, w) {
            var u = [],
                s = -1,
                y = -1,
                x = -1,
                v, A = this;
            $(".pages-layout-col").each(function(B, C) {
                y = $(C).data("row");
                s = $(C).data("col");
                x = -1;
                $(C).find(".pages-layout-block").each(function(E, D) {
                    if (z === y && t === s && E === w) {
                        x += 2
                    } else {
                        x += 1
                    }
                    v = $(D).find(".pages-layout-block-header").data("id");
                    if (v) {
                        u.push({
                            ContentId: v,
                            ContentIndexId: 0,
                            RowIndex: y,
                            ColumnIndex: s,
                            CellIndex: x,
                            GenericSettings: A.getSettings(v)
                        })
                    }
                })
            });
            return u
        },
        saveLayout: function(t, u, s) {
            var w = this,
                v;
            v = new j.Ms.LayoutSave({
                SectionId: w.options.leadSectionId,
                AssociationId: w.options.associationId,
                LayoutId: w.options.layoutId,
                ChangeLayout: false,
                PendingInd: true,
                ContentItems: t
            });
            v.save({}, {
                success: function(x, y) {
                    if (u) {
                        w.trigger("contentChange")
                    } else {
                        if (s) {
                            w.trigger("contentRemoved")
                        } else {
                            w.trigger("contentMove")
                        }
                    }
                },
                error: function(x, y) {
                    p3.displayError("Error changing layout")
                }
            })
        },
        addContent: function(w, u, v, x, t, s) {
            var y = this;
            w.push({
                ContentId: u,
                ContentIndexId: v,
                RowIndex: x,
                ColumnIndex: t,
                CellIndex: s
            });
            y.saveLayout(w, true, false)
        },
        deleteContent: function(u) {
            u.preventDefault();
            var s = $(u.currentTarget),
                t = s.data("id"),
                v = this;
            s.parents(".pages-layout-block").remove();
            v.saveLayout(v.getLayoutOrder(-1, -1, -1), false, t < 404)
        },
        editOptions: function(t) {
            var w = this,
                s = $(t.currentTarget).data("content"),
                u, v;
            w.options.content.each(function(x) {
                if (x.get("ContentId") === s) {
                    u = x
                }
            });
            v = new j.Vs.HeaderOptions({
                contentId: s,
                model: u
            });
            p3.rV(v, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            v.on("HeaderSaved", function() {
                w.saveLayout(w.getLayoutOrder(-1, -1, -1), false, false)
            });
            return false
        },
        getSettings: function(s) {
            var u = this,
                t = "";
            u.options.content.each(function(v) {
                if (v.get("ContentId") === s) {
                    if (v.get("GenericSettings")) {
                        t = v.get("GenericSettings")
                    }
                }
            });
            return t
        }
    });
    j.Vs.HeaderOptions = Bb.View.extend({
        template: "grouppage/header.options.template.html",
        events: {
            "click #btnSave": "saveHeader",
            "submit form": "saveHeader"
        },
        render: function(s) {
            var t = this;
            $(s).html(t.el);
            t.renderTemplate()
        },
        renderTemplate: function() {
            var u = this,
                t, s = "optTitle";
            if (u.model.get("GenericSettings")) {
                t = JSON.parse(u.model.get("GenericSettings"));
                if (t.DisplayOption) {
                    s = t.DisplayOption
                }
            }
            p3.fT(u.template, function(v) {
                u.$el.html(v({
                    HeaderText: j.Us.getCusomHeader(u.model),
                    ContentType: e.Us.findContentById(u.options.contentId).Name,
                    Link: u.options.contentId === 2,
                    linkOption: s
                }))
            })
        },
        saveHeader: function(s) {
            var w = this,
                u = {},
                v, t = $("#HeaderText").val();
            if (t.length > 0) {
                u.HeaderText = t
            }
            if (w.options.contentId === 2) {
                u.DisplayOption = $('input[type="radio"][name=DisplayOption]:checked:first').val()
            }
            if (u.HeaderText || u.DisplayOption) {
                v = JSON.stringify(u)
            }
            w.model.set("GenericSettings", v);
            w.trigger("HeaderSaved");
            p3.Layout.Containers.Modal.modal("hide")
        }
    });
    j.Vs.ContentItem = Bb.View.extend({
        className: "pages-layout-block editable",
        template: "grouppage/content.block.template.html",
        events: {
            "click .active-content-check": "contentFilterChange",
            "click .future-content-check": "contentFilterChange",
            "click .expired-content-check": "contentFilterChange",
            "change .event-date": "eventDateChange"
        },
        renderTemplate: function() {
            var u = this,
                t = true,
                s = false;
            switch (u.model.get("ContentId")) {
                case 41:
                case 250:
                case 407:
                case 408:
                case 45:
                case 71:
                case 387:
                    t = false;
                    break
            }
            if (u.model.get("ContentId") === 5) {
                s = true
            }
            p3.fT(u.template, function(v) {
                u.$el.html(v({
                    contentInfo: u.model.toJSON(),
                    showFilter: t,
                    active: u.active,
                    future: u.future,
                    expired: u.expired,
                    dateFilter: s,
                    fromDate: u.fromDate,
                    toDate: u.toDate,
                    canRemove: u.options.canRemove
                }))
            });
            if (u.model.get("ContentId") < 404) {
                window.setTimeout(function() {
                    g.Us.initialize(".date-input");
                    u.renderContent()
                }, 300)
            }
        },
        initialize: function() {
            var u = this,
                s, t;
            u.Containers = {};
            u.active = u.options.active;
            u.future = u.options.future;
            u.expired = u.options.expired;
            u.expanded = false;
            s = f.localDateTime();
            s.setDate(1);
            u.fromDate = f.getDateString(s);
            t = new Date(s);
            t.setMonth(s.getMonth() + 1);
            t.setDate(s.getDate() - 1);
            u.toDate = f.getDateString(t)
        },
        render: function(s) {
            $(s).append(this.el);
            this.renderTemplate()
        },
        renderContent: function() {
            var D = this,
                w, u, x = j.Us.getContextLabel(D.options.associationId),
                s = true,
                z, t, v, y = "",
                C = "",
                B, A;
            switch (D.model.get("ContentId")) {
                case 2:
                    if (D.options.associationId === 3) {
                        s = false
                    }
                    u = new k.Cs.Link({}, {
                        sectionId: D.options.sectionId,
                        leadSectionId: D.options.leadSectionId,
                        contextLabelId: x,
                        editMode: true,
                        active: D.active,
                        future: D.future,
                        expired: D.expired
                    });
                    if (D.active || D.future || D.expired) {
                        u.fetch({
                            async: false,
                            success: function() {
                                w = new k.Vs.LinkView({
                                    groupPageEdit: true,
                                    collection: u,
                                    leadSectionId: D.options.leadSectionId,
                                    editMode: true,
                                    sections: D.options.sections,
                                    contextLabelId: x,
                                    canEdit: D.model.get("canEdit"),
                                    allowExisting: s,
                                    ItemCount: 3,
                                    expanded: D.expanded
                                })
                            },
                            error: function() {
                                p3.displayError("Error loading downloads")
                            }
                        })
                    } else {
                        u.remove(u.at(0));
                        w = new k.Vs.LinkView({
                            groupPageEdit: true,
                            collection: u,
                            leadSectionId: D.options.leadSectionId,
                            editMode: true,
                            sections: D.options.sections,
                            contextLabelId: x,
                            canEdit: D.model.get("canEdit"),
                            allowExisting: s,
                            ItemCount: 3,
                            expanded: D.expanded
                        })
                    }
                    break;
                case 3:
                    u = new h.Cs.Download({}, {
                        sectionId: D.options.sectionId,
                        leadSectionId: D.options.leadSectionId,
                        editMode: true,
                        active: D.active,
                        future: D.future,
                        expired: D.expired,
                        contextLabelId: x
                    });
                    if (D.active || D.future || D.expired) {
                        u.fetch({
                            async: false,
                            success: function() {
                                w = new h.Vs.DownloadView({
                                    groupPageEdit: true,
                                    collection: u,
                                    leadSectionId: D.options.leadSectionId,
                                    editMode: true,
                                    sections: D.options.sections,
                                    contextLabelId: x,
                                    canEdit: D.model.get("canEdit"),
                                    ItemCount: 3,
                                    expanded: D.expanded
                                })
                            },
                            error: function() {
                                p3.displayError("Error loading downloads")
                            }
                        })
                    } else {
                        u.remove(u.at(0));
                        w = new h.Vs.DownloadView({
                            groupPageEdit: true,
                            collection: u,
                            leadSectionId: D.options.leadSectionId,
                            editMode: true,
                            sections: D.options.sections,
                            contextLabelId: x,
                            canEdit: D.model.get("canEdit"),
                            ItemCount: 3,
                            expanded: D.expanded
                        })
                    }
                    break;
                case 5:
                    u = new i.Cs.Event({}, {
                        sectionId: D.options.sectionId,
                        leadSectionId: D.options.leadSectionId,
                        contextLabelId: x,
                        editMode: true,
                        fromDate: D.fromDate,
                        toDate: D.toDate
                    });
                    u.fetch({
                        async: false,
                        success: function() {
                            w = new i.Vs.EventView({
                                groupPageEdit: true,
                                collection: u,
                                editMode: true,
                                leadSectionId: D.options.leadSectionId,
                                sections: D.options.sections,
                                registrations: D.options.registrations,
                                buildings: D.options.buildings,
                                canEdit: D.model.get("canEdit"),
                                contextLabelId: x,
                                ItemCount: 3,
                                expanded: D.expanded
                            })
                        },
                        error: function() {
                            p3.displayError("Error loading events")
                        }
                    });
                    break;
                case 6:
                    z = false;
                    if (p3.Data.Context.findByTaskId(53222)) {
                        t = new m.Ms.NewsCategory();
                        t.fetch({
                            data: {
                                id: 0,
                                contextLabelId: x
                            },
                            async: false,
                            success: function() {
                                z = (t.get("CommentApprovalInd") === 1)
                            },
                            error: function() {
                                p3.displayError("Error loading news category settings")
                            }
                        })
                    }
                    u = new m.Cs.News({}, {
                        sectionId: D.options.sectionId,
                        leadSectionId: D.options.leadSectionId,
                        editMode: true,
                        active: D.active,
                        future: D.future,
                        expired: D.expired,
                        contextLabelId: x
                    });
                    if (D.active || D.future || D.expired) {
                        u.fetch({
                            async: false,
                            success: function() {
                                w = new m.Vs.NewsView({
                                    groupPageEdit: true,
                                    collection: u,
                                    leadSectionId: D.options.leadSectionId,
                                    editMode: true,
                                    sections: D.options.sections,
                                    canEdit: D.model.get("canEdit"),
                                    contextLabelId: x,
                                    manageComments: z,
                                    ItemCount: 3,
                                    expanded: D.expanded
                                })
                            },
                            error: function() {
                                p3.displayError("Error loading news")
                            }
                        })
                    } else {
                        u.remove(u.at(0));
                        w = new m.Vs.NewsView({
                            groupPageEdit: true,
                            collection: u,
                            leadSectionId: D.options.leadSectionId,
                            editMode: true,
                            sections: D.options.sections,
                            canEdit: D.model.get("canEdit"),
                            contextLabelId: x,
                            manageComments: z,
                            ItemCount: 3,
                            expanded: D.expanded
                        })
                    }
                    break;
                case 10:
                    u = new c.Cs.Announcement({}, {
                        sectionId: D.options.sectionId,
                        leadSectionId: D.options.leadSectionId,
                        editMode: true,
                        active: D.active,
                        future: D.future,
                        expired: D.expired,
                        contextLabelId: x
                    });
                    if (D.active || D.future || D.expired) {
                        u.fetch({
                            async: false,
                            success: function() {
                                w = new c.Vs.AnnouncementView({
                                    groupPageEdit: true,
                                    collection: u,
                                    leadSectionId: D.options.leadSectionId,
                                    editMode: true,
                                    sections: D.options.sections,
                                    contextLabelId: x,
                                    canEdit: D.model.get("canEdit"),
                                    ItemCount: 3,
                                    expanded: D.expanded
                                })
                            },
                            error: function() {
                                p3.displayError("Error loading announcements")
                            }
                        })
                    } else {
                        u.remove(u.at(0));
                        w = new c.Vs.AnnouncementView({
                            groupPageEdit: true,
                            collection: u,
                            leadSectionId: D.options.leadSectionId,
                            editMode: true,
                            sections: D.options.sections,
                            contextLabelId: x,
                            canEdit: D.model.get("canEdit"),
                            ItemCount: 3,
                            expanded: D.expanded
                        })
                    }
                    break;
                case 31:
                    u = new l.Cs.Media({}, {
                        sectionId: D.options.sectionId,
                        leadSectionId: D.options.leadSectionId,
                        contentId: 31,
                        editMode: true,
                        active: D.active,
                        future: D.future,
                        expired: D.expired,
                        contextLabelId: x
                    });
                    if (D.active || D.future || D.expired) {
                        u.fetch({
                            async: false,
                            success: function() {
                                w = new n.Vs.AlbumView({
                                    groupPageEdit: true,
                                    collection: u,
                                    leadSectionId: D.options.leadSectionId,
                                    editMode: true,
                                    sections: D.options.sections,
                                    contextLabelId: x,
                                    canEdit: D.model.get("canEdit"),
                                    ItemCount: 3,
                                    expanded: D.expanded
                                })
                            },
                            error: function() {
                                p3.displayError("Error loading photos")
                            }
                        })
                    } else {
                        u.remove(u.at(0));
                        w = new n.Vs.AlbumView({
                            groupPageEdit: true,
                            collection: u,
                            leadSectionId: D.options.leadSectionId,
                            editMode: true,
                            sections: D.options.sections,
                            contextLabelId: x,
                            canEdit: D.model.get("canEdit"),
                            ItemCount: 3,
                            expanded: D.expanded
                        })
                    }
                    break;
                case 165:
                    u = new l.Cs.Media({}, {
                        sectionId: D.options.sectionId,
                        leadSectionId: D.options.leadSectionId,
                        contentId: 165,
                        editMode: true,
                        active: D.active,
                        future: D.future,
                        expired: D.expired,
                        contextLabelId: x
                    });
                    if (D.active || D.future || D.expired) {
                        u.fetch({
                            async: false,
                            success: function() {
                                w = new d.Vs.AlbumView({
                                    groupPageEdit: true,
                                    collection: u,
                                    leadSectionId: D.options.leadSectionId,
                                    editMode: true,
                                    sections: D.options.sections,
                                    contextLabelId: x,
                                    canEdit: D.model.get("canEdit"),
                                    ItemCount: 3,
                                    expanded: D.expanded
                                })
                            },
                            error: function() {
                                p3.displayError("Error loading audio")
                            }
                        })
                    } else {
                        u.remove(u.at(0));
                        w = new d.Vs.AlbumView({
                            groupPageEdit: true,
                            collection: u,
                            leadSectionId: D.options.leadSectionId,
                            editMode: true,
                            sections: D.options.sections,
                            contextLabelId: x,
                            canEdit: D.model.get("canEdit"),
                            ItemCount: 3,
                            expanded: D.expanded
                        })
                    }
                    break;
                case 167:
                    u = new l.Cs.Media({}, {
                        sectionId: D.options.sectionId,
                        leadSectionId: D.options.leadSectionId,
                        contentId: 167,
                        editMode: true,
                        active: D.active,
                        future: D.future,
                        expired: D.expired,
                        contextLabelId: x
                    });
                    if (D.active || D.future || D.expired) {
                        u.fetch({
                            async: false,
                            success: function() {
                                w = new r.Vs.AlbumView({
                                    groupPageEdit: true,
                                    collection: u,
                                    leadSectionId: D.options.leadSectionId,
                                    editMode: true,
                                    sections: D.options.sections,
                                    contextLabelId: x,
                                    canEdit: D.model.get("canEdit"),
                                    ItemCount: 3,
                                    expanded: D.expanded
                                })
                            },
                            error: function() {
                                p3.displayError("Error loading video")
                            }
                        })
                    } else {
                        u.remove(u.at(0));
                        w = new r.Vs.AlbumView({
                            groupPageEdit: true,
                            collection: u,
                            leadSectionId: D.options.leadSectionId,
                            editMode: true,
                            sections: D.options.sections,
                            contextLabelId: x,
                            canEdit: D.model.get("canEdit"),
                            ItemCount: 3,
                            expanded: D.expanded
                        })
                    }
                    break;
                case 41:
                    u = new o.Ms.RssReader({
                        leadSectionId: D.options.leadSectionId,
                        contextLabelId: x
                    });
                    u.fetch({
                        async: false,
                        success: function() {
                            w = new j.Vs.RssReaderView({
                                reader: u,
                                contextLabelId: x,
                                leadSectionId: D.options.leadSectionId,
                                canEdit: D.model.get("canEdit")
                            })
                        },
                        error: function() {
                            p3.displayError("Error loading Rss")
                        }
                    });
                    break;
                case 250:
                    u = new q.Cs.Text({}, {
                        sectionId: D.options.sectionId,
                        leadSectionId: D.options.leadSectionId,
                        contextLabelId: x
                    });
                    u.fetch({
                        async: false,
                        success: function() {
                            w = new j.Vs.TextView({
                                collection: u,
                                contextLabelId: x,
                                canEdit: D.model.get("canEdit")
                            })
                        },
                        error: function() {
                            p3.displayError("Error loading text")
                        }
                    });
                    break;
                case 78:
                case 79:
                case 80:
                    v = D.model.get("ContentId");
                    y = "Expectations";
                    C = "expe";
                    if (v === 78) {
                        y = "Syllabus";
                        C = "syll"
                    } else {
                        if (v === 79) {
                            y = "Grading Rubric";
                            C = "grad"
                        }
                    }
                    u = new b.Cs.AcademicContent({}, {
                        sectionId: D.options.sectionId,
                        leadSectionId: D.options.leadSectionId,
                        contentId: v,
                        active: D.active,
                        future: D.future,
                        expired: D.expired
                    });
                    u.fetch({
                        async: false,
                        success: function() {
                            w = new b.Vs.AcademicContentView({
                                groupPageEdit: true,
                                collection: u,
                                header: y,
                                prefix: C,
                                editMode: true,
                                active: D.active,
                                future: D.future,
                                expired: D.expired,
                                sections: D.options.sections,
                                contentId: v,
                                canEdit: D.model.get("canEdit"),
                                ItemCount: 3,
                                expanded: D.expanded
                            })
                        },
                        error: function() {
                            p3.displayError("Error loading academic content")
                        }
                    });
                    break;
                case 45:
                    B = new p.Cs.Opponent();
                    B.fetch({
                        async: false,
                        error: function() {
                            p3.displayError("Error loading athletic opponents")
                        }
                    });
                    u = new p.Cs.Results({}, {
                        sectionId: D.options.leadSectionId
                    });
                    u.fetch({
                        async: false,
                        data: {
                            sectionId: u.sectionId
                        },
                        success: function() {
                            w = new p.Vs.TeamScores({
                                editMode: true,
                                canEdit: D.model.get("canEdit"),
                                sections: D.options.sections,
                                possibleOpponents: B,
                                ItemCount: 3,
                                expanded: true,
                                isNarrow: D.options.isNarrow
                            });
                            w.parentView = D;
                            w.collection = u
                        },
                        error: function() {
                            p3.displayError("Error loading athletic results")
                        }
                    });
                    break;
                case 387:
                    A = new j.Ms.Widget({
                        contextValue: D.options.leadSectionId,
                        contextLabelId: x
                    });
                    A.fetch({
                        async: false,
                        data: {
                            contextLabelId: x,
                            contextValue: D.options.leadSectionId
                        },
                        success: function() {
                            w = new j.Vs.EmbedView({
                                model: A,
                                contextLabelId: x,
                                canEdit: D.model.get("canEdit"),
                                contextValue: D.options.leadSectionId
                            })
                        },
                        error: function() {
                            p3.displayError("Error loading embed")
                        }
                    });
                    break
            }
            if (w) {
                D.Containers.Content = D.$(".content-manage");
                p3.rV(w, D.Containers.Content, true);
                w.renderTemplate();
                w.on("showAll", function(E) {
                    D.expanded = E
                })
            }
        },
        contentFilterChange: function(t) {
            var u = this,
                s = $(t.currentTarget);
            if (s.hasClass("active-content-check")) {
                u.active = !u.active
            } else {
                if (s.hasClass("future-content-check")) {
                    u.future = !u.future
                } else {
                    u.expired = !u.expired
                }
            }
            u.renderContent()
        },
        eventDateChange: function(s) {
            var v = this,
                t = $("#event_from_date").datepicker("getDate"),
                u = $("#event_to_date").datepicker("getDate");
            v.fromDate = f.getDateString(t);
            v.toDate = f.getDateString(u);
            v.renderContent()
        }
    });
    j.Vs.TextView = Bb.View.extend({
        template: "grouppage/text.manage.template.html",
        events: {
            "click #edit_text": "openEditModal",
            "click #delete_text": "openDeleteModal"
        },
        renderTemplate: function(t) {
            var u = this,
                s = new q.Ms.TextProperties({
                    categoryId: u.collection.models[0].get("CategoryID")
                });
            s.fetch({
                success: function() {
                    u.properties = s.attributes[0]
                },
                error: function() {
                    p3.displayError("Error loading text properites")
                }
            });
            p3.fT(u.template, function(v) {
                u.$el.html(v({
                    text: u.collection.models[0].toJSON(),
                    canEdit: u.options.canEdit
                }))
            })
        },
        render: function(s) {
            $(s).append(this.el)
        },
        openEditModal: function() {
            var w, u = "",
                v = "",
                s = 0,
                t = 0;
            if (this.collection.models.length > 0) {
                w = this.collection.models[0];
                t = w.get("CategoryID");
                if (w.get("AlbumID") > 0) {
                    u = w.get("Description");
                    v = w.get("LongText");
                    s = w.get("AlbumID")
                }
            }
            p3.rV(new q.Vs.TextEditView({
                photos: this.collection,
                description: u,
                lng: v,
                albumId: s,
                textView: this,
                categoryId: t,
                showFontOptions: true
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        },
        refreshText: function() {
            var s = this;
            q.Us.refreshText(true, s.options.collection.sectionId, s.options.collection.leadSectionId, s, s.options.contextLabelId)
        },
        openDeleteModal: function() {
            var s = this;
            this.on("textDeleted", this.refreshText, this);
            q.Us.textDeleteModal(this.collection.models[0].get("AlbumID"), s.options.contextLabelId, s);
            return false
        }
    });
    j.Vs.EmbedView = Bb.View.extend({
        template: "grouppage/embed.manage.template.html",
        events: {
            "click #edit_embed": "openEditModal",
            "click #delete_embed": "openDeleteModal"
        },
        renderTemplate: function(s) {
            var t = this;
            p3.fT(t.template, function(u) {
                t.$el.html(u({
                    embed: t.model.toJSON(),
                    canEdit: t.options.canEdit
                }))
            })
        },
        render: function(s) {
            $(s).append(this.el)
        },
        openEditModal: function() {
            var t = this,
                s = new j.Vs.EditEmbed({
                    model: t.model
                });
            p3.rV(s, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            s.on("embedSaved", function() {
                t.refreshEmbed()
            });
            return false
        },
        refreshEmbed: function() {
            var s = this;
            s.renderTemplate()
        },
        openDeleteModal: function() {
            var s = this;
            p3.showConfirm("Delete Embed", "Are you sure you wish to delete this Embed?", null, function() {
                var t = new j.Ms.WidgetDelete({
                    Id: s.model.get("WidgetId")
                });
                t.destroy({
                    error: function() {
                        p3.displayError("Error deleting embed")
                    },
                    success: function() {
                        s.model.set({
                            WidgetId: 0,
                            ShortDescription: "",
                            LongDescription: ""
                        });
                        s.refreshEmbed()
                    }
                })
            });
            return false
        }
    });
    j.Vs.Embed = Bb.View.extend({
        template: "grouppage/embed.template.html",
        renderTemplate: function(t) {
            var u = this,
                s = false;
            if (u.model.get("ShortDescription") || u.model.get("LongDescription")) {
                s = true
            }
            p3.fT(u.template, function(v) {
                u.$el.html(v({
                    embed: u.model.toJSON(),
                    haveData: s
                }))
            })
        },
        render: function(s) {
            $(s).append(this.el)
        }
    });
    j.Vs.EditEmbed = Bb.View.extend({
        template: "grouppage/embed.edit.template.html",
        events: {
            "click #btnSaveEmbed": "saveEmbed"
        },
        renderTemplate: function(s) {
            var t = this;
            p3.fT(t.template, function(u) {
                t.$el.html(u({
                    embed: t.model.toJSON(),
                    mode: t.model.get("WidgetId") ? "Edit" : "Add"
                }))
            })
        },
        render: function(s) {
            $(s).append(this.el);
            this.renderTemplate()
        },
        saveEmbed: function(v) {
            var z = this,
                u = z.$("#embed-title"),
                t = z.$("#embed-text"),
                x = u.val(),
                w = t.val(),
                A, y = true,
                s = $("#btnSaveEmbed");
            s.button("loading");
            if (typeof x !== "string" || x === "") {
                u.closest(".control-group").addClass("error");
                y = false
            } else {
                u.closest(".control-group").removeClass("error")
            }
            if (typeof w !== "string" || w === "") {
                t.closest(".control-group").addClass("error");
                y = false
            } else {
                t.closest(".control-group").removeClass("error")
            }
            if (y) {
                if (!z.model.get("WidgetId")) {
                    A = new j.Ms.WidgetCreate({
                        ShortDescription: x,
                        LongDescription: w,
                        ContextLabelId: z.model.get("contextLabelId"),
                        ContextValue: z.model.get("contextValue"),
                        SortOrder: 0
                    })
                } else {
                    A = new j.Ms.WidgetUpdate({
                        WidgetId: z.model.get("WidgetId"),
                        ShortDescription: x,
                        LongDescription: w,
                        ContextLabelId: z.model.get("contextLabelId"),
                        ContextValue: z.model.get("contextValue"),
                        SortOrder: 0
                    })
                }
                A.save({}, {
                    error: function(B, C) {
                        s.button("reset")
                    },
                    success: function(B, C) {
                        z.model.set({
                            ShortDescription: x,
                            LongDescription: w,
                            WidgetId: z.model.get("WidgetId") || C
                        });
                        z.trigger("embedSaved");
                        p3.showModal(p3.Layout.Containers.Modal, "hide")
                    }
                })
            } else {
                s.button("reset")
            }
            return false
        }
    });
    j.Vs.RssReaderView = Bb.View.extend({
        template: "grouppage/rss.manage.template.html",
        events: {
            "click #edit_reader": "openEditModal",
            "click #delete_reader": "openDeleteModal"
        },
        renderTemplate: function(t) {
            var u = this,
                s = u.options.reader;
            p3.fT(u.template, function(v) {
                u.$el.html(v({
                    Url: s.get("Url"),
                    canEdit: u.options.canEdit
                }));
                if (t) {
                    if (s.get("Url")) {
                        $("#delete_reader").show()
                    }
                }
            })
        },
        render: function(s) {
            $(s).append(this.el)
        },
        openEditModal: function() {
            var s = this;
            p3.rV(new o.Vs.RssReaderEditView({
                reader: s.options.reader,
                leadSectionId: s.options.leadSectionId,
                contextLabelId: s.options.contextLabelId,
                parentView: s
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        },
        openDeleteModal: function() {
            var s = this;
            p3.showConfirm("Delete Rss Feed", "Warning: Once you hit confirm there is no undo button. Are you really sure you want to delete this forever?", null, function() {
                var t = new o.Ms.RssReaderDelete({
                    ReaderId: s.options.reader.get("ReaderId")
                });
                t.destroy({
                    error: function() {
                        p3.displayError("Error deleting rss Feed")
                    },
                    success: function() {
                        o.Us.refreshReader(true, s.options.leadSectionId, s, s.options.contextLabelId)
                    }
                })
            });
            return false
        }
    });
    j.Vs.LayoutView = Bb.View.extend({
        template: "grouppage/detail.layout.template.html",
        events: {
            "click .backlink": "doBack"
        },
        initialize: function() {
            var s = this;
            s.Containers = {};
            s.sectionId = this.options.sectionId || 0;
            s.leadSectionId = this.options.leadSectionId || 0;
            s.contentTypes = this.options.content;
            s.teacherId = this.options.teacherId || 0;
            s.userHasFullAccess = this.options.userHasFullAccess || 0;
            s.isOwner = this.options.isOwner || 0;
            s.isManager = this.options.isManager || 0;
            s.isEditor = false
        },
        render: function(s) {
            var t = this;
            p3.fT(t.template, function(w) {
                p3.setTitle("Bulletin Board");
                var v = j.Us.buildRows(t.options.layoutId),
                    u = t.userHasFullAccess;
                t.Rows = v;
                t.$el.html(w({
                    row: v,
                    preview: t.options.preview
                }));
                $(s).html(t.el);
                t.Containers.ManageContainer = $("#manage_container");
                $(".nav-pills li:first").addClass("active");
                t.renderContent();
                if (!t.options.preview) {
                    if (!u) {
                        t.contentTypes.each(function(x) {
                            if (x.get("EditorAccess")) {
                                t.isEditor = true;
                                u = true
                            }
                        })
                    }
                    if (u) {
                        p3.rV(new j.Vs.EditView({
                            sectionId: t.sectionId,
                            leadSectionId: t.leadSectionId,
                            associationId: t.options.associationId
                        }), t.Containers.ManageContainer, false)
                    }
                }
            })
        },
        renderContent: function() {
            var v = this,
                u = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.MULTIMEDIA),
                s = new j.Cs.BulletinBoardContent({}, {
                    sectionId: v.options.leadSectionId,
                    associationId: v.options.associationId,
                    pendingInd: v.options.pendingInd
                }),
                t;
            s.fetch({
                error: function() {
                    p3.displayError("Error loading content layout")
                },
                success: function() {
                    var w;
                    if (v.options.associationId === 2) {
                        t = s.pluck("ContentId");
                        if (t.indexOf(45) > -1 || t.indexOf(71) > -1) {
                            w = new p.Cs.Results({}, {
                                sectionId: v.options.leadSectionId
                            });
                            w.fetch({
                                async: false,
                                data: {
                                    sectionId: w.sectionId
                                },
                                error: function() {
                                    p3.displayError("Error loading athletic results")
                                }
                            })
                        }
                    }
                    s.each(function(I) {
                        var B = I.get("ContentId"),
                            C = v.contentTypes.get(B),
                            G = j.Us.getCusomHeader(I),
                            z, H, A, D, F, y, K, E, L, M = false,
                            N = true,
                            J, x;
                        if (C || (u & (B === 31 || B === 165 || B === 167)) || B === 407 || B === 408) {
                            z = "#column" + I.get("RowIndex") + "_" + I.get("ColumnIndex");
                            x = $(z);
                            H = j.Us.isNarrowColumn(I.get("RowIndex"), I.get("ColumnIndex"), v.options.layoutId);
                            switch (B) {
                                case 2:
                                    if (I.get("GenericSettings")) {
                                        L = JSON.parse(I.get("GenericSettings"));
                                        if (L.DisplayOption) {
                                            switch (L.DisplayOption) {
                                                case "optImage":
                                                    N = false;
                                                    M = true;
                                                    break;
                                                case "optTitleImage":
                                                    M = true;
                                                    break
                                            }
                                        }
                                    }
                                    A = new k.Cs.Link({}, {
                                        sectionId: v.sectionId,
                                        leadSectionId: v.leadSectionId,
                                        contextLabelId: v.options.contextLabelId
                                    });
                                    D = new k.Vs.LinkView({
                                        collection: A,
                                        leadSectionId: v.leadSectionId,
                                        contextLabelId: v.options.contextLabelId,
                                        customHeader: G,
                                        showTitle: N,
                                        showImage: M
                                    });
                                    p3.rV(D, z, false);
                                    A.fetch({
                                        error: function() {
                                            p3.displayError("Error loading links")
                                        }
                                    });
                                    break;
                                case 3:
                                    A = new h.Cs.Download({}, {
                                        sectionId: v.sectionId,
                                        leadSectionId: v.leadSectionId,
                                        contextLabelId: v.options.contextLabelId
                                    });
                                    D = new h.Vs.DownloadView({
                                        collection: A,
                                        leadSectionId: v.leadSectionId,
                                        contextLabelId: v.options.contextLabelId,
                                        customHeader: G
                                    });
                                    p3.rV(D, z, false);
                                    A.fetch({
                                        error: function() {
                                            p3.displayError("Error loading downloads")
                                        }
                                    });
                                    break;
                                case 5:
                                    F = f.localDateTime();
                                    A = new i.Cs.Event({}, {
                                        editMode: true,
                                        fromDate: f.getDateString(F).ApiFormat(),
                                        sectionId: v.sectionId,
                                        leadSectionId: v.leadSectionId,
                                        contextLabelId: v.options.contextLabelId
                                    });
                                    D = new i.Vs.EventView({
                                        collection: A,
                                        fromDate: f.getDateString(F).ApiFormat(),
                                        leadSectionId: v.leadSectionId,
                                        contextLabelId: v.options.contextLabelId,
                                        customHeader: G
                                    });
                                    p3.rV(D, z, false);
                                    A.fetch({
                                        error: function() {
                                            p3.displayError("Error loading events")
                                        }
                                    });
                                    break;
                                case 6:
                                    A = new m.Cs.News({}, {
                                        sectionId: v.sectionId,
                                        leadSectionId: v.leadSectionId,
                                        editMode: false,
                                        active: true,
                                        future: false,
                                        expired: false,
                                        contextLabelId: v.options.contextLabelId
                                    });
                                    D = new m.Vs.NewsView({
                                        collection: A,
                                        leadSectionId: v.leadSectionId,
                                        contextLabelId: v.options.contextLabelId,
                                        newLayout: true,
                                        customHeader: G
                                    });
                                    p3.rV(D, z, false);
                                    A.fetch({
                                        error: function() {
                                            p3.displayError("Error loading news")
                                        }
                                    });
                                    break;
                                case 10:
                                    A = new c.Cs.Announcement({}, {
                                        sectionId: v.sectionId,
                                        leadSectionId: v.leadSectionId,
                                        editMode: false,
                                        active: true,
                                        future: false,
                                        expired: false,
                                        contextLabelId: v.options.contextLabelId
                                    });
                                    D = new c.Vs.AnnouncementView({
                                        collection: A,
                                        leadSectionId: v.leadSectionId,
                                        contextLabelId: v.options.contextLabelId,
                                        customHeader: G
                                    });
                                    p3.rV(D, z, false);
                                    A.fetch({
                                        error: function() {
                                            p3.displayError("Error loading announcements")
                                        }
                                    });
                                    break;
                                case 31:
                                    y = v.getMediaCellCount(I);
                                    A = new l.Cs.Media({}, {
                                        sectionId: v.sectionId,
                                        leadSectionId: v.leadSectionId,
                                        contentId: 31,
                                        editMode: false,
                                        active: true,
                                        future: false,
                                        expired: false,
                                        contextLabelId: v.options.contextLabelId
                                    });
                                    D = new l.Vs.MediaContentView({
                                        viewMode: true,
                                        haveData: false,
                                        mediaItem: A,
                                        contentId: 31,
                                        iconClass: "icon-picture",
                                        subFolder: "photo",
                                        useLarge: true,
                                        leadSectionId: v.leadSectionId,
                                        newLayout: true,
                                        spanClass: v.getSpanClass(y),
                                        customHeader: G
                                    });
                                    p3.rV(D, z, false);
                                    A.fetch({
                                        success: function() {
                                            var O = -1;
                                            A.each(function(P) {
                                                O += 1;
                                                if (O > 0 && O % y === 0) {
                                                    P.set("newRow", true)
                                                }
                                                if (P.get("FileCount") === 1) {
                                                    P.set("CountLabel", "1 photo")
                                                } else {
                                                    P.set("CountLabel", P.get("FileCount") + " photos")
                                                }
                                                if (P.get("NumberOfViews") === 1) {
                                                    P.set("ViewLabel", "1 view")
                                                } else {
                                                    P.set("ViewLabel", P.get("NumberOfViews") + " views")
                                                }
                                            });
                                            D.renderTemplate()
                                        },
                                        error: function() {
                                            p3.displayError("Error loading photos")
                                        }
                                    });
                                    break;
                                case 165:
                                    y = v.getMediaCellCount(I);
                                    A = new l.Cs.Media({}, {
                                        sectionId: v.sectionId,
                                        leadSectionId: v.leadSectionId,
                                        contentId: 165,
                                        editMode: false,
                                        active: true,
                                        future: false,
                                        expired: false,
                                        contextLabelId: v.options.contextLabelId
                                    });
                                    D = new l.Vs.MediaContentView({
                                        viewMode: true,
                                        haveData: false,
                                        mediaItem: A,
                                        contentId: 165,
                                        iconClass: "icon-volume-up",
                                        subFolder: "audio",
                                        useLarge: false,
                                        leadSectionId: v.leadSectionId,
                                        newLayout: true,
                                        spanClass: v.getSpanClass(y),
                                        customHeader: G
                                    });
                                    p3.rV(D, z, false);
                                    A.fetch({
                                        success: function() {
                                            var O = -1;
                                            A.each(function(P) {
                                                O += 1;
                                                if (O > 0 && O % y === 0) {
                                                    P.set("newRow", true)
                                                }
                                                K = new Date(parseInt(P.get("PublishDate").substr(6), 10));
                                                E = K.getMonth() + "/" + K.getDate() + "/" + K.getFullYear();
                                                P.set("PublishDisplay", E);
                                                if (P.get("FileCount") === 1) {
                                                    P.set("CountLabel", "1 audio clip")
                                                } else {
                                                    P.set("CountLabel", P.get("FileCount") + " audio clips")
                                                }
                                                if (P.get("NumberOfViews") === 1) {
                                                    P.set("ViewLabel", "1 view")
                                                } else {
                                                    P.set("ViewLabel", P.get("NumberOfViews") + " views")
                                                }
                                            });
                                            D.renderTemplate()
                                        },
                                        error: function() {
                                            p3.displayError("Error loading audio")
                                        }
                                    });
                                    break;
                                case 167:
                                    y = v.getMediaCellCount(I);
                                    A = new l.Cs.Media({}, {
                                        sectionId: v.sectionId,
                                        leadSectionId: v.leadSectionId,
                                        contentId: 167,
                                        editMode: false,
                                        active: true,
                                        future: false,
                                        expired: false,
                                        contextLabelId: v.options.contextLabelId
                                    });
                                    D = new l.Vs.MediaContentView({
                                        viewMode: true,
                                        haveData: false,
                                        mediaItem: A,
                                        contentId: 167,
                                        iconClass: "icon-play-circle",
                                        subFolder: "video",
                                        useLarge: false,
                                        leadSectionId: v.leadSectionId,
                                        newLayout: true,
                                        spanClass: v.getSpanClass(y),
                                        customHeader: G
                                    });
                                    p3.rV(D, z, false);
                                    A.fetch({
                                        success: function() {
                                            var P = -1,
                                                O = "videos";
                                            A.each(function(Q) {
                                                P += 1;
                                                if (P > 0 && P % y === 0) {
                                                    Q.set("newRow", true)
                                                }
                                                K = new Date(parseInt(Q.get("PublishDate").substr(6), 10));
                                                E = K.getMonth() + "/" + K.getDate() + "/" + K.getFullYear();
                                                Q.set("PublishDisplay", E);
                                                if (Q.get("VideoEAP")) {
                                                    if (Q.get("VideoFileCount") === 1) {
                                                        O = "video"
                                                    }
                                                    Q.set("CountLabel", Q.get("VideoFileCount") + " " + O)
                                                } else {
                                                    if (Q.get("FileCount") === 1) {
                                                        Q.set("CountLabel", "1 video")
                                                    } else {
                                                        Q.set("CountLabel", Q.get("FileCount") + " videos")
                                                    }
                                                }
                                                if (Q.get("NumberOfViews") === 1) {
                                                    Q.set("ViewLabel", "1 view")
                                                } else {
                                                    Q.set("ViewLabel", Q.get("NumberOfViews") + " views")
                                                }
                                            });
                                            D.renderTemplate()
                                        },
                                        error: function() {
                                            p3.displayError("Error loading videos")
                                        }
                                    });
                                    break;
                                case 41:
                                    A = new o.Ms.RssReader({
                                        leadSectionId: v.leadSectionId,
                                        contextLabelId: v.options.contextLabelId
                                    });
                                    D = new o.Vs.RssReaderView({
                                        reader: A,
                                        leadSectionId: v.leadSectionId,
                                        contextLabelId: v.options.RssReader,
                                        customHeader: G
                                    });
                                    p3.rV(D, z, false);
                                    A.fetch({
                                        error: function() {
                                            p3.displayError("Error loading rss")
                                        },
                                        success: function() {
                                            D.renderTemplate(false)
                                        }
                                    });
                                    break;
                                case 78:
                                    A = new b.Cs.AcademicContent({}, {
                                        sectionId: v.sectionId,
                                        leadSectionId: v.leadSectionId,
                                        contentId: 78,
                                        active: true,
                                        future: false,
                                        expired: false
                                    });
                                    D = new b.Vs.AcademicContentView({
                                        collection: A,
                                        header: "Syllabus",
                                        prefix: "syll",
                                        contentId: 78,
                                        customHeader: G
                                    });
                                    p3.rV(D, z, false);
                                    A.fetch({
                                        error: function() {
                                            p3.displayError("Error loading syllabus")
                                        }
                                    });
                                    break;
                                case 79:
                                    A = new b.Cs.AcademicContent({}, {
                                        sectionId: v.sectionId,
                                        leadSectionId: v.leadSectionId,
                                        contentId: 79,
                                        active: true,
                                        future: false,
                                        expired: false
                                    });
                                    D = new b.Vs.AcademicContentView({
                                        collection: A,
                                        header: "Grading Rubric",
                                        prefix: "grad",
                                        contentId: 79,
                                        customHeader: G
                                    });
                                    p3.rV(D, z, false);
                                    A.fetch({
                                        error: function() {
                                            p3.displayError("Error loading rubric")
                                        }
                                    });
                                    break;
                                case 80:
                                    A = new b.Cs.AcademicContent({}, {
                                        sectionId: v.sectionId,
                                        leadSectionId: v.leadSectionId,
                                        contentId: 80,
                                        active: true,
                                        future: false,
                                        expired: false
                                    });
                                    D = new b.Vs.AcademicContentView({
                                        collection: A,
                                        header: "Expectations",
                                        prefix: "expe",
                                        contentId: 80,
                                        customHeader: G
                                    });
                                    p3.rV(D, z, false);
                                    A.fetch({
                                        error: function() {
                                            p3.displayError("Error loading expectations")
                                        }
                                    });
                                    break;
                                case 250:
                                    A = new q.Cs.Text({}, {
                                        sectionId: v.sectionId,
                                        leadSectionId: v.leadSectionId,
                                        contextLabelId: v.options.contextLabelId
                                    });
                                    D = new q.Vs.TextView({
                                        collection: A,
                                        contextLabelId: v.options.contextLabelId,
                                        newLayout: true
                                    });
                                    p3.rV(D, z, false);
                                    A.fetch({
                                        success: function() {
                                            D.renderTemplate(false)
                                        },
                                        error: function() {
                                            p3.displayError("Error loading text")
                                        }
                                    });
                                    break;
                                case 407:
                                    x.append('<div style="height:10px;">&nbsp;</div>');
                                    break;
                                case 408:
                                    x.append('<div><hr class="styleProp" style="margin-bottom:18px;"/></div>');
                                    break;
                                case 45:
                                    D = new p.Vs.TeamScores({
                                        editMode: false,
                                        canEdit: false,
                                        ItemCount: 3,
                                        expanded: true,
                                        isNarrow: H,
                                        customHeader: G
                                    });
                                    D.parentView = v;
                                    D.collection = w;
                                    p3.rV(D, z, false);
                                    D.renderTemplate();
                                    break;
                                case 71:
                                    D = new p.Vs.Statistics({
                                        isNarrow: H,
                                        customHeader: G
                                    });
                                    D.collection = w;
                                    p3.rV(D, z, false);
                                    D.renderTemplate();
                                    break;
                                case 387:
                                    J = new j.Ms.Widget();
                                    D = new j.Vs.Embed({
                                        model: J
                                    });
                                    p3.rV(D, z, false);
                                    J.fetch({
                                        data: {
                                            contextLabelId: v.options.contextLabelId,
                                            contextValue: v.leadSectionId
                                        },
                                        success: function() {
                                            D.renderTemplate()
                                        },
                                        error: function() {
                                            p3.displayError("Error loading embed")
                                        }
                                    });
                                    break
                            }
                        }
                    });
                    _.delay(function() {
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.MathJax, function() {
                            MathJax.Hub.Queue(["Typeset", MathJax.Hub])
                        })
                    }, 400)
                }
            })
        },
        getSpanClass: function(s) {
            var t = "";
            switch (s) {
                case 1:
                    t = "span12 col-md-12";
                    break;
                case 2:
                    t = "span6 col-md-6";
                    break;
                case 3:
                    t = "span4 col-md-4";
                    break;
                case 4:
                    t = "span3 col-md-3";
                    break
            }
            return t
        },
        getMediaCellCount: function(s) {
            var u = this,
                t = 0;
            switch (u.Rows[s.get("RowIndex")].columns[s.get("ColumnIndex")].className) {
                case "span3":
                case "col-md-3":
                case "span3 col-md-3":
                case "span4":
                case "col-md-4":
                case "span4 col-md-4":
                    t = 1;
                    break;
                case "span6":
                case "col-md-6":
                case "span6 col-md-6":
                    t = 2;
                    break;
                case "span9":
                case "col-md-9":
                case "span9 col-md-9":
                    t = 3;
                    break;
                case "span12":
                case "col-md-12":
                case "span12 col-md-12":
                    t = 4;
                    break
            }
            return t
        },
        doBack: function() {
            window.history.back()
        }
    });
    j.Vs.EditView = Bb.View.extend({
        template: "grouppage/editbuilder.template.html",
        events: {},
        renderTemplate: function() {
            var t = this,
                s;
            switch (t.options.associationId) {
                case 1:
                    s = 53234;
                    break;
                case 3:
                    s = 53235;
                    break;
                case 9:
                    s = 53253;
                    break;
                case 8:
                    s = 53255;
                    break;
                case 2:
                    s = 53227;
                    break;
                case 7:
                    s = 52435;
                    break
            }
            p3.fT(t.template, function(u) {
                t.$el.html(u({
                    noImport: false,
                    sectionId: t.options.sectionId + "/" + t.options.leadSectionId,
                    taskId: s
                }))
            })
        },
        render: function(s) {
            this.renderTemplate();
            $(s).append(this.el)
        }
    });
    j.Vs.ImportContent = Bb.View.extend({
        template: "grouppage/import.content.template.html",
        events: {
            "change #school-year-dd": "yearChanged",
            "change #section-dd": "sectionChanged",
            "click #btnApply": "saveContent"
        },
        initialize: function() {
            var s = this;
            s.leadSectionId = s.options.leadSectionId;
            s.options.schoolYears.each(function(t) {
                if (t.get("Current")) {
                    s.activeYear = t.get("Label")
                }
            });
            this.Containers = {}
        },
        render: function(s) {
            var w = this,
                u = 0,
                v = new j.Cs.ExistingSections(),
                t;
            v.fetch({
                data: {
                    facultyUserId: p3.Data.Context.get("UserInfo").UserId,
                    schoolYear: w.activeYear,
                    associationId: w.options.associationId
                },
                success: function(y, z) {
                    var x = y.toJSON();
                    x = _.uniq(x, true, function(A) {
                        return A.SectionId
                    });
                    if (x.length > 0) {
                        for (t = 0; t < x.length; t++) {
                            if (x[t].SectionId === parseInt(w.leadSectionId, 10)) {
                                x.splice(t, 1);
                                break
                            }
                        }
                        if (x.length > 0) {
                            u = x[0].SectionId
                        }
                    }
                    p3.fT(w.template, function(B) {
                        w.$el.html(B({
                            schoolYears: w.options.schoolYears.toJSON(),
                            sections: x,
                            currentSections: w.options.currentSections.toJSON()
                        }));
                        $(s).html(w.el);
                        w.removeSelectedCurrentSection(u);
                        w.Containers.Content = $("#import-content-container");
                        var A = new j.Cs.ExistingSectionContent();
                        if (u > 0) {
                            A.fetch({
                                data: {
                                    sectionId: u
                                },
                                success: function() {
                                    w.renderContent(A)
                                },
                                error: function() {
                                    p3.displayError("Error retreiving existing content.")
                                }
                            })
                        } else {
                            A.remove(A.at(0));
                            w.renderContent(A)
                        }
                    })
                },
                error: function(x, y) {
                    p3.displayError("Error retreiving sections.")
                }
            })
        },
        renderContent: function(s) {
            var u = this,
                t = new j.Vs.ImportContentList({
                    content: s
                });
            u.listView = t;
            p3.rV(t, u.Containers.Content, true);
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        yearChanged: function(s) {
            var w = this,
                u = 0,
                v, t;
            w.activeYear = $("#school-year-dd").val();
            $("#section-dd").empty();
            v = new j.Cs.ExistingSections();
            v.fetch({
                data: {
                    facultyUserId: p3.Data.Context.get("UserInfo").UserId,
                    schoolYear: w.activeYear,
                    associationId: w.options.associationId
                },
                success: function(y, z) {
                    var x = y.toJSON();
                    x = _.uniq(x, true, function(A) {
                        return A.SectionId
                    });
                    if (x.length > 0) {
                        for (t = 0; t < x.length; t++) {
                            if (x[t].SectionId !== parseInt(w.leadSectionId, 10)) {
                                if (u === 0) {
                                    u = x[t].SectionId
                                }
                                $("<option />", {
                                    val: x[t].SectionId,
                                    text: x[t].Name
                                }).appendTo("#section-dd")
                            }
                        }
                    }
                    w.updateContent(u);
                    w.removeSelectedCurrentSection(u)
                },
                error: function(x, y) {
                    p3.displayError("Error retreiving sections.")
                }
            })
        },
        sectionChanged: function() {
            var t = this,
                s = $("#section-dd").val();
            t.updateContent(s);
            t.removeSelectedCurrentSection(s)
        },
        removeSelectedCurrentSection: function(s) {
            this.$(".section-checkbox[disabled]").prop("disabled", false);
            this.$('.section-checkbox[value="' + s + '"]').prop("disabled", true).prop("checked", false)
        },
        updateContent: function(t) {
            var u = this,
                s = new j.Cs.ExistingSectionContent();
            if (t > 0) {
                s.fetch({
                    async: false,
                    data: {
                        sectionId: t
                    },
                    success: function() {
                        u.listView.content = s;
                        u.listView.renderTemplate()
                    },
                    error: function() {
                        p3.displayError("Error retreiving existing content.")
                    }
                })
            } else {
                s.remove(s.at(0));
                u.listView.content = s;
                u.listView.renderTemplate()
            }
        },
        saveContent: function(w) {
            var E = this,
                A = [],
                v = [],
                u = "",
                D = true,
                B = true,
                C = true,
                z = "",
                x, y, s = $(".btn-select-item.active"),
                t = $(".section-checkbox:checked:not(:disabled)");
            $("div.alert-error").remove();
            if (s.length === 0) {
                D = false;
                B = false
            }
            if (t.length === 0) {
                D = false;
                C = false
            } else {
                t.each(function() {
                    if (z.length > 0) {
                        z += ","
                    }
                    z += $(this).val()
                })
            }
            if (!D) {
                x = "Please select ";
                if (!B && !C) {
                    x += "at least one content item and a section to add it to."
                } else {
                    if (!B) {
                        x += "at least one content Item."
                    } else {
                        x += "at least one section to add content to."
                    }
                }
                p3.Us.InfoMessage.ErrorBox(x, "#import-content-container", false);
                $("#site-modal .modal-body").scrollTop(1)
            } else {
                s.each(function() {
                    u = $(this).data("content");
                    A.push({
                        ContentItemId: $(this).data("item"),
                        Type: u,
                        GroupId: $(this).data("group"),
                        ContextLabelId: $(this).data("context")
                    });
                    if (v.indexOf(u) === -1) {
                        v.push(u)
                    }
                });
                y = new j.Ms.ImportContent({
                    SectionList: z,
                    ContentItems: A
                });
                y.save({}, {
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error importing content")
                    },
                    success: function() {
                        E.trigger("save", v);
                        p3.showModal(p3.Layout.Containers.Modal, "hide")
                    }
                })
            }
        }
    });
    j.Vs.ImportContentList = Bb.View.extend({
        template: "grouppage/import.content.list.template.html",
        events: {
            "click .content-toggle": "toggleContent",
            "click .select-all-content": "selectAllContent",
            "click .btn-select-item": "selectItem"
        },
        renderTemplate: function() {
            var v = this,
                t = [],
                s = [],
                u = 0;
            v.content.each(function(w) {
                if (w.get("content_id") !== u) {
                    u = w.get("content_id");
                    s = [];
                    t.push({
                        content_id: u,
                        description: w.get("content_type_description"),
                        contentItems: s
                    })
                }
                if (w.get("publish_date")) {
                    w.set("publish_date", w.get("publish_date").split(" ")[0])
                }
                if (w.get("expire_date")) {
                    w.set("expire_date", w.get("expire_date").split(" ")[0])
                }
                s.push(w.toJSON())
            });
            p3.fT(v.template, function(w) {
                v.$el.html(w({
                    content: t,
                    haveData: v.content.length > 0
                }))
            })
        },
        initialize: function() {
            var s = this;
            s.content = s.options.content
        },
        render: function(s) {
            this.renderTemplate();
            $(s).append(this.el)
        },
        toggleSeason: function(u) {
            var t = $(u.currentTarget),
                v = t.data("season"),
                s = $("#season" + v);
            if (s.is(":visible")) {
                s.hide(200)
            } else {
                s.show(200)
            }
        },
        toggleContent: function(u) {
            var t = $(u.currentTarget),
                v = t.data("content"),
                s = $("#content" + v);
            if (s.is(":visible")) {
                s.hide(200);
                t.find(".p3icon-downArrow").removeClass("p3icon-downArrow").addClass("p3icon-sideArrow")
            } else {
                s.show(200);
                t.find(".p3icon-sideArrow").removeClass("p3icon-sideArrow").addClass("p3icon-downArrow")
            }
        },
        selectAllContent: function(v) {
            var t = $(v.currentTarget),
                u = t.data("content"),
                s = $("#content" + u);
            if (t.hasClass("active")) {
                $(".btn-select-item[data-content='" + u + "']").removeClass("active")
            } else {
                $(".btn-select-item[data-content='" + u + "']").addClass("active");
                if (!s.is(":visible")) {
                    s.show(200);
                    $(".content-toggle[data-content='" + u + "']").find(".p3icon-sideArrow").removeClass("p3icon-sideArrow").addClass("p3icon-downArrow")
                }
            }
        },
        selectItem: function(u) {
            var s = $(u.currentTarget),
                t = s.data("content");
            if (s.hasClass("active")) {
                $(".select-all-content[data-content='" + t + "']").removeClass("active")
            } else {
                if ($(".btn-select-item.active[data-content='" + t + "']").length + 1 === $(".btn-select-item[data-content='" + t + "']").length) {
                    $(".select-all-content[data-content='" + t + "']").addClass("active")
                }
            }
        }
    });
    j.Vs.DefaultLayouts = Bb.View.extend({
        template: "grouppage/default.layouts.template.html",
        events: {
            "click .create-custom-btn": "createLevelLayout",
            "click .default-level-btn": "deleteLevelLayout"
        },
        renderTemplate: function() {
            var x = this,
                v = new j.Cs.DefaultLayouts(),
                t = [],
                s = 0,
                w, u;
            v.fetch({
                success: function() {
                    v.each(function(y) {
                        if (!y.get("LevelNum")) {
                            y.set("LevelNum", 0)
                        }
                        if (y.get("LevelNum") === 0) {
                            s += 1;
                            switch (y.get("AssociationId")) {
                                case 1:
                                    u = "p3icon-classes";
                                    break;
                                case 2:
                                    u = "p3icon-teams";
                                    break;
                                case 3:
                                    u = "p3icon-community";
                                    break;
                                case 8:
                                    u = "p3icon-activities";
                                    break;
                                case 9:
                                    u = "p3icon-advisory";
                                    break;
                                case 7:
                                    u = "p3icon-dorms";
                                    break
                            }
                            w = (s % 3 === 1);
                            if (w && s > 1) {
                                t[s - 2].endRow = true
                            }
                            t.push({
                                AssociationId: y.get("AssociationId"),
                                AssociationDescription: y.get("AssociationDescription"),
                                newRow: w,
                                icon: u,
                                Customized: y.get("Customized"),
                                levels: [],
                                BulletinBoardLayoutId: y.get("BulletinBoardLayoutId")
                            })
                        } else {
                            t[s - 1].levels.push(y.toJSON())
                        }
                    });
                    if (s > 0) {
                        t[s - 1].endRow = true
                    }
                    p3.fT(x.template, function(y) {
                        x.$el.html(y({
                            associations: t
                        }))
                    })
                },
                error: function(y, z) {
                    p3.displayError("Error getting layouts.")
                }
            })
        },
        render: function(s) {
            this.renderTemplate();
            $(s).append(this.el)
        },
        createLevelLayout: function(u) {
            var s = $(u.currentTarget),
                t = s.data("id"),
                v = s.data("level"),
                w = new j.Ms.CreateDefault({
                    LevelNum: v,
                    AssociationId: t
                });
            w.save({}, {
                success: function(x, y) {
                    p3.router().navigate("#bulletinboardedit/" + y + "/" + t, true)
                },
                error: function(x, y) {
                    p3.displayError("Error creating custom layout")
                }
            });
            u.preventDefault()
        },
        deleteLevelLayout: function(v) {
            var s = $(v.currentTarget),
                u = s.data("id"),
                t = s.data("assoc"),
                w = s.data("level"),
                x = "",
                y = new j.Ms.RemoveDefault({
                    BulletinBoardLayoutId: u
                });
            p3.showConfirm("Remove Custom Layout", "Are you sure you want to remove this custom layout?", null, function() {
                y.destroy({
                    error: function() {
                        p3.displayError("Error deleting custom layout")
                    },
                    success: function() {
                        x = '<button class="btn btn-default disabled">Use Default</button><button class="btn btn-default dropdown-toggle" data-toggle="dropdown"><span class="caret"></span></button>';
                        x += '<ul class="dropdown-menu"><li><a href="#" class="create-custom-btn" data-id="' + t + '" data-level="' + w + '">';
                        x += "Create Custom Layout</a></li></ul>";
                        s.parents(".btn-group").html(x)
                    }
                })
            });
            v.preventDefault()
        }
    });
    j.Vs.EditDefault = Bb.View.extend({
        template: "grouppage/detail.edit.template.html",
        initialize: function() {
            this.Containers = {};
            this.LayoutId = 0
        },
        dispose: function() {
            p3.closeFixedSidebar()
        },
        render: function(s) {
            var t = this;
            $(s).html(t.el);
            p3.fT(t.template, function(u) {
                t.$el.html(u({
                    defaultLayout: true
                }));
                t.Containers.WorkspaceWrap = $(".group-page-wrap");
                t.Containers.Workspace = $("#group-workspace");
                t.selectedContent = new j.Cs.BulletinBoardLayout();
                t.selectedContent.fetch({
                    data: {
                        bulletinBoardLayoutId: t.options.BulletinBoardLayoutId
                    },
                    error: function() {
                        p3.displayError("Error loading selected content")
                    },
                    success: function() {
                        if (t.selectedContent.length > 0) {
                            t.LayoutId = t.selectedContent.models[0].get("LayoutId")
                        }
                        t.renderSidebar();
                        t.renderBuilder()
                    }
                })
            })
        },
        renderSidebar: function() {
            var t = this,
                s = {};
            t.options.sidebarView = new j.Vs.DefaultSidebar({
                parentView: t,
                associationId: t.options.AssociationId,
                LayoutId: t.LayoutId,
                selectedContent: t.selectedContent,
                BulletinBoardLayoutId: t.options.BulletinBoardLayoutId
            });
            p3.renderFixedSidebar(t.options.sidebarView, s);
            t.options.sidebarView.on("layoutChange", function(u) {
                t.LayoutId = u;
                t.selectedContent.fetch({
                    data: {
                        bulletinBoardLayoutId: t.options.BulletinBoardLayoutId
                    },
                    error: function() {
                        p3.displayError("Error loading selected content")
                    },
                    success: function() {
                        t.renderBuilder()
                    }
                })
            })
        },
        renderBuilder: function() {
            var t = this,
                s;
            s = new j.Vs.DefaultBuilder({
                layoutId: t.LayoutId,
                content: t.selectedContent,
                associationId: t.options.associationId,
                bulletinBoardLayoutId: t.options.BulletinBoardLayoutId
            });
            t.builder = s;
            p3.rV(s, t.Containers.Workspace, true);
            s.on("contentChange", function() {
                t.selectedContent.fetch({
                    data: {
                        bulletinBoardLayoutId: t.options.BulletinBoardLayoutId
                    },
                    error: function() {
                        p3.displayError("Error loading selected content")
                    },
                    success: function() {
                        t.renderBuilder()
                    }
                })
            });
            s.on("contentRemoved", function() {
                t.selectedContent.fetch({
                    data: {
                        bulletinBoardLayoutId: t.options.BulletinBoardLayoutId
                    },
                    error: function() {
                        p3.displayError("Error loading selected content")
                    },
                    success: function() {
                        t.renderSidebar()
                    }
                })
            })
        }
    });
    j.Vs.DefaultSidebar = Bb.View.extend({
        template: "grouppage/defaultsidebar.template.html",
        className: "workspace-sidebar",
        events: {
            "click .page-layout-link": "saveLayoutChange"
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(s) {
            var A = this,
                v, z = [],
                y = [],
                x = _.filter(A.options.selectedContent.toJSON(), function(B) {
                    return B.Unavailable
                }),
                w, t, u;
            w = A.options.selectedContent.pluck("ContentId");
            if (A.options.associationId.toString() === "2") {
                w.push(268)
            }
            $(s).html(A.el);
            v = new j.Cs.PossibleContent();
            v.fetch({
                data: {
                    associationId: A.options.associationId
                },
                error: function() {
                    p3.displayError("Error loading possible content")
                },
                success: function() {
                    v.each(function(B) {
                        if (w.indexOf(B.get("ContentId")) === -1) {
                            t = e.Us.findContentById(B.get("ContentId"));
                            if (t) {
                                z.push({
                                    Id: B.get("ContentId"),
                                    Name: t.Name,
                                    IconClass: t.IconClass
                                })
                            }
                        }
                    });
                    if (x && x.length > 0) {
                        for (u = 0; u < x.length; u++) {
                            t = e.Us.findContentById(x[u].ContentId);
                            if (t) {
                                y.push({
                                    Id: x[u].ContentId,
                                    Name: t.Name,
                                    IconClass: t.IconClass
                                })
                            }
                        }
                    }
                    A.unusedContent = z;
                    A.unavailableContent = y;
                    A.renderTemplate()
                }
            })
        },
        renderTemplate: function() {
            var s = this;
            p3.fT(s.template, function(v) {
                var u = j.Us.getLayoutIcon(s.options.LayoutId),
                    t = [];
                t.push({
                    Id: 408,
                    Name: "Horizontal Line",
                    IconClass: "p3icon-line"
                });
                t.push({
                    Id: 407,
                    Name: "Spacer",
                    IconClass: "p3icon-spacer"
                });
                s.$el.html(v({
                    elements: t,
                    unusedContent: s.unusedContent,
                    layoutIcon: u,
                    unavailableContent: s.unavailableContent
                }));
                window.setTimeout(function() {
                    $(".pages-layout-draggable-content").draggable({
                        connectToSortable: ".drag-region",
                        placeholder: "pages-layout-placeholder",
                        forcePlaceholderSize: true,
                        tolerance: "pointer",
                        helper: "clone",
                        delay: 300,
                        appendTo: "body"
                    }).disableSelection();
                    $(".unavailable-item").draggable({
                        connectToSortable: "#unused-content",
                        placeholder: "pages-layout-placeholder",
                        forcePlaceholderSize: true,
                        tolerance: "pointer",
                        helper: "clone",
                        delay: 300,
                        appendTo: "body"
                    }).disableSelection()
                }, 100)
            })
        },
        saveLayoutChange: function(t) {
            var w = this,
                s = $(t.currentTarget),
                u = s.data("id"),
                v;
            $(".btn-group").removeClass("open");
            if (u !== w.options.LayoutId) {
                $("#selected-layout-icon").removeClass().addClass(s.find("i").attr("class"));
                v = new j.Ms.DefaultLayoutSave({
                    BulletinBoardLayoutId: w.options.BulletinBoardLayoutId,
                    LayoutId: u,
                    ChangeLayout: true
                });
                v.save({}, {
                    async: false,
                    success: function(x, y) {
                        w.options.LayoutId = u;
                        w.trigger("layoutChange", u)
                    },
                    error: function(x, y) {
                        p3.displayError("Error changing layout")
                    }
                })
            }
            return false
        }
    });
    j.Vs.DefaultBuilder = Bb.View.extend({
        template: "grouppage/builder.template.html",
        events: {
            "click .pages-layout-block-delete": "deleteContent"
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(s) {
            var t = this;
            $(s).html(t.el);
            t.renderTemplate()
        },
        renderTemplate: function() {
            var u = this,
                t = j.Us.buildRows(u.options.layoutId),
                s;
            p3.fT(u.template, function(w) {
                u.$el.html(w({
                    rows: t,
                    showMessage: true
                }));
                var v = $("#group-workspace");
                v.css({
                    "background-color": "rgb(242,249,255)",
                    "background-image": "linear-gradient(90deg, transparent 28px, rgba(255,255,255,61) 38px)",
                    "background-size": "38px"
                });
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                    window.setTimeout(function() {
                        u.initSortable();
                        u.options.content.each(function(y) {
                            if (!y.get("Unavailable")) {
                                var x;
                                x = e.Us.findContentById(y.get("ContentId"));
                                if (x) {
                                    y.set("Name", x.Name);
                                    y.set("IconClass", x.IconClass)
                                }
                                s = new j.Vs.DefaultContentItem({
                                    model: y
                                });
                                p3.rV(s, $("#column" + y.get("RowIndex") + "_" + y.get("ColumnIndex")), false)
                            }
                        })
                    }, 400)
                })
            })
        },
        initSortable: function() {
            var t = this,
                s = $("#unavailable-region");
            $(".pages-layout-col").sortable({
                items: "> DIV.pages-layout-block.editable",
                connectWith: ".pages-layout-col.editable",
                handle: ".pages-layout-block-header",
                placeholder: "pages-layout-placeholder",
                forcePlaceholderSize: true,
                tolerance: "pointer",
                delay: 300,
                stop: function(z, C) {
                    var v = $(C.item),
                        u = v.closest(".pages-layout-col"),
                        x = u.data("col"),
                        B = u.data("row"),
                        y = v.data("id"),
                        w = v.index(),
                        A;
                    if (v.hasClass("workspace-draggable-item")) {
                        _.defer(function() {
                            v.remove();
                            if (y < 407) {
                                $(".pages-layout-draggable-content[data-id='" + y + "']").remove()
                            }
                        });
                        A = t.getLayoutOrder(B, x, w, 0);
                        t.addContent(A, y, B, x, w, false)
                    } else {
                        A = t.getLayoutOrder(-1, -1, -1, 0);
                        t.saveLayout(A, false, false)
                    }
                }
            });
            s.sortable({
                items: ".available-content",
                connectWith: ".available-content",
                handle: ".available-content",
                placeholder: "pages-layout-placeholder",
                forcePlaceholderSize: true,
                tolerance: "pointer",
                delay: 300,
                stop: function(w, y) {
                    var u = $(y.item),
                        v = u.data("id"),
                        x;
                    if (v < 407) {
                        x = t.getLayoutOrder(-1, -1, -1, 0);
                        t.addContent(x, v, 0, 0, 0, true)
                    } else {
                        s.sortable("cancel");
                        u.remove()
                    }
                }
            });
            $("#unused-content").sortable({
                items: ".unavailable-item",
                connectWith: ".unavailable-item",
                handle: ".unavailable-item",
                placeholder: "pages-layout-placeholder",
                forcePlaceholderSize: true,
                tolerance: "pointer",
                delay: 300,
                stop: function(u, v) {
                    t.saveLayout(t.getLayoutOrder(-1, -1, -1, $(v.item).data("id")), false, true)
                }
            })
        },
        getLayoutOrder: function(A, t, x, w) {
            var u = [],
                s = -1,
                z = -1,
                y = -1,
                v;
            $(".pages-layout-col").each(function(B, C) {
                z = $(C).data("row");
                s = $(C).data("col");
                y = -1;
                $(C).find(".pages-layout-block").each(function(E, D) {
                    if (A === z && t === s && E === x) {
                        y += 2
                    } else {
                        y += 1
                    }
                    v = $(D).find(".pages-layout-block-header").data("id");
                    if (v) {
                        u.push({
                            ContentId: v,
                            RowIndex: z,
                            ColumnIndex: s,
                            CellIndex: y
                        })
                    }
                })
            });
            $(".unavailable-item").each(function() {
                v = $(this).data("id");
                if (v && v !== w) {
                    u.push({
                        ContentId: v,
                        RowIndex: 0,
                        ColumnIndex: 0,
                        CellIndex: 0,
                        Unavailable: true
                    })
                }
            });
            return u
        },
        saveLayout: function(t, u, s) {
            var w = this,
                v;
            v = new j.Ms.DefaultLayoutSave({
                BulletinBoardLayoutId: w.options.bulletinBoardLayoutId,
                LayoutId: w.options.layoutId,
                ChangeLayout: false,
                ContentItems: t
            });
            v.save({}, {
                success: function(x, y) {
                    if (u) {
                        w.trigger("contentChange")
                    } else {
                        if (s) {
                            w.trigger("contentRemoved");
                            window.setTimeout(function() {
                                w.initSortable()
                            }, 400)
                        } else {
                            w.trigger("contentMove")
                        }
                    }
                },
                error: function(x, y) {
                    p3.displayError("Error changing layout")
                }
            })
        },
        addContent: function(v, u, w, t, s, x) {
            var y = this;
            v.push({
                ContentId: u,
                RowIndex: w,
                ColumnIndex: t,
                CellIndex: s,
                Unavailable: x
            });
            y.saveLayout(v, !x, x)
        },
        deleteContent: function(u) {
            u.preventDefault();
            var s = $(u.currentTarget),
                t = s.data("id"),
                v = this;
            s.parents(".pages-layout-block").remove();
            v.saveLayout(v.getLayoutOrder(-1, -1, -1, 0), false, t < 404)
        }
    });
    j.Vs.DefaultContentItem = Bb.View.extend({
        className: "pages-layout-block editable",
        template: "grouppage/defaultcontent.block.template.html",
        renderTemplate: function() {
            var s = this;
            p3.fT(s.template, function(t) {
                s.$el.html(t({
                    contentInfo: s.model.toJSON(),
                    canRemove: true
                }))
            })
        },
        initialize: function() {
            var s = this;
            s.Containers = {}
        },
        render: function(s) {
            $(s).append(this.el);
            this.renderTemplate()
        }
    });
    j.Us.getLayoutIcon = function(t) {
        var s = "";
        switch (t) {
            case 0:
                s = "p3icon-2colLeft";
                break;
            case 1:
                s = "p3icon-2colRight";
                break;
            case 2:
                s = "p3icon-2rowLeft";
                break;
            case 3:
                s = "p3icon-2rowRight";
                break;
            case 4:
                s = "p3icon-2colSplit";
                break;
            case 5:
                s = "p3icon-3col";
                break
        }
        return s
    };
    j.Us.getContextLabel = function(s) {
        var t;
        switch (s) {
            case 1:
                t = 2;
                break;
            case 3:
                t = 12;
                break;
            case 9:
                t = 22;
                break;
            case 8:
                t = 24;
                break;
            case 2:
                t = 3;
                break;
            case 7:
                t = 23;
                break
        }
        return t
    };
    j.Us.initDraggable = function() {
        window.setTimeout(function() {
            $(".pages-layout-draggable-content").draggable({
                connectToSortable: ".pages-layout-col.editable",
                placeholder: "pages-layout-placeholder",
                forcePlaceholderSize: true,
                tolerance: "pointer",
                helper: "clone",
                delay: 300,
                appendTo: "body"
            }).disableSelection()
        }, 300)
    };
    j.Us.getBulletinBoardUrl = function(s, t) {
        var u = "";
        switch (s) {
            case 1:
                u = "#academicclass/" + t + "/0/bulletinboard";
                break;
            case 3:
                u = "#communitypage/" + t + "/bulletinboard";
                break;
            case 9:
                u = "#advisorypage/" + t + "/bulletinboard";
                break;
            case 8:
                u = "#activitypage/" + t + "/bulletinboard";
                break;
            case 2:
                u = "#athleticteam/" + t + "/teampage";
                break;
            case 7:
                u = "#dormpage/" + t + "/bulletinboard";
                break
        }
        return u
    };
    j.Us.loadPageEditor = function(u, v, s, t) {
        p3.renderMainPage(new j.Vs.EditDetail({
            leadSectionId: u,
            sectionId: v,
            associationId: s,
            contextLabelId: t
        }))
    };
    j.Us.isNarrowColumn = function(v, s, u) {
        var t = false;
        if (u === 5) {
            t = true
        } else {
            if (u < 4) {
                switch (u) {
                    case 0:
                        if (v === 0 && s === 1) {
                            t = true
                        }
                        break;
                    case 1:
                        if (v === 0 && s === 0) {
                            t = true
                        }
                        break;
                    case 2:
                        if (v === 1 && s === 1) {
                            t = true
                        }
                        break;
                    case 3:
                        if (v === 1 && s === 0) {
                            t = true
                        }
                        break
                }
            }
        }
        return t
    };
    j.Us.buildRows = function(t) {
        var u = [],
            s = [];
        u.push({
            rowId: 0,
            columns: s
        });
        switch (t) {
            case 0:
                s.push({
                    rowId: 0,
                    colId: 0,
                    className: "span9 col-md-9"
                });
                s.push({
                    rowId: 0,
                    colId: 1,
                    className: "span3 col-md-3"
                });
                break;
            case 1:
                s.push({
                    rowId: 0,
                    colId: 0,
                    className: "span3 col-md-3"
                });
                s.push({
                    rowId: 0,
                    colId: 1,
                    className: "span9 col-md-9"
                });
                break;
            case 2:
                s.push({
                    rowId: 0,
                    colId: 0,
                    className: "span12 col-md-12"
                });
                s = [];
                u.push({
                    rowId: 1,
                    columns: s
                });
                s.push({
                    rowId: 1,
                    colId: 0,
                    className: "span9 col-md-9"
                });
                s.push({
                    rowId: 1,
                    colId: 1,
                    className: "span3 col-md-3"
                });
                break;
            case 3:
                s.push({
                    rowId: 0,
                    colId: 0,
                    className: "span12 col-md-12"
                });
                s = [];
                u.push({
                    rowId: 1,
                    columns: s
                });
                s.push({
                    rowId: 1,
                    colId: 0,
                    className: "span3 col-md-3"
                });
                s.push({
                    rowId: 1,
                    colId: 1,
                    className: "span9 col-md-9"
                });
                break;
            case 4:
                s.push({
                    rowId: 0,
                    colId: 0,
                    className: "span6 col-md-6"
                });
                s.push({
                    rowId: 0,
                    colId: 1,
                    className: "span6 col-md-6"
                });
                break;
            case 5:
                s.push({
                    rowId: 0,
                    colId: 0,
                    className: "span4 col-md-4"
                });
                s.push({
                    rowId: 0,
                    colId: 1,
                    className: "span4 col-md-4"
                });
                s.push({
                    rowId: 0,
                    colId: 2,
                    className: "span4 col-md-4"
                });
                break
        }
        return u
    };
    j.Us.getCusomHeader = function(t) {
        var s = "",
            u;
        if (t.get("GenericSettings")) {
            u = JSON.parse(t.get("GenericSettings"));
            s = u.HeaderText
        }
        return s
    };
    p3.router().route("grouppreview/:leadsectionid/:sectionid/:association/:pending/:layoutid", "grouppreview", function(v, x, s, w, u) {
        var t = new j.Cs.Content({}, {
            sectionId: x,
            leadSectionId: v
        });
        t.fetch({
            error: function() {
                p3.displayError("Error loading available content")
            },
            success: function() {
                var y = (w === "true");
                s = parseInt(s, 10);
                p3.renderMainPage(new j.Vs.LayoutView({
                    sectionId: x,
                    leadSectionId: v,
                    associationId: s,
                    preview: true,
                    pendingInd: y,
                    layoutId: parseInt(u, 10),
                    content: t,
                    contextLabelId: j.Us.getContextLabel(s)
                }))
            }
        })
    });
    p3.router().route("bulletinboardlayout", "bulletinboardlayout", function() {
        p3.renderMainPage(new j.Vs.DefaultLayouts())
    });
    p3.router().route("bulletinboardedit/:id/:association", "bulletinboardedit", function(t, s) {
        p3.renderMainPage(new j.Vs.EditDefault({
            BulletinBoardLayoutId: t,
            AssociationId: s
        }))
    })
}(p3.module("LMS/groupPageEdit")));
(function(c) {
    var a = p3.module("shared/datepicker"),
        b = p3.Us.Enum;
    c.Data = {};
    c.Cs.SchoolYears = Bbc.extend({
        url: "DataDirect/SchoolYearsGet?display=0"
    });
    c.Cs.SchoolLevels = Bbc.extend({
        url: "DataDirect/SchoolLevelAssocGet"
    });
    c.Cs.GroupsByAssoc = Bbc.extend({
        url: "DataDirect/GroupsByAssociationGet"
    });
    c.Cs.GroupsPageAccess = Bbc.extend({
        url: "GroupAccess/GroupPageAccessGet"
    });
    c.Cs.UserTypes = Bbc.extend({
        url: "GroupAccess/AvailableUserTypesGet"
    });
    c.Ms.GroupsPageAccess = Bbm.extend({
        url: "GroupAccess/GroupPageAccessSave"
    });
    c.Ms.UserTypesAdd = Bbm.extend({
        url: "GroupAccess/AddUserTypes"
    });
    c.Ms.GroupsPageAccessDelete = Bbm.extend({
        idAttribute: "AppAssociationGroupId",
        url: function() {
            return aP + "GroupAccess/GroupPageAccessDelete/?format=json&agId=" + this.get("AppAssociationGroupId") + "&userType=" + this.get("UserTypeId") + "&associationId=" + this.get("AssociationId") + "&schoolYearLabel=" + this.get("SchoolYearLabel") + "&levelNum=" + this.get("LevelNum")
        }
    });
    c.Ms.GroupsPageOptions = Bbm.extend({
        url: "GroupOptions/GroupOptionsSave"
    });
    c.Cs.GroupsPageOption = Bbc.extend({
        url: "GroupOptions/GroupOptionsGet"
    });
    c.Vs.Layout = Bb.View.extend({
        template: "grouppagesettings/group.page.settings.template.html",
        events: {
            "click .group-type-btn": "associationChange"
        },
        initialize: function() {
            c.Data.SchoolYear = p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel;
            c.Data.ByLevel = true;
            c.Data.Assoc = b.Associations.ACADEMICS.Value;
            c.Data.SectionId = 0;
            this.groupOptions = this.options.groupOptions
        },
        render: function(d) {
            var e = this;
            $(d).html(e.el);
            e.renderTemplate()
        },
        renderTemplate: function() {
            var j = this,
                f, d, e, i, g, h;
            f = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.COURSEMANAGEMENT) && p3.Data.Context.findByTaskId(52442);
            d = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ACTIVITYGROUPS) && p3.Data.Context.findByTaskId(52443);
            e = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ADVISORYGROUP) && p3.Data.Context.findByTaskId(52444);
            i = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ATHLETICGROUPS) && p3.Data.Context.findByTaskId(52446);
            g = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.COMMUNITYGROUPS) && p3.Data.Context.findByTaskId(52447);
            h = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.DORMGROUPS) && p3.Data.Context.findByTaskId(52448);
            if (!f && c.Data.Assoc === b.Associations.ACADEMICS.Value) {
                if (d) {
                    c.Data.Assoc = b.Associations.ACTIVITY.Value
                } else {
                    if (e) {
                        c.Data.Assoc = b.Associations.ADVISORY.Value
                    } else {
                        if (i) {
                            c.Data.Assoc = b.Associations.ATHLETICS.Value
                        } else {
                            if (g) {
                                c.Data.Assoc = b.Associations.COMMUNITY.Value
                            } else {
                                if (h) {
                                    c.Data.Assoc = b.Associations.DORM.Value
                                }
                            }
                        }
                    }
                }
            }
            p3.fT(j.template, function(k) {
                j.$el.html(k({
                    activeAssoc: c.Data.Assoc,
                    classes: f,
                    activities: d,
                    advisories: e,
                    teams: i,
                    communities: g,
                    dorms: h,
                    groupOptions: j.groupOptions
                }));
                j.Containers = [];
                j.Containers.Filters = $("#access-filters");
                j.Containers.Settings = $("#access-settings");
                j.renderFilter()
            })
        },
        renderFilter: function() {
            var f = this,
                d, e;
            if (c.Data.SchoolYears == null) {
                c.Data.SchoolYears = new c.Cs.SchoolYears();
                c.Data.SchoolYears.fetch({
                    async: false,
                    error: function() {
                        p3.displayError("Error getting school years.")
                    }
                })
            }
            if (c.Data.Assoc === 3) {
                c.Data.SchoolYear = ""
            } else {
                if (c.Data.SchoolYear === "") {
                    c.Data.SchoolYear = p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel
                }
            }
            e = new c.Cs.SchoolLevels();
            e.fetch({
                data: {
                    associationId: c.Data.Assoc,
                    schoolYearLabel: c.Data.SchoolYear
                },
                error: function() {
                    p3.displayError("Error getting school levels.")
                },
                success: function() {
                    if (e.length > 0) {
                        c.Data.SchoolLevel = e.models[0].get("level_num")
                    } else {
                        c.Data.SchoolLevel = 0
                    }
                    d = new c.Vs.Filters({
                        SchoolLevels: e,
                        groupOptions: f.groupOptions
                    });
                    p3.rV(d, f.Containers.Filters, true);
                    if (f.groupOptions) {
                        f.renderOptions()
                    } else {
                        f.renderAccess()
                    }
                    d.on("filterChange", function() {
                        if (f.groupOptions) {
                            f.renderOptions()
                        } else {
                            f.renderAccess()
                        }
                    })
                }
            })
        },
        associationChange: function(d) {
            c.Data.Assoc = parseInt($(d.currentTarget).data("assoc"), 10);
            c.Data.ByLevel = true;
            c.Data.SectionId = 0;
            $(".group-type-btn").parent().removeClass("active");
            $(d.currentTarget).parent().addClass("active");
            this.renderFilter();
            d.preventDefault()
        },
        renderAccess: function() {
            var j = this,
                d = new c.Cs.GroupsPageAccess(),
                g = null,
                e, f = true,
                h, i;
            if (!c.Data.ByLevel) {
                g = c.Data.SectionId;
                f = g > 0
            }
            if (f) {
                d.fetch({
                    data: {
                        schoolYear: c.Data.SchoolYear,
                        association: c.Data.Assoc,
                        level: c.Data.SchoolLevel,
                        pk: g
                    },
                    async: false,
                    error: function() {
                        p3.displayError("Error getting access.")
                    },
                    success: function() {
                        e = new c.Vs.Access({
                            access: d
                        });
                        p3.rV(e, j.Containers.Settings, e);
                        e.on("accessAdded", function() {
                            j.renderAccess()
                        })
                    }
                })
            } else {
                h = c.Us.GetSectionLabel().toLowerCase();
                i = '<h5 style="margin-top:5px;">Please Select a';
                if (c.Data.Assoc === b.Associations.ACTIVITY.Value || c.Data.Assoc === b.Associations.ADVISORY.Value) {
                    i += "n"
                }
                $("#access-settings").html(i + " " + h + ".</h5>")
            }
        },
        renderOptions: function() {
            var j = this,
                e = new c.Cs.GroupsPageOption(),
                g = null,
                f, d = true,
                h, i;
            if (!c.Data.ByLevel) {
                g = c.Data.SectionId;
                d = g > 0
            }
            if (d) {
                e.fetch({
                    data: {
                        schoolYear: c.Data.SchoolYear,
                        association: c.Data.Assoc,
                        level: c.Data.SchoolLevel,
                        pk: g
                    },
                    async: false,
                    error: function() {
                        p3.displayError("Error getting options.")
                    },
                    success: function() {
                        f = new c.Vs.Options({
                            groupOptions: e.models[0]
                        });
                        p3.rV(f, j.Containers.Settings, true)
                    }
                })
            } else {
                h = c.Us.GetSectionLabel().toLowerCase();
                i = '<h5 style="margin-top:5px;">Please Select a';
                if (c.Data.Assoc === b.Associations.ACTIVITY.Value || c.Data.Assoc === b.Associations.ADVISORY.Value) {
                    i += "n"
                }
                $("#access-settings").html(i + " " + h + ".</h5>")
            }
        }
    });
    c.Vs.Filters = Bb.View.extend({
        template: "grouppagesettings/group.page.access.filter.template.html",
        events: {
            "change #year-dropdown": "yearChanged",
            "change #level-dropdown": "levelChanged",
            "click #level-button": "accessTypeChanged",
            "click #class-button": "accessTypeChanged",
            "click #class-search-form": "searchClicked",
            "keyup #class-search": "searchClasses",
            "submit #class-search-form": "searchClasses",
            "click .class-item": "classClicked",
            "click #remove-access-link": "removeCustomAccess",
            "click #remove-all-access-link": "removeAllAccess"
        },
        render: function(d) {
            var e = this;
            $(d).html(e.el);
            e.renderTemplate()
        },
        renderTemplate: function() {
            var e = this,
                d = "A",
                f = c.Data.SchoolYears.toJSON();
            if (c.Data.Assoc === b.Associations.ACTIVITY.Value || c.Data.Assoc === b.Associations.ADVISORY.Value) {
                d = "An"
            }
            if (c.Data.Assoc === 3) {
                f.unshift({
                    Id: "",
                    Description: "Continuous"
                })
            }
            p3.fT(e.template, function(g) {
                e.$el.html(g({
                    SchoolYears: f,
                    SchoolLevels: e.options.SchoolLevels.toJSON(),
                    ByLevel: c.Data.ByLevel,
                    CurrentYear: c.Data.SchoolYear,
                    CurrentLevel: c.Data.SchoolLevel,
                    sectionText: c.Us.GetSectionLabel(),
                    pluralText: c.Us.GetSectionPlural(),
                    a: d,
                    lowerText: c.Us.GetSectionLabel().toLowerCase(),
                    groupOptions: e.options.groupOptions
                }))
            })
        },
        getSchoolLevels: function() {
            var d = new c.Cs.SchoolLevels();
            d.fetch({
                data: {
                    associationId: c.Data.Assoc,
                    schoolYearLabel: c.Data.SchoolYear
                },
                async: false,
                error: function() {
                    p3.displayError("Error getting school levels.")
                },
                success: function() {
                    if (d.length > 0) {
                        c.Data.SchoolLevel = d.models[0].get("level_num")
                    } else {
                        c.Data.SchoolLevel = 0
                    }
                }
            });
            return d
        },
        getGroups: function() {
            var d = new c.Cs.GroupsByAssoc();
            d.fetch({
                data: {
                    associationId: c.Data.Assoc,
                    schoolYearLabel: c.Data.SchoolYear,
                    levelNum: c.Data.SchoolLevel
                },
                async: false,
                error: function() {
                    p3.displayError("Error getting groups.")
                }
            });
            return d
        },
        yearChanged: function() {
            var e = this,
                d;
            c.Data.SchoolYear = $("#year-dropdown").val();
            c.Data.ByLevel = true;
            c.Data.SectionId = 0;
            c.Us.setClassDropdownText();
            $("#level-button").addClass("active");
            $("#class-button").removeClass("active");
            $("#class-dropdown-region").hide();
            $("#custom-note").hide();
            $("#remove-access-link").hide();
            $("#level-text").show();
            $("#group-text").hide();
            $("#level-dropdown").empty();
            d = e.getSchoolLevels();
            d.each(function(f) {
                $("<option />", {
                    val: f.get("level_num"),
                    text: f.get("level_description")
                }).appendTo("#level-dropdown")
            });
            e.trigger("filterChange")
        },
        levelChanged: function() {
            var d = this;
            c.Data.SchoolLevel = $("#level-dropdown").val();
            c.Data.SectionId = 0;
            c.Us.setClassDropdownText();
            if (!c.Data.ByLevel) {
                d.updateGroups()
            }
            $("#remove-access-link").hide();
            d.trigger("filterChange")
        },
        updateGroups: function() {
            var d = this;
            $("#groups-dd").empty();
            d.groups = d.getGroups();
            $("#class-list").empty();
            d.groups.each(function(e) {
                $("#class-list").append('<li class="select-item-li" style="margin-right:10px;"><a href="#" class="select-item class-item" data-val="' + e.get("pk") + '">' + e.get("group_name") + (e.get("custom_access") ? " (C)" : "") + "</a></li>")
            })
        },
        accessTypeChanged: function(d) {
            if (!$(d.currentTarget).hasClass("active")) {
                if (d.currentTarget.id === "level-button") {
                    c.Data.ByLevel = true;
                    $("#class-dropdown-region").hide();
                    $("#level-text").show();
                    $("#group-text").hide();
                    $("#custom-note").hide();
                    $("#remove-access-link").hide();
                    $("#remove-all-access-link").hide()
                } else {
                    c.Data.ByLevel = false;
                    this.updateGroups();
                    $("#class-dropdown-region").show();
                    $("#level-text").hide();
                    $("#group-text").show();
                    $("#custom-note").show();
                    if (!this.options.groupOptions) {
                        $("#remove-all-access-link").show()
                    }
                }
                this.trigger("filterChange")
            }
        },
        searchClicked: function(d) {
            d.stopPropagation();
            $("#class-search").focus();
            return false
        },
        searchClasses: function(d) {
            d.preventDefault();
            var h = this,
                g, f;
            f = h.groups.toJSON();
            g = $("#class-search").val();
            if (g && g.length > 0) {
                f = _.filter(f, function(e) {
                    return (e.group_name.toLowerCase().indexOf(g.toLowerCase()) > -1)
                })
            }
            $("#class-list").empty();
            _.each(f, function(e) {
                $("#class-list").append('<li class="select-item-li" style="margin-right:10px;"><a href="#" class="select-item class-item" data-val="' + e.pk + '">' + e.group_name + (e.custom_access ? " (C)" : "") + "</a></li>")
            })
        },
        classClicked: function(f) {
            var d = $(f.currentTarget),
                g = d.html();
            $("#selected-class").data("value", d.data("val"));
            if (g.indexOf(" (C)") === -1) {
                d.html(g + " (C)");
                $("#selected-class").html(g + " (C)")
            } else {
                $("#selected-class").html(g)
            }
            c.Data.SectionId = d.data("val");
            if (d.data("val") > 0) {
                $("#remove-access-link").show()
            } else {
                $("#remove-access-link").hide()
            }
            this.trigger("filterChange");
            f.preventDefault()
        },
        removeCustomAccess: function(f) {
            var g = this,
                d;
            p3.showConfirm("Remove Access", "Are you sure you want to remove custom access?", null, function() {
                d = new c.Ms.GroupsPageAccessDelete({
                    AppAssociationGroupId: c.Data.AGA
                });
                d.destroy({
                    error: function() {
                        p3.displayError("Error removing access")
                    },
                    success: function() {
                        $("#selected-class").data("value", 0);
                        $("#selected-class").html(c.Us.setClassDropdownText());
                        c.Data.SectionId = 0;
                        $("#remove-access-link").hide();
                        g.updateGroups();
                        g.trigger("filterChange")
                    }
                })
            })
        },
        removeAllAccess: function(f) {
            var g = this,
                d;
            p3.showConfirm("Remove All Custom Access", "Are you sure you want to remove all customized access?", null, function() {
                d = new c.Ms.GroupsPageAccessDelete({
                    AppAssociationGroupId: 0,
                    AssociationId: c.Data.Assoc,
                    SchoolYearLabel: c.Data.SchoolYear,
                    LevelNum: c.Data.SchoolLevel
                });
                d.destroy({
                    error: function() {
                        p3.displayError("Error removing access")
                    },
                    success: function() {
                        $("#selected-class").data("value", 0);
                        $("#selected-class").html(c.Us.setClassDropdownText());
                        c.Data.SectionId = 0;
                        $("#remove-access-link").hide();
                        g.updateGroups();
                        g.trigger("filterChange")
                    }
                })
            })
        }
    });
    c.Vs.Access = Bb.View.extend({
        template: "grouppagesettings/group.page.access.template.html",
        events: {
            "click .access-icon": "accessChange",
            "mouseover td.inline-edit": "handleHover",
            "mouseout td.inline-edit": "handleHoverOff",
            "click td.inline-edit": "inlineEdit",
            "blur INPUT": "datepickerBlur",
            "click .remove-access": "removeAccess",
            "click #add-access": "addAccess"
        },
        render: function(d) {
            var e = this;
            $(d).html(e.el);
            e.renderTemplate()
        },
        renderTemplate: function() {
            var g = this,
                e = c.Data.Assoc === b.Associations.ATHLETICS.Value,
                d = c.Data.Assoc === b.Associations.ACADEMICS.Value,
                f = c.Data.Assoc !== b.Associations.ATHLETICS.Value;
            g.appAssociationGroupId = g.options.access.models[0].get("AppAssociationGroupId");
            c.Data.AGA = g.appAssociationGroupId;
            p3.fT(g.template, function(h) {
                g.$el.html(h({
                    access: g.options.access.toJSON(),
                    showSchedule: e,
                    showAssign: d,
                    showTopic: f
                }))
            })
        },
        accessChange: function(g) {
            var f = $(g.currentTarget),
                d = f.parents("tr");
            if (f.data("access") === "ListOnly") {
                d.find(".access-icon").removeClass("p3icon-ok").addClass("p3icon-check");
                f.removeClass("p3icon-check").addClass("p3icon-ok")
            } else {
                if (f.hasClass("p3icon-check")) {
                    f.removeClass("p3icon-check").addClass("p3icon-ok");
                    d.find(".access-icon[data-access='ListOnly']").removeClass("p3icon-ok").addClass("p3icon-check")
                } else {
                    f.removeClass("p3icon-ok").addClass("p3icon-check");
                    if (d.find(".access-icon.p3icon-ok").length === 0) {
                        d.find(".access-icon[data-access='ListOnly']").removeClass("p3icon-check").addClass("p3icon-ok")
                    }
                }
            }
            this.saveAccess(d)
        },
        saveAccess: function(d, g) {
            var n = this,
                i = new c.Ms.GroupsPageAccess(),
                h = false,
                f = false,
                m = false,
                j = false,
                e = false,
                l = false,
                k;
            d.find(".access-icon").each(function() {
                switch ($(this).data("access")) {
                    case "ListOnly":
                        h = $(this).hasClass("p3icon-ok");
                        break;
                    case "BulletinBoardAccess":
                        f = $(this).hasClass("p3icon-ok");
                        break;
                    case "TopicAccess":
                        m = $(this).hasClass("p3icon-ok");
                        break;
                    case "RosterAccess":
                        j = $(this).hasClass("p3icon-ok");
                        break;
                    case "AssignmentAccess":
                        e = $(this).hasClass("p3icon-ok");
                        break;
                    case "ScheduleAccess":
                        l = $(this).hasClass("p3icon-ok");
                        break
                }
            });
            if (g) {
                k = g
            } else {
                k = d.find(".inline-edit").data("date")
            }
            i.set({
                AppAssociationGroupId: n.appAssociationGroupId,
                UserTypeId: d.data("id"),
                BulletinBoardAccess: f,
                TopicAccess: m,
                RosterAccess: j,
                AssignmentAccess: e,
                ScheduleAccess: l,
                StartDate: k,
                ListOnly: h
            });
            i.save({}, {
                error: function() {
                    p3.displayError("Error saving group page access")
                }
            })
        },
        handleHover: function(f) {
            var d = $(f.target).closest("td");
            if ($(".edit-cell-icon").length === 0) {
                if (!d.hasClass("edit-cell")) {
                    d.prepend($("<i>", {
                        "class": "p3icon-edit edit-cell-icon pull-right"
                    }))
                }
                d.addClass("on");
                d.mouseleave(function() {
                    if (d.hasClass("on")) {
                        d.removeClass("on")
                    }
                })
            }
        },
        handleHoverOff: function(d) {
            if (!$(d.target).hasClass("on")) {
                this.$("i.edit-cell-icon").remove()
            }
        },
        inlineEdit: function(f) {
            var d = $(f.target).closest("td");
            if (!d.hasClass("edit-cell")) {
                d.html('<input type="text" class="start-date-box input-small" value="' + d.find("P").html() + '"/>');
                d.addClass("edit-cell");
                d.find(".start-date-box").focus();
                a.Us.initialize(".start-date-box", {
                    numberOfMonths: 1,
                    stepMonths: 1,
                    defaultDate: d.find("P").html(),
                    show: true,
                    onClose: function() {
                        $(this).trigger("blur", {
                            propagate: true
                        })
                    }
                })
            }
        },
        inlineClose: function(g, e) {
            var d, f, h;
            d = $(g.target);
            h = d.closest("td").data("date");
            f = d.val();
            if (f && f.length > 0) {
                if (h !== f) {
                    this.saveAccess(d.parents("tr"), f);
                    d.closest("td").data("date", f).removeClass("edit-cell").html('<p style="margin:3px 0px 0px 0px">' + f + "</p>")
                } else {
                    d.closest("td").removeClass("edit-cell").html('<p style="margin:3px 0px 0px 0px">' + h + "</p>")
                }
            }
        },
        datepickerBlur: function(e, d) {
            if (d && d.propagate) {
                this.inlineClose(e)
            } else {
                e.stopPropagation()
            }
        },
        removeAccess: function(g) {
            var i = this,
                d = $(g.currentTarget).parents("tr.access-row"),
                h = d.data("id"),
                f;
            p3.showConfirm("Remove Access", "Are you sure you want to remove access?", null, function() {
                f = new c.Ms.GroupsPageAccessDelete({
                    AppAssociationGroupId: i.appAssociationGroupId,
                    UserTypeId: h
                });
                f.destroy({
                    error: function() {
                        p3.displayError("Error removing access")
                    },
                    success: function() {
                        d.remove()
                    }
                })
            })
        },
        addAccess: function(f) {
            var g = this,
                d = new c.Vs.AddAccess({
                    appAssociationGroupId: g.appAssociationGroupId
                });
            p3.rV(d, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            d.on("accessAdded", function() {
                g.trigger("accessAdded")
            })
        }
    });
    c.Vs.Options = Bb.View.extend({
        template: "grouppagesettings/group.page.options.template.html",
        events: {
            "click .feed-icon": "optionChange",
            "click .integration-icon": "optionChange",
            "change #assign-dropdown": "assignOptionChange"
        },
        render: function(d) {
            var e = this;
            $(d).html(e.el);
            e.renderTemplate()
        },
        renderTemplate: function() {
            var f = this,
                d = f.options.groupOptions.get("Feeds"),
                e;
            f.appAssociationGroupId = d[0].AppAssociationGroupId;
            for (e = 0; e < d.length; e++) {
                switch (d[e].ContentId) {
                    case 5:
                        d[e].Description = "iCal-Events";
                        break;
                    case 6:
                        d[e].Description = "RSS-News";
                        break;
                    case 10:
                        d[e].Description = "RSS-Announcements";
                        break;
                    case 45:
                        d[e].Description = "iCal-Team Schedule";
                        break;
                    case 58:
                        d[e].Description = "iCal-Assignments";
                        break;
                    case 69:
                        d[e].Description = "iCal-Practice Schedule";
                        break;
                    case 87:
                        d[e].Description = "iCal-Schedule";
                        break;
                    case 165:
                        d[e].Description = "Audio Podcast";
                        break
                }
            }
            p3.fT(f.template, function(g) {
                f.$el.html(g({
                    feeds: d,
                    integrations: f.options.groupOptions.get("Integrations"),
                    haveIntegrations: f.options.groupOptions.get("Integrations").length > 0
                }))
            })
        },
        optionChange: function(f) {
            var d = $(f.currentTarget);
            if (d.hasClass("p3icon-check")) {
                d.removeClass("p3icon-check").addClass("p3icon-ok")
            } else {
                d.removeClass("p3icon-ok").addClass("p3icon-check")
            }
            this.saveAccess()
        },
        assignOptionChange: function() {
            this.saveAccess()
        },
        saveAccess: function(d, e) {
            var i = this,
                h = new c.Ms.GroupsPageOptions(),
                f = [],
                g = [];
            $(".feed-icon").each(function() {
                if ($(this).data("id") === 58) {
                    f.push({
                        ContentId: 58,
                        Enabled: $(this).hasClass("p3icon-ok")
                    })
                } else {
                    f.push({
                        ContentId: $(this).data("id"),
                        Enabled: $(this).hasClass("p3icon-ok")
                    })
                }
            });
            $(".integration-icon").each(function() {
                g.push({
                    VendorId: $(this).data("id"),
                    Enabled: $(this).hasClass("p3icon-ok")
                })
            });
            h.set({
                AppAssociationGroupId: i.appAssociationGroupId,
                Feeds: f,
                Integrations: g
            });
            h.save({}, {
                error: function() {
                    p3.displayError("Error saving group page options")
                }
            })
        }
    });
    c.Vs.AddAccess = Bb.View.extend({
        template: "grouppagesettings/group.page.add.access.template.html",
        events: {
            "click #btnSave": "saveAccess",
            "click #view-all-button": "viewAllClick"
        },
        renderTemplate: function() {
            var h = this,
                g = new c.Cs.UserTypes(),
                f, d, e;
            g.fetch({
                data: {
                    appAssocationGroupId: h.options.appAssociationGroupId
                },
                success: function() {
                    f = g.toJSON();
                    d = _.filter(f, function(i) {
                        return i.TopSection
                    });
                    e = _.filter(f, function(i) {
                        return !i.TopSection
                    });
                    p3.fT(h.template, function(i) {
                        h.$el.html(i({
                            primaryTypes: d,
                            secondaryTypes: e,
                            showSecondary: e.length > 0
                        }))
                    })
                },
                error: function() {
                    p3.displayError("Error getting available user types.")
                }
            })
        },
        render: function(d) {
            var e = this;
            $(d).append(this.el);
            e.renderTemplate()
        },
        saveAccess: function(d) {
            var h = this,
                f, g = [];
            if ($(".user-type-button.active").length > 0) {
                $("#btnSave").button("loading");
                $(".user-type-button.active").each(function(e) {
                    g.push({
                        UserTypeId: $(this).data("id")
                    })
                });
                f = new c.Ms.UserTypesAdd({
                    AppAssociationGroupId: h.options.appAssociationGroupId,
                    UserTypes: g
                });
                f.save({}, {
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error saving user types.")
                    },
                    success: function() {
                        h.trigger("accessAdded");
                        p3.showModal(p3.Layout.Containers.Modal, "hide")
                    }
                })
            }
        },
        viewAllClick: function(d) {
            if ($("#all").is(":visible")) {
                $("#all").hide()
            } else {
                $("#all").show()
            }
            p3.setModalHeight(p3.Layout.Containers.Modal);
            d.preventDefault()
        }
    });
    c.Us.setClassDropdownText = function() {
        var e = c.Us.GetSectionLabel(),
            d = "A";
        if (c.Data.Assoc === b.Associations.ACTIVITY.Value || c.Data.Assoc === b.Associations.ADVISORY.Value) {
            d = "An"
        }
        $("#selected-class").html("-- Select " + d + " " + e + " --")
    };
    c.Us.GetSectionLabel = function() {
        var d = "";
        switch (c.Data.Assoc) {
            case b.Associations.ACADEMICS.Value:
                d = "Class";
                break;
            case b.Associations.ACTIVITY.Value:
                d = "Activity";
                break;
            case b.Associations.ADVISORY.Value:
                d = "Advisory";
                break;
            case b.Associations.ATHLETICS.Value:
                d = "Team";
                break;
            case b.Associations.COMMUNITY.Value:
                d = "Community";
                break;
            case b.Associations.DORM.Value:
                d = "Dorm";
                break
        }
        return d
    };
    c.Us.GetSectionPlural = function() {
        var d = "";
        switch (c.Data.Assoc) {
            case b.Associations.ACADEMICS.Value:
                d = "Classes";
                break;
            case b.Associations.ACTIVITY.Value:
                d = "Activities";
                break;
            case b.Associations.ADVISORY.Value:
                d = "Advisories";
                break;
            case b.Associations.ATHLETICS.Value:
                d = "Teams";
                break;
            case b.Associations.COMMUNITY.Value:
                d = "Communities";
                break;
            case b.Associations.DORM.Value:
                d = "Dorms";
                break
        }
        return d
    };
    p3.router().route("grouppagesettings", "grouppagesettings", function() {
        p3.setTitle("Group Page Settings");
        p3.renderMainPage(new c.Vs.Layout({
            groupOptions: false
        }))
    });
    p3.router().route("grouppageoptions", "grouppageoptions", function() {
        p3.setTitle("Group Page Options");
        p3.renderMainPage(new c.Vs.Layout({
            groupOptions: true
        }))
    })
}(p3.module("LMS/grouppagesettings")));
(function(e) {
    var b = p3.Us.Enum,
        a = p3.Us.Culture,
        c = p3.module("utilities/filter"),
        h = p3.module("utilities/sort"),
        g = p3.module("utilities/smodal"),
        d = p3.Us.InfoMessageLibrary,
        f = p3.module("shared/ltitool");
    e.Ms.ProviderDetail = Bbm.extend({
        idAttribute: "ProviderId",
        urlRoot: "LtiProvider/Edit/",
        defaults: {
            ActiveInd: false,
            ProviderName: "",
            ProviderDescription: "",
            CredentialsTypeId: b.LtiCredentialsType.FIXED,
            LaunchUrl: "",
            ConsumerKey: "",
            SharedSecret: "",
            LtiVersionId: 100,
            GalleryId: 0,
            OutcomesPlacementsInd: false,
            BbInd: false,
            BbPlacementsInd: false,
            TopicInd: false,
            TopicPlacementsInd: false,
            AssignmentInd: false,
            AssignmentPlacementsInd: false,
            AssessmentInd: false,
            AssessmentPlacementsInd: false,
            DiscussionInd: false,
            DiscussionPlacementsInd: false,
            AnyPlacementsInd: false,
            ChangeContextFlag: 0,
            ConsentScreenInd: false,
            ChangeConsentScreenFlag: 0,
            OutcomesInd: false,
            ChangeOutcomesFlag: 0,
            MessagesInd: false,
            ChangeMessagesFlag: 0,
            SendUserName: 0,
            SendUserEmail: 0,
            SendUserRole: 0,
            SendUserImage: 0,
            ChangePrivacyFlag: 0,
            PresentationTarget: 1,
            PresentationHeight: null,
            PresentationWidth: null,
            ChangePresentationFlag: 0,
            ParametersInd: false,
            ChangeParameterFlag: 0,
            XmlInd: false,
            ChangeXmlFlag: 0,
            ConfigTypeId: null,
            ChangeConfigTypeFlag: 0,
            LaunchTypeId: null,
            ChangeLaunchTypeFlag: 0,
            CanEditInd: true,
            CanDeleteInd: true,
            Domains: []
        },
        validation: {
            GalleryId: [{
                min: 1,
                msg: d.P3.RequiredInfoNotEntered
            }],
            ProviderName: [{
                required: true,
                msg: d.P3.RequiredInfoNotEntered
            }],
            PresentationTarget: [{
                required: function(m, i, k) {
                    var j, l = false;
                    j = this.get("ChangePresentationFlag");
                    if (j === null && this.selectedGallery) {
                        j = this.selectedGallery.get("ChangePresentationFlag")
                    }
                    if (j > 0) {
                        l = j
                    }
                    return l
                },
                msg: d.P3.RequiredInfoNotEntered
            }],
            LaunchUrl: [{
                required: function(m, i, j) {
                    var l, k = false;
                    l = this.get("CredentialsTypeId");
                    if (l === null && this.selectedGallery) {
                        l = this.selectedGallery.get("CredentialsTypeId")
                    }
                    if (l) {
                        k = (l.toString() === b.LtiCredentialsType.FIXED.toString())
                    }
                    return k
                },
                msg: d.P3.RequiredInfoNotEntered
            }],
            ConsumerKey: [{
                required: function(m, i, j) {
                    var l, k = false;
                    l = this.get("CredentialsTypeId");
                    if (l === null && this.selectedGallery) {
                        l = this.selectedGallery.get("CredentialsTypeId")
                    }
                    if (l) {
                        k = (l.toString() === b.LtiCredentialsType.FIXED.toString())
                    }
                    return k
                },
                msg: d.P3.RequiredInfoNotEntered
            }]
        },
        changeGallery: function(j) {
            var i = this;
            i.set("ProviderId", 0);
            i.set("ProviderName", null);
            i.set("ProviderDescription", null);
            i.set("CredentialsTypeId", null);
            i.set("ChangeCredentialsTypeFlag", 0);
            i.set("LaunchUrl", null);
            i.set("ConsumerKey", null);
            i.set("SharedSecret", null);
            i.set("LtiVersionId", null);
            i.set("TopicInd", null);
            i.set("BbInd", null);
            i.set("AssignmentInd", null);
            i.set("AssessmentInd", null);
            i.set("DiscussionInd", null);
            i.set("ChangeContextFlag", 0);
            i.set("ConsentScreenInd", null);
            i.set("ChangeConsentScreenFlag", 0);
            i.set("OutcomesInd", null);
            i.set("ChangeOutcomesFlag", 0);
            i.set("MessagesInd", null);
            i.set("ChangeMessagesFlag", 0);
            i.set("SendUserName", null);
            i.set("SendUserEmail", null);
            i.set("SendUserRole", null);
            i.set("SendUserImage", null);
            i.set("ChangePrivacyFlag", 0);
            i.set("PresentationTarget", null);
            i.set("PresentationHeight", null);
            i.set("PresentationWidth", null);
            i.set("ChangePresentationFlag", 0);
            i.set("ParameterInd", null);
            i.set("ChangeParameterFlag", 0);
            i.set("XmlInd", null);
            i.set("ChangeXmlFlag", 0);
            i.set("ConfigTypeId", null);
            i.set("ChangeConfigTypeFlag", 0);
            i.set("LaunchTypeId", null);
            i.set("LaunchConfigTypeFlag", 0);
            if (j) {
                i.set("GalleryId", j.get("GalleryId"));
                i.syncWithGallery(j)
            }
        },
        syncWithGallery: function(j) {
            var i = this;
            if (j && j.get("GalleryId")) {
                i.syncProperty(j, "ChangeContextFlag", "TopicInd");
                i.syncProperty(j, "ChangeContextFlag", "BbInd");
                i.syncProperty(j, "ChangeContextFlag", "AssignmentInd");
                i.syncProperty(j, "ChangeContextFlag", "AssessmentInd");
                i.syncProperty(j, "ChangeContextFlag", "DiscussionInd");
                i.syncProperty(j, "ChangeContextFlag", "TopicInd");
                i.syncProperty(j, "ChangeConsentScreenFlag", "ConsentScreenInd");
                i.syncProperty(j, "ChangeOutcomesFlag", "OutcomesInd");
                i.syncProperty(j, "ChangeMessagesFlag", "MessagesInd");
                i.syncProperty(j, "ChangePrivacyFlag", "SendUserName");
                i.syncProperty(j, "ChangePrivacyFlag", "SendUserEmail");
                i.syncProperty(j, "ChangePrivacyFlag", "SendUserRole");
                i.syncProperty(j, "ChangePrivacyFlag", "SendUserImage");
                i.syncProperty(j, "ChangePresentationFlag", "PresentationTarget");
                i.syncProperty(j, "ChangePresentationFlag", "PresentationHeight");
                i.syncProperty(j, "ChangePresentationFlag", "PresentationWidth");
                i.syncProperty(j, "ChangeCredentialsTypeFlag", "CredentialsTypeId");
                i.syncProperty(j, "ChangeParameterFlag", "ParameterInd");
                i.syncProperty(j, "ChangeXmlFlag", "XmlInd");
                i.syncProperty(j, "ChangeLaunchTypeFlag", "LaunchTypeId");
                i.syncProperty(j, "ChangeConfigTypeFlag", "ConfigTypeId");
                i.set("ChangeCredentialsTypeFlag", j.get("ChangeCredentialsTypeFlag"));
                i.set("ChangeContextFlag", j.get("ChangeContextFlag"));
                i.set("ChangeConsentScreenFlag", j.get("ChangeConsentScreenFlag"));
                i.set("ChangeOutcomesFlag", j.get("ChangeOutcomesFlag"));
                i.set("ChangeMessagesFlag", j.get("ChangeMessagesFlag"));
                i.set("ChangePrivacyFlag", j.get("ChangePrivacyFlag"));
                i.set("ChangePresentationFlag", j.get("ChangePresentationFlag"));
                i.set("ChangeParameterFlag", j.get("ChangeParameterFlag"));
                i.set("ChangeXmlFlag", j.get("ChangeXmlFlag"));
                i.set("ChangeConfigTypeFlag", j.get("ChangeConfigTypeFlag"));
                i.set("ChangeLaunchTypeFlag", j.get("ChangeLaunchTypeFlag"))
            }
        },
        syncProperty: function(l, i, j) {
            var k = this;
            if (!l.get(i)) {
                k.set(j, null)
            } else {
                if (this.get(j) === null) {
                    k.set(j, l.get(j))
                }
            }
        }
    });
    e.Ms.GalleryDetail = Bbm.extend({
        getContextOptions: function() {
            var j, i = 0;
            if (this.get("ContextOptions") > 0) {
                i = this.get("ContextOptions")
            }
            j = {
                BB: ((i & 1) > 0),
                Topic: ((i & 2) > 0),
                Assignment: ((i & 4) > 0),
                Assessment: ((i & 8) > 0),
                Discussion: ((i & 16) > 0)
            };
            return j
        }
    });
    e.Cs.ProviderList = Bbc.extend({
        model: e.Ms.ProviderDetail,
        initialize: function() {
            _.extend(this, $.extend(true, {}, c.Us.CollectionFilter));
            _.extend(this, $.extend(true, {}, h.Us.CollectionSort))
        },
        url: "LtiProvider/List/"
    });
    e.Cs.GalleryPickList = Bbc.extend({
        model: e.Ms.GalleryDetail,
        url: "LtiProvider/GalleryList/",
        createPickList: function(i) {
            var k = i || 0,
                j = new e.Cs.GalleryPickList(this.filter(function(l) {
                    return (l.get("ActiveInd") === true || l.get("GalleryId") === k)
                }));
            return [{
                GalleryName: "-- select a provider type --",
                GalleryId: 0,
                ActiveInd: true
            }].concat(j.toJSON())
        },
        locateGallery: function(j) {
            var i;
            i = _.first(this.where({
                GalleryId: j
            }));
            if (!i) {
                i = new e.Ms.GalleryDetail()
            }
            return i
        }
    });
    e.Cs.PlacementList = Bbc.extend({
        url: "DataDirect/LtiProviderPlacementList/"
    });
    e.Cs.AuditlogList = Bbc.extend({
        url: "DataDirect/LtiProviderPlacementAuditlogList/"
    });
    e.Vs.Layout = Bb.View.extend({
        template: "page/page.10-2.header.template.html",
        initialize: function() {
            var i = this;
            i.Containers = {};
            i.template = "ltisettings/ltisettings.layout.template.html"
        },
        render: function(i) {
            var j = this;
            p3.setTitle("Learning Tools");
            $(i).html(j.el);
            j.renderData()
        },
        renderData: function() {
            var i = this;
            p3.fT(i.template, function(l) {
                i.$el.html(l({}));
                p3.rV(new e.Vs.Sidebar(), i.$("#add-container"), true);
                var k = new e.Cs.ProviderList(),
                    j = new e.Vs.ProviderList({
                        collection: k
                    });
                p3.rV(j, i.$(".col-left"), false);
                p3.rV(new c.Vs.Filter({
                    template: "ltisettings/ltisettings.filter.template.html",
                    collection: k,
                    callback: function() {
                        j.renderData()
                    }
                }), i.$(".col-right"), false)
            })
        }
    });
    e.Vs.Header = Bb.View.extend({
        className: "subhead",
        render: function(i) {
            var j = this;
            $(i).html(j.el);
            j.renderData()
        },
        renderData: function() {
            var i = this;
            i.$el.html('<h1 class="was-jmbtrn">Learning Tools</h1><p class="lead">Use this task to configure third-party edtech tools that are LTI (Learning Tools Interoperability) compliant. You may need to consult with the provider for configuration information.</p>')
        }
    });
    e.Vs.Sidebar = Bb.View.extend({
        template: "ltisettings/ltisettings.sidebar.template.html",
        className: "ltisettings-sidebar",
        tagName: function() {
            var i = "div";
            i = "span";
            return i
        },
        events: {
            "click #add-provider": "addProvider"
        },
        render: function(i) {
            var j = this;
            $(i).html(j.el);
            j.renderData()
        },
        renderData: function() {
            var i = this;
            p3.fT(i.template, function(j) {
                i.$el.html(j({}))
            })
        },
        addProvider: function(i) {
            i.stopPropagation();
            i.preventDefault();
            var k = this,
                j = new e.Vs.EditProvider({
                    model: new e.Ms.ProviderDetail(),
                    variables: {
                        collection: k.collection
                    }
                });
            p3.showModal(p3.Layout.Containers.Modal, {
                backOnHide: false
            });
            p3.rV(j, p3.Layout.Containers.Modal, true)
        }
    });
    e.Vs.ProviderList = Bb.View.extend({
        template: "ltisettings/ltisettings.provider.list.template.html",
        initialize: function(i) {
            var j = this;
            j.columns = [{
                SortName: "ProviderName",
                DisplayName: "Provider Name",
                Sortable: true,
                Width: "25%"
            }, {
                SortName: "ActiveInd",
                DisplayName: "Status",
                Sortable: true,
                Width: "20%"
            }, {
                SortName: "CredentialsTypeId",
                DisplayName: "Credentials",
                Sortable: true,
                Width: "20%"
            }, {
                SortName: "ModifiedDate",
                DisplayName: "Modified",
                Sortable: true
            }, {
                SortName: null,
                DisplayName: null,
                Sortable: false,
                Width: "20%"
            }];
            e.on("refreshProviderList", function() {
                j.$el.empty();
                j.renderData()
            }, j)
        },
        events: {
            "click th.sortable": "sort"
        },
        render: function(i) {
            var j = this;
            $(i).append(j.el);
            j.renderData()
        },
        renderData: function() {
            var j = this,
                i = j.collection.sortDirection === "asc" ? "p3icon-sortDown" : "p3icon-sortUp";
            j.collection.reset();
            p3.fT(j.template, function(k) {
                j.$el.html(k({
                    columns: j.columns
                }));
                j.$("th[data-sort=" + j.collection.sortProp + "]").removeClass("muted");
                j.$("th[data-sort=" + j.collection.sortProp + "]").find("i").removeClass("p3icon-sortOff").addClass(i);
                j.collection.fetch({
                    cache: false,
                    success: function() {
                        _.each(j.collection.models, function(l) {
                            var m = new e.Vs.LineItem({
                                model: l,
                                parentView: j
                            });
                            p3.rV(m, j.$(".providers-table tbody"), false)
                        })
                    }
                })
            })
        },
        sort: function(i) {
            var k = this,
                j = "";
            p3.fT(k.template, function(l) {
                k.collection.setSort($(i.currentTarget).data("sort"));
                k.$el.html(l({
                    columns: k.columns
                }));
                _.each(k.collection.models, function(m) {
                    var n = new e.Vs.LineItem({
                        model: m,
                        parentView: k
                    });
                    p3.rV(n, k.$(".providers-table tbody"), false)
                });
                j = k.collection.sortDirection === "asc" ? "p3icon-sortDown" : "p3icon-sortUp";
                k.$("th[data-sort=" + k.collection.sortProp + "]").removeClass("muted");
                k.$("th[data-sort=" + k.collection.sortProp + "]").find("i").removeClass("p3icon-sortOff").addClass(j)
            })
        }
    });
    e.Vs.LineItem = Bb.View.extend({
        template: "ltisettings/ltisettings.provider.detail.template.html",
        tagName: "tr",
        initialize: function() {
            var i = this;
            i.model.bind("sync", i.renderData, i);
            Bb.Validation.bind(i, {
                forceUpdate: true,
                selector: "name"
            })
        },
        events: {
            "click .edit": "editProvider",
            "click .delete:not(:disabled)": "deleteProvider"
        },
        render: function(i) {
            var j = this;
            $(i).append(j.el);
            j.renderData()
        },
        renderData: function() {
            var i = this;
            p3.fT(i.template, function(j) {
                i.$el.html(j({
                    model: i.model.toJSON()
                }))
            })
        },
        editProvider: function(i) {
            i.stopPropagation();
            i.preventDefault();
            var l = this,
                k, j;
            j = new e.Ms.ProviderDetail();
            j.fetch({
                cache: false,
                data: {
                    id: l.model.get("ProviderId")
                },
                success: function() {
                    k = new e.Vs.EditProvider({
                        model: j,
                        variables: {
                            collection: l.collection
                        }
                    });
                    p3.showModal(p3.Layout.Containers.Modal, {
                        backOnHide: false
                    });
                    p3.rV(k, p3.Layout.Containers.Modal, true)
                },
                error: function() {
                    p3.displayError("Error loading the Learning Tool Provider.")
                }
            })
        },
        deleteProvider: function(i) {
            i.preventDefault();
            var j = this;
            j.$(".delete").prop("disabled", true);
            p3.showConfirmCancel("Delete Learning Tool Provider", "Wait a minute. Are you really sure you want to delete " + j.model.get("ProviderName") + "?", null, function() {
                j.model.destroy({
                    success: function() {
                        $(j.el).remove();
                        j.$(".delete").prop("disabled", false)
                    },
                    error: function() {
                        p3.displayError("Error deleting the Learning Tool Provider.");
                        j.$(".delete").prop("disabled", false)
                    }
                })
            })
        }
    });
    e.Vs.EditProvider = g.Vs.Modal2.extend({
        template: "ltisettings/ltisettings.edit.layout.template.html",
        selector: "id",
        size: "md",
        modalRendered: function() {
            var i = this;
            i.ltiGalleries = new e.Cs.GalleryPickList();
            i.model.selectedGallery = null;
            i.ltiGalleries.fetch({
                success: function() {
                    i.model.selectedGallery = i.ltiGalleries.locateGallery(i.model.get("GalleryId"));
                    i.model.syncWithGallery(i.model.selectedGallery);
                    i.renderTemplate()
                },
                error: function() {
                    p3.displayError("Error loading the gallery list")
                }
            })
        },
        renderTemplate: function() {
            var i = this;
            i.generalView = new e.Vs.EditProviderGeneral({
                model: i.model,
                parentView: i
            });
            p3.rV(i.generalView, i.$("#general"), true);
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        modalUpdate: function(s) {
            var u = this,
                m = $(s.eventCurrentTarget),
                r, p, q, j, i, k, n, l, o, t = true;
            p = m.attr(u.selector);
            if (p === "GalleryId") {
                r = parseInt(m.val(), 10);
                u.model.selectedGallery = u.ltiGalleries.locateGallery(r);
                $(".tooltip").remove();
                u.model.changeGallery(u.model.selectedGallery);
                u.renderTemplate();
                t = false
            } else {
                if (m.parent().attr(u.selector) === "Available") {
                    if (m.attr(u.selector) === "BbInd") {
                        u.setPropByString(u.model.attributes, "BbInd", !(m.hasClass("active")));
                        t = false
                    }
                    if (m.attr(u.selector) === "TopicInd") {
                        u.setPropByString(u.model.attributes, "TopicInd", !(m.hasClass("active")));
                        t = false
                    }
                    if (m.attr(u.selector) === "AssignmentInd") {
                        k = u.$("#outcomes-area");
                        l = u.$("#OutcomesInd");
                        u.setPropByString(u.model.attributes, "AssignmentInd", !(m.hasClass("active")));
                        if (!(m.hasClass("active"))) {
                            if (u.model.get("ChangeOutcomesFlag")) {
                                l.parent().addClass("active");
                                u.setPropByString(u.model.attributes, "OutcomesInd", (l.parent().hasClass("active")))
                            }
                            k.show()
                        } else {
                            if (u.model.get("ChangeOutcomesFlag")) {
                                l.removeClass("active");
                                u.setPropByString(u.model.attributes, "OutcomesInd", (l.hasClass("active")))
                            }
                            k.hide()
                        }
                        t = false
                    }
                    if (m.attr(u.selector) === "AssessmentInd") {
                        u.setPropByString(u.model.attributes, "AssessmentInd", !(m.hasClass("active")));
                        t = false
                    }
                    if (m.attr(u.selector) === "DiscussionInd") {
                        u.setPropByString(u.model.attributes, "DiscussionInd", !(m.hasClass("active")));
                        t = false
                    }
                } else {
                    if (m.parent().attr(u.selector) === "CredentialsTypeId") {
                        j = u.$("#domain-area");
                        i = u.$("#credentials-area");
                        n = u.$("#xml-area");
                        o = u.$("#XmlInd");
                        q = m.find("input").val();
                        if (q.toString() === b.LtiCredentialsType.BYDOMAIN.toString()) {
                            u.setPropByString(u.model.attributes, "CredentialsTypeId", b.LtiCredentialsType.BYDOMAIN);
                            if (u.model.get("ChangeXmlFlag")) {
                                o.removeClass("active");
                                u.setPropByString(u.model.attributes, "XmlInd", (o.hasClass("active")));
                                n.show()
                            }
                            u.generalView.domainListView.appendEmptyListItemIfNeeded();
                            i.hide();
                            j.show()
                        } else {
                            if (u.model.get("ChangeXmlFlag")) {
                                o.removeClass("active");
                                u.setPropByString(u.model.attributes, "XmlInd", (o.hasClass("active")));
                                n.hide()
                            }
                            if (q.toString() === b.LtiCredentialsType.FIXED.toString()) {
                                u.setPropByString(u.model.attributes, "CredentialsTypeId", b.LtiCredentialsType.FIXED);
                                j.hide();
                                i.show()
                            } else {
                                u.setPropByString(u.model.attributes, "CredentialsTypeId", b.LtiCredentialsType.PERLINK);
                                j.hide();
                                i.hide()
                            }
                        }
                        t = false
                    }
                }
            }
            p3.setModalHeight(p3.Layout.Containers.Modal);
            return t
        },
        modalSave: function() {
            var j = this,
                i;
            i = j.model.isValid(true);
            i = j.validateDomainList(i);
            if (i && !j.hasCredentials(b.LtiCredentialsType.FIXED)) {
                j.model.set("LaunchUrl", null);
                j.model.set("ConsumerKey", null);
                j.model.set("SharedSecret", null)
            }
            i = f.Us.ValidateParameterList(j, j.model, "Parameters", i);
            return i
        },
        validateDomainList: function(m) {
            var p = this,
                i, j, n, o, k = [],
                l = true;
            if (p.hasCredentials(b.LtiCredentialsType.BYDOMAIN)) {
                p.$el.find("#domain-area").removeClass("error");
                p.$el.find(".domain-field").removeClass("box-validate");
                p.$el.find(".key-field").removeClass("box-validate");
                i = $(".domain-entry");
                if (i.length > 0) {
                    _.each(i, function(q) {
                        j = $(q).find(".domain-field").val();
                        n = $(q).find(".key-field").val();
                        o = $(q).find(".secret-field").val();
                        if (j || n || o) {
                            if (j && n) {
                                k.push(new Bbm({
                                    Domain: j,
                                    ConsumerKey: n,
                                    SharedSecret: o
                                }))
                            } else {
                                if (!j) {
                                    $(q).find(".domain-field").addClass("box-validate")
                                }
                                if (!n) {
                                    $(q).find(".key-field").addClass("box-validate")
                                }
                                l = false
                            }
                        }
                    })
                }
            }
            if (!l) {
                p.$el.find("#domain-area").addClass("error")
            }
            p.model.set("Domains", k);
            return (m && l)
        },
        modalSavedError: function(i) {
            p3.displayError("There was an error saving the Learning Tool Provider. (" + i.error.responseText + ")")
        },
        modalSavedSuccess: function(i) {
            e.trigger("refreshProviderList")
        },
        hasCredentials: function(j) {
            var n = this,
                l = n.model.get("CredentialsTypeId"),
                k = n.model.selectedGallery.get("CredentialsTypeId"),
                i = n.model.get("ChangeCredentialsTypeFlag"),
                m = false;
            if ((l !== undefined && l !== null && l.toString() === j.toString()) || (k !== undefined && k !== null && k.toString() === j.toString() && i.toString() === b.LtiChangeFlag.NONE.toString())) {
                m = true
            }
            return m
        }
    });
    e.Vs.EditProviderGeneral = Bb.View.extend({
        template: "ltisettings/ltisettings.edit.general.template.html",
        initialize: function(i) {
            var j = this;
            j.parentView = j.options.parentView
        },
        render: function(i) {
            var j = this;
            $(i).html(j.el);
            j.renderData()
        },
        renderData: function() {
            var k = this,
                j, i;
            j = f.Us.PresentationTargetPickList(k.model.selectedGallery.get("PresentationTargetOptions"));
            i = k.model.selectedGallery.getContextOptions();
            p3.fT(k.template, function(l) {
                k.$el.html(l({
                    model: k.model.toJSON(),
                    gallery: k.model.selectedGallery.toJSON(),
                    galleryList: k.parentView.ltiGalleries.createPickList(k.model.get("GalleryId")),
                    targets: j.toJSON(),
                    showCredentialsArea: k.parentView.hasCredentials(b.LtiCredentialsType.FIXED),
                    showDomainArea: k.parentView.hasCredentials(b.LtiCredentialsType.BYDOMAIN),
                    contextOptions: i
                }));
                k.domainListView = new e.Vs.EditProviderGeneralList({
                    model: k.model
                });
                p3.rV(k.domainListView, k.$("#domain-list-area"), true);
                if (k.model.get("ChangeParameterFlag") > 0) {
                    k.parameterListView = new f.Vs.EditToolGeneralList({
                        model: k.model
                    });
                    p3.rV(k.parameterListView, k.$("#param-list-area"), true)
                }
                p3.setModalHeight(p3.Layout.Containers.Modal)
            })
        }
    });
    e.Vs.EditProviderGeneralList = Bb.View.extend({
        id: "domain-list",
        initialize: function() {
            this.domainList = this.model.get("Domains")
        },
        events: {
            "blur .domain-input-field": "appendEmptyListItemIfNeeded"
        },
        render: function(i) {
            var j = this;
            $(i).html(j.el);
            j.renderData()
        },
        renderData: function() {
            var j = this,
                i;
            _.each(j.domainList, function(k) {
                i = new e.Vs.EditProviderGeneralListItem({
                    model: k
                });
                p3.rV(i, j.$el, false)
            });
            j.appendEmptyListItem()
        },
        appendEmptyListItemIfNeeded: function(j) {
            var p = this,
                i = p.$el,
                m = $(i).children(":last"),
                k, n, l, o;
            if (m) {
                k = $(m).find("input.domain-field");
                n = $(m).find("input.key-field");
                l = k ? k.val() : null;
                o = n ? n.val() : null;
                if (l.length > 0 && o.length > 0) {
                    $(m).find(".domain-delete-button").show();
                    p.appendEmptyListItem()
                }
            }
        },
        appendEmptyListItem: function() {
            var j = this,
                i;
            i = new e.Vs.EditProviderGeneralListItem();
            p3.rV(i, j.$el, false)
        }
    });
    e.Vs.EditProviderGeneralListItem = Bb.View.extend({
        template: "ltisettings/ltisettings.edit.general.domain.template.html",
        className: "domain-entry",
        events: {
            "click .domain-delete-button": "removeListItem"
        },
        render: function(i) {
            var j = this;
            $(i).append(j.el);
            j.renderData()
        },
        renderData: function() {
            var i = this;
            p3.fT(i.template, function(j) {
                i.$el.html(j({
                    model: (i.model || null)
                }));
                p3.setModalHeight(p3.Layout.Containers.Modal)
            })
        },
        removeListItem: function(i) {
            i.preventDefault();
            this.unbind();
            this.remove()
        }
    });
    e.Vs.PlacementLayout = Bb.View.extend({
        template: "ltisettings/ltisettings.placement.layout.template.html",
        listTemplate: "ltisettings/ltisettings.placement.item.template.html",
        initialize: function() {
            var i = this;
            i.LtiProviderId = i.options.ltiProviderId
        },
        events: {
            "click .slide-toggle": "slideContent"
        },
        render: function(i) {
            var j = this;
            p3.setTitle("Learning Tool Placements");
            $(i).html(j.el);
            j.renderData()
        },
        renderData: function() {
            var i = this;
            i.collection = new e.Cs.PlacementList();
            i.collection.fetch({
                cache: false,
                data: {
                    ltiProviderId: i.LtiProviderId
                },
                success: function() {
                    var r, q = 0,
                        k, p, l = "school_year_label",
                        m = "placement_type",
                        s = "",
                        t = "",
                        n = "",
                        o = "",
                        j = i.$el;
                    if (i.collection.length > 0) {
                        r = i.collection.models[0];
                        i.collection.each(function(v, u) {
                            if (v.get("lti_tool_id")) {
                                q = q + 1;
                                s = v.get(l);
                                t = v.get(m);
                                v.set("groupVal1", s);
                                v.set("groupId1", u);
                                v.set("groupVal2", t);
                                v.set("groupId2", u);
                                k = v.get("context_label_id");
                                if (k === 5) {
                                    v.set("itemDetails", a.getDateString(v.get("item_date_assigned")) + " - " + a.getDateString(v.get("item_date_due")))
                                } else {
                                    v.set("itemDetails", v.get("lti_tool_title"))
                                }
                                if (s !== n) {
                                    v.set("startGroup1", 1);
                                    n = s;
                                    v.set("startGroup2", 1);
                                    o = t
                                } else {
                                    if (t !== o) {
                                        v.set("startGroup2", 1);
                                        o = t
                                    }
                                }
                            }
                            if (u === (i.collection.length - 1)) {
                                v.set("closeGroup2", 1);
                                v.set("closeGroup1", 1)
                            } else {
                                p = i.collection.models[u + 1];
                                if (p.get(m) !== t) {
                                    v.set("closeGroup2", 1)
                                }
                                if (p.get(l) !== s) {
                                    v.set("closeGroup1", 1)
                                }
                            }
                        });
                        p3.fT(i.template, function(u) {
                            i.$el.html(u({
                                provider: r.toJSON(),
                                placementCount: q
                            }));
                            if (q) {
                                j = $("#placement-item-container");
                                p3.fT(i.listTemplate, function(v) {
                                    j.append(v({
                                        placementCount: q,
                                        placements: i.collection.toJSON()
                                    }))
                                })
                            }
                        })
                    }
                }
            })
        },
        slideContent: function(k) {
            var j = $(k.target),
                i;
            $(j.closest("div.accordion-toggle").attr("data-target")).slideToggle(200);
            i = j.closest("div.accordion-toggle").find("div.swaparrow");
            if (i.hasClass("arrow-e")) {
                p3.slideArrowS(i)
            } else {
                p3.slideArrowE(i)
            }
        }
    });
    e.Vs.AuditlogLayout = Bb.View.extend({
        template: "ltisettings/ltisettings.auditlog.layout.template.html",
        listTemplate: "ltisettings/ltisettings.auditlog.item.template.html",
        initialize: function() {
            var i = this;
            i.LtiProviderId = i.options.ltiProviderId;
            i.LtiToolIndexId = i.options.ltiToolIndexId;
            i.ContextLabelId = i.options.contextLabelId;
            i.ContextValue = i.options.contextValue
        },
        events: {
            "click .request-link": "clickRequest",
            "click .response-link": "clickResponse"
        },
        render: function(i) {
            var j = this;
            p3.setTitle("Learning Tool Log");
            $(i).html(j.el);
            j.renderData()
        },
        renderData: function() {
            var j = this,
                i = j.$el;
            j.collection = new e.Cs.AuditlogList();
            j.collection.fetch({
                cache: false,
                data: {
                    ltiProviderId: j.LtiProviderId,
                    ltiToolIndexId: j.LtiToolIndexId,
                    contextLabelId: j.ContextLabelId,
                    contextValue: j.ContextValue
                },
                success: function() {
                    var l, k = 0,
                        m = true;
                    if (j.collection.length > 0) {
                        l = j.collection.models[0];
                        if (l.get("lti_auditlog_id")) {
                            k = j.collection.length
                        } else {
                            k = j.collection.length - 1
                        }
                        p3.fT(j.template, function(n) {
                            j.$el.html(n({
                                placement: l.toJSON(),
                                logCount: k
                            }));
                            if (k) {
                                p3.fT(j.listTemplate, function(o) {
                                    i = $("#placement-log-container");
                                    i.append(o({
                                        logCount: k,
                                        entries: j.collection.toJSON(),
                                        whmasteruser: m
                                    }))
                                })
                            }
                        })
                    }
                }
            })
        },
        clickRequest: function(i) {
            var j = this;
            i.stopPropagation();
            i.preventDefault();
            j.displayRequestResponse(i, "Request", "request")
        },
        clickResponse: function(i) {
            var j = this;
            i.stopPropagation();
            i.preventDefault();
            j.displayRequestResponse(i, "Response", "response")
        },
        displayRequestResponse: function(j, n, i) {
            var o = this,
                k = $(j.currentTarget).attr("data-id"),
                l, m;
            if (Number(k) > 0) {
                l = o.collection.findWhere({
                    lti_auditlog_id: parseInt(k, 10)
                });
                if (l) {
                    m = l.get(i);
                    p3.rV(new e.Vs.SimpleText({
                        Title: n,
                        Text: m
                    }), p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal)
                }
            }
        }
    });
    e.Vs.SimpleText = Bb.View.extend({
        template: "ltisettings/ltisettings.simpletext.template.html",
        events: {
            "click #btnClose": "doClose"
        },
        render: function(i) {
            var j = this;
            $(i).append(this.el);
            p3.fT(j.template, function(k) {
                j.$el.html(k({
                    Title: j.options.Title,
                    Text: j.options.Text
                }));
                j.trigger("render")
            })
        },
        doClose: function(i) {
            i.preventDefault();
            p3.Layout.Containers.Modal.modal("hide");
            return false
        }
    });
    p3.router().route("ltisettings(/:id)(/:ti)(/:cl)(/:cv)", "ltisettings", function(k, l, i, j) {
        if (k === null) {
            p3.renderMainPage(new e.Vs.Layout({}))
        } else {
            if (l === null || i === null || j === null) {
                p3.renderMainPage(new e.Vs.PlacementLayout({
                    ltiProviderId: k
                }))
            } else {
                p3.renderMainPage(new e.Vs.AuditlogLayout({
                    ltiProviderId: k,
                    ltiToolIndexId: l,
                    contextLabelId: i,
                    contextValue: j
                }))
            }
        }
    })
}(p3.module("lms/ltisettings")));
(function(a) {
    a.Ms.BaseTypes = Bbm.extend({
        idAttribute: "offering_type",
        url: function() {
            return ""
        }
    });
    a.Cs.BaseTypes = Bbc.extend({
        model: a.Ms.BaseTypes,
        url: function() {
            return aP + "datadirect/PersonellOfferingTypesGet/?format=json"
        }
    });
    a.Cs.PersonnelTypes = Bbc.extend({
        url: function() {
            return aP + "personneltype/get/?format=json"
        },
        filters: undefined,
        comparator: function(b) {
            return b.get("Type")
        },
        changeSort: function(b) {
            if (this.filters !== undefined) {
                this.comparator = this.filters[b]
            }
        }
    });
    a.Ms.Update = Bbm.extend({
        url: function() {
            return aP + "personneltype/update/?format=json"
        }
    });
    a.Ms.Create = Bbm.extend({
        url: function() {
            return aP + "personneltype/create/?format=json"
        }
    });
    a.Ms.DeleteType = Bbm.extend({
        idAttribute: "Role",
        url: function() {
            return aP + "personneltype/delete/?format=json&role=" + this.get("Role") + "&offeringType=" + this.get("OfferingType")
        }
    });
    a.Data = {};
    a.Data.ShowAll = true;
    a.Data.listSort = "Type";
    a.Vs.LayoutView = Bb.View.extend({
        template: "personneltypes/layout.template.html",
        initialize: function(b) {
            this.Containers = {};
            if (!a.Data.BaseTypes) {
                a.Data.BaseTypes = new a.Cs.BaseTypes();
                a.Data.BaseTypes.fetch({
                    async: false,
                    error: function(c, d) {
                        p3.displayError("Error getting types")
                    }
                })
            }
        },
        events: {
            "click .type-filter": "filterChange",
            "click .bounce-table-sort": "updateSort",
            "click .all-type-filter": "showAll",
            "click #add-type-button": "addType"
        },
        renderTemplate: function() {
            var b = this;
            p3.fT(b.template, function(c) {
                b.$el.html(c({
                    types: a.Data.BaseTypes.toJSON(),
                    showAll: a.Data.ShowAll
                }))
            });
            b.getList()
        },
        render: function(b) {
            $(b).append(this.el);
            this.renderTemplate()
        },
        renderList: function() {
            var c = this,
                b = new a.Vs.ListView();
            p3.rV(b, this.Containers.ListContainer, true);
            b.on("typeDeleted", function() {
                c.getList()
            })
        },
        getList: function() {
            var c = this,
                b = "-1";
            if (!a.Data.ShowAll) {
                b = "";
                a.Data.BaseTypes.each(function(d) {
                    if (d.get("selected")) {
                        if (b.length > 0) {
                            b += ","
                        }
                        b += d.get("offering_type")
                    }
                })
            }
            a.Data.PersonnelTypes = new a.Cs.PersonnelTypes();
            a.Data.PersonnelTypes.filters = {
                PersonnelDescription: function(f, g) {
                    var d = f.get("PersonnelDescription").toUpperCase() || "",
                        e = g.get("PersonnelDescription").toUpperCase() || "";
                    return d < e ? -1 : d > e ? 1 : 0
                },
                PersonnelDescription_invert: function(f, g) {
                    var d = f.get("PersonnelDescription").toUpperCase() || "",
                        e = g.get("PersonnelDescription").toUpperCase() || "";
                    return d < e ? 1 : d > e ? -1 : 0
                },
                Type: function(f, g) {
                    var d = f.get("Type").toUpperCase() || "",
                        e = g.get("Type").toUpperCase() || "",
                        h;
                    if (d < e) {
                        h = -1
                    } else {
                        if (d > e) {
                            h = 1
                        } else {
                            d = f.get("PersonnelDescription").toUpperCase() || "";
                            e = g.get("PersonnelDescription").toUpperCase() || "";
                            h = d < e ? -1 : d > e ? 1 : 0
                        }
                    }
                    return h
                },
                Type_invert: function(f, g) {
                    var d = f.get("Type").toUpperCase() || "",
                        e = g.get("Type").toUpperCase() || "",
                        h;
                    if (d < e) {
                        h = 1
                    } else {
                        if (d > e) {
                            h = -1
                        } else {
                            d = f.get("PersonnelDescription").toUpperCase() || "";
                            e = g.get("PersonnelDescription").toUpperCase() || "";
                            h = d < e ? -1 : d > e ? 1 : 0
                        }
                    }
                    return h
                }
            };
            a.Data.PersonnelTypes.fetch({
                data: {
                    offeringTypes: b
                },
                success: function() {
                    if (c.Containers.ListContainer === undefined) {
                        c.Containers.ListContainer = $("#personnel-types-container")
                    }
                    a.Data.PersonnelTypes.changeSort(a.Data.listSort);
                    a.Data.PersonnelTypes.sort();
                    c.renderList()
                },
                error: function(d, e) {
                    p3.displayError("Error getting personnel types")
                }
            })
        },
        showAll: function(c) {
            var b = $(c.currentTarget);
            if (!b.find(".all-icon").hasClass("p3icon-ok")) {
                this.displayAllOn();
                this.getList()
            }
            c.preventDefault()
        },
        displayAllOn: function() {
            a.Data.ShowAll = true;
            a.Data.BaseTypes.each(function(b) {
                b.set("selected", false)
            });
            $(".type-desc").css("color", "#999");
            $(".type-icon").removeClass("p3icon-ok").addClass("p3icon-check");
            $(".all-desc").css("color", "#424242");
            $(".all-icon").removeClass("p3icon-check").addClass("p3icon-ok")
        },
        filterChange: function(d) {
            var b = $(d.currentTarget),
                c = parseInt(b.data("value"), 10),
                g = false,
                f = false,
                h;
            h = a.Data.BaseTypes.get(c);
            h.set("selected", !b.find(".type-icon").hasClass("p3icon-ok"));
            if (a.Data.ShowAll) {
                a.Data.ShowAll = false;
                $(".all-desc").css("color", "#999");
                $(".all-icon").removeClass("p3icon-ok").addClass("p3icon-check");
                b.find(".type-desc").css("color", "#424242");
                b.find(".type-icon").removeClass("p3icon-check").addClass("p3icon-ok")
            } else {
                a.Data.BaseTypes.each(function(e) {
                    if (e.get("selected")) {
                        g = true
                    } else {
                        f = true
                    }
                });
                if (g && f) {
                    a.Data.ShowAll = false;
                    if (h.get("selected")) {
                        b.find(".type-desc").css("color", "#424242");
                        b.find(".type-icon").removeClass("p3icon-check").addClass("p3icon-ok")
                    } else {
                        b.find(".type-desc").css("color", "#999");
                        b.find(".type-icon").removeClass("p3icon-ok").addClass("p3icon-check")
                    }
                } else {
                    this.displayAllOn()
                }
            }
            this.getList();
            d.preventDefault()
        },
        updateSort: function(c) {
            var f = this,
                b = $(c.currentTarget),
                d = b.data("sort");
            if (d !== undefined) {
                if (a.Data.listSort === d) {
                    d = d + "_invert"
                }
                a.Data.listSort = d;
                a.Data.PersonnelTypes.changeSort(d);
                a.Data.PersonnelTypes.sort();
                f.renderList()
            }
            return false
        },
        addType: function(c) {
            var d = this,
                b = new a.Vs.AddView();
            p3.rV(b, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            b.on("typeSaved", function() {
                d.getList()
            });
            c.preventDefault()
        }
    });
    a.Vs.ListView = Bb.View.extend({
        template: "personneltypes/typelist.template.html",
        events: {
            "mouseover td.inline-edit": "handleHover",
            "mouseout td.inline-edit": "handleHoverOff",
            "click td.inline-edit": "inlineEdit",
            "focusout .edit-cell": "inlineClose",
            "click .delete-type": "deleteType"
        },
        renderTemplate: function() {
            var b = this;
            p3.fT(b.template, function(c) {
                b.$el.html(c({
                    list: a.Data.PersonnelTypes.toJSON(),
                    sort: a.Data.listSort
                }))
            })
        },
        render: function(b) {
            $(b).append(this.el);
            this.renderTemplate()
        },
        handleHover: function(c) {
            var b = $(c.target).closest("td");
            if ($(".edit-cell-icon").length === 0) {
                if (!b.hasClass("edit-cell")) {
                    b.prepend($("<i>", {
                        "class": "p3icon-edit edit-cell-icon pull-right"
                    }))
                }
                b.addClass("on");
                b.mouseleave(function() {
                    if (b.hasClass("on")) {
                        b.removeClass("on")
                    }
                })
            }
        },
        handleHoverOff: function(b) {
            if (!$(b.target).hasClass("on")) {
                this.$("i.edit-cell-icon").remove()
            }
        },
        inlineEdit: function(c) {
            var b = $(c.target).closest("td");
            if (!b.hasClass("edit-cell")) {
                b.html('<input type="text" class="list-desc-box input-large" max-length="100" value="' + b.find("P").html() + '"/>');
                b.addClass("edit-cell");
                b.find(".list-desc-box").focus()
            }
        },
        inlineClose: function(e, c) {
            var b, h, g, f, d, i;
            if (!_.isEqual(e.target, e.currentTarget)) {
                b = $(e.target);
                h = b.closest("td").data("role");
                g = (b.closest("td").data("offering"));
                f = b.closest("td").data("desc");
                d = b.val();
                if (f !== d) {
                    if (d.length > 0) {
                        i = new a.Ms.Update({
                            Role: h,
                            OfferingType: g,
                            PersonnelDescription: d
                        });
                        i.save({}, {
                            error: function() {
                                p3.displayError("Error updating personnel type")
                            },
                            success: function() {
                                b.closest("td").data("desc", d);
                                b.closest("td").removeClass("edit-cell").html('<p style="margin:3px 0px 0px 0px">' + d + "</p>")
                            }
                        })
                    } else {
                        b.addClass("box-validate");
                        b.focus()
                    }
                } else {
                    b.closest("td").removeClass("edit-cell").html('<p style="margin:3px 0px 0px 0px">' + f + "</p>")
                }
            }
        },
        deleteType: function(d) {
            var h = this,
                b = $(d.currentTarget),
                g = b.data("role"),
                f = b.data("offering"),
                c;
            p3.showConfirm("Delete Personnel Type", "Are you sure you want to delete this Personnel Type?", null, function() {
                c = new a.Ms.DeleteType({
                    Role: g,
                    OfferingType: f
                });
                c.destroy({
                    error: function() {
                        p3.displayError("Error deleting personnel type")
                    },
                    success: function() {
                        h.trigger("typeDeleted")
                    }
                })
            });
            d.preventDefault()
        }
    });
    a.Vs.AddView = Bb.View.extend({
        template: "personneltypes/add.template.html",
        events: {
            "click #btnSave": "saveType",
            "click #btnSaveAdd": "saveType"
        },
        renderTemplate: function() {
            var b = this;
            p3.fT(b.template, function(c) {
                b.$el.html(c({
                    baseTypes: a.Data.BaseTypes.toJSON()
                }))
            })
        },
        render: function(b) {
            var c = this;
            $(b).append(this.el);
            c.renderTemplate()
        },
        saveType: function(j) {
            var m = this,
                i = (j.target.id === "btnSaveAdd"),
                k, l = true,
                h = $("#type-group"),
                c = $("#offering-group"),
                g = $("#type-box"),
                b = $("#offering-drop"),
                d = $("#btnSave"),
                f = $("#btnSaveAdd");
            h.removeClass("error has-error");
            c.removeClass("error has-error");
            if (g.val().length === 0) {
                h.addClass("error has-error");
                l = false
            }
            if (b.val() === "0") {
                c.addClass("error has-error");
                l = false
            }
            if (l) {
                d.button("loading");
                f.button("loading");
                k = new a.Ms.Create({
                    OfferingType: b.val(),
                    PersonnelDescription: g.val()
                });
                k.save({}, {
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error saving personnel type.")
                    },
                    success: function() {
                        m.trigger("typeSaved");
                        if (i) {
                            g.val("");
                            b.val("0");
                            d.button("reset");
                            f.button("reset")
                        } else {
                            p3.showModal(p3.Layout.Containers.Modal, "hide")
                        }
                    }
                })
            }
        }
    });
    p3.router().route("personneltypes", "personneltypes", function() {
        p3.renderMainPage(new a.Vs.LayoutView({}))
    })
}(p3.module("lms/personneltypes")));
(function(s) {
    var d = p3.Us.Culture,
        e = p3.module("shared/datepicker"),
        c = p3.module("cms/shared/content"),
        j = p3.module("cms/shared/layoutbuilder"),
        q = p3.module("cms/pages"),
        f = p3.module("cms/shared/download"),
        k = p3.module("cms/shared/link"),
        n = p3.module("cms/shared/media"),
        o = p3.module("shared/mediaviewer"),
        g = p3.module("cms/shared/event"),
        r = p3.module("report"),
        m = p3.module("lists"),
        i = p3.module("LMS/shared/GroupFinder"),
        t = p3.module("shared/task"),
        l = p3.module("cms/shared/list"),
        u = p3.module("cms/shared/text"),
        h = p3.module("cms/shared/faq"),
        p = p3.module("cms/shared/news"),
        a = p3.module("cms/shared/announcement"),
        b = p3.module("admissions/candidateprogress");
    s.Data = {};
    s.Data.Persona = 12;
    s.Data.Filter = 0;
    s.Ms.SchoolLevel = Bbm.extend({
        idAttribute: "DdId"
    });
    s.Cs.SchoolLevel = Bbc.extend({
        model: s.Ms.SchoolLevel,
        initialize: function(v, w) {
            if (w) {
                this.editMode = w.editMode || false
            }
        },
        url: function() {
            var v;
            if (this.editMode) {
                v = aP + "datadirect/SchoolLevelGet/"
            } else {
                v = aP + "datadirect/ResourceBoardUserLevelsGet/?personaId=" + p3.Data.Context.getSelectedPersona().Id
            }
            return v
        }
    });
    s.Ms.ResourceBoardContainer = Bbm.extend({
        idAttribute: "ResourceBoardContainerId",
        urlRoot: "resourceboardcontainer/crud"
    });
    s.Ms.ResourceBoardContainerGet = Bbm.extend({
        idAttribute: "ResourceBoardContainerId",
        urlRoot: "resourceboardcontainer/containerget"
    });
    s.Cs.ResourceBoardContainer = Bbc.extend({
        model: s.Ms.ResourceBoardContainer,
        initialize: function(v, w) {
            if (w) {
                this.editMode = w.editMode || false
            }
        },
        url: function() {
            var v;
            if (this.editMode) {
                v = aP + "resourceboardcontainer/list/"
            } else {
                v = aP + "resourceboardcontainer/usercontainersget/"
            }
            return v
        }
    });
    s.Cs.ResourceBoardContent = Bbc.extend({
        model: Bbm,
        url: "DataDirect/GetResourceBoardContent"
    });
    s.Ms.UpdatePending = Bbm.extend({
        url: function() {
            return aP + "resourceboardcontainer/updatepending?format=json&resourceboardContainerId=" + this.get("resourceBoardContainerId") + "&acceptPending=" + this.get("acceptPending")
        }
    });
    s.Ms.StyleOptions = Bbm.extend({
        url: "",
        defaults: {
            Class: "conDefault",
            Font: "",
            FontSize: "small",
            ShowIcon: false
        }
    });
    s.Cs.SchoolYears = Bbc.extend({
        url: "datadirect/SchoolYearsGet/"
    });
    s.Cs.UserForms = Bbc.extend({
        initialize: function(v, w) {
            if (w) {
                this.formIds = w.formIds || ""
            }
        },
        url: function() {
            return aP + "datadirect/formslistget?format=json&formIds=" + this.formIds
        }
    });
    s.Cs.Priorities = Bbc.extend({
        url: function() {
            return aP + "datadirect/ResourceBoardPrioritiesGet?format=json&personaId=" + s.Data.Persona
        }
    });
    s.Ms.SetPriorities = Bbm.extend({
        url: function() {
            return aP + "resourceboardcontainer/setpriorities"
        }
    });
    s.Cs.PushpageArchives = Bbc.extend({
        initialize: function(v, w) {
            if (w) {
                this.templateId = w.templateId || 0
            }
        },
        url: function() {
            return aP + "datadirect/PushpageArchivesGet?format=json&templateId=" + this.templateId
        }
    });
    s.Vs.ResourceBoards = Bb.View.extend({
        template: "resourceboard/resourceboard.container.template.html",
        events: {
            "click .persona-item": "switchBoard",
            "click #add-container-button": "addContainer",
            "click #edit-priority-buton": "showPriorityDialog"
        },
        initialize: function() {
            var w = new k.Cs.LinkCategory(),
                v;
            this.Containers = {};
            this.boardId = this.options.boardId;
            this.editMode = this.options.editMode;
            this.header = this.options.header;
            if (this.editMode) {
                this.linkCategories = w;
                w.fetch({
                    success: function() {
                        w.each(function(x) {
                            x.set("Id", parseInt(x.get("Id").split("_")[1], 10))
                        })
                    },
                    error: function() {
                        p3.displayError("Error loading link categories.")
                    }
                });
                v = new g.Cs.Registrations();
                this.eventReg = v;
                v.fetch({
                    error: function() {
                        p3.displayError("Error loading event registrations")
                    }
                })
            } else {
                r.loadReportList();
                m.loadLists();
                if (!s.Data.ClassYears) {
                    s.Data.ClassYears = new s.Cs.SchoolYears();
                    s.Data.ClassYears.fetch({
                        success: function() {
                            s.Data.ClassYears.each(function(x) {
                                if (x.get("Current")) {
                                    s.Data.CurrentYear = x.get("Id");
                                    s.Data.CurrentMode = "current"
                                }
                            })
                        },
                        error: function() {
                            p3.displayError("Error loading schoolYears")
                        }
                    })
                }
            }
        },
        render: function(v) {
            var z = this,
                w, x, y;
            $(v).html(z.el);
            z.renderTemplate();
            w = z.editMode;
            window.setTimeout(function() {
                x = "Alum";
                y = false;
                switch (s.Data.Persona) {
                    case 1:
                        x = "Parent";
                        y = true;
                        break;
                    case 2:
                        x = "Student";
                        y = true;
                        break;
                    case 11:
                        x = "Friend";
                        break;
                    case 3:
                        x = "Faculty";
                        y = true;
                        break
                }
                $("#current-persona-button").html(x + '<span class="caret pull-right" style="margin-left:5px">');
                if (y || !w) {
                    $("#level-filter-region").show()
                } else {
                    $("#level-filter-region").hide()
                }
            }, 100)
        },
        renderTemplate: function() {
            var v = this;
            p3.fT(v.template, function(x) {
                v.$el.html(x({
                    edit: v.editMode,
                    Header: v.header
                }));
                v.Containers.Filter = $("#filter-container");
                v.Containers.Board = $("#board-container");
                var w = p3.Data.Context.getSelectedPersona().Id;
                if (v.editMode || w == 1 || w == 2 || w == 3) {
                    if (s.Data.FilterLevels == null) {
                        s.Data.FilterLevels = new s.Cs.SchoolLevel({}, {
                            editMode: v.editMode
                        });
                        s.Data.FilterLevels.fetch({
                            async: false,
                            success: function() {
                                s.Data.FilterLevels.each(function(y) {
                                    y.set("Selected", true)
                                })
                            },
                            error: function() {
                                p3.displayError("Error loading levels")
                            }
                        })
                    }
                    v.renderFilter()
                }
                v.renderBoard()
            })
        },
        switchBoard: function(w) {
            var v = $(w.currentTarget),
                y, z, x;
            $(".btn-group.open").removeClass("open");
            y = v.data("persona");
            if (y != s.Data.Persona) {
                s.Data.Persona = y;
                x = "";
                z = true;
                switch (y) {
                    case 1:
                        x = "Parent";
                        break;
                    case 2:
                        x = "Student";
                        break;
                    case 3:
                        x = "Faculty";
                        break;
                    case 11:
                        x = "Friend";
                        z = false;
                        break;
                    case 12:
                        x = "Alum";
                        z = false;
                        break
                }
                $("#current-persona-button").html(x + '<span class="caret pull-right" style="margin-left:5px"></span>');
                if (z) {
                    $("#level-filter-region").show()
                } else {
                    $("#level-filter-region").hide()
                }
                this.renderBoard()
            }
            return false
        },
        addContainer: function(w) {
            var y = this,
                v = new s.Ms.ResourceBoardContainer({
                    ContentGroupId: 0,
                    ContentItemId: 0
                }),
                x = new s.Vs.ContainerEditView({
                    container: v,
                    linkCategories: y.linkCategories,
                    eventReg: y.eventReg
                });
            p3.rV(x, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            x.on("containerSaved", function() {
                y.renderBoard()
            })
        },
        renderFilter: function() {
            var w = this,
                v = new s.Vs.ResourceBoardFilter({
                    edit: w.editMode
                });
            v.on("filterChanged", function() {
                w.renderBoard()
            });
            p3.rV(v, w.Containers.Filter, true)
        },
        renderBoard: function() {
            var D = this,
                C = false,
                v, w, x, B, A, y, z = p3.Data.SchoolContext.getLibrariesUrl();
            v = new s.Cs.ResourceBoardContainer({}, {
                editMode: D.editMode
            });
            v.remove(v.at(0));
            if (s.Data.FilterLevels && s.Data.FilterLevels.length > 1) {
                C = true
            }
            w = new s.Vs.ResourceBoard({
                collection: v,
                editMode: D.editMode,
                linkCategories: D.linkCategories,
                parentView: D,
                showLevels: C
            });
            p3.rV(w, D.Containers.Board, true);
            B = false;
            if (D.editMode) {
                A = s.Data.Persona
            } else {
                A = p3.Data.Context.getSelectedPersona().Id
            }
            switch (A) {
                case 11:
                case 12:
                    s.Us.getLevels(true, false);
                    x = s.Data.Levels;
                    B = true;
                    break;
                default:
                    x = s.Data.FilterLevels;
                    break
            }
            y = "";
            x.each(function(E) {
                if (E.get("Selected") || B) {
                    if (y.length > 0) {
                        y += ","
                    }
                    y += E.get("DdId")
                }
            });
            v.fetch({
                data: {
                    personaId: A,
                    dateMask: s.Data.Filter,
                    levels: y
                },
                success: function() {
                    v.each(function(E) {
                        E.set("LevelDescriptions", E.get("LevelDescriptions").replace(/\,/g, ", "));
                        switch (E.get("ContainerType")) {
                            case 0:
                                E.set("showDelete", D.editMode);
                                E.set("showEdit", false);
                                break;
                            case 1:
                                E.set("showDelete", D.editMode);
                                E.set("showEdit", D.editMode);
                                break;
                            case 2:
                                E.set("showDelete", false);
                                E.set("showEdit", D.editMode);
                                E.set("backcolor", "#ffe7c7");
                                E.set("systemImage", z + "/p3-cache/img/groupFinder.png");
                                E.set("viewLink", '<a href="/podium/default.aspx?t=52411&wapp=1">View All</a>');
                                break;
                            case 3:
                                E.set("showDelete", false);
                                E.set("showEdit", D.editMode);
                                E.set("backcolor", "#BDD9F2");
                                E.set("systemImage", z + "/p3-cache/img/lists.png");
                                E.set("viewLink", '<a href="/podium/default.aspx?t=23189&wapp=1">View All</a>');
                                break;
                            case 4:
                                E.set("showDelete", false);
                                E.set("showEdit", D.editMode);
                                E.set("backcolor", "#D6E0E1");
                                E.set("systemImage", z + "/p3-cache/img/reports.png");
                                E.set("viewLink", '<a href="/podium/default.aspx?t=1655&wapp=1">View All</a>');
                                break;
                            case 5:
                                E.set("showDelete", false);
                                E.set("showEdit", D.editMode);
                                E.set("backcolor", "#e6e6e6");
                                E.set("systemImage", z + "/p3-cache/img/portal.png");
                                break;
                            case 6:
                                E.set("showDelete", false);
                                E.set("showEdit", D.editMode);
                                E.set("backcolor", "#fef8c9");
                                E.set("systemImage", z + "/p3-cache/img/myFiles.png");
                                break;
                            case 7:
                                E.set("showDelete", false);
                                E.set("showEdit", D.editMode);
                                if (!E.get("ThumbFilename")) {
                                    E.set("backcolor", "#def2cb");
                                    E.set("systemImage", z + "/p3-cache/img/addAnother.png")
                                }
                                break;
                            case 8:
                                E.set("showDelete", D.editMode);
                                E.set("showEdit", D.editMode);
                                break
                        }
                    });
                    w.renderTemplate()
                },
                error: function() {
                    p3.displayError("Error loading resource board")
                }
            })
        },
        showPriorityDialog: function(v) {
            var x = this,
                w = new s.Vs.PriorityEditView();
            p3.rV(w, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            w.on("priorityChanged", function() {
                x.renderBoard()
            })
        }
    });
    s.Vs.ResourceBoardFilter = Bb.View.extend({
        template: "resourceboard/resourceboard.filter.template.html",
        events: {
            "click .filter-btn": "changeFilter",
            "click .filter-level-btn": "changeLevel",
            "click #set-priority-buton": "showPriorityDialog"
        },
        render: function(v) {
            var w = this;
            $(v).html(w.el);
            w.renderTemplate()
        },
        renderTemplate: function() {
            var v = this;
            p3.fT(v.template, function(C) {
                var z = false,
                    w = false,
                    A = false,
                    B = false,
                    y = true,
                    x = true;
                switch (s.Data.Filter) {
                    case 0:
                        z = true;
                        break;
                    case 1:
                        w = true;
                        break;
                    case 2:
                        B = true;
                        break;
                    case 3:
                        w = true;
                        B = true;
                        break;
                    case 4:
                        A = true;
                        break;
                    case 5:
                        w = true;
                        A = true;
                        break;
                    case 6:
                        A = true;
                        B = true;
                        break;
                    case 7:
                        A = true;
                        B = true;
                        break
                }
                s.Data.FilterLevels.each(function(D) {
                    if (!D.get("Selected")) {
                        y = false
                    } else {
                        x = false
                    }
                });
                v.$el.html(C({
                    allOn: z,
                    activeOn: w,
                    expiredOn: A,
                    futureOn: B,
                    haveLevels: s.Data.FilterLevels.length > 1,
                    levels: s.Data.FilterLevels.toJSON(),
                    allLevelsOn: y || x,
                    edit: v.options.edit
                }))
            })
        },
        changeFilter: function(w) {
            var z = this,
                x = s.Data.Filter,
                v = $(w.currentTarget),
                y = v.data("val");
            if (y == 0) {
                s.Data.Filter = 0
            } else {
                if (v.hasClass("active")) {
                    s.Data.Filter = s.Data.Filter - y
                } else {
                    s.Data.Filter = s.Data.Filter + y;
                    if (s.Data.Filter == 7) {
                        s.Data.Filter = 0
                    }
                }
            }
            if (x != s.Data.Filter) {
                z.renderTemplate();
                z.trigger("filterChanged")
            }
        },
        changeLevel: function(w) {
            var z = this,
                v = $(w.currentTarget),
                y = v.data("val"),
                x;
            if (y == 0) {
                s.Data.FilterLevels.each(function(A) {
                    A.set("Selected", true)
                })
            } else {
                x = s.Data.FilterLevels.get(y);
                if ($("#filter-level-all").hasClass("active")) {
                    s.Data.FilterLevels.each(function(A) {
                        A.set("Selected", false)
                    });
                    x.set("Selected", true)
                } else {
                    if (v.hasClass("active")) {
                        x.set("Selected", false)
                    } else {
                        x.set("Selected", true)
                    }
                }
            }
            z.renderTemplate();
            z.trigger("filterChanged")
        },
        showPriorityDialog: function(v) {
            var x = this,
                w = new s.Vs.PriorityEditView();
            p3.rV(w, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            w.on("priorityChanged", function() {
                x.trigger("filterChanged")
            })
        }
    });
    s.Vs.ResourceBoard = Bb.View.extend({
        template: "resourceboard/resourceboard.template.html",
        events: {
            "click .container-container": "handleBoardClick",
            "click .container-delete": "deleteContainer",
            "click .container-edit": "editContainer",
            "click #application": "application",
            "change #portal-drop-down": "openPortal",
            "change #page-drop-down": "openPage",
            "change #group-finder-dropdown": "updateGroupFinder",
            modalsave: "modalSave",
            modalcustom: "modalCustom",
            modalupdated: "modalUpdated"
        },
        initialize: function() {
            var v = this;
            v.instanceIds = new b.Cs.ProspectInstanceIds()
        },
        render: function(v) {
            var w = this;
            $(v).html(w.el);
            w.dictionaries = {};
            w.dictionaries.applicationForms = new b.Cs.ApplicationForms();
            w.dictionaries.applicationForms.fetch({
                cache: false,
                async: false,
                data: {
                    activeApps: true,
                    formType: 1
                },
                success: function(x, y) {
                    w.dictionaries.applicationForms.dictionary = y
                }
            })
        },
        handleBoardClick: function(z) {
            var A = this,
                v = $(z.currentTarget),
                x = v.data("rbcid"),
                y = v.data("type"),
                w = A.collection.get(x);
            switch (y) {
                case 0:
                    if (A.options.editMode) {
                        p3.router().navigate("#resourceboarddetailedit/" + x + "/settings", true)
                    } else {
                        p3.router().navigate("#resourceboarddetail/" + x, true)
                    }
                    break;
                case 1:
                    w = A.collection.get(x);
                    if (w.get("UrlDisplay")) {
                        window.open(w.get("UrlDisplay"), "_blank")
                    }
                    break;
                case 7:
                    A.application(null);
                    break;
                case 8:
                    w = new s.Ms.ResourceBoardContainerGet({
                        ResourceBoardContainerId: x
                    });
                    w.fetch({
                        data: {
                            containerId: x
                        },
                        success: function() {
                            if (w.get("ContentIndexId")) {
                                window.location.href = "/podium/default.aspx?t=36644&wapp=1&rid=" + w.get("ContentIndexId")
                            }
                        },
                        error: function() {
                            p3.displayError("Error loading registration post")
                        }
                    });
                    break;
                default:
                    break
            }
        },
        renderTemplate: function() {
            var x = this,
                w, v;
            x.collection.each(function(y) {
                y.set("LongDescription", y.get("LongDescription").replace(/[\n\r]/g, "<br />"));
                switch (y.get("ContainerType")) {
                    case 2:
                        if (x.options.showLevels) {
                            y.set("ContainerHeight", "296px")
                        } else {
                            y.set("ContainerHeight", "266px")
                        }
                        break;
                    case 3:
                    case 4:
                        if (x.options.showLevels) {
                            y.set("ContainerHeight", "259px")
                        } else {
                            y.set("ContainerHeight", "229px")
                        }
                        break;
                    case 5:
                        if (x.options.showLevels) {
                            y.set("ContainerHeight", "322px")
                        } else {
                            y.set("ContainerHeight", "292px")
                        }
                        break
                }
            });
            w = {};
            w.showApplyLink = (x.dictionaries.applicationForms.dictionary && x.dictionaries.applicationForms.dictionary.length > 0) ? true : false;
            p3.fT(x.template, function(y) {
                x.$el.html(y({
                    containers: x.collection.toJSON(),
                    schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                    edit: x.options.editMode,
                    templateOptions: w,
                    showLevels: x.options.showLevels
                }))
            });
            $("#board-container").hide();
            $("#load-container").append('<div id="loading-icon"></div>');
            v = $("#loading-icon");
            v.css("height", "50px").css("background-color", "#fff");
            p3.loadingIcon("#loading-icon");
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.Isotope, function() {
                window.setTimeout(function() {
                    v.remove();
                    $("#board-container").show();
                    $(".board-container").isotope({
                        itemSelector: ".container-container",
                        getSortData: {
                            type: function(y) {
                                return parseInt(y.data("sort"), 10)
                            }
                        },
                        sortBy: "type"
                    });
                    $(".board-container").imagesLoaded(function() {
                        $(".board-container").isotope({
                            itemSelector: ".container-container"
                        })
                    })
                }, 2000)
            })
        },
        deleteContainer: function(y) {
            y.preventDefault();
            y.stopPropagation();
            var z = this,
                v = $(y.currentTarget),
                x = v.data("id"),
                w = z.collection.get(x);
            p3.showConfirm("Delete Post", "Are you sure you want to remove this post?", null, function() {
                var A = new s.Ms.ResourceBoardContainer({
                    ResourceBoardContainerId: x
                });
                A.destroy({
                    success: function() {
                        p3.displaySiteMessage("Post deleted successfully.", "alert-success");
                        z.collection.remove(w);
                        z.renderTemplate()
                    },
                    error: function() {
                        p3.displayError("Error deleting post.")
                    }
                })
            })
        },
        editContainer: function(y) {
            y.preventDefault();
            y.stopPropagation();
            var z = this,
                v = $(y.currentTarget),
                x = v.data("id"),
                w = new s.Ms.ResourceBoardContainer({
                    ResourceBoardContainerId: x
                });
            w.fetch({
                data: {
                    containerId: x
                },
                success: function() {
                    var D, B, A, C;
                    if (w.get("ContainerType") == 1) {
                        A = z.options.linkCategories.where({
                            Id: w.get("ContentGroupId")
                        });
                        w.set("LinkGroup", A[0].get("Name"));
                        D = new k.Cs.Link({}, {
                            categoryId: w.get("ContentGroupId"),
                            active: true,
                            future: false,
                            expired: false
                        });
                        D.fetch({
                            async: false,
                            success: function() {
                                var E = D.where({
                                    LinkID: w.get("ContentItemId")
                                });
                                if (E && E.length > 0) {
                                    w.set("Link", E[0].get("ShortDescription"))
                                } else {
                                    w.set("ContentIndexId", 0);
                                    w.set("ContentItemId", 0)
                                }
                            },
                            error: function() {
                                p3.displayError("Error loading links.")
                            }
                        });
                        B = new s.Vs.ContainerEditView({
                            container: w,
                            linkCategories: z.options.linkCategories,
                            links: D
                        })
                    } else {
                        if (w.get("ContainerType") == 7) {
                            B = new s.Vs.ContainerEditView({
                                container: w
                            })
                        } else {
                            if (w.get("ContainerType") == 8) {
                                C = new g.Cs.Registrations();
                                C.fetch({
                                    async: false,
                                    success: function() {
                                        var E = C.get(w.get("ContentIndexId"));
                                        if (E) {
                                            w.set("Link", E.get("Description"))
                                        } else {
                                            w.set("ContentIndexId", 0)
                                        }
                                    },
                                    error: function() {
                                        p3.displayError("Error loading event registrations")
                                    }
                                });
                                B = new s.Vs.ContainerEditView({
                                    container: w,
                                    eventReg: C
                                })
                            } else {
                                B = new s.Vs.SystemEditView({
                                    container: w
                                })
                            }
                        }
                    }
                    p3.rV(B, p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal);
                    B.on("containerSaved", function(E) {
                        z.options.parentView.renderBoard()
                    })
                },
                error: function() {
                    p3.displayError("Error loading resource board")
                }
            })
        },
        application: function(v) {
            if (v) {
                v.preventDefault();
                v.stopPropagation()
            }
            b.Us.ApplyCandidate()
        },
        openPortal: function(v) {
            var w = $("#portal-drop-down").val();
            $("#portal-drop-down").val("0");
            window.location.href = "/podium/default.aspx?t=" + w + "&wapp=1"
        },
        openPage: function(v) {
            var w = $("#page-drop-down").val(),
                x = $("#page-drop-down").find(":selected").data("url");
            $("#page-drop-down").val("0");
            if (x) {
                if (x.indexOf("://") == -1) {
                    x = "http://" + x
                }
                window.location.href = x
            } else {
                window.location.href = "/podium/default.aspx?t=" + w + "&wapp=1"
            }
        },
        updateGroupFinder: function(x) {
            var v = $("#group-finder-dropdown"),
                w;
            w = $("option:selected", v);
            s.Data.CurrentYear = v.val();
            s.Data.CurrentMode = w.data("mode");
            $(".group-list").remove();
            s.Us.initializeGroupInput()
        }
    });
    s.Vs.ContainerEditView = Bb.View.extend({
        template: "resourceboard/resourceboard.container.edit.template.html",
        events: {
            "click #chkSelectAll": "selectAll",
            "click #select-all-boards": "selectAllSystem",
            "click #apply-button": "copyDefaultValues",
            "click .persona-check": "personaChange",
            "click #btnSave": "saveContainer",
            "click #btnSaveAdd": "saveContainer",
            "click #btnSaveEdit": "saveContainer",
            "click .btn-gray": "clearError",
            "click .btn-layout": "clearError",
            "change #txtTitle": "clearTitle",
            "keyup #txtDescription": "updateDescriptionCount",
            "change #txtDescription": "updateDescriptionCount",
            "click .btn-container-type": "changePageType",
            "click .select-search-form": "searchClicked",
            "keyup .select-search": "searchItems",
            "submit .select-search-form": "searchItems",
            "click .select-item": "contentClicked",
            "click .post-photo-delete": "deletePhoto"
        },
        render: function(v) {
            var w = this;
            $(v).html(w.el);
            w.renderTemplate();
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, w.initializeFileUpload)
            })
        },
        renderTemplate: function() {
            var D = this,
                B = s.Us.getPersonaLevels(false),
                v = d.getDateString(d.localDateTime()),
                x, y, z, A, w, C;
            if (D.options.container.get("ResourceBoardContainerId") > 0) {
                C = D.options.container.get("PersonaLevels");
                for (x = 0; x < B.length; x++) {
                    B[x].Selected = false;
                    for (y = 0; y < C.length; y++) {
                        if ((C[y].LevelId == B[x].LevelId || B[x].LevelId == -1) && C[y].PersonaId == B[x].persona) {
                            B[x].Selected = true;
                            B[x].PublishDate = C[y].PublishDate.split(" ")[0];
                            if (C[y].ExpireDate) {
                                B[x].ExpireDate = C[y].ExpireDate.split(" ")[0]
                            }
                            break
                        }
                    }
                }
            } else {
                for (x = 0; x < B.length; x++) {
                    if (B[x].Selected) {
                        B[x].PublishDate = v
                    }
                }
            }
            if (D.options.linkCategories) {
                z = D.options.linkCategories.toJSON()
            }
            if (D.options.links) {
                A = D.options.links.toJSON()
            }
            if (D.options.eventReg) {
                if (D.options.eventReg.length > 0) {
                    if (!D.options.eventReg.models[0].get("Id")) {
                        D.options.eventReg.remove(D.options.eventReg.at(0))
                    }
                }
                w = D.options.eventReg.toJSON()
            }
            p3.fT(D.template, function(E) {
                D.$el.html(E({
                    container: D.options.container.toJSON(),
                    schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                    personaLevels: B,
                    defaultDate: v,
                    linkCategories: z,
                    links: A,
                    eventReg: w,
                    showReg: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.EVENTREGISTRATION)
                }))
            });
            window.setTimeout(function() {
                e.Us.initialize(".date-box", {
                    changeMonth: true,
                    changeYear: true
                });
                D.updateDescriptionCount()
            }, 600)
        },
        initializeFileUpload: function() {
            window.setTimeout(function() {
                $("#fileupload").fileupload({
                    url: p3.Config.RootPath + "utilities/FileTransferHandler.ashx",
                    autoUpload: true
                }).on("fileuploadadd", function(w, v) {
                    if ($("#resource-board-file-error").length > 0) {
                        $("#resource-board-file-error").remove()
                    }
                    v.files[0].isValidUpload = p3.Us.FileTools.isValidFile(p3.Us.Enum.UploadType.All, v.files[0].name);
                    if (v.files[0].isValidUpload) {
                        v.submit()
                    } else {
                        $("#fileupload").before($("<div>").attr("id", "resource-board-file-error").addClass("alert alert-error").html("The file " + v.files[0].name + " is not a supported type and was not uploaded."))
                    }
                }).bind("fileuploaddone", function(w, v) {
                    if (v.files[0].isValidUpload) {
                        $("#image-region").removeClass("dragRegion").html('<img id="container-image" class="mediaContainer" src="/ftpimages/pdTemp/' + v.result[0].name + '">')
                    }
                })
            }, 100)
        },
        clearError: function(v) {
            $("#container_edit_error_region").html("");
            $("#container_edit_error_region").removeClass()
        },
        clearTitle: function(v) {
            $(".topic-title-group").removeClass("error")
        },
        copyDefaultValues: function(v) {
            var x = $("#default-publish").val(),
                w = $("#default-expire").val();
            $("tr.persona-row").each(function(y) {
                if ($(this).find(".persona-check").is(":checked")) {
                    $(this).find(".publish-date").val(x);
                    $(this).find(".expire-date").val(w)
                }
            });
            return false
        },
        selectAll: function(v) {
            $("tr.persona-row").each(function(w) {
                $(this).find(".persona-check").prop("checked", v.target.checked)
            })
        },
        selectAllSystem: function(v) {
            $("tr.persona-row").each(function(w) {
                $(this).find(".group-item").addClass("active")
            })
        },
        personaChange: function(v) {
            var w = $(".persona-check:checked"),
                x = $(".persona-row");
            if (w.length >= x.length) {
                $("#chkSelectAll").prop("checked", true)
            } else {
                $("#chkSelectAll").prop("checked", false)
            }
        },
        saveContainer: function(z) {
            $("#btnSave").button("loading");
            $("#btnSaveAdd").button("loading");
            $("#btnSaveEdit").button("loading");
            var N = this,
                w = (z.target.id == "btnSaveAdd"),
                I = (z.target.id == "btnSaveEdit"),
                E = [],
                C = N.options.container,
                M = true,
                B = "",
                y = false,
                H = false,
                J, D, A, L, F, x, K, v, G;
            if (C.get("ResourceBoardContainerId") > 0) {
                y = (C.get("ContainerType") == 1);
                H = (C.get("ContainerType") == 8)
            } else {
                y = $("#btn-direct-link").hasClass("active");
                H = $("#btn-registration").hasClass("active")
            }
            if ($("#txtTitle").val().length == 0) {
                M = false;
                $(".topic-title-group").addClass("error")
            }
            if (y) {
                if ($("#link-button").data("value") == 0) {
                    M = false;
                    B = "Please select a link."
                }
            } else {
                if (H) {
                    if ($("#reg-button").data("value") == 0) {
                        M = false;
                        B = "Please select a registration."
                    }
                } else {
                    if ($(".btn-gray.active").length == 0 && $(".btn-layout.active").length == 0) {
                        M = false;
                        B = "Please select a page layout."
                    }
                }
            }
            if (M) {
                if (C.get("ContainerType") == 7) {
                    J = $(".group-item.active");
                    G = d.getDateString(d.localDateTime());
                    $("tr.persona-row").each(function(O) {
                        v = $(this).find(".group-item");
                        if (v.hasClass("active")) {
                            if (v.data("persona") == 11 || v.data("persona") == 12) {
                                s.Data.Levels.each(function(P) {
                                    E.push({
                                        PersonaId: v.data("persona"),
                                        LevelId: P.get("DdId"),
                                        PublishDate: G
                                    })
                                })
                            } else {
                                E.push({
                                    PersonaId: v.data("persona"),
                                    LevelId: v.data("level"),
                                    PublishDate: G
                                })
                            }
                        }
                    })
                } else {
                    J = $(".persona-check:checked");
                    if (J.length > 0) {
                        $("tr.persona-row").each(function(P) {
                            var Q, O;
                            v = $(this).find(".persona-check");
                            if (v.is(":checked")) {
                                if ($(this).find(".publish-date").val().length == 0) {
                                    M = false;
                                    B = "A publish date is required for each selected persona."
                                } else {
                                    if (v.data("persona") == 11 || v.data("persona") == 12) {
                                        Q = $(this).find(".publish-date").datepicker("getDate");
                                        O = "";
                                        if ($(this).find(".expire-date").val().length > 0) {
                                            O = $(this).find(".expire-date").datepicker("getDate")
                                        }
                                        s.Data.Levels.each(function(R) {
                                            E.push({
                                                PersonaId: v.data("persona"),
                                                LevelId: R.get("DdId"),
                                                PublishDate: Q,
                                                ExpireDate: O,
                                                PersonaLevelDescription: v.parent().text().trim()
                                            })
                                        })
                                    } else {
                                        Q = $(this).find(".publish-date").datepicker("getDate");
                                        O = "";
                                        if ($(this).find(".expire-date").val().length > 0) {
                                            O = $(this).find(".expire-date").datepicker("getDate")
                                        }
                                        E.push({
                                            PersonaId: v.data("persona"),
                                            LevelId: v.data("level"),
                                            PublishDate: Q,
                                            ExpireDate: O,
                                            PersonaLevelDescription: v.parent().text().trim()
                                        })
                                    }
                                }
                            }
                        })
                    } else {
                        M = false;
                        B = "Please select a persona"
                    }
                }
            }
            if (M) {
                A = false;
                L = "";
                F = "";
                x = $("#delete-photo-alert").is(":visible");
                if ($("#container-image").length > 0) {
                    A = true;
                    K = $("#container-image").attr("src");
                    if (K.indexOf("/pdTemp/") > -1) {
                        L = K
                    }
                    D = K.split(".");
                    F = "." + D[D.length - 1]
                }
                C.set({
                    ShortDescription: $("#txtTitle").val(),
                    LongDescription: $("#txtDescription").val(),
                    PersonaLevels: E,
                    HasPhoto: A,
                    PhotoExtension: F,
                    TempPhoto: L,
                    DeletePhoto: x
                });
                if (y) {
                    C.set("ContentItemId", $("#link-button").data("value"));
                    C.set("ContentGroupId", $("#link-category-button").data("value"));
                    C.set("ContainerType", 1);
                    C.set("LayoutId", 0)
                } else {
                    if (H) {
                        C.set("ContentItemId", $("#reg-button").data("value"));
                        C.set("ContainerType", 8);
                        C.set("LayoutId", 0)
                    } else {
                        C.set("LayoutId", $(".btn-layout.active").data("layout"));
                        C.set("ContainerType", 0)
                    }
                }
                C.save({}, {
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error saving resource board")
                    },
                    success: function() {
                        if (x) {
                            C.set("ThumbFilename", "")
                        } else {
                            if (A && !C.get("ThumbFilename")) {
                                C.set("ThumbFilename", "thumb_rb_container_" + C.get("ResourceBoardContainerId") + F)
                            }
                        }
                        if (I) {
                            p3.showModal(p3.Layout.Containers.Modal, "hide");
                            p3.router().navigate("#resourceboarddetailedit/" + C.get("ResourceBoardContainerId") + "/settings", true)
                        } else {
                            N.trigger("containerSaved", C);
                            if (w) {
                                N.options.container = new s.Ms.ResourceBoardContainer({});
                                N.renderTemplate();
                                p3.setModalHeight(p3.Layout.Containers.Modal);
                                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, N.initializeFileUpload)
                                })
                            } else {
                                p3.showModal(p3.Layout.Containers.Modal, "hide")
                            }
                        }
                    }
                })
            } else {
                $("#btnSave").button("reset");
                $("#btnSaveAdd").button("reset");
                $("#btnSaveEdit").button("reset");
                if (B.length > 0) {
                    $("#container_edit_error_region").html(B);
                    $("#container_edit_error_region").addClass("alert").addClass("alert-error alert-danger")
                } else {
                    $("#container_edit_error_region").html("");
                    $("#container_edit_error_region").removeClass()
                }
            }
        },
        updateDescriptionCount: function(v) {
            $("#titleCountField").html($("#txtDescription").val().length)
        },
        changePageType: function(w) {
            var v = $(w.currentTarget);
            $(".btn-container-type").removeClass("active");
            v.addClass("active");
            if (w.currentTarget.id == "btn-direct-link") {
                $("#direct-link-region").show();
                $("#detail-page-type").hide();
                $("#registration-region").hide();
                $("#btnSaveEdit").hide()
            } else {
                if (w.currentTarget.id == "btn-registration") {
                    $("#direct-link-region").hide();
                    $("#detail-page-type").hide();
                    $("#registration-region").show();
                    $("#btnSaveEdit").hide()
                } else {
                    $("#direct-link-region").hide();
                    $("#detail-page-type").show();
                    $("#registration-region").hide();
                    $("#btnSaveEdit").show()
                }
            }
            return false
        },
        searchClicked: function(v) {
            v.stopPropagation();
            $(v.currentTarget).find(".select-search").focus();
            return false
        },
        searchItems: function(w) {
            w.preventDefault();
            var C = this,
                B, z, x = false,
                y = false,
                v, A;
            if (w.currentTarget.id == "link-select") {
                z = C.links.toJSON();
                v = $("#link-list");
                x = true;
                B = $("#link-select").val()
            } else {
                if (w.currentTarget.id == "reg-select") {
                    z = C.options.eventReg.toJSON();
                    v = $("#reg-list");
                    y = true;
                    B = $("#reg-select").val()
                } else {
                    z = C.options.linkCategories.toJSON();
                    v = $("#link-category-list");
                    B = $("#link-category-select").val()
                }
            }
            if (B && B.length > 0) {
                z = _.filter(z, function(D) {
                    if (x) {
                        A = (D.ShortDescription.toLowerCase().indexOf(B.toLowerCase()) > -1)
                    } else {
                        if (y) {
                            A = (D.Description.toLowerCase().indexOf(B.toLowerCase()) > -1)
                        } else {
                            A = (D.Name.toLowerCase().indexOf(B.toLowerCase()) > -1)
                        }
                    }
                    return A
                })
            }
            v.empty();
            _.each(z, function(D) {
                if (x) {
                    v.append('<li class="select-item-li"><a href="#" class="select-item link-item" data-val="' + D.LinkID + '">' + D.ShortDescription + "</a></li>")
                } else {
                    if (y) {
                        v.append('<li class="select-item-li"><a href="#" class="select-item reg-item" data-val="' + D.Id + '">' + D.Description + "</a></li>")
                    } else {
                        v.append('<li class="select-item-li"><a href="#" class="select-item link-category-item" data-val="' + D.Id + '">' + D.Name + "</a></li>")
                    }
                }
            })
        },
        contentClicked: function(y) {
            y.preventDefault();
            var B = this,
                w = $(y.currentTarget),
                z = w.data("val"),
                x = w.html(),
                v, A;
            if (w.hasClass("link-item")) {
                v = $("#link-button")
            } else {
                if (w.hasClass("reg-item")) {
                    v = $("#reg-button")
                } else {
                    $("#link-select").val("");
                    v = $("#link-category-button");
                    $("#link-button").data("value", "0").html('<span class="select-label style-css data-value="0" id="link">-- Select Link --</span><span class="caret pull-right"></span>');
                    A = new k.Cs.Link({}, {
                        categoryId: z,
                        active: true,
                        future: false,
                        expired: false
                    });
                    B.links = A;
                    A.fetch({
                        success: function() {
                            var C = $("#link-list");
                            C.empty();
                            A.each(function(D) {
                                C.append('<li class="select-item-li"><a href="#" class="select-item link-item" data-val="' + D.get("LinkID") + '">' + D.get("ShortDescription") + "</a></li>")
                            })
                        },
                        error: function() {
                            p3.displayError("Error loading links.")
                        }
                    })
                }
            }
            v.data("value", z);
            v.html(x)
        },
        deletePhoto: function(v) {
            $("#image-region").hide();
            $("#delete-photo-alert").show();
            $(".post-photo-delete").hide();
            $(".fileinput-button").hide()
        }
    });
    s.Vs.SystemEditView = Bb.View.extend({
        template: "resourceboard/resourceboard.system.edit.template.html",
        events: {
            "click #select-all-boards": "selectAll",
            "click #btnSave": "saveContainer"
        },
        render: function(v) {
            var w = this;
            $(v).html(w.el);
            w.renderTemplate()
        },
        renderTemplate: function() {
            var z = this,
                v, w, x = s.Us.getPersonaLevels(true),
                y = z.options.container.get("PersonaLevels");
            if (y) {
                for (v = 0; v < x.length; v++) {
                    x[v].Selected = false;
                    for (w = 0; w < y.length; w++) {
                        if ((y[w].LevelId == x[v].LevelId || x[v].LevelId == -1) && y[w].PersonaId == x[v].persona) {
                            x[v].Selected = true;
                            break
                        }
                    }
                }
            }
            p3.fT(z.template, function(A) {
                z.$el.html(A({
                    container: z.options.container.toJSON(),
                    personaLevels: x
                }))
            })
        },
        selectAll: function(v) {
            $("tr.persona-row").each(function(w) {
                $(this).find(".group-item").addClass("active")
            })
        },
        saveContainer: function(w) {
            $("#btnSave").button("loading");
            var B = this,
                y = [],
                x = B.options.container,
                A, v, z;
            A = $(".group-item.active");
            if (A.length > 0) {
                z = d.getDateString(d.localDateTime());
                $("tr.persona-row").each(function(C) {
                    v = $(this).find(".group-item");
                    if (v.hasClass("active")) {
                        if (v.data("persona") == 11 || v.data("persona") == 12) {
                            s.Data.Levels.each(function(D) {
                                y.push({
                                    PersonaId: v.data("persona"),
                                    LevelId: D.get("DdId"),
                                    PublishDate: z
                                })
                            })
                        } else {
                            y.push({
                                PersonaId: v.data("persona"),
                                LevelId: v.data("level"),
                                PublishDate: z
                            })
                        }
                    }
                })
            }
            x.set("PersonaLevels", y);
            x.save({}, {
                error: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    p3.displayError("Error saving system post settings")
                },
                success: function() {
                    B.trigger("containerSaved", x);
                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                }
            })
        }
    });
    s.Vs.EditDetail = Bb.View.extend({
        template: "resourceboard/resourceboard.detail.edit.template.html",
        initialize: function() {
            this.Containers = {};
            this.options.editMode = this.options.editMode || "content"
        },
        dispose: function() {
            p3.closeFixedSidebar();
            p3.closeFixedFooter();
            this.disposeData()
        },
        render: function(v) {
            var w = this;
            $(v).html(w.el);
            p3.fT(w.template, function(x) {
                w.$el.html(x({
                    layout: w.model.toJSON()
                }));
                w.Containers.WorkspaceWrap = $(".workspace-page-wrap");
                w.Containers.Workspace = $("#pages-workspace");
                w.initData();
                w.renderSidebar();
                w.renderFooter();
                if (w.options.editMode == "style") {
                    w.renderStyler()
                } else {
                    w.renderBuilder()
                }
                w.updateView()
            })
        },
        initData: function() {
            s.Us.getLevels(true, true);
            var x = this,
                v = x.options.page.get("SiteLayout"),
                w = x.options.page.get("PageRegions");
            x.options.builderData = new j.Ms.BuilderData({
                Structure: v ? v.LayoutRegions : null,
                PageRegions: w,
                Mode: "page",
                Editable: false,
                RegionEditable: false,
                MaxCols: 24,
                SiteId: x.options.page.get("SiteId"),
                PageContentArea: true,
                FixedLayout: true,
                IsResourceBoard: true
            });
            x.options.builderData.on("pageregion", function(y) {
                x.options.page.set({
                    PageRegions: y,
                    PendingInd: true
                }, {
                    silent: true
                });
                x.savePage()
            });
            x.options.page.on("change", function() {
                x.updateView()
            })
        },
        disposeData: function() {
            var v = this;
            if (v.options.builderData) {
                v.options.builderData.off();
                v.options.builderData = null
            }
        },
        renderSidebar: function() {
            var w = this,
                v = {};
            w.options.sidebarView = new s.Vs.Sidebar({
                model: w.model,
                builderData: w.options.builderData,
                editMode: w.options.editMode,
                parentView: w
            });
            p3.log("here");
            p3.renderFixedSidebar(w.options.sidebarView, v)
        },
        renderFooter: function() {
            var w = this,
                v = new j.Vs.Footer({
                    model: w.options.page,
                    builderData: w.options.builderData,
                    editMode: w.options.editMode,
                    resourceBoardId: w.model.get("ResourceBoardContainerId")
                });
            w.footerView = v;
            v.on("publish", function() {
                w.updatePending(1)
            }).on("cancel", function() {
                w.updatePending(2)
            }).on("stylemode", function() {
                w.updatePending(2)
            });
            p3.renderFixedFooter(v)
        },
        renderBuilder: function() {
            var w = this,
                v = new j.Vs.Builder({
                    model: w.options.builderData
                });
            p3.rV(v, w.Containers.Workspace, true)
        },
        renderStyler: function() {
            var w = this,
                v = new s.Vs.ViewDetail({
                    model: w.options.model,
                    page: w.options.page,
                    mode: "style"
                });
            p3.rV(v, w.Containers.Workspace, true)
        },
        savePage: function() {
            var v = this;
            v.options.page.save({}, {
                dataParam: {
                    saveStructure: true,
                    returnModel: true
                },
                success: function(w, x) {
                    v.options.builderData.set({
                        PageRegions: w.get("PageRegions")
                    }, {
                        silent: true
                    });
                    v.options.builderData.trigger("save");
                    v.options.page.trigger("change")
                },
                error: function() {
                    p3.displayError("Error saving page")
                }
            })
        },
        updatePending: function(v) {
            var x = this,
                w = new q.Ms.PendingStatus({
                    id: x.options.page.get("PageTaskId"),
                    action: v
                });
            w.save({}, {
                success: function(z, A) {
                    var y = new s.Ms.UpdatePending({
                        resourceBoardContainerId: x.model.get("ResourceBoardContainerId"),
                        acceptPending: v == 1
                    });
                    y.save({}, {
                        success: function(B, C) {
                            s.Us.renderBoardEditDetail(x.model.get("ResourceBoardContainerId"), x.options.editMode)
                        },
                        error: function() {
                            p3.displayError("Error saving board pending status")
                        }
                    })
                },
                error: function() {
                    p3.displayError("Error saving page")
                }
            })
        },
        updateView: function() {
            var x = this,
                v = x.$el.find(".pages-layout-pending-alert"),
                w = x.options.page.get("LastModifyDate");
            if (x.options.page.get("PendingInd") == true) {
                v.html("<i>This version was autosaved " + d.todayAt(w, false) + ".</i><p>You have changed the appearance of this detail page. This version has not been made live.</p>").slideDown()
            } else {
                v.empty().slideUp()
            }
        }
    });
    s.Vs.ViewDetail = Bb.View.extend({
        template: "resourceboard/resourceboard.detail.template.html",
        initialize: function() {
            $("#site-main").addClass("container");
            $("body").removeClass("graniteCountertop");
            this.Containers = {};
            if (this.options.mode == "style") {
                this.styleMode = true
            } else {
                this.styleMode = false
            }
        },
        render: function(v) {
            var w = this;
            $(v).html(w.el);
            p3.fT(w.template, function(B) {
                var A = w.options.page.get("PageRegions")[0].Rows,
                    y, z, x = "col-md-";
                for (y = 0; y < A.length; y++) {
                    for (z = 0; z < A[y].Columns.length; z++) {
                        A[y].Columns[z].className = x + (A[y].Columns[z].Size / 2);
                        A[y].Columns[z].id = "column_" + y + "_" + z
                    }
                }
                w.$el.html(B({
                    row: A
                }));
                w.renderContent(A)
            })
        },
        renderContent: function(A) {
            var B = this,
                x, y, z, v, w;
            for (x = 0; x < A.length; x++) {
                for (y = 0; y < A[x].Columns.length; y++) {
                    v = A[x].Columns[y];
                    for (z = 0; z < v.ContentBlocks.length; z++) {
                        w = new s.Vs.ContentItem({
                            model: B.model,
                            containerId: v.id,
                            contentPk: v.ContentBlocks[z].ContentPk,
                            contentTypeId: v.ContentBlocks[z].ContentTypeId,
                            contentOptions: v.ContentBlocks[z].Options,
                            styleMode: B.styleMode,
                            row: x,
                            column: y,
                            block: z,
                            page: B.options.page
                        });
                        p3.rV(w, $("#" + v.id), false)
                    }
                }
            }
        }
    });
    s.Vs.ContentItem = Bb.View.extend({
        events: {
            "click .media-cover": "showMediaViewer",
            "click .style-element": "setSelectedElement",
            "click .btn-show-more": "toggleAdditionalItems",
            "click a.btn-pager": "switchImage",
            "click a.faq-link": "toggleFaq",
            "click a.announce-link": "toggleAnnouncement",
            "click a.list-link": "toggleList"
        },
        render: function(y) {
            var R = this,
                H = false,
                G = 0,
                E = "",
                P = false,
                A = "",
                F = "",
                N = "",
                C, Q = p3.Data.Context.get("UserInfo").UserId,
                L = true,
                K = false,
                D = "",
                z = false,
                x, O, B, v, w, M, J = false,
                I = false;
            $(y).append(R.el);
            switch (R.options.contentTypeId) {
                case 405:
                    R.template = "resourceboard/resourceboard.covertitle.template.html";
                    break;
                case 406:
                    R.template = "resourceboard/resourceboard.coverbrief.template.html";
                    break;
                case 404:
                    R.template = "resourceboard/resourceboard.coverimage.template.html";
                    R.model.set("schoolId", p3.Data.SchoolContext.get("SchoolInfo").SchoolId);
                    break;
                case 391:
                    R.template = "resourceboard/resourceboard.header.template.html";
                    if (R.options.contentOptions != null) {
                        E = R.options.contentOptions.HeaderText
                    }
                    break;
                case 408:
                    R.template = "resourceboard/resourceboard.line.template.html";
                    break;
                case 407:
                    R.template = "resourceboard/resourceboard.spacer.template.html";
                    break;
                case 387:
                    R.template = "resourceboard/resourceboard.embed.template.html";
                    if (R.options.contentOptions != null) {
                        E = R.options.contentOptions.HeaderText;
                        N = R.options.contentOptions.EmbedCode
                    }
                    break;
                case 250:
                    R.template = "resourceboard/resourceboard.text.template.html";
                    if (R.options.contentOptions != null) {
                        E = R.options.contentOptions.HeaderText;
                        N = R.options.contentOptions.Text
                    }
                    break;
                case 3:
                    R.template = "resourceboard/resourceboard.download.template.html";
                    if (R.options.contentOptions != null) {
                        G = R.options.contentOptions.ItemCount;
                        if (R.options.contentOptions.HeaderTextOption == "optCategoryName") {
                            P = true
                        } else {
                            E = R.options.contentOptions.HeaderText
                        }
                    }
                    x = new f.Cs.ForResourceBoard({}, {
                        categoryId: R.options.contentPk,
                        itemCount: 0,
                        userId: Q
                    });
                    H = true;
                    break;
                case 2:
                    R.template = "resourceboard/resourceboard.link.template.html";
                    if (R.options.contentOptions != null) {
                        G = R.options.contentOptions.ItemCount;
                        if (R.options.contentOptions.HeaderTextOption == "optCategoryName") {
                            P = true
                        } else {
                            E = R.options.contentOptions.HeaderText
                        }
                        switch (R.options.contentOptions.DisplayOption) {
                            case "optImage":
                                L = false;
                                K = true;
                                break;
                            case "optTitleImage":
                                L = true;
                                K = true;
                                break
                        }
                    } else {
                        L = true
                    }
                    x = new k.Cs.ForResourceBoard({}, {
                        categoryId: R.options.contentPk,
                        itemCount: 0,
                        userId: Q
                    });
                    H = true;
                    break;
                case 5:
                    O = true;
                    R.template = "resourceboard/resourceboard.event.template.html";
                    if (R.options.contentOptions != null) {
                        G = R.options.contentOptions.ItemCount;
                        if (R.options.contentOptions.HeaderTextOption == "optCategoryName") {
                            P = true
                        } else {
                            E = R.options.contentOptions.HeaderText
                        }
                        if (R.options.contentOptions.ShowOption == "optShowAll") {
                            O = false
                        }
                    }
                    x = new g.Cs.ForResourceBoard({}, {
                        categoryId: R.options.contentPk,
                        itemCount: 0,
                        upcoming: O,
                        userId: Q
                    });
                    H = true;
                    break;
                case 31:
                case 165:
                case 167:
                    R.template = "resourceboard/resourceboard.media.template.html";
                    if (R.options.contentOptions != null) {
                        G = R.options.contentOptions.ItemCount;
                        if (R.options.contentOptions.HeaderTextOption == "optCategoryName") {
                            P = true
                        } else {
                            E = R.options.contentOptions.HeaderText
                        }
                        I = R.options.contentOptions.ShowBanner
                    }
                    switch (R.options.contentTypeId) {
                        case 31:
                            A = "photo";
                            F = "p3icon-topicPhoto";
                            break;
                        case 165:
                            A = "audio";
                            F = "p3icon-topicAudio";
                            break;
                        case 167:
                            A = "video";
                            F = "p3icon-topicVideo";
                            break
                    }
                    x = new n.Cs.ForResourceBoard({}, {
                        categoryId: R.options.contentPk,
                        contentId: R.options.contentTypeId,
                        userId: Q
                    });
                    H = true;
                    break;
                case 94:
                    R.template = "resourceboard/resourceboard.formslist.template.html";
                    if (R.options.contentOptions != null) {
                        E = R.options.contentOptions.IntroText;
                        if (R.options.contentOptions.formlist.length > 0) {
                            B = new s.Cs.UserForms({}, {
                                formIds: R.options.contentOptions.formlist
                            });
                            B.fetch({
                                async: false,
                                success: function() {
                                    B.each(function(S) {
                                        S.set("form_arg", "pk=" + S.get("form_id"))
                                    });
                                    C = B.toJSON()
                                },
                                error: function() {
                                    p3.displayError("Error loading forms.")
                                }
                            })
                        }
                    }
                    break;
                case 24:
                    R.template = "resourceboard/resourceboard.list.template.html";
                    if (R.options.contentOptions != null) {
                        G = R.options.contentOptions.ItemCount;
                        if (R.options.contentOptions.HeaderTextOption == "optCategoryName") {
                            P = true
                        } else {
                            E = R.options.contentOptions.HeaderText
                        }
                        z = (R.options.contentOptions.DisplayOption == "optExpandable")
                    }
                    x = new l.Cs.ForResourceBoard({}, {
                        categoryId: R.options.contentPk,
                        userId: Q
                    });
                    H = true;
                    break;
                case 1:
                    R.template = "resourceboard/resourceboard.text.category.template.html";
                    if (R.options.contentOptions != null) {
                        if (R.options.contentOptions.HeaderTextOption == "optCategoryName") {
                            P = true
                        } else {
                            E = R.options.contentOptions.HeaderText
                        }
                    }
                    x = new u.Ms.ForResourceBoard({
                        categoryId: R.options.contentPk,
                        userId: Q
                    });
                    H = true;
                    break;
                case 7:
                    R.template = "resourceboard/resourceboard.faq.template.html";
                    if (R.options.contentOptions != null) {
                        G = R.options.contentOptions.ItemCount;
                        if (R.options.contentOptions.HeaderTextOption == "optCategoryName") {
                            P = true
                        } else {
                            E = R.options.contentOptions.HeaderText
                        }
                    }
                    x = new h.Cs.ForResourceBoard({}, {
                        categoryId: R.options.contentPk
                    });
                    H = true;
                    break;
                case 77:
                    R.template = "resourceboard/resourceboard.pushpage.template.html";
                    if (R.options.contentOptions != null) {
                        G = R.options.contentOptions.ItemCount;
                        if (R.options.contentOptions.HeaderTextOption == "optCategoryName") {
                            P = true
                        } else {
                            E = R.options.contentOptions.HeaderText
                        }
                    }
                    x = new s.Cs.PushpageArchives({}, {
                        templateId: R.options.contentPk
                    });
                    H = true;
                    break;
                case 6:
                    R.template = "resourceboard/resourceboard.news.template.html";
                    if (R.options.contentOptions != null) {
                        G = R.options.contentOptions.ItemCount;
                        if (R.options.contentOptions.HeaderTextOption == "optCategoryName") {
                            P = true
                        } else {
                            E = R.options.contentOptions.HeaderText
                        }
                    }
                    x = new p.Cs.ForResourceBoard({}, {
                        categoryId: R.options.contentPk
                    });
                    H = true;
                    break;
                case 10:
                    R.template = "resourceboard/resourceboard.announcement.template.html";
                    if (R.options.contentOptions != null) {
                        G = R.options.contentOptions.ItemCount;
                        if (R.options.contentOptions.HeaderTextOption == "optCategoryName") {
                            P = true
                        } else {
                            E = R.options.contentOptions.HeaderText
                        }
                    }
                    x = new a.Cs.ForResourceBoard({}, {
                        categoryId: R.options.contentPk
                    });
                    H = true;
                    break
            }
            v = R.getBlock();
            w = "conDefault";
            M = "";
            J = false;
            if (v.StyleOptions != null) {
                w = v.StyleOptions.Class;
                if (w == "conPrimary") {
                    w += " pri-100-bgc"
                }
                if (w == "conSecondary") {
                    w += " sec-15-bgc"
                }
                if (v.StyleOptions.Font.length) {
                    M = "font-family:" + v.StyleOptions.Font + ";"
                }
                if (v.StyleOptions.FontSize.length) {
                    switch (v.StyleOptions.FontSize) {
                        case "small":
                            M += "font-size:13px;";
                            break;
                        case "medium":
                            M += "font-size:14px;";
                            break;
                        case "large":
                            M += "font-size:16px;";
                            break
                    }
                }
                J = (v.StyleOptions.ShowIcon)
            }
            if (H) {
                x.fetch({
                    success: function() {
                        p3.fT(R.template, function(W) {
                            var S = 0,
                                V = false,
                                T = false,
                                U;
                            if (R.options.contentTypeId > 1) {
                                x.each(function(X) {
                                    if (P) {
                                        if (X.get("ItemData") && X.get("ItemData").length > 0) {
                                            E = X.get("ItemData")[0].GroupName
                                        } else {
                                            if (R.options.contentTypeId == 24 || R.options.contentTypeId == 7) {
                                                E = X.get("CategoryName")
                                            } else {
                                                E = X.get("GroupName")
                                            }
                                        }
                                    }
                                    if ((R.options.contentTypeId == 2 || R.options.contentTypeId == 3) && X.get("ItemData").length > 0) {
                                        D = X.get("ItemData")[0].GroupLongDescription
                                    }
                                    if (G > 0) {
                                        if (R.options.contentTypeId == 2 || R.options.contentTypeId == 3) {
                                            var Y = X.get("ItemData"),
                                                Z;
                                            if (Y.length > 0) {
                                                for (Z = 0; Z < Y.length; Z++) {
                                                    S += 1;
                                                    if (S > G) {
                                                        if (Z == 0) {
                                                            X.set("hide", true)
                                                        }
                                                        Y[Z].hide = true;
                                                        V = true
                                                    }
                                                }
                                            } else {
                                                X.set("SubCategoryID", 0)
                                            }
                                        } else {
                                            S += 1;
                                            if (S > G) {
                                                X.set("hide", true);
                                                V = true
                                            }
                                        }
                                    } else {
                                        if (R.options.contentTypeId == 2 || R.options.contentTypeId == 3) {
                                            if (X.get("ItemData").length == 0) {
                                                X.set("SubCategoryID", 0)
                                            }
                                        }
                                    }
                                })
                            } else {
                                if (P) {
                                    E = x.get("Description")
                                }
                                U = x.get("Photos");
                                T = U && U.length > 1
                            }
                            R.$el.html(W({
                                model: R.model.toJSON(),
                                collection: x.toJSON(),
                                headerText: E,
                                useCategory: P,
                                schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                                contentId: R.options.contentTypeId,
                                folder: A,
                                styleMode: R.options.styleMode,
                                row: R.options.row,
                                column: R.options.column,
                                block: R.options.block,
                                className: w,
                                styleAttributes: M,
                                showIcon: J,
                                iconClass: F,
                                showMore: V,
                                showImage: K,
                                showTitle: L,
                                groupDescription: D,
                                pageImages: T,
                                userId: p3.Data.Context.get("UserInfo").UserId,
                                expandable: z,
                                showBanner: I
                            }))
                        })
                    },
                    error: function() {
                        p3.displayError("Error loading resource board content.")
                    }
                })
            } else {
                p3.fT(R.template, function(S) {
                    R.$el.html(S({
                        model: R.model.toJSON(),
                        styleMode: R.options.styleMode,
                        row: R.options.row,
                        column: R.options.column,
                        block: R.options.block,
                        className: w,
                        styleAttributes: M,
                        showIcon: J,
                        headerText: E,
                        forms: C,
                        text: N
                    }))
                })
            }
        },
        showMediaViewer: function(y) {
            var v = $(y.currentTarget).attr("data-album"),
                x = $(y.currentTarget).attr("data-type"),
                w = "";
            switch (x) {
                case "31":
                    w = "photo";
                    break;
                case "165":
                    w = "audio";
                    break;
                case "167":
                    w = "video";
                    break;
                default:
                    break
            }
            o.Us.showModal(v, w);
            return false
        },
        getBlock: function() {
            var w = this,
                v = w.options.page.get("PageRegions")[0];
            return v.Rows[w.options.row].Columns[w.options.column].ContentBlocks[w.options.block]
        },
        setSelectedElement: function(y) {
            var z = this,
                v = $(y.currentTarget),
                w, x;
            $("#pages-layout-sidebar-help").hide();
            $("#pages-layout-sidebar-styler").show();
            $(".style-element").removeClass("selected");
            v.addClass("selected");
            $(".style-button").removeClass("active");
            $(".btn-font-size").removeClass("active");
            $(".btn-show-icon").removeClass("active");
            w = z.getBlock();
            x = "conNone";
            if (w.StyleOptions != null) {
                x = w.StyleOptions.Class;
                if (w.StyleOptions.Font.length > 0) {
                    $("#font-dropdown").val(w.StyleOptions.Font)
                } else {
                    $("#font-dropdown").prop("selectedIndex", 0)
                }
                switch (w.StyleOptions.FontSize) {
                    case "small":
                        $("#btn-font-small").addClass("active");
                        break;
                    case "medium":
                        $("#btn-font-medium").addClass("active");
                        break;
                    case "large":
                        $("#btn-font-large").addClass("active");
                        break
                }
                if (w.StyleOptions.ShowIcon) {
                    $("#btn-icon-yes").addClass("active")
                } else {
                    $("#btn-icon-no").addClass("active")
                }
            } else {
                $("#font-dropdown").prop("selectedIndex", 0);
                $("#btn-font-small").addClass("active");
                $("#btn-icon-no").addClass("active")
            }
            switch (x) {
                case "conDefault":
                    $("#btnDefault").addClass("active");
                    break;
                case "conPrimary":
                    $("#btnPrimary").addClass("active");
                    break;
                case "conSecondary":
                    $("#btnSecondary").addClass("active");
                    break;
                case "conRed":
                    $("#btnRed").addClass("active");
                    break;
                case "conYellow":
                    $("#btnYellow").addClass("active");
                    break;
                case "conBlue":
                    $("#btnBlue").addClass("active");
                    break;
                case "conNone":
                    $("#btnNone").addClass("active");
                    break
            }
        },
        toggleAdditionalItems: function(z) {
            var w = $(z.currentTarget),
                A = w.data("row"),
                y = w.data("column"),
                x = w.data("block"),
                v = $("div[data-row='" + A + "'][data-column='" + y + "'][data-block='" + x + "']");
            if (w.hasClass("show-data")) {
                w.removeClass("show-data").addClass("hide-data").html("Show Less");
                v.find(".hidden-content").show();
                v.find(".hidden-subcategory").show()
            } else {
                w.removeClass("hide-data").addClass("show-data").html("Show All");
                v.find(".hidden-content").hide();
                v.find(".hidden-subcategory").hide()
            }
        },
        switchImage: function(v) {
            return p3.switchImage(v)
        },
        toggleFaq: function(w) {
            var v = $(w.currentTarget),
                x = v.data("index");
            $("div.faq-answer[data-index='" + x + "']").toggle();
            return false
        },
        toggleAnnouncement: function(w) {
            var v = $(w.currentTarget),
                x = v.data("index");
            $("div.announce-description[data-index='" + x + "']").toggle();
            return false
        },
        toggleList: function(w) {
            var v = $(w.currentTarget),
                x = v.data("index");
            $("div.list-description[data-index='" + x + "']").toggle();
            return false
        }
    });
    s.Vs.Sidebar = Bb.View.extend({
        template: "resourceboard/resourceboard.sidebar.template.html",
        className: "workspace-sidebar",
        events: {
            "click .workspace-sidebar-tab": "tabClicked",
            "click #pages-layout-settings": "showEditSettings",
            "click .style-button": "setSelectedStyle",
            "change #font-dropdown": "setSelectedFont",
            "click .btn-font-size": "setFontSize",
            "click .btn-show-icon": "toggleIcon"
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(v) {
            var w = this;
            $(v).html(w.el);
            w.loadContentData(function() {
                w.renderTemplate()
            })
        },
        renderTemplate: function() {
            var v = this;
            p3.fT(v.template, function(x) {
                var w = v.getLayoutIcon(v.model.get("LayoutId"));
                v.$el.html(x({
                    model: v.model.toJSON(),
                    layoutIcon: w,
                    content: v.filterContentData(16),
                    elements: v.filterContentData(32),
                    boardElements: v.filterContentData(64)
                }));
                v.selectTab(v.options.editMode);
                v.updateView()
            })
        },
        getLayoutIcon: function(w) {
            var v = "";
            switch (w) {
                case 0:
                    v = "p3icon-2colLeft";
                    break;
                case 1:
                    v = "p3icon-2colRight";
                    break;
                case 2:
                    v = "p3icon-2rowLeft";
                    break;
                case 3:
                    v = "p3icon-2rowRight";
                    break;
                case 4:
                    v = "p3icon-2colSplit";
                    break;
                case 5:
                    v = "p3icon-3col";
                    break
            }
            return v
        },
        tabClicked: function(x) {
            x.preventDefault();
            var z = this,
                v = $(x.currentTarget),
                w = v.data("action"),
                y = t.Us.getUrlById(53119, z.model.get("ResourceBoardContainerId") + "/" + w);
            if (y) {
                p3.router().navigate(y, true)
            }
            return false
        },
        selectTab: function(v) {
            var w = this;
            w.$el.find(".workspace-sidebar-tabs LI.active").removeClass("active");
            $(".workspace-sidebar-tab").removeClass("active");
            w.$el.find(".workspace-sidebar-content > div").hide();
            w.$el.find('.workspace-sidebar-tab[data-action="' + v + '"]').parent().addClass("active");
            w.$el.find('.workspace-sidebar-tab[data-action="' + v + '"]').addClass("active");
            w.$el.find('.workspace-sidebar-content > div[data-id="' + v + '"]').show()
        },
        loadContentData: function(w) {
            var x = this,
                v;
            if (x.options.boardContent) {
                return w()
            }
            v = new s.Cs.ResourceBoardContent();
            v.fetch({
                success: function() {
                    x.options.boardContent = v.toJSON();
                    return w()
                },
                error: function() {
                    p3.displayError("Error loading resource board content blocks.")
                }
            })
        },
        filterContentData: function(y) {
            var z = this,
                w = [],
                v, x;
            if (z.options.boardContent) {
                v = z.options.boardContent;
                _.each(v, function(A) {
                    if (A.ObjectTypeId == y) {
                        x = c.Us.findContentById(A.Id);
                        if (x) {
                            A.Name = A.Id == 1 ? "Text Category" : x.Name;
                            A.IconClass = x.IconClass;
                            w.push(A)
                        }
                    }
                })
            }
            return w
        },
        getElements: function() {
            var v = [];
            v.push({
                Id: 0,
                Name: "Header",
                IconClass: "p3icon-header"
            });
            return v
        },
        getBoardElements: function() {
            var v = [];
            v.push({
                Id: 0,
                Name: "Cover Image",
                IconClass: "p3icon-image"
            });
            return v
        },
        updateView: function() {
            var x = this,
                v, w;
            $("#board-name").html(x.model.get("ShortDescription"));
            $("#layout-icon").removeClass().addClass(x.getLayoutIcon(x.model.get("LayoutId")));
            $("#persona-level-list").children().remove();
            w = x.model.get("PersonaLevels");
            for (v = 0; v < w.length; v++) {
                $("#persona-level-list").append("<li>" + w[v].PersonaLevelDescription + "</li>")
            }
        },
        showEditSettings: function(v) {
            v.preventDefault();
            var x = this,
                w = new s.Vs.ContainerEditView({
                    container: x.model
                });
            p3.rV(w, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            w.on("containerSaved", function(z) {
                x.model.set(z.toJSON(), {
                    silent: true
                });
                x.updateView();
                var y = new q.Ms.Page({
                    Id: 0,
                    PageTaskId: x.model.get("TaskId")
                });
                y.fetch({
                    data: {
                        pendingInd: true
                    },
                    success: function() {
                        x.options.builderData.set("Structure", y.get("SiteLayout").LayoutRegions);
                        x.options.builderData.set("PageRegions", y.get("PageRegions"));
                        var A = new j.Vs.Builder({
                            model: x.options.builderData
                        });
                        x.options.parentView.options.page = y;
                        p3.rV(A, $("#pages-workspace"), true);
                        x.options.parentView.updateView();
                        x.options.parentView.footerView.model.set("PendingInd", y.get("PendingInd"))
                    },
                    error: function() {
                        p3.displayError("Error loading page")
                    }
                })
            });
            return false
        },
        setSelectedStyle: function(x) {
            var z = this,
                v = $(x.currentTarget),
                w = z.getBlockModel(),
                y = new s.Ms.StyleOptions(w.StyleOptions);
            $(".style-button").removeClass("active");
            v.addClass("active");
            $(".style-element.selected").removeClass("conNone conDefault conPrimary conSecondary conRed conBlue conYellow sec-15-bgc pri-100-bgc").addClass(v.children()[0].className);
            y.set("Class", v.children()[0].className);
            w.StyleOptions = y.toJSON();
            z.savePage();
            return false
        },
        setSelectedFont: function(x) {
            var z = this,
                v = $(x.currentTarget),
                w = z.getBlockModel(),
                y = new s.Ms.StyleOptions(w.StyleOptions);
            if (v.prop("selectedIndex") == 0) {
                $(".style-element.selected").css("font-family", "inherit");
                y.set("Font", "")
            } else {
                $(".style-element.selected").css("font-family", v.val());
                y.set("Font", v.val())
            }
            w.StyleOptions = y.toJSON();
            z.savePage()
        },
        setFontSize: function(w) {
            var z = this,
                v = z.getBlockModel(),
                x = new s.Ms.StyleOptions(v.StyleOptions),
                y = "";
            switch (w.currentTarget.id) {
                case "btn-font-small":
                    y = "13px";
                    x.set("FontSize", "small");
                    break;
                case "btn-font-medium":
                    y = "14px";
                    x.set("FontSize", "medium");
                    break;
                case "btn-font-large":
                    x.set("FontSize", "large");
                    y = "16px";
                    break
            }
            $(".style-element.selected").css("font-size", y);
            v.StyleOptions = x.toJSON();
            z.savePage()
        },
        toggleIcon: function(w) {
            var y = this,
                v = y.getBlockModel(),
                x = new s.Ms.StyleOptions(v.StyleOptions);
            if (w.currentTarget.id == "btn-icon-yes") {
                $(".style-element.selected").find("i.channel-icon").show();
                x.set("ShowIcon", true)
            } else {
                $(".style-element.selected").find("i.channel-icon").hide();
                x.set("ShowIcon", false)
            }
            v.StyleOptions = x.toJSON();
            y.savePage()
        },
        getBlockModel: function() {
            var A = this,
                x = A.options.parentView.options.page,
                y = x.get("PageRegions")[0],
                z = $(".style-element.selected").data("row"),
                w = $(".style-element.selected").data("column"),
                v = $(".style-element.selected").data("block");
            return y.Rows[z].Columns[w].ContentBlocks[v]
        },
        savePage: function() {
            var w = this,
                v = w.options.parentView.options.page;
            v.set("PendingInd", true);
            v.save({}, {
                dataParam: {
                    saveStructure: true,
                    returnModel: true
                },
                success: function(x, y) {
                    w.options.builderData.set({
                        PageRegions: x.get("PageRegions")
                    }, {
                        silent: true
                    });
                    w.options.builderData.trigger("save");
                    v.trigger("change")
                },
                error: function() {
                    p3.displayError("Error saving page")
                }
            })
        }
    });
    s.Vs.PriorityEditView = Bb.View.extend({
        template: "resourceboard/resourceboard.priority.template.html",
        events: {
            "click #btnSave": "savePriority",
            "click .move-top-button": "moveToTop"
        },
        render: function(v) {
            var w = this;
            $(v).html(w.el);
            w.renderTemplate()
        },
        renderTemplate: function() {
            var x = this,
                w = new s.Cs.Priorities(),
                v = p3.Data.SchoolContext.getLibrariesUrl();
            w.fetch({
                success: function() {
                    w.each(function(y) {
                        switch (y.get("container_type")) {
                            case 2:
                                y.set("systemImage", v + "/p3-cache/img/groupFinder.png");
                                break;
                            case 3:
                                y.set("systemImage", v + "/p3-cache/img/lists.png");
                                break;
                            case 4:
                                y.set("systemImage", v + "/p3-cache/img/reports.png");
                                break;
                            case 5:
                                y.set("systemImage", v + "/p3-cache/img/portal.png");
                                break;
                            case 6:
                                y.set("systemImage", v + "/p3-cache/img/myFiles.png");
                                break;
                            case 7:
                                y.set("systemImage", v + "/p3-cache/img/addAnother.png");
                                break
                        }
                        if (y.get("container_levels")) {
                            y.set("container_levels", y.get("container_levels").replace(/\,/g, ", "))
                        }
                        if (y.get("active_ind") == 1) {
                            y.set("inactiveMessage", "Future Publish Date")
                        }
                        if (y.get("active_ind") == 2) {
                            y.set("inactiveMessage", "Expired")
                        }
                    });
                    p3.fT(x.template, function(y) {
                        x.$el.html(y({
                            priority: w.toJSON()
                        }))
                    });
                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                        var y = function(z, A) {
                            A.children().each(function() {
                                $(this).width($(this).width())
                            });
                            return A
                        };
                        window.setTimeout(function() {
                            $(".sortContainer tbody").sortable({
                                items: "tr.postContainer",
                                helper: y
                            }).disableSelection()
                        }, 400)
                    })
                },
                error: function() {
                    p3.displayError("Error loading priorities")
                }
            })
        },
        savePriority: function(v) {
            var z = this,
                y = [],
                x = 0,
                w;
            $("#btnSave").button("loading");
            $(".postContainer").each(function() {
                x += 1;
                y.push({
                    ResourceBoardContainerId: $(this).data("id"),
                    SortOrder: x
                })
            });
            w = new s.Ms.SetPriorities({
                PersonaId: s.Data.Persona,
                SortList: y
            });
            w.save({}, {
                error: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    p3.displayError("Error saving priority")
                },
                success: function() {
                    z.trigger("priorityChanged");
                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                }
            })
        },
        moveToTop: function(x) {
            var w = $(x.currentTarget),
                v = w.parentsUntil(1, "tr"),
                z = v.data("id"),
                y = v.html();
            v.remove();
            $(".sortContainer tr:first").after('<tr class="postContainer sort-hover" data-id="' + z + '">' + y + "</tr>")
        }
    });
    s.Us.renderBoardEditDetail = function(w, x) {
        var v = new s.Ms.ResourceBoardContainer({
            ResourceBoardContainerId: w
        });
        v.fetch({
            data: {
                containerId: w
            },
            success: function() {
                var y = new q.Ms.Page({
                    Id: 0,
                    PageTaskId: v.get("TaskId")
                });
                y.fetch({
                    data: {
                        pendingInd: true
                    },
                    success: function() {
                        p3.renderMainPage(new s.Vs.EditDetail({
                            model: v,
                            editMode: x,
                            page: y
                        }), true)
                    },
                    error: function() {
                        p3.displayError("Error loading page")
                    }
                })
            },
            error: function() {
                p3.displayError("Error loading resource board")
            }
        })
    };
    s.Us.renderBoardDetail = function(w, x) {
        var v = new s.Ms.ResourceBoardContainerGet({
            ResourceBoardContainerId: w
        });
        v.fetch({
            data: {
                containerId: w
            },
            success: function() {
                var y = new q.Ms.PageGet({
                    Id: 0,
                    PageTaskId: v.get("TaskId")
                });
                y.fetch({
                    data: {
                        pendingInd: x
                    },
                    success: function() {
                        p3.renderMainPage(new s.Vs.ViewDetail({
                            model: v,
                            page: y,
                            mode: "view"
                        }))
                    },
                    error: function() {
                        p3.displayError("Error loading page")
                    }
                })
            },
            error: function() {
                p3.displayError("Error loading resource board")
            }
        })
    };
    s.Us.getLevels = function(w, v) {
        if (s.Data.Levels == null) {
            s.Data.Levels = new s.Cs.SchoolLevel({}, {
                editMode: w
            });
            s.Data.Levels.fetch({
                async: v,
                error: function() {
                    p3.displayError("Error loading levels")
                }
            })
        }
    };
    s.Us.initializeReportInput = function() {
        $.ajax({
            url: aP + "reportlist/?format=json&reportType=0",
            cache: false,
            success: function(v) {
                $("#report").tokenInput(v, {
                    minChars: 2,
                    searchDelay: 100,
                    preventDuplicates: true,
                    animateDropdown: false,
                    hintText: "Search Reports",
                    classes: {
                        tokenList: "token-input-list",
                        dropdown: "token-input-dropdown"
                    },
                    resultsFormatter: function(w) {
                        var x = "";
                        x += w.name;
                        return "<li>" + x + "</li>"
                    },
                    onAdd: function(w) {
                        r.Us.reportLoad(p3.Data.ReportList)
                    }
                })
            },
            complete: function(v, w) {
                r.PrepopulateData = null
            }
        })
    };
    s.Us.initializeListInput = function() {
        $.ajax({
            url: aP + "datadirect/ListGet/?format=json",
            cache: false,
            success: function(v) {
                $("#lists").tokenInput(v, {
                    minChars: 2,
                    searchDelay: 100,
                    preventDuplicates: true,
                    animateDropdown: false,
                    hintText: "Search Lists",
                    classes: {
                        tokenList: "token-input-list",
                        dropdown: "token-input-dropdown"
                    },
                    resultsFormatter: function(w) {
                        var x = "";
                        x += w.name;
                        return "<li>" + x + "</li>"
                    },
                    onAdd: function(w) {
                        m.Us.ListsLoad(p3.Data.List)
                    }
                })
            },
            complete: function(v, w) {
                m.PrepopulateData = null
            }
        })
    };
    s.Us.initializeGroupInput = function() {
        var w = new i.Cs.GroupsByYear(),
            v, x = "GroupFinder/groupfinder.item.template.html",
            y;
        p3.fT(x, function(z) {
            w.fetch({
                data: {
                    schoolYearLabel: s.Data.CurrentYear
                },
                success: function(A) {
                    if (s.Data.CurrentMode === "current") {
                        v = new i.Cs.GroupsByYear();
                        A.each(function(B) {
                            if (B.get("current_ind")) {
                                v.push(B)
                            }
                        })
                    } else {
                        v = A
                    }
                    $("#group-finder").tokenInput(v.toJSON(), {
                        minChars: 2,
                        searchDelay: 100,
                        preventDuplicates: true,
                        animateDropdown: false,
                        hintText: "Type a Group Name",
                        propertyToSearch: "group_name",
                        classes: {
                            tokenList: "token-input-list group-list",
                            dropdown: "token-input-dropdown"
                        },
                        resultsFormatter: function(B) {
                            var C = "",
                                D = false;
                            if ($(".token-input-dropdown:visible li").length === 0) {
                                y = -1
                            }
                            if (B.association_id !== y) {
                                D = true;
                                y = B.association_id
                            }
                            C += z({
                                item: B,
                                resourceBoard: true,
                                showHeader: D
                            });
                            return "<li>" + C + "</li>"
                        },
                        onAdd: function(B) {
                            $("li.token-input-token").remove();
                            i.Us.accessGroupPage(B.current_pk, B.association_id)
                        }
                    })
                },
                error: function() {
                    p3.displayError("Error loading groups")
                }
            })
        })
    };
    s.Us.getPages = function(w, x) {
        var v;
        if (!x) {
            v = w.filter(function(y) {
                return y.get("ParentTaskId") == null
            })
        } else {
            v = w.filter(function(y) {
                return y.get("ParentTaskId") == x
            })
        }
        return new t.Cs.Tasks(v)
    };
    s.Us.getPersonaLevels = function(z) {
        s.Us.getLevels(true, false);
        var y = s.Data.Levels.length > 0,
            x = [],
            w, v;
        if (z) {
            w = s.Data.Levels
        } else {
            w = s.Data.FilterLevels
        }
        if (y) {
            x.push({
                persona: 12,
                LevelId: -1,
                LevelDescription: "Alum",
                Selected: s.Data.Persona == 12
            });
            w.each(function(A) {
                x.push({
                    persona: 3,
                    LevelId: A.get("DdId"),
                    LevelDescription: "Faculty - " + A.get("DdDescription"),
                    Selected: s.Data.Persona == 3 && A.get("Selected")
                })
            });
            x.push({
                persona: 11,
                LevelId: -1,
                LevelDescription: "Friend",
                Selected: s.Data.Persona == 11
            });
            w.each(function(A) {
                x.push({
                    persona: 1,
                    LevelId: A.get("DdId"),
                    LevelDescription: "Parent - " + A.get("DdDescription"),
                    Selected: s.Data.Persona == 1 && A.get("Selected")
                })
            });
            w.each(function(A) {
                x.push({
                    persona: 2,
                    LevelId: A.get("DdId"),
                    LevelDescription: "Student - " + A.get("DdDescription"),
                    Selected: s.Data.Persona == 2 && A.get("Selected")
                })
            })
        } else {
            v = w.models[0].get("DdId");
            x.push({
                persona: 12,
                LevelId: v,
                LevelDescription: "Alum",
                Selected: s.Data.Persona == 12
            });
            x.push({
                persona: 3,
                LevelId: v,
                LevelDescription: "Faculty",
                Selected: s.Data.Persona == 3
            });
            x.push({
                persona: 11,
                LevelId: v,
                LevelDescription: "Friend",
                Selected: s.Data.Persona == 11
            });
            x.push({
                persona: 1,
                LevelId: v,
                LevelDescription: "Parent",
                Selected: s.Data.Persona == 1
            });
            x.push({
                persona: 2,
                LevelId: v,
                LevelDescription: "Student",
                Selected: s.Data.Persona == 2
            })
        }
        return x
    };
    Hb.registerHelper("getUserControls", function(v, C) {
        var B = '<div style="margin:0px 20px 15px 15px;height:',
            z, y, x, D, w, A;
        switch (v) {
            case 2:
                B += '75;"><select id="group-finder-dropdown" style="width:100%;">';
                s.Data.ClassYears.each(function(E) {
                    if (E.get("Current")) {
                        B += '<option data-mode="current" data-label="' + E.get("Id") + '" value="' + E.get("Id") + '"';
                        if (E.get("Id") == s.Data.CurrentYear && s.Data.CurrentMode === "current") {
                            B += " selected"
                        }
                        B += ">" + E.get("Id") + i.Data.yearSuffixCurrent + "</option>";
                        B += '<option data-mode="all" data-label="' + E.get("Id") + '" value="' + E.get("Id") + '"';
                        if (E.get("Id") == s.Data.CurrentYear && s.Data.CurrentMode === "all") {
                            B += " selected"
                        }
                        B += ">" + E.get("Id") + i.Data.yearSuffixAll + "</option>"
                    } else {
                        B += '<option data-mode="none" data-label="' + E.get("Id") + '" value="' + E.get("Id") + '"';
                        if (E.get("Id") == s.Data.CurrentYear) {
                            B += " selected"
                        }
                        B += ">" + E.get("Id") + i.Data.yearSuffix + "</option>"
                    }
                });
                B += "</select>";
                B += '<div id="group-finder"></div>';
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TokenInput, s.Us.initializeGroupInput);
                break;
            case 3:
                B += '30;"><div id="lists"></div>';
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TokenInput, s.Us.initializeReportInput);
                break;
            case 4:
                B += '30;"><div id="report"></div>';
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TokenInput, s.Us.initializeListInput);
                break;
            case 5:
                z = p3.Data.Context.getAllPortals();
                B += '115;"><select id="portal-drop-down">';
                B += '<option value="0">-- Select A Portal --</option>';
                for (w = 0; w < z.length; w++) {
                    B += '<option value="' + z[w].TaskId + '">' + z[w].Description + "</option>"
                }
                B += "</select>";
                B += '<h3 style="margin: 10px 0px 5px 0px">Private Pages</h3>';
                y = p3.Data.Context.getPrivatePages();
                x = new t.Cs.Tasks(y);
                D = s.Us.getPages(x);
                D.each(function(E) {
                    E.set("childPages", s.Us.getPages(x, E.get("TaskId")));
                    if (E.get("childPages").length > 0) {
                        E.get("childPages").each(function(F) {
                            F.set("childPages", s.Us.getPages(x, F.get("TaskId")))
                        })
                    }
                });
                y = D.toJSON();
                B += '<select id="page-drop-down">';
                B += '<option value="0">-- Select A Page --</option>';
                A = function(E) {
                    B += "<option";
                    if (E.PageUrl) {
                        B += ' data-url="' + E.PageUrl + '"'
                    }
                    B += ' value="' + E.get("TaskId") + '">&nbsp;&nbsp;&nbsp;&nbsp;' + E.get("Description") + "</option>";
                    if (E.get("childPages").length > 0) {
                        E.get("childPages").each(function(F) {
                            B += "<option";
                            if (F.PageUrl) {
                                B += ' data-url="' + F.PageUrl + '"'
                            }
                            B += ' value="' + F.get("TaskId") + '">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + F.get("Description") + "</option>"
                        })
                    }
                };
                for (w = 0; w < y.length; w++) {
                    if (y[w].TaskTypeId == 2) {
                        B += "<option";
                        if (y[w].PageUrl) {
                            B += ' data-url="' + y[w].PageUrl + '"'
                        }
                        B += ' value="' + y[w].TaskId + '">' + y[w].Description + "</option>";
                        if (y[w].childPages.length > 0) {
                            y[w].childPages.each(A)
                        }
                    }
                }
                B += "</select>";
                break;
            case 6:
                break;
            case 7:
                if (C.showApplyLink) {
                    B += '30;"><a href="#" id="application">Begin Application</a>'
                } else {
                    B += '30;">Currently there are no active applications.'
                }
                break
        }
        B += "</div>";
        return new Hb.SafeString(B)
    });
    p3.router().route("resourceboards", "resourceboards", function() {
        p3.setTitle("Resource Boards");
        p3.renderMainPage(new s.Vs.ResourceBoards({
            editMode: true,
            header: "Resource Boards"
        }))
    });
    p3.router().route("resourceboard", "resourceboard", function() {
        p3.setTitle("Resource Board");
        p3.renderMainPage(new s.Vs.ResourceBoards({
            editMode: false,
            header: ""
        }))
    });
    p3.router().route("resourceboarddetailedit/:id(/:mode)", "resourceboarddetailedit", function(v, w) {
        p3.setTitle("Edit Resource Board");
        s.Us.renderBoardEditDetail(v, w)
    });
    p3.router().route("resourceboarddetail/:id(/:mode)", "resourceboarddetail", function(v, w) {
        p3.setTitle("Resource Board");
        var x = false;
        if (w === "pending") {
            x = true
        }
        s.Us.renderBoardDetail(v, x)
    })
}(p3.module("lms/resourceboard")));
(function(i) {
    var j = p3.module("shared/task"),
        f = p3.module("shared/message"),
        h = p3.module("report"),
        g = p3.module("shared/profile"),
        c = p3.Us.Culture,
        e = p3.module("LMS/groupPageEdit"),
        a = p3.module("LMS/Shared/AssignmentTools"),
        d = p3.module("shared/datepicker");
    i.Ms.Student = Bbm.extend({
        idAttribute: "Id"
    });
    i.Cs.Student = Bbc.extend({
        model: i.Ms.Student,
        initialize: function(k, l) {
            this.sectionId = l.sectionId || 0;
            this.leadSectionId = l.leadSectionId || 0
        },
        url: function() {
            var k = this.sectionId;
            if (i.Data.AssociationId === 3) {
                k = this.leadSectionId
            }
            return aP + "datadirect/sectionrosterget/" + k + "/?format=json"
        }
    });
    i.Ms.LearningProfileActiveFormsByStudent = Bbm.extend({
        idAttribute: "Id",
        url: function() {
            return aP + "datadirect/LearningProfileActiveFormsByStudent/"
        }
    });
    i.Cs.LearningProfileActiveFormsByStudent = Bbc.extend({
        model: i.Ms.LearningProfileActiveFormsByStudent,
        url: function() {
            return aP + "datadirect/LearningProfileActiveFormsByStudent/?format=json"
        }
    });
    i.Ms.Relationship = Bbm.extend({
        idAttribute: "Id"
    });
    i.Cs.Relationship = Bbc.extend({
        model: i.Ms.Relationship,
        initialize: function(k, l) {
            this.studentId = l.studentId || 0
        },
        url: function() {
            return aP + "datadirect/studentrelationshipsget/" + this.studentId + "/?format=json"
        }
    });
    i.Cs.ManageMembers = Bbc.extend({
        url: "datadirect/managerosterget",
        getOwners: function() {
            return new Bbc(this.filter(function(k) {
                return k.get("owner_ind") === 1
            }))
        },
        getMembers: function() {
            return new Bbc(this.filter(function(k) {
                return k.get("owner_ind") !== 1
            }))
        }
    });
    i.Cs.FacultyRoles = Bbc.extend({
        url: "datadirect/facultyroleget"
    });
    i.Cs.GroupOwnerRoles = Bbc.extend({
        url: "datadirect/GroupOwnerRoleGet"
    });
    i.Ms.ManagedRoster = Bbm.extend({
        url: "roster/managesave"
    });
    i.Cs.Rooms = Bbc.extend({
        url: "datadirect/RoomsGet"
    });
    i.Cs.SectionTerms = Bbc.extend({
        url: "academics/SectionTermGet"
    });
    i.Ms.ConnectEE = Bbm.extend({
        url: function() {
            return aP + "datadirect/EEConnectEEAttendanceFlag/"
        }
    });
    i.Us.MessageType = {
        Both: 0,
        Parents: 1,
        Students: 2
    };
    i.Us.GroupTypes = {
        Academics: {
            id: 1,
            memberEdit: 2611,
            ownerEdit: 2568
        },
        Athletics: {
            id: 2,
            memberEdit: 1209,
            ownerEdit: 1305
        },
        Communities: {
            id: 3,
            memberEdit: -1,
            ownerEdit: 3002
        },
        Activities: {
            id: 8,
            memberEdit: 23123,
            ownerEdit: 23127
        },
        Advisories: {
            id: 9,
            memberEdit: 23082,
            ownerEdit: 23086
        },
        Dorms: {
            id: 7,
            memberEdit: 23098,
            ownerEdit: 23102
        }
    };
    i.Us.ComposeUserMessage = function(l, k, n) {
        var o = [],
            m;
        if (k) {
            if (l.length > 0) {
                f.Us.composeMessageOrEmail(l, undefined, n)
            }
        } else {
            if (l && l instanceof Array) {
                for (m = 0; m < l.length; m++) {
                    o.push("12_" + l[m] + "_0")
                }
            } else {
                if (typeof l === "number") {
                    o.push("12_" + l + "_0")
                } else {
                    return
                }
            }
            if (o.length > 0) {
                f.Us.composeMessageOrEmail(o, undefined, n)
            }
        }
    };
    i.Data = {};
    i.Data.CurrentRoster = undefined;
    i.Data.AssociationId = 1;
    i.Data.DormSort = "userSort";
    i.Data.DormSortDesc = false;
    i.Data.RoomsNumeric = false;

    function b(o) {
        var k = o.get("allergies"),
            l = o.get("conditions"),
            m = "",
            n = o.get("medications");
        if (k) {
            m = "Allergic to: " + k
        }
        if (l) {
            if (m) {
                m += "<br />"
            }
            m += "Condition(s): " + l
        }
        if (n) {
            if (m) {
                m += "<br />"
            }
            m += "Medication(s): " + n
        }
        o.set("medicalSummary", m)
    }
    i.Vs.RosterView = Bb.View.extend({
        template: "roster/roster.template.html",
        events: {
            "click .user-relationships-initial": "displayRelationships",
            "click .user-relationships-expanded": "collapseRelationships",
            "click .user-relationships-collapsed": "expandRelationships",
            "click .send-message": "sendMessage",
            "doSearch #RosterCardContainer": "renderCards"
        },
        renderTemplate: function() {
            var k = this;
            k.collection.fetch({
                success: function(l) {
                    var n = k.getReports(),
                        m;
                    i.Data.CurrentRoster = l;
                    m = k.collection.find(function(o) {
                        return o.get("Id") === p3.Data.Context.get("UserInfo").UserId
                    });
                    p3.fT(k.template, function(o) {
                        k.$el.html(o({
                            isOwner: k.options.isOwner,
                            associationId: k.options.associationId,
                            roster: k.collection.toJSON(),
                            report: n.toJSON(),
                            haveReports: n.length > 0,
                            leadSectionId: k.options.leadSectionId,
                            hasComposeAccess: (f.Us.hasComposeAccess() && (p3.Data.SchoolContext.get("SchoolInfo").BulkMessageEnabled || p3.Data.SchoolContext.get("SchoolInfo").BulkEmailEnabled)),
                            isTeacher: p3.Data.Context.getSelectedPersona().Id == 3 || p3.Data.Context.getSelectedPersona().Id == 5 || p3.Data.Context.getSelectedPersona().Id == 20 || p3.Data.Context.getSelectedPersona().Id == 22,
                            isCommunityGroup: k.options.associationId === 3 && m !== undefined,
                            memberCount: (k.collection.length)
                        }));
                        p3.rV(new i.Vs.rosterReport({
                            collection: k.collection,
                            reports: n
                        }), k.Containers.rosterReport, true);
                        setTimeout(function() {
                            $(".btn").tooltip();
                            k.renderCards()
                        }, 200)
                    })
                },
                error: function() {
                    p3.displayError("Error loading roster")
                }
            })
        },
        initialize: function() {
            var k = new i.Cs.Student({}, {
                sectionId: this.options.sectionId,
                leadSectionId: this.options.leadSectionId
            });
            this.collection = k;
            if (typeof this.options.associationId === "number") {
                i.Data.AssociationId = this.options.associationId
            } else {
                i.Data.AssociationId = 1
            }
            this.displaySet = 0;
            this.collection.comparator = function(l, o) {
                var m = l.get("teacherType"),
                    p = o.get("teacherType"),
                    n;
                if (m !== null && p === null) {
                    n = -1
                } else {
                    if (p !== null && m === null) {
                        n = 1
                    } else {
                        n = l.get("lastName").localeCompare(o.get("lastName"))
                    }
                }
                return n
            };
            this.collection.on("reset", this.renderCards, this)
        },
        dispose: function() {
            $(".tooltip").remove();
            i.Data.AssociationId = 0;
            this.collection.off("reset", this.renderCards);
            $(window).off("scroll")
        },
        render: function(l) {
            var m = this,
                k = function() {
                    m.fetchMissingAssignmentData(l)
                };
            m.Containers = {};
            h.loadReportList2(k, k)
        },
        fetchMissingAssignmentData: function(k) {
            var n = this,
                m = p3.Data.Context.getSelectedPersona().Id,
                l;
            n.missingAssignmentInd = false;
            if (m === 3 && n.options.associationId === 9 && n.options.isOwner) {
                l = new a.Ms.AdvisorMissingAssignmentCheck();
                l.fetch({
                    data: {
                        id: n.options.leadSectionId
                    },
                    success: function() {
                        n.missingAssignmentInd = l.hasMissingAssignments();
                        n.rV(k)
                    },
                    error: function() {
                        p3.displayError("Error loading missing assignment information");
                        n.missingAssignmentInd = true;
                        n.rV(k)
                    }
                })
            } else {
                n.rV(k)
            }
        },
        rV: function(k) {
            var m = this,
                l;
            if (this.options.enableSearch) {
                this.content = new e.Cs.Content({}, {
                    leadSectionId: m.options.leadSectionId
                });
                this.content.fetch({
                    success: function(n) {
                        var p = n.find(function(q) {
                                return q.get("ContentId") == 434
                            }),
                            o = m.collection.find(function(q) {
                                return q.get("Id") === p3.Data.Context.get("UserInfo").UserId
                            });
                        l = new i.Vs.RosterSearchView({
                            collection: m.collection,
                            sectionId: m.options.sectionId,
                            isOwner: m.options.isOwner,
                            durationId: m.options.durationId,
                            editAccess: p !== undefined ? p.get("EditorAccess") : false,
                            buildingId: m.options.buildingId,
                            missingAssignmentInd: m.missingAssignmentInd,
                            associationId: m.options.associationId,
                            leadSectionId: m.options.leadSectionId,
                            hasComposeAccess: (f.Us.hasComposeAccess() && (p3.Data.SchoolContext.get("SchoolInfo").BulkMessageEnabled || p3.Data.SchoolContext.get("SchoolInfo").BulkEmailEnabled)),
                            isTeacher: p3.Data.Context.getSelectedPersona().Id == 3 || p3.Data.Context.getSelectedPersona().Id == 5 || p3.Data.Context.getSelectedPersona().Id == 20 || p3.Data.Context.getSelectedPersona().Id == 22,
                            isCommunityGroup: m.options.associationId === 3 && o !== undefined,
                            viewContainers: m.Containers
                        });
                        p3.rV(l, k, false);
                        $(k).append(m.el);
                        p3.loadingIcon(m.el);
                        if ((p3.Data.Context.findByTaskId(53344)) && (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.CONNECTEE)) && (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ATTENDANCELITE))) {
                            new i.Ms.ConnectEE().fetch({
                                success: function(q, r) {
                                    if (r.use_onc_attendance === undefined) {
                                        m.options.UseFAWebAtt = false
                                    } else {
                                        m.options.UseFAWebAtt = (parseInt(r.use_onc_attendance, 10) === 1) ? true : false
                                    }
                                    m.renderTemplate()
                                }
                            })
                        } else {
                            m.renderTemplate()
                        }
                        l.on("termChange", function(q) {
                            m.options.sectionId = q;
                            p3.rV(new i.Vs.rosterReport({
                                collection: m.collection,
                                reports: m.getReports()
                            }), m.Containers.rosterReport, true)
                        })
                    }
                })
            } else {
                $(k).append(this.el);
                p3.loadingIcon(this.el);
                m.renderTemplate()
            }
        },
        renderCards: function(m, p, n) {
            if (i.Data.AssociationId === i.Us.GroupTypes.Dorms.id) {
                this.renderDormRoster()
            } else {
                var s = this,
                    l = $("#RosterCardContainer"),
                    k, q = s.collection.searchTerm,
                    o = 0,
                    r = 18;
                if (l.length > 0) {
                    if (n) {
                        this.displaySet += 1
                    } else {
                        this.displaySet = 0
                    }
                    if (this.displaySet === 0) {
                        l.html("")
                    }
                    _.each(s.collection.filter(function(t) {
                        return !((q !== undefined && ((t.get("firstName") || "").toLowerCase().indexOf(q.toLowerCase()) === -1 && (t.get("lastName") || "").toLowerCase().indexOf(q.toLowerCase()) === -1 && (t.get("nickName") || "").toLowerCase().indexOf(q.toLowerCase()) === -1)))
                    }).slice((this.displaySet * r), (this.displaySet * r) + r), function(t) {
                        if (o++ % 3 === 0) {
                            k = $("<div>").addClass("row");
                            l.append(k)
                        }
                        p3.rV(new i.Vs.Card({
                            model: t,
                            isOwner: s.options.isOwner,
                            associationId: s.options.associationId,
                            disableLearningProfiles: s.options.disableLearningProfiles
                        }), k, false)
                    });
                    if ((this.displaySet * r) + r < this.collection.length) {
                        $(window).scroll(this, this.scrollList)
                    }
                    if (this.displaySet === 0 && o === 0) {
                        l.append($("<div>").html("No results found."))
                    }
                }
            }
        },
        scrollList: function(k) {
            var m, l;
            m = Math.ceil($(window).scrollTop());
            l = $(document).height() - ($(window).height());
            if ((m >= (l - 1) && m <= (l + 1)) || (m >= (l - 19) && m <= (l - 21))) {
                $(window).off("scroll");
                k.data.renderCards(null, null, true)
            }
        },
        renderDormRoster: function() {
            var q = this,
                o = q.collection.searchTerm,
                n = [],
                m = [],
                l = 0,
                p, k;
            i.Data.RoomsNumeric = true;
            q.collection.each(function(t) {
                var r = t.get("firstName") || "",
                    w = t.get("nickName") || "",
                    v = t.get("lastName") || "",
                    u, x, s, y;
                if (o === undefined || r.toLowerCase().indexOf(o.toLowerCase()) > -1 || v.toLowerCase().indexOf(o.toLowerCase()) > -1 || w.toLowerCase().indexOf(o.toLowerCase()) > -1) {
                    if (t.get("teacherType") && t.get("teacherType").length > 0) {
                        l += 1;
                        if (l == 1 || (l - 1) % 3 == 0) {
                            p = true
                        } else {
                            p = false
                        }
                        if (l > 1 && l % 3 == 0) {
                            k = true
                        } else {
                            k = false
                        }
                        m.push({
                            ownerType: t.get("teacherType"),
                            name: t.get("name"),
                            id: t.get("Id"),
                            photo: t.get("userThumb"),
                            startRow: p,
                            endRow: k
                        })
                    } else {
                        u = "";
                        x = p3.Config.PhotonForUserPhotoUrl + t.get("userPhotoLarge");
                        s = typeof t.get("gradYear") === "string" ? t.get("gradYear").substring(2, 4) : undefined;
                        y = "";
                        if (!t.get("roomName")) {
                            t.set("room", t.get("roomNumber"));
                            t.set("roomSort", t.get("roomNumber"))
                        } else {
                            if (t.get("roomName") !== t.get("roomNumber")) {
                                t.set("room", t.get("roomNumber") + " " + t.get("roomName"));
                                t.set("roomSort", t.get("roomName"))
                            } else {
                                t.set("room", t.get("roomName"));
                                t.set("roomSort", t.get("roomName"))
                            }
                        }
                        if (!t.get("roomNumber") || t.get("roomNumber").length === 0 || isNaN(t.get("roomNumber"))) {
                            i.Data.RoomsNumeric = false
                        }
                        if (t.get("boardingOrDay") === "B") {
                            t.set("boarding", "Boarding")
                        } else {
                            t.set("boarding", "Day")
                        }
                        t.set("userSort", v + "," + r);
                        if (t.get("NumForms") == 1) {
                            y = j.Us.getUrlById(1691, "pk=393&__pd=gm_fv&ext=pdf&sid=" + t.get("Id") + "&fiid=" + t.get("FormInstanceId"));
                            u = '<a target="_blank" href="' + y + '" rel="tooltip" class="btn btn-default pull-left" data-original-title="Profile: ' + t.get("FormName") + '" style="margin-right:5px;"> <i class="p3icon-learningProfile"></i></a>'
                        }
                        if (t.get("NumForms") > 1) {
                            u = '<span id="LP_' + t.get("Id") + '"></span>';
                            i.Us.LearningProfileButton(t.toJSON(), 5)
                        }
                        if (p3.Data.Context.findByTaskId(53394)) {
                            b(t)
                        }
                        t.set({
                            learningProfile: q.options.disableLearningProfiles ? "" : u,
                            profilePicture: x,
                            gYear: s
                        });
                        n.push(t.toJSON())
                    }
                }
            });
            if (m.length === 0 && n.length === 0) {
                $("#RosterCardContainer").html("No results found.")
            } else {
                if (m.length > 0) {
                    m[m.length - 1].endRow = true
                }
                p3.rV(new i.Vs.DormRoster({
                    residents: n,
                    owners: m,
                    isOwner: q.options.isOwner,
                    associationId: q.options.associationId,
                    disableLearningProfiles: q.options.disableLearningProfiles
                }), $("#RosterCardContainer"), true)
            }
        },
        displayRelationships: function(k) {
            var m = k.target.hash.substring(1),
                l = new i.Cs.Relationship({}, {
                    studentId: m
                });
            l.fetch({
                success: function() {
                    var n = [m],
                        r = true,
                        q = '<table class="table table-striped table-condensed well" style="margin:0px 0px 0px 0px">',
                        o = "",
                        p;
                    if (r) {
                        q = '<table class="table table-condensed" style="margin:0px 0px 0px 0px">'
                    }
                    l.each(function(s) {
                        q += '<tr><td><p style="margin-top:5px">';
                        q += s.get("firstName");
                        q += " ";
                        q += s.get("lastName");
                        q += " (";
                        q += s.get("relationship");
                        if (s.get("email")) {
                            q += ')<br><a href="mailto:';
                            q += s.get("email");
                            q += '">';
                            q += s.get("email");
                            q += "</a></p></td><td>"
                        } else {
                            q += ")</p></td><td>"
                        }
                        if (f.Us.hasComposeAccess() && p3.Data.SchoolContext.get("SchoolInfo").IndividualMessageEnabled && (p3.Data.Context.getSelectedPersona().Id !== 2 || (p3.Data.Context.getSelectedPersona().Id === 2 && m == p3.Data.Context.get("UserInfo").UserId))) {
                            q += '<a class="btn btn-default pull-right send-message" href="#" rel="tooltip" data-original-title="Send Message" data-user-id="';
                            q += $.trim(s.get("Id"));
                            q += '"> <i class="p3icon-message"></i></a>'
                        }
                        if (s.get("publishPage")) {
                            q += '<a href="#profile/' + s.get("Id") + '/contactcard" class="btn btn-default  pull-right" style="margin-right:5px" rel="tooltip" data-original-title="Contact Card"><i class="p3icon-contactCard"></i></a>'
                        }
                        q += "</td></tr>";
                        n.push(s.get("Id"))
                    });
                    for (p = 0; p < n.length; p++) {
                        if (o.length > 0) {
                            o += ","
                        }
                        o += n[p]
                    }
                    if (f.Us.hasComposeAccess() && p3.Data.SchoolContext.get("SchoolInfo").IndividualMessageEnabled && (p3.Data.Context.getSelectedPersona().Id !== 2 || (p3.Data.Context.getSelectedPersona().Id === 2 && m == p3.Data.Context.get("UserInfo").UserId))) {
                        if (r) {
                            q += '<tr class="message-all-row"><td>&nbsp;</td><td><a href="#" class="btn btn-default pull-right send-message" data-user-id="' + o + '"><i class="p3icon-message"></i> Message All</a></td></tr>'
                        } else {
                            q += '<tr class="message-all-row"><td>&nbsp;</td><td><a href="#" class="btn btn-default pull-right send-message" data-user-id="' + o + '"><h4><i class="p3icon-message"></i> Message All</h4></a></td></tr>'
                        }
                    }
                    q += "</table>";
                    $("#relate_region_" + m).html(q);
                    $("#relate_region_" + m).slideDown();
                    $(k.target).removeClass("user-relationships-initial").addClass("user-relationships-expanded");
                    $(".btn").tooltip()
                },
                error: function() {
                    p3.displayError("Error loading relationships")
                }
            });
            return false
        },
        expandRelationships: function(k) {
            var l = k.target.hash.substring(1);
            $(k.target).removeClass("user-relationships-collapsed").addClass("user-relationships-expanded");
            $("#relate_region_" + l).slideDown();
            return false
        },
        collapseRelationships: function(k) {
            var l = k.target.hash.substring(1);
            $(k.target).removeClass("user-relationships-expanded").addClass("user-relationships-collapsed");
            $("#relate_region_" + l).slideUp();
            return false
        },
        sendMessage: function(k) {
            k.preventDefault();
            i.Us.SendMessage(k, this);
            return false
        },
        getReports: function() {
            var m = this,
                l = new h.Cs.ReportList(),
                k, n;
            if (i.Data.AssociationId !== 3) {
                l.remove(l.at(0));
                if (h.hasAccessToReportId(431, true)) {
                    n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=431&ext=vw&opk=" + m.options.sectionId);
                    k = new h.Ms.ReportList({
                        ReportName: "Comments by Section",
                        Link: n
                    });
                    l.add(k)
                }
                if (h.hasAccessToReportId(194, true)) {
                    n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=194&ext=vw&o_pk=" + m.options.sectionId);
                    k = new h.Ms.ReportList({
                        ReportName: "Course Roster",
                        Link: n
                    });
                    l.add(k)
                }
                if (h.hasAccessToReportId(373, true)) {
                    n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=373&ext=vw&o_pk=" + m.options.sectionId);
                    k = new h.Ms.ReportList({
                        ReportName: "Emergency Contacts",
                        Link: n
                    });
                    l.add(k)
                }
                if (h.hasAccessToReportId(401, true)) {
                    n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=401&ext=pdf&sid=" + m.options.sectionId);
                    k = new h.Ms.ReportList({
                        ReportName: "Learning Profiles",
                        Link: n
                    });
                    l.add(k)
                }
                if (h.hasAccessToReportId(319, true)) {
                    n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=319&ext=vw&o_pk=" + m.options.sectionId);
                    k = new h.Ms.ReportList({
                        ReportName: "Roster Block Schedule",
                        Link: n
                    });
                    l.add(k)
                }
                if (h.hasAccessToReportId(226, true)) {
                    n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=226&ext=vw&o_pk=|" + m.options.durationId + "|" + m.options.sectionId + "|1|");
                    k = new h.Ms.ReportList({
                        ReportName: "Roster Enrollments",
                        Link: n
                    });
                    l.add(k)
                }
                if (h.hasAccessToReportId(404, true)) {
                    n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=404&ext=vw&sid=" + m.options.sectionId);
                    k = new h.Ms.ReportList({
                        ReportName: "Pre-excused Absences by Student",
                        Link: n
                    });
                    l.add(k)
                }
                if (i.Data.AssociationId !== i.Us.GroupTypes.Dorms.id && (h.hasAccessToReportId(121, true)) && (!m.options.UseFAWebAtt)) {
                    n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=121&ext=vw&o_pk=" + m.options.sectionId);
                    k = new h.Ms.ReportList({
                        ReportName: "Attendance History - By Section",
                        Link: n
                    });
                    l.add(k)
                }
                if (i.Data.AssociationId !== i.Us.GroupTypes.Dorms.id && (h.hasAccessToReportId(500, true)) && (!m.options.UseFAWebAtt)) {
                    n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=500&ext=vw&o_pk=" + m.options.sectionId);
                    k = new h.Ms.ReportList({
                        ReportName: "Attendance History - By Section",
                        Link: n
                    });
                    l.add(k)
                }
                if (h.hasAccessToReportId(508, true)) {
                    n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=508&sectionId=" + m.options.sectionId);
                    k = new h.Ms.ReportList({
                        ReportName: "School Forms",
                        Link: n
                    });
                    l.add(k)
                }
                if (i.Data.AssociationId == 7 && h.hasAccessToReportId(260)) {
                    n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=260&ext=vw&s_pk=" + m.options.sectionId);
                    k = new h.Ms.ReportList({
                        ReportName: "Cumulative Grades - By Student for all Sections",
                        Link: n
                    });
                    l.add(k)
                }
                if (i.Data.AssociationId == 9) {
                    if (h.hasAccessToReportId(248, true)) {
                        n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=248&ext=vw&s_pk=" + m.options.sectionId);
                        k = new h.Ms.ReportList({
                            ReportName: "Assignment Grades with Comments - By Student for All Sections",
                            Link: n
                        });
                        l.add(k)
                    }
                    if (h.hasAccessToReportId(211, true)) {
                        n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=211&ext=vw&s_pk=" + m.options.sectionId);
                        k = new h.Ms.ReportList({
                            ReportName: "Assignment Grades - By Student for All Sections",
                            Link: n
                        });
                        l.add(k)
                    }
                    if (h.hasAccessToReportId(260, true)) {
                        n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=260&ext=vw&s_pk=" + m.options.sectionId);
                        k = new h.Ms.ReportList({
                            ReportName: "Cumulative Grades - By Student for all Sections",
                            Link: n
                        });
                        l.add(k)
                    }
                    if (h.hasAccessToReportId(324, true)) {
                        n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=324&ext=vw&o_pk=" + m.options.sectionId);
                        k = new h.Ms.ReportList({
                            ReportName: "Roster Assignments Due - By Section",
                            Link: n
                        });
                        l.add(k)
                    }
                    if (h.hasAccessToReportId(82, true)) {
                        n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=82&ext=vw&o_pk=" + m.options.sectionId);
                        k = new h.Ms.ReportList({
                            ReportName: "Roster Major Assignment - By Section",
                            Link: n
                        });
                        l.add(k)
                    }
                    if (h.hasAccessToReportId(417, true)) {
                        n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=417&ext=vw&sid=" + m.options.sectionId);
                        k = new h.Ms.ReportList({
                            ReportName: "Student Schedules - By Advisor",
                            Link: n
                        });
                        l.add(k)
                    }
                    if (h.hasAccessToReportId(450, true)) {
                        n = j.Us.getUrlById(1691, "__pd=gm_fv&pk=450&ext=vw&sid=" + m.options.sectionId);
                        k = new h.Ms.ReportList({
                            ReportName: "Submitted Assignments - By Students",
                            Link: n
                        });
                        l.add(k)
                    }
                }
                if (p3.Data.Context.findByTaskId(53477) && !p3.Data.Context.get("IsImpersonating")) {
                    n = window.location.pathname + j.Us.getUrlById(53477, m.options.sectionId);
                    k = new h.Ms.ReportList({
                        ReportName: "Medical Contact Cards",
                        Link: n
                    });
                    l.add(k)
                }
            }
            return l
        }
    });
    i.Vs.rosterReport = Bb.View.extend({
        tagName: "ul",
        className: "dropdown-menu",
        initialize: function(k) {
            this.button = $("<button>", {
                "class": "btn btn-default btn-sm dropdown-toggle",
                "data-toggle": "dropdown"
            }).hide();
            this.listenTo(this.collection, "reset", this.renderReports);
            this.renderReports()
        },
        render: function(k) {
            $(k).append(this.button.append("Run Roster/Student Reports ", $("<span>", {
                "class": "caret"
            })), this.$el)
        },
        renderReports: function() {
            this.$el.empty();
            if (this.options.reports.length > 0) {
                this.button.show()
            }
            this.options.reports.each(function(k) {
                this.$el.append($("<li>").append($("<a>", {
                    target: "_blank",
                    href: k.get("Link")
                }).html(k.get("ReportName"))))
            }, this)
        }
    });
    i.Vs.RosterSearchView = Bb.View.extend({
        template: "roster/roster.search.template.html",
        events: {
            "click #rosterSearchButton": "doSearch",
            "keydown #rosterSearchField": "doSearchEnter",
            "click #rosterManageButton": "doManageRoster",
            "click #missingAssignmentButton": "doMissingAssignment",
            "click .send-message": "sendMessage",
            "change #roster-term-picker": "changeTermPicker"
        },
        initialize: function(k) {
            k = k || {};
            this.collection = k.collection || null;
            if (this.collection !== null) {
                this.collection.once("reset", this.renderTemplate, this);
                this.collection.on("reset", this.setManagementLink, this)
            }
        },
        dispose: function() {
            if (this.collection !== null) {
                this.collection.off("reset", this.renderTemplate);
                this.collection.off("reset", this.setManagementLink)
            }
        },
        render: function(k) {
            if (this.collection !== null) {
                $(k).append(this.el)
            }
        },
        renderTemplate: function() {
            var k = this;
            switch (i.Data.AssociationId) {
                case i.Us.GroupTypes.Academics.id:
                    k.managementLink = this.options.editAccess && (p3.Data.Context.findByTaskId(i.Us.GroupTypes.Academics.memberEdit) || p3.Data.Context.findByTaskId(i.Us.GroupTypes.Academics.ownerEdit));
                    break;
                case i.Us.GroupTypes.Athletics.id:
                    k.managementLink = this.options.editAccess && (p3.Data.Context.findByTaskId(i.Us.GroupTypes.Athletics.memberEdit) || p3.Data.Context.findByTaskId(i.Us.GroupTypes.Athletics.ownerEdit));
                    break;
                case i.Us.GroupTypes.Communities.id:
                    k.managementLink = this.options.editAccess && (p3.Data.Context.findByTaskId(i.Us.GroupTypes.Communities.memberEdit) || p3.Data.Context.findByTaskId(i.Us.GroupTypes.Communities.ownerEdit));
                    break;
                case i.Us.GroupTypes.Activities.id:
                    k.managementLink = this.options.editAccess && (p3.Data.Context.findByTaskId(i.Us.GroupTypes.Activities.memberEdit) || p3.Data.Context.findByTaskId(i.Us.GroupTypes.Activities.ownerEdit));
                    break;
                case i.Us.GroupTypes.Advisories.id:
                    k.managementLink = this.options.editAccess && (p3.Data.Context.findByTaskId(i.Us.GroupTypes.Advisories.memberEdit) || p3.Data.Context.findByTaskId(i.Us.GroupTypes.Advisories.ownerEdit));
                    break;
                case i.Us.GroupTypes.Dorms.id:
                    k.managementLink = this.options.editAccess && (p3.Data.Context.findByTaskId(i.Us.GroupTypes.Dorms.memberEdit) || p3.Data.Context.findByTaskId(i.Us.GroupTypes.Dorms.ownerEdit));
                    break;
                default:
                    k.managementLink = undefined
            }
            p3.fT(k.template, function(l) {
                k.$el.html(l({
                    memberCount: (k.collection.length),
                    managementLink: typeof k.managementLink === "object" ? k.managementLink.TaskId : undefined,
                    missingAssignmentInd: k.options.missingAssignmentInd,
                    sectionId: k.options.sectionId,
                    leadSectionId: k.options.leadSectionId,
                    hasComposeAccess: k.options.hasComposeAccess,
                    isTeacher: k.options.isTeacher,
                    isCommunityGroup: k.options.isCommunityGroup,
                    associationId: i.Data.AssociationId
                }));
                k.setManagementLink();
                k.options.viewContainers.rosterReport = k.$("#roster-reports");
                k.Containers = {
                    termPicker: k.$("#term-picker")
                };
                p3.rV(new i.Vs.TermPicker({
                    leadSectionId: k.options.leadSectionId,
                    sectionId: k.options.sectionId
                }), k.Containers.termPicker, true)
            })
        },
        doSearchEnter: function(k) {
            if (k.keyCode === 13) {
                this.doSearch(k)
            }
        },
        doSearch: function(l) {
            var k = $(l.currentTarget),
                m;
            if (k.length > 0) {
                m = $("#rosterSearchField").val() || k.val();
                if (m === "") {
                    this.collection.searchTerm = undefined
                } else {
                    this.collection.searchTerm = m
                }
                $("#RosterCardContainer").trigger("doSearch")
            }
        },
        doManageRoster: function(k) {
            if (i.Data.AssociationId !== 3) {
                var l = new i.Vs.ManageRosterView({
                    sectionId: this.options.sectionId,
                    roster: this.collection,
                    durationId: this.options.durationId,
                    buildingId: this.options.buildingId
                });
                k.preventDefault();
                k.stopPropagation();
                p3.rV(l, p3.Layout.Containers.Modal, true);
                p3.showModal(p3.Layout.Containers.Modal)
            }
        },
        doMissingAssignment: function(k) {
            var l = this;
            k.preventDefault();
            k.stopPropagation();
            a.Us.showAdvisorMissingAssignmentList(l.options.sectionId)
        },
        sendMessage: function(k) {
            i.Us.SendMessage(k, this);
            return false
        },
        changeTermPicker: function(k) {
            this.options.sectionId = $(k.currentTarget).val();
            this.collection.sectionId = this.options.sectionId;
            this.collection.fetch();
            this.trigger("termChange", this.options.sectionId)
        },
        setManagementLink: function() {
            if (typeof this.managementLink === "object") {
                this.$("#rosterManageButton").prop("href", "/podium/default.aspx?t=" + this.managementLink.TaskId + "&pk=" + this.options.sectionId)
            }
            $("#roster-count").html(this.collection.length)
        }
    });
    i.Vs.TermPicker = Bb.View.extend({
        tagName: "select",
        className: "form-control input-medium mr-5",
        attributes: {
            id: "roster-term-picker"
        },
        initialize: function(k) {
            this.collection = new i.Cs.SectionTerms();
            this.$el.hide();
            this.collection.fetch({
                data: {
                    leadSectionId: this.options.leadSectionId
                }
            });
            this.listenTo(this.collection, "reset", this.renderTemplate)
        },
        render: function(k) {
            $(k).append(this.el)
        },
        renderTemplate: function(k) {
            var l = this;
            if (k.length > 0) {
                k.each(function(m) {
                    this.$el.append($("<option>", {
                        value: m.get("Id")
                    }).html(m.get("Duration").Name + " " + m.get("Duration").ShortDescription))
                }, this);
                this.$el.show().val(this.options.sectionId || this.options.leadSectionId)
            } else {
                this.remove()
            }
            l.$el.css("width", "auto").css("margin-top", "3px")
        }
    });
    i.Vs.Card = Bb.View.extend({
        template: "roster/roster.card.template.html",
        className: "span4 col-md-4",
        events: {
            "click .user-relationships-initial": "displayRelationships",
            "click .learning-profiles": "displayLearningProfiles",
            'click [data-action="schedule"]': "openSchedule"
        },
        initialize: function(k) {
            k = k || {};
            if (_.isUndefined(k.isOwner)) {
                this.options.isOwner = 0
            }
            if (_.isUndefined(k.associationId)) {
                this.options.associationId = -1
            }
            this.model = k.model || undefined
        },
        render: function(k) {
            $(k).append(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var w = this,
                s = p3.Data.Context.getSelectedPersona().Id,
                r = (s == 3 || s == 5 || s == 20) && !w.model.get("teacherType"),
                l = f.Us.hasComposeAccess() && p3.Data.SchoolContext.get("SchoolInfo").IndividualMessageEnabled,
                t = (w.model.get("homePhone") !== undefined || w.model.get("wireless") !== undefined),
                k = "",
                n = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.COMMENT),
                m = ((w.options.isOwner == 1) && (w.options.associationId == 9)),
                v = p3.Config.PhotonForUserPhotoUrl + w.model.get("userPhotoLarge"),
                u = w.model.get("photoEditSettings"),
                q = typeof w.model.get("gradYear") === "string" ? w.model.get("gradYear").substring(2, 4) : undefined,
                x = p3.Data.Context.findByTaskId(53758),
                p = w.model.get("NumIconForms") > 0 && w.model.get("NumForms") ? 0 : 1,
                o = w.model.get("NumViewableForms") > 0 && w.model.get("NumForms") ? 0 : 1;
            if (w.model.get("addressLine1")) {
                k = "<div>" + w.model.get("addressLine1");
                if (w.model.get("addressLine2")) {
                    k += "</div><div>" + w.model.get("addressLine2");
                    if (w.model.get("addressLine3")) {
                        k += "</div><div>" + w.model.get("addressLine3")
                    }
                }
            }
            if (w.model.get("city")) {
                if (w.model.get("addressLine1")) {
                    k += "</div><div>"
                } else {
                    k = "<div>"
                }
                k += w.model.get("city")
            }
            if (w.model.get("state")) {
                if (w.model.get("city") || w.model.get("addressLine1")) {
                    k += ", "
                }
                if (k === "") {
                    k = "<div>"
                }
                k += w.model.get("state")
            }
            if (w.model.get("zip")) {
                k += " " + w.model.get("zip")
            }
            if (k.length > 0) {
                k += "</div>"
            }
            if (p3.Data.Context.findByTaskId(53394)) {
                b(w.model)
            }
            p3.fT(w.template, function(y) {
                w.$el.html(y({
                    contact: w.model.toJSON(),
                    isTeacher: r,
                    canMessage: l,
                    disableLearningProfiles: o,
                    disableLPIcon: p,
                    phone: t,
                    address: k,
                    userThumb: w.model.get("userThumb"),
                    profilePicture: v,
                    photoEditSettings: u,
                    gYear: q,
                    canSeeCourseRequests: m,
                    canSeeOfficialNotes: n,
                    hasConduct: (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.CONDUCT) && p3.Data.Context.findByTaskId(53460)) ? true : false,
                    showPrintMedical: p3.Data.Context.getSelectedPersona().Id === 3 && !w.model.get("teacherType") && p3.Data.Context.findByTaskId(53394) && p3.Data.Context.findByTaskId(53623) && !p3.Data.Context.get("IsImpersonating"),
                    personaPath: j.Us.getSelectedPersonaAppPath(),
                    viewRequirements: x
                }));
                w.$el.find("[data-toggle='tooltip']").tooltip()
            })
        },
        displayRelationships: function(k) {
            k.preventDefault();
            var n = $(k.target).data("user-id"),
                l = new i.Cs.Relationship({}, {
                    studentId: n
                }),
                m = f.Us.hasComposeAccess() && p3.Data.SchoolContext.get("SchoolInfo").IndividualMessageEnabled && (p3.Data.Context.getSelectedPersona().Id !== 2 || (p3.Data.Context.getSelectedPersona().Id === 2 && n == p3.Data.Context.get("UserInfo").UserId));
            l.fetch({
                success: function(o) {
                    p3.rV(new i.Vs.ViewRelationshipsModal({
                        relationships: o.toJSON(),
                        showMessage: m,
                        allIds: o.map(function(p) {
                            return p.get("Id")
                        }).join(",")
                    }), p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal)
                },
                error: function() {
                    p3.displayError("Error loading relationships")
                }
            });
            return false
        },
        displayLearningProfiles: function(k) {
            k.preventDefault();
            var l = this;
            new i.Cs.LearningProfileActiveFormsByStudent().fetch({
                data: {
                    viewType: 1,
                    studentUserId: l.model.get("Id")
                }
            }).success(function(m) {
                p3.rV(new i.Vs.ViewLearningProfilesModal({
                    learningProfiles: m
                }), p3.Layout.Containers.Modal, true);
                p3.showModal(p3.Layout.Containers.Modal)
            });
            return false
        },
        openSchedule: function() {
            p3.Data.ViewAsStudent = true
        }
    });
    i.Vs.ViewRelationshipsModal = Bb.View.extend({
        template: "roster/roster.view.relationships.template.html",
        events: {
            "click .send-message": "sendMessage"
        },
        render: function(k) {
            var l = this;
            $(k).append(this.el);
            p3.fT(l.template, function(m) {
                l.$el.html(m({
                    relationships: l.options.relationships,
                    allIds: l.options.allIds,
                    showMessage: l.options.showMessage
                }))
            })
        },
        sendMessage: function(k) {
            k.preventDefault();
            i.Us.SendMessage(k, this);
            return false
        }
    });
    i.Vs.ViewLearningProfilesModal = Bb.View.extend({
        template: "roster/roster.view.learning.profiles.template.html",
        render: function(k) {
            var l = this;
            $(k).append(this.el);
            p3.fT(l.template, function(m) {
                l.$el.html(m({
                    learningProfiles: l.options.learningProfiles
                }))
            })
        }
    });
    i.Vs.DormRoster = Bb.View.extend({
        template: "roster/roster.dorm.template.html",
        events: {
            "click .resident-sort": "updateSort"
        },
        initialize: function(k) {
            k = k || {};
            if (_.isUndefined(k.isOwner)) {
                this.options.isOwner = 0
            }
            if (_.isUndefined(k.associationId)) {
                this.options.associationId = -1
            }
        },
        render: function(k) {
            $(k).append(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var p = this,
                n = p3.Data.Context.getSelectedPersona().Id,
                m = (n == 3 || n == 5 || n == 20),
                k = f.Us.hasComposeAccess() && p3.Data.SchoolContext.get("SchoolInfo").IndividualMessageEnabled,
                l = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.COMMENT),
                o;
            if (p.options.residents.length > 0) {
                p.options.residents = _.sortBy(p.options.residents, function(q) {
                    switch (i.Data.DormSort) {
                        case "boarding":
                            o = q.boarding;
                            break;
                        case "roomSort":
                            if (i.Data.RoomsNumeric) {
                                o = parseInt(q.roomSort, 10)
                            } else {
                                o = q.roomSort
                            }
                            break;
                        default:
                            o = q.userSort;
                            break
                    }
                    return o
                });
                if (i.Data.DormSortDesc) {
                    p.options.residents.reverse()
                }
            }
            p3.fT(p.template, function(q) {
                p.$el.html(q({
                    residents: p.options.residents,
                    owners: p.options.owners,
                    isTeacher: m,
                    canMessage: k,
                    canSeeOfficialNotes: l,
                    schoolId: p3.Data.SchoolContext.attributes.SchoolInfo.SchoolId,
                    Sort: i.Data.DormSort,
                    SortDesc: i.Data.DormSortDesc,
                    hasConduct: (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.CONDUCT)) ? true : false
                }));
                p.$el.find(".btn").tooltip()
            })
        },
        updateSort: function(l) {
            var n = this,
                k = $(l.currentTarget),
                m = k.data("sort");
            if (m !== undefined) {
                if (m === i.Data.DormSort) {
                    i.Data.DormSortDesc = !i.Data.DormSortDesc
                } else {
                    i.Data.DormSortDesc = false
                }
                i.Data.DormSort = m;
                n.renderTemplate()
            }
            l.preventDefault()
        }
    });
    i.Vs.ManageRosterView = Bb.View.extend({
        template: "roster/roster.manage.template.html",
        events: {
            "click #rosterManageSave": "doSave",
            changehead: "doChangeHead"
        },
        initialize: function() {
            this.facultyRoles = new i.Cs.FacultyRoles();
            this.groupOwnerRoles = new i.Cs.GroupOwnerRoles();
            this.rooms = new i.Cs.Rooms();
            if (!_.isUndefined(this.options) && this.options.sectionId > 0) {
                this.collection = new i.Cs.ManageMembers();
                this.collection.on("reset", this.renderItems, this)
            }
            this.roster = this.options.roster || undefined;
            this.facultyRoles.fetch({
                data: {
                    associationId: i.Data.AssociationId
                }
            });
            this.groupOwnerRoles.fetch({
                data: {
                    associationId: i.Data.AssociationId
                }
            });
            if (i.Data.AssociationId === 7) {
                this.rooms.fetch({
                    data: {
                        buildingId: this.options.buildingId
                    }
                })
            }
        },
        dispose: function() {
            this.collection.off("reset", this.renderItems).off("reset", this.initializeTokenInput)
        },
        render: function(k) {
            $(k).append(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var o = this,
                k = false,
                l = false,
                m = "",
                n = "";
            switch (i.Data.AssociationId) {
                case i.Us.GroupTypes.Academics.id:
                    m = "Teachers";
                    n = "Students";
                    k = p3.Data.Context.findByTaskId(i.Us.GroupTypes.Academics.ownerEdit);
                    l = p3.Data.Context.findByTaskId(i.Us.GroupTypes.Academics.memberEdit);
                    break;
                case i.Us.GroupTypes.Athletics.id:
                    m = "Coaches";
                    n = "Athletes";
                    k = p3.Data.Context.findByTaskId(i.Us.GroupTypes.Athletics.ownerEdit);
                    l = p3.Data.Context.findByTaskId(i.Us.GroupTypes.Athletics.memberEdit);
                    break;
                case i.Us.GroupTypes.Communities.id:
                    break;
                case i.Us.GroupTypes.Activities.id:
                    m = "Activity Leaders";
                    n = "Students";
                    k = p3.Data.Context.findByTaskId(i.Us.GroupTypes.Activities.ownerEdit);
                    l = p3.Data.Context.findByTaskId(i.Us.GroupTypes.Activities.memberEdit);
                    break;
                case i.Us.GroupTypes.Advisories.id:
                    m = "Advisors";
                    n = "Advisees";
                    k = p3.Data.Context.findByTaskId(i.Us.GroupTypes.Advisories.ownerEdit);
                    l = p3.Data.Context.findByTaskId(i.Us.GroupTypes.Advisories.memberEdit);
                    break;
                case i.Us.GroupTypes.Dorms.id:
                    m = "Dorm Leaders";
                    n = "Residents";
                    k = p3.Data.Context.findByTaskId(i.Us.GroupTypes.Dorms.ownerEdit);
                    l = p3.Data.Context.findByTaskId(i.Us.GroupTypes.Dorms.memberEdit);
                    break;
                default:
                    m = "Owners";
                    n = "Members";
                    k = false;
                    l = false;
                    break
            }
            p3.fT(o.template, function(p) {
                o.$el.html(p({
                    canEditLeaders: k,
                    canEditMembers: l,
                    leaderTitle: m,
                    memberTitle: n
                }));
                o.collection.fetch({
                    data: {
                        sectionId: o.options.sectionId,
                        associationId: i.Data.AssociationId
                    },
                    success: function() {
                        o.nextRenderPos = 1;
                        o.collection.each(function(q) {
                            q.set("renderPos", o.nextRenderPos++)
                        });
                        o.nextRenderPos = -1;
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TokenInput, o.initializeTokenInput, {
                            context: o
                        });
                        o.collection.on("reset", o.initializeTokenInput, this)
                    }
                })
            })
        },
        renderItems: function() {
            var o = this,
                l = this.collection.getOwners(),
                n = this.collection.getMembers(),
                k = $("#leaderManagementListing"),
                m = $("#memberManagementListing");
            l.comparator = function(p) {
                return p.get("renderPos")
            };
            l.sort();
            k.html("");
            l.each(function(p) {
                if (p.get("enrolled_ind") === 1) {
                    var q = new i.Vs.ManageLeaderItem({
                        model: p,
                        OwnerTypes: o.groupOwnerRoles,
                        FacultyRoles: o.facultyRoles
                    });
                    p3.rV(q, k, false)
                }
            });
            n.comparator = function(p) {
                return p.get("renderPos")
            };
            n.sort();
            m.html("");
            n.each(function(p) {
                if (p.get("enrolled_ind") === 1) {
                    p3.rV(new i.Vs.ManageMemberItem({
                        model: p,
                        rooms: o.rooms
                    }), m, false)
                }
            });
            p3.initModalHeightTimer(p3.Layout.Containers.Modal)
        },
        initializeTokenInput: function(o) {
            o = o || {};
            var p = o.context || this,
                l = p.collection.getOwners(),
                n = p.collection.getMembers(),
                k = [],
                m = [];
            l.each(function(q) {
                if (q.get("enrolled_ind") !== 1) {
                    k.push({
                        id: q.get("user_id"),
                        name: q.get("firstname") + " " + q.get("lastname")
                    })
                }
            });
            n.each(function(r) {
                if (r.get("enrolled_ind") !== 1) {
                    var t = r.get("nickname"),
                        q = r.get("grad_year"),
                        s = r.get("lastname") + ", " + r.get("firstname") + ((t !== undefined && t !== null && t !== "") ? (" (" + t + ") ") : " ") + ((q !== "undefined" && q !== null && q !== "") ? (" '" + q.substring(2)) : (""));
                    m.push({
                        id: r.get("user_id"),
                        name: s
                    })
                }
            });
            $("#leaderLookUpBox").tokenInput(k, {
                minChars: 2,
                searchDelay: 100,
                preventDuplicates: true,
                animateDropdown: false,
                classes: {
                    tokenList: "token-input-list typeAheadFauxFocus input-medium",
                    token: "token-input-token token-input-token-hide",
                    dropdown: "token-input-dropdown"
                },
                resultsFormatter: function(q) {
                    return "<li>" + q.name + "</li>"
                },
                onAdd: function(q) {
                    p.doAddMember(q.id)
                }
            });
            $("#memberLookUpBox").tokenInput(m, {
                minChars: 2,
                searchDelay: 100,
                preventDuplicates: true,
                animateDropdown: false,
                classes: {
                    tokenList: "token-input-list typeAheadFauxFocus input-medium",
                    token: "token-input-token token-input-token-hide",
                    dropdown: "token-input-dropdown"
                },
                resultsFormatter: function(q) {
                    var r = "";
                    r += q.name;
                    return "<li>" + r + "</li>"
                },
                onAdd: function(q) {
                    p.doAddMember(q.id)
                }
            })
        },
        doAddMember: function(k) {
            var n = this,
                m = n.collection.find(function(o) {
                    return o.get("user_id") === k
                }),
                l = c.localDateTime();
            if (m !== undefined && m !== null) {
                m.set("enrolled_ind", 1);
                m.set("renderPos", n.nextRenderPos--);
                m.set("enroll_date", c.getDateString(l) + " " + c.getTimeString(l));
                if (m.get("owner_ind") && n.facultyRoles.length > 0) {
                    m.set("owner_type", n.facultyRoles.at(0).get("role"));
                    if ($(".manage-roster-owner-row").length === 0) {
                        m.set("head", true)
                    }
                }
                n.renderItems()
            }
        },
        doSave: function(k) {
            var p = this,
                m = [],
                n = [],
                l = false,
                o;
            this.$el.find(".error").removeClass("error");
            $("#manage-roster-error-messages").html("").hide();
            this.collection.each(function(q) {
                if (q.get("enrolled_ind")) {
                    var r = {
                        UserId: q.get("user_id"),
                        EnrollDate: q.get("enroll_date"),
                        DeleteInd: q.get("delete_ind") || false
                    };
                    if (q.get("owner_ind")) {
                        r.Head = q.get("head");
                        r.OwnerType = q.get("owner_type")
                    } else {
                        if (i.Data.AssociationId === 7 && q.get("room_id")) {
                            r.RoomId = q.get("room_id")
                        }
                    }
                    if (q.get("delete_ind") && !q.get("owner_ind")) {
                        r.DropType = q.get("drop_type");
                        r.DropComment = "";
                        r.DropDate = q.get("drop_date");
                        if (_.isUndefined(r.DropType) || r.DropType === null) {
                            $("#manage-roster-drop-reason-" + r.UserId).addClass("error");
                            if (n.indexOf("A reason is required in order to drop someone from the roster") === -1) {
                                n.push("A reason is required in order to drop someone from the roster")
                            }
                            l = true
                        }
                        if (_.isUndefined(r.DropDate) || r.DropDate === null || r.DropDate === "") {
                            $("#manage-roster-drop-date-" + r.UserId).addClass("error");
                            if (n.indexOf("A date is required in order to drop someone from the roster") === -1) {
                                n.push("A date is required in order to drop someone from the roster")
                            }
                            l = true
                        }
                    }
                    m.push(r)
                }
            });
            if (l) {
                _.each(n, function(q) {
                    p3.Us.InfoMessage.ErrorBox(q, "#manage-roster-error-messages", false)
                });
                if (n.length > 0) {
                    $("#manage-roster-error-messages").show()
                }
            } else {
                o = new i.Ms.ManagedRoster();
                o.save({
                    sectionId: p.options.sectionId,
                    members: m
                }, {
                    success: function() {
                        if (!_.isUndefined(p.roster)) {
                            p.roster.fetch()
                        }
                        if (typeof p.options.onSave === "function") {
                            p.options.onSave()
                        }
                        p3.Layout.Containers.Modal.modal("hide")
                    },
                    error: function() {
                        p3.Us.InfoMessage.ErrorBox("An error was encountered while trying to save the roster changes.", "#manage-roster-error-messages", false);
                        $("#manage-roster-error-messages").show()
                    }
                })
            }
        },
        doChangeHead: function(k) {
            var l = this.collection.find(function(m) {
                return m.get("user_id") === k.userId
            });
            if (l !== undefined && l !== null) {
                l.set("head", false)
            }
        }
    });
    i.Vs.ManageLeaderItem = Bb.View.extend({
        template: "roster/roster.manage.leader.item.template.html",
        events: {
            "click .btn-approve": "toggleHead",
            "click .btn-denied": "toggleDelete",
            "change .manage-roster-owner-type-select": "updateOwnerType"
        },
        tagName: "tr",
        initialize: function() {
            this.OwnerTypes = this.options.OwnerTypes;
            this.FacultyRoles = this.options.FacultyRoles
        },
        render: function(k) {
            var l = this;
            $(k).append(l.el);
            l.$el.data("userId", l.model.get("user_id"));
            p3.fT(l.template, function(m) {
                l.$el.html(m({
                    model: l.model.toJSON(),
                    leaderType: l.FacultyRoles.toJSON(),
                    OwnerRoles: l.OwnerTypes.toJSON()
                }))
            })
        },
        toggleHead: function(l) {
            var k = $("#leaderManagementListing .btn-approve.active"),
                m;
            if (k.length) {
                m = k.closest("tr").data("userId");
                k.removeClass("active");
                if (m > 0) {
                    this.$el.trigger({
                        type: "changehead",
                        userId: m
                    })
                }
            }
            this.model.set("head", !$(l.currentTarget).hasClass("active"))
        },
        toggleDelete: function(k) {
            this.model.set("delete_ind", !$(k.currentTarget).hasClass("active"))
        },
        updateOwnerType: function(k) {
            this.model.set("owner_type", $(k.currentTarget).val())
        }
    });
    i.Vs.ManageMemberItem = Bb.View.extend({
        template: "roster/roster.manage.member.item.template.html",
        events: {
            "click .btn-denied": "showDelete",
            "change .date-picker": "setDropDate",
            "click .manage-roster-drop-type": "setDropType",
            "change .room-dd": "setRoomId"
        },
        tagName: "tr",
        dispose: function() {
            this.$el.find(".collapse").off("hidden")
        },
        render: function(k) {
            var l = this;
            $(k).append(this.el);
            l.$el.data("userId", l.model.get("user_id"));
            if (l.model.get("grad_year") !== undefined && l.model.get("grad_year") !== null && l.model.get("grad_year").length === 4) {
                l.model.set("gradYearShort", l.model.get("grad_year").substring(2))
            }
            p3.fT(l.template, function(m) {
                l.$el.html(m({
                    model: l.model.toJSON(),
                    date: c.getDateString(c.localDateTime()),
                    rooms: l.options.rooms.toJSON(),
                    association: i.Data.AssociationId
                }));
                d.Us.initialize(".date-picker", {
                    changeMonth: true,
                    changeYear: true
                });
                l.$el.find(".collapse").on("hidden", function(n) {
                    n.stopPropagation()
                })
            })
        },
        showDelete: function(k) {
            this.model.set("delete_ind", !$(k.currentTarget).hasClass("active"));
            $("#delete-view-" + $(k.currentTarget).data("userId")).toggle();
            if (this.model.get("drop_date") === undefined || this.model.get("drop_date") === null) {
                this.model.set("drop_date", c.getDateString(c.localDateTime()))
            }
        },
        setDropDate: function(k) {
            this.model.set("drop_date", $(k.currentTarget).val())
        },
        setDropType: function(m) {
            var n = this,
                l = $(m.currentTarget),
                k = n.$el.find(".manage-roster-drop-details");
            if (l.attr("disabled") === undefined) {
                l.siblings().removeClass("active");
                if (l.hasClass("active")) {
                    l.removeClass("active");
                    this.model.set("drop_type", null);
                    k.collapse("hide")
                } else {
                    l.addClass("active");
                    this.model.set("drop_type", l.data("dropType"));
                    if (!k.hasClass("in")) {
                        k.collapse("show")
                    }
                }
                this.model.set("delete_ind", l.hasClass("active"));
                switch (this.model.get("drop_type")) {
                    case 0:
                        l.parent().siblings(".roster-drop-reason-note").html("Note: this option will Remove the Course Record").show();
                        break;
                    case 2:
                        l.parent().siblings(".roster-drop-reason-note").html("Note: this option will Leave the Course Record").show();
                        break;
                    default:
                        l.parent().siblings(".roster-drop-reason-note").html("").hide();
                        break
                }
            }
        },
        setRoomId: function(k) {
            if ($(k.currentTarget).val() === "0") {
                this.model.set("room_id", null)
            } else {
                this.model.set("room_id", parseInt($(k.currentTarget).val(), 10))
            }
        },
        doBeginDateEdit: function(l) {
            var k = $(l.currentTarget);
            k.children("span").hide();
            k.children("input").show().focus()
        },
        doEndDateEdit: function(m) {
            var k = $(m.currentTarget),
                l;
            if (k.length > 0) {
                l = c.getDate(k.val());
                this.model.set("enroll_date", c.getDateString(l) + " " + c.getTimeString(l));
                k.hide();
                k.siblings("span").html(c.getDateString(l));
                k.siblings("span").show()
            }
        }
    });
    Hb.registerHelper("rosterOutput", function(r, n, k) {
        var o = p3.Data.Context.getSelectedPersona().Id == 3 || p3.Data.Context.getSelectedPersona().Id == 5 || p3.Data.Context.getSelectedPersona().Id == 20,
            l = false,
            s = "",
            q = '<div class="clear">',
            m, u, t, p;
        for (m = 0; m < r.length; m++) {
            l = false;
            if (m % 3 == 0) {
                if (m > 0) {
                    q += "</ul>"
                }
                q += '<ul class="thumbnails">'
            }
            q += '<li class="span4 col-md-4"><div class="rosterHeader">';
            if (r[m].teacherType) {
                q += '<div class="teacherheader"><h6 class="teacherheader-text test">' + r[m].teacherType + "</h6></div>"
            }
            q += '</div><div class="contactWell"><div class="container row-fluid" style="width:92%;"><div class="row" style="width:100%;margin-left:10px;"><div class="span12 col-md-12"><div class="container row-fluid"><div class="row">';
            if (r[m].userThumb) {
                q += '<div class="span2 col-md-2"><img class="imgNice" src="';
                q += p3.Config.FtpImagePath;
                q += "user/";
                q += r[m].userThumb;
                q += '"></div>';
                q += '<div class="span9 col-md-9">';
                q += '<div class="margin-left-20"><h3>'
            } else {
                q += '<div class="span11 col-md-11">';
                q += "<div><h3>"
            }
            if (r[m].nickName) {
                q += r[m].nickName
            } else {
                q += r[m].firstName
            }
            q += " ";
            q += r[m].lastName;
            if (r[m].gradYear) {
                q += " '";
                q += r[m].gradYear.slice(2)
            }
            q += "</h3>";
            q += '<p class="contactCardP">';
            if (r[m].email) {
                if (r[m].emailBad == "Yes") {
                    q += r[m].email
                } else {
                    q += '<a href="mailto:';
                    q += r[m].email;
                    q += '">';
                    q += r[m].email;
                    q += "</a>"
                }
                q += "<br />";
                l = true
            }
            if (r[m].state) {
                s = r[m].state
            } else {
                if (r[m].province) {
                    s = r[m].province
                } else {
                    s = ""
                }
            }
            if (r[m].addressLine1 || r[m].city || s) {
                if (r[m].addressLine1) {
                    q += r[m].addressLine1
                }
                if (r[m].addressLine2) {
                    q += " ";
                    q += r[m].addressLine2
                }
                if (r[m].addressLine3) {
                    q += " ";
                    q += r[m].addressLine3
                }
                if (r[m].city) {
                    if (r[m].addressLine1 || r[m].addressLine2) {
                        q += ", "
                    }
                    q += r[m].city
                }
                if (s) {
                    if (r[m].city) {
                        q += ", "
                    }
                    q += s
                }
                if (r[m].zip) {
                    q += " ";
                    q += r[m].zip
                }
                q += "<br />";
                l = true
            }
            if (r[m].homePhone) {
                q += "H: ";
                q += r[m].homePhone;
                q += " ";
                l = false
            }
            if (r[m].wireless) {
                q += "C: ";
                q += r[m].wireless;
                l = false
            }
            if (r[m].hasRelationships == 1) {
                if (!l) {
                    q += "<br />"
                }
                q += '<a class="btn btn-default user-relationships-initial hidden-mobile-card" href="#';
                q += r[m].Id;
                q += '">View Relationships</a>'
            }
            q += "</p></div></div>";
            q += '<div class="span1 col-md-1">';
            if (f.Us.hasComposeAccess() && p3.Data.SchoolContext.get("SchoolInfo").IndividualMessageEnabled) {
                if ((p3.Data.Context.getSelectedPersona().Id === 1 && r[m].teacherType !== null) || p3.Data.Context.getSelectedPersona().Id !== 1) {
                    q += '<a data-toggle="modal" href="#" rel="tooltip" data-original-title="Send Message" ';
                    if (o && !r[m].teacherType) {
                        q += 'class="btn btn-default send-message contact-card-teacher-right-btn" '
                    } else {
                        q += 'class="btn btn-default send-message contact-card-right-btn" '
                    }
                    q += 'data-user-id="' + $.trim(r[m].Id) + '"> <i class="p3icon-message"></i></a>'
                }
            }
            if (r[m].NumForms == 1) {
                u = j.Us.getUrlById(1691, "pk=393&__pd=gm_fv&ext=pdf&sid=" + r[m].Id + "&fiid=" + r[m].FormInstanceId);
                q += '<a target="_blank" href="' + u + '" rel="tooltip" ';
                q += ' class="btn btn-default lp" style="margin-left:5px;"';
                q += 'data-original-title="Profile: ' + r[m].FormName + '"> <i class="p3icon-learningProfile"></i></a>'
            }
            if (r[m].NumForms > 1) {
                q += '<span id="LP_' + r[m].Id + '"></span>';
                i.Us.LearningProfileButton(r[m], m)
            }
            t = r[m].Id;
            if (o && !r[m].teacherType) {
                g.Data.ShowBackButton = true;
                p = '<li><a href="#profile/' + t + '/progress"><i class="p3icon-progress"></i> Progress</a> </li>';
                p += '<li><a href="#profile/' + t + '/schedule"><i class="p3icon-schedule"></i> Schedule</a></li>';
                p += '<li><a href="#profile/' + t + '/assignments"><i class="p3icon-assignments"></i> Assignments</a></li>';
                p += '<li><a href="#officialnote/history/' + t + '"><i class="p3icon-officalNote"></i> Official Notes</a></li>';
                if ((n == 1) && (k == 9)) {
                    p += '<li><a href="#profile/' + t + '/courserequest"><i class="p3icon-courseRequest"></i> Course Request</a></li>'
                }
                p += '<li><a href="#profile/' + t + '/contactcard""><i class="p3icon-contactCard"></i> Contact Card</a></li>';
                if ((p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.CONDUCT)) && (p3.Data.Context.findByTaskId(53460))) {
                    p += '<li><a href="#profile/' + t + '/conduct""><i class="p3icon-contactCard"></i> Conduct</a></li>'
                }
                p += "</ul>";
                q += '<div class="btn-group contact-card-right-btn-group hidden-mobile-card">';
                q += '<button class="btn btn-default dropdown-toggle contact-card-right-btn" data-toggle="dropdown" rel="tooltip" data-original-title="Profile"><i class="p3icon-contactCard"></i> <span class="caret"></span></button>';
                q += '<ul class="dropdown-menu">' + p;
                q += "</div>";
                q += '<button class="btn btn-default contact-card-right-btn visible-mobile-card" data-toggle="collapse" data-target="#user-profile-menu-' + t + '"><i class="p3icon-contactCard"></i> <span class="caret"></span></button>';
                q += '<ul id="user-profile-menu-' + t + '" class="collapse visible-mobile-card">' + p
            } else {
                q += '<a rel="tooltip" class="btn btn-default btn-contact-card" href="#profile/' + t + '/contactcard" data-original-title="Contact Card"> <i class="p3icon-contactCard"></i></a>'
            }
            if (r[m].hasRelationships == 1) {
                if (!l) {
                    q += '<br class="hidden-mobile-card" />'
                }
                q += '<a class="btn btn-default user-relationships-initial visible-mobile-card" href="#';
                q += r[m].Id;
                q += '">View Relationships</a>'
            }
            q += "</div>";
            q += "</div></div></div></div></div></div>";
            if (r[m].hasRelationships == 1) {
                q += '<div style="display:none;" id="relate_region_';
                q += r[m].Id;
                q += '"></div>'
            }
            q += "</li>"
        }
        if (r.length > 0) {
            q += "</ul></div><br />"
        }
        return new Hb.SafeString(q)
    });
    i.Us.LearningProfileButton = function(n, k) {
        var m = "",
            l = new i.Cs.LearningProfileActiveFormsByStudent(),
            o = true;
        if (o) {
            m = "&nbsp;&nbsp;"
        }
        setTimeout(function() {
            l.fetch({
                data: {
                    viewType: 2,
                    studentUserId: n.Id
                },
                error: function() {
                    p3.displayError("Error loading Learning Profiles")
                },
                success: function(p) {
                    var r, s, q = o ? "left" : "bottom";
                    if (p.length > 0) {
                        if (p.length === 1) {
                            r = p.models[0];
                            s = j.Us.getUrlById(1691, "pk=393&__pd=gm_fv&ext=pdf&sid=" + r.get("StudentUserId") + "&fiid=" + r.get("FormInstanceId"));
                            m = m + '<a class="btn btn-default lp" rel="tooltip" data-original-title="Profile: ' + r.get("FormName") + '" style="margin-' + q + ':5px;" href="' + s + '" target="_blank"><i class="p3icon-learningProfile"></i></a>'
                        } else {
                            m += '<div class="btn-group contact-card-right-btn-group lp" rel="tooltip" data-original-title="Learning profiles" style="margin-' + q + ': 5px;margin-right:5px;"><button class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown"><i class="p3icon-learningProfile">&nbsp;</i><span class="caret"></span></button><ul class="dropdown-menu">';
                            p.each(function(t) {
                                s = j.Us.getUrlById(1691, "pk=393&__pd=gm_fv&ext=pdf&sid=" + t.get("StudentUserId") + "&fiid=" + t.get("FormInstanceId"));
                                m += '<li><a target="_blank" href="' + s + '">Profile: ' + t.get("FormName") + "</a></li>"
                            });
                            m += "</ul></div>"
                        }
                        $("#LP_" + n.Id).html(m);
                        $(".lp").tooltip()
                    }
                }
            })
        }, (k * 100))
    };
    i.Us.SendMessage = function(l, u) {
        var r = $(l.currentTarget),
            p = p3.Data.SchoolContext.get("SchoolInfo"),
            o = (p.BulkEmailEnabled && p.BulkMessageEnabled) ? 2 : ((p.BulkEmailEnabled && !p.BulkMessageEnabled) ? 1 : 0),
            s, m, n, q, k;
        if (r !== undefined) {
            s = $(r).data("messageType");
            m = $(r).data("userId");
            if (s === undefined && typeof m === "number") {
                i.Us.ComposeUserMessage(m, false, {})
            } else {
                if (s === undefined && typeof m === "string") {
                    n = m.split(",");
                    if (n.length > 0) {
                        i.Us.ComposeUserMessage(n, false, {})
                    }
                } else {
                    if (typeof s === "number") {
                        q = parseInt(u.options.sectionId, 10);
                        k = i.Data.AssociationId + "_";
                        if (typeof q === "number") {
                            switch (s) {
                                case i.Us.MessageType.Both:
                                    if (i.Data.AssociationId == 3) {
                                        i.Us.ComposeUserMessage([k + q + "_1", k + q + "_4"], true, {
                                            mode: o,
                                            type: f.Enum.bulkType.all,
                                            sectionId: u.options.leadSectionId
                                        })
                                    } else {
                                        if (i.Data.AssociationId === 7) {
                                            i.Us.ComposeUserMessage([k + q + "_8", k + q + "_16", k + q + "_32", k + q + "_64", k + q + "_4"], true, {
                                                mode: o,
                                                type: f.Enum.bulkType.all,
                                                sectionId: q,
                                                assoc: 7
                                            })
                                        } else {
                                            i.Us.ComposeUserMessage([k + q + "_1", k + q + "_2", k + q + "_4"], true, {
                                                mode: o,
                                                type: f.Enum.bulkType.all,
                                                sectionId: q
                                            })
                                        }
                                    }
                                    break;
                                case i.Us.MessageType.Parents:
                                    if (i.Data.AssociationId === 7) {
                                        i.Us.ComposeUserMessage([k + q + "_16", k + q + "_64"], true, {
                                            mode: o,
                                            type: f.Enum.bulkType.parent,
                                            sectionId: q,
                                            assoc: 7
                                        })
                                    } else {
                                        i.Us.ComposeUserMessage([k + q + "_2"], true, {
                                            mode: o,
                                            type: f.Enum.bulkType.parent,
                                            sectionId: q
                                        })
                                    }
                                    break;
                                case i.Us.MessageType.Students:
                                    if (i.Data.AssociationId == 3) {
                                        i.Us.ComposeUserMessage([k + q + "_1"], true, {
                                            mode: o,
                                            type: f.Enum.bulkType.student,
                                            sectionId: u.options.leadSectionId
                                        })
                                    } else {
                                        if (i.Data.AssociationId === 7) {
                                            i.Us.ComposeUserMessage([k + q + "_8", k + q + "_32"], true, {
                                                mode: o,
                                                type: f.Enum.bulkType.student,
                                                sectionId: q,
                                                assoc: 7
                                            })
                                        } else {
                                            i.Us.ComposeUserMessage([k + q + "_1"], true, {
                                                mode: o,
                                                type: f.Enum.bulkType.student,
                                                sectionId: q
                                            })
                                        }
                                    }
                                    break;
                                default:
                                    break
                            }
                        }
                    }
                }
            }
        }
    }
}(p3.module("LMS/roster")));
(function(a) {
    a.Ms.RssReader = Bbm.extend({
        idAttribute: "ReaderId",
        url: function() {
            return aP + "rssreader/forsection/?format=json&contextValue=" + this.get("leadSectionId") + "&contextLabelId=" + this.get("contextLabelId")
        }
    });
    a.Ms.RssReaderSave = Bbm.extend({
        idAttribute: "ReaderId",
        url: function() {
            var b;
            if (this.get("ReaderId") == 0) {
                b = aP + "rssreader/create/?format=json"
            } else {
                b = aP + "rssreader/update/?format=json"
            }
            return b
        }
    });
    a.Ms.RssReaderDelete = Bbm.extend({
        idAttribute: "ReaderId",
        url: function() {
            return aP + "rssreader/delete/?format=json&readerId=" + this.get("ReaderId")
        }
    });
    a.Vs.RssReaderView = Bb.View.extend({
        template: "classpage/rssreader.template.html",
        events: {
            "click #edit_reader": "openEditModal",
            "click #delete_reader": "openDeleteModal"
        },
        renderTemplate: function(d) {
            var e = this,
                c = e.options.reader,
                b = false;
            if (c.get("Url")) {
                b = true
            }
            p3.fT(e.template, function(f) {
                e.$el.html(f({
                    reader: c,
                    haveData: b,
                    viewMode: !e.options.editMode,
                    canEdit: e.options.canEdit,
                    customHeader: e.options.customHeader
                }));
                if (d) {
                    $("#edit_reader").show();
                    if (b) {
                        $("#delete_reader").show()
                    }
                }
                if (b) {
                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FeedEk, function() {
                        $("#rss_results").FeedEk({
                            FeedUrl: c.get("Url"),
                            MaxCount: c.get("NumberOfItems"),
                            ShowDesc: true,
                            ShowPubDate: true,
                            TitleLinkTarget: "_blank",
                            DateFormat: "MM/DD/YYYY"
                        })
                    })
                }
            })
        },
        render: function(b) {
            $(b).append(this.el)
        },
        openEditModal: function() {
            var b = this;
            p3.rV(new a.Vs.RssReaderEditView({
                reader: b.options.reader,
                leadSectionId: b.options.leadSectionId,
                contextLabelId: b.options.contextLabelId,
                parentView: b
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        },
        openDeleteModal: function() {
            var b = this;
            p3.showConfirm("Delete Rss Feed", "Warning: Once you hit confirm there is no undo button. Are you really sure you want to delete this forever?", null, function() {
                var c = new a.Ms.RssReaderDelete({
                    ReaderId: b.options.reader.get("ReaderId")
                });
                c.destroy({
                    error: function() {
                        p3.displayError("Error deleting rss Feed")
                    },
                    success: function() {
                        a.Us.refreshReader(true, b.options.leadSectionId, b, b.options.contextLabelId)
                    }
                })
            });
            return false
        }
    });
    a.Vs.RssReaderEditView = Bb.View.extend({
        template: "rssreader/rssreader.edit.template.html",
        events: {
            "click #btnSave": "saveReader",
            "click #btnSaveAdd": "saveReader",
            "change #txtUrl": "removeUrlValidation",
            "change #txtNumber": "removeNumberValidation"
        },
        renderTemplate: function() {
            var b = this;
            p3.fT(b.template, function(c) {
                b.$el.html(c({
                    reader: b.options.reader.toJSON()
                }))
            })
        },
        render: function(b) {
            var c = this;
            c.renderTemplate();
            $(b).append(c.el)
        },
        saveReader: function(b) {
            var f = this,
                e = true,
                c, d;
            $("#btnSave").button("loading");
            if ($("#txtUrl").val().length === 0) {
                $(".rss-url-group").addClass("error");
                $("#btnSave").button("reset");
                e = false
            }
            if ($("#txtNumber").val().length === 0 || isNaN($("#txtNumber").val())) {
                $(".rss-num-group").addClass("error");
                $("#btnSave").button("reset");
                e = false
            }
            if (e) {
                c = 0;
                if (f.options.reader.get("ReaderId")) {
                    c = f.options.reader.get("ReaderId")
                }
                d = new a.Ms.RssReaderSave({
                    ReaderId: c,
                    contextLabelId: f.options.contextLabelId,
                    contextValue: f.options.leadSectionId,
                    Url: $("#txtUrl").val(),
                    NumberOfItems: $("#txtNumber").val()
                });
                d.save({}, {
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error saving reader")
                    },
                    success: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        a.Us.refreshReader(true, f.options.leadSectionId, f.options.parentView, f.options.contextLabelId)
                    }
                })
            }
            return false
        },
        removeUrlValidation: function(b) {
            $(".rss-url-group").removeClass("error")
        },
        removeNumberValidation: function(b) {
            $(".rss-num-group").removeClass("error")
        }
    });
    a.Us.refreshReader = function(c, d, f, b) {
        var e = new a.Ms.RssReader({
            leadSectionId: d,
            contextLabelId: b
        });
        e.fetch({
            success: function() {
                f.options.editMode = c;
                f.options.reader = e;
                f.renderTemplate(c)
            },
            error: function() {
                p3.displayError("Error loading reader")
            }
        })
    }
}(p3.module("lms/rssreader")));
(function(d) {
    var c = p3.module("shared/datepicker"),
        a = p3.module("cms/shared/content"),
        b = p3.Us.Culture,
        e = p3.module("system/shared/style");
    d.Ms.Settings = Bbm.extend({
        urlRoot: "scoreboardsettings/settingsget"
    });
    d.Ms.SettingsSave = Bbm.extend({
        urlRoot: "scoreboardsettings/settingssave"
    });
    d.Ms.NavSettings = Bbm.extend({
        idAttribute: "SchoolId",
        urlRoot: "navsettings/edit"
    });
    d.Ms.NavSettingsGet = Bbm.extend({
        idAttribute: "SchoolId",
        urlRoot: "navsettings/view"
    });
    d.Cs.AthleticScoreboard = Bbc.extend({
        initialize: function(f, g) {
            this.lookupDate = g.lookupDate;
            this.endDate = g.endDate
        },
        url: function() {
            return aP + "datadirect/DashboardScoreboardGet/?format=json&lookupDate=" + this.lookupDate + "&endDate=" + this.endDate
        },
        parse: function(g) {
            var f = [];
            if (d.Data.ViewType == 1) {
                _.each(g, function(h) {
                    var i, j = _.find(f, function(l) {
                            return l.ath_schedule_id === h.ath_schedule_id
                        }),
                        k;
                    if (j === undefined) {
                        j = h;
                        f.push(j);
                        k = b.getDate(h.schedule_date);
                        j.display_date = b.displayDate(k, "longDate");
                        if (h.news_id || h.result || h.score) {
                            j.edit = true
                        }
                    }
                    i = j.opponents;
                    if (i === undefined || i === null) {
                        i = [];
                        j.opponents = i
                    }
                    i.push({
                        name: h.name,
                        result: h.result,
                        score: h.score,
                        score_vs: h.score_vs
                    })
                })
            } else {
                f = g
            }
            return f
        }
    });
    d.Vs.LayoutView = Bb.View.extend({
        template: "scoreboard/scoreboard.layout.template.html",
        initialize: function() {
            this.Containers = {};
            if (_.isUndefined(d.Data.DateView)) {
                d.Data = {};
                d.Data.DateView = 0;
                d.Us.getRange();
                var f = new d.Ms.Settings();
                f.fetch({
                    async: false,
                    error: function() {
                        p3.displayError("Error getting settings")
                    },
                    success: function() {
                        if (f.get("DefaultGrid")) {
                            d.Data.ViewType = 0
                        } else {
                            d.Data.ViewType = 1
                        }
                        if (f.get("LogoId") > 0) {
                            d.Data.DefaultLogo = f.get("Filename")
                        } else {
                            d.Data.DefaultLogo = ""
                        }
                    }
                })
            }
        },
        render: function(f) {
            p3.setTitle("Scoreboard");
            var g = this;
            $(f).html(g.el);
            g.renderTemplate()
        },
        renderTemplate: function() {
            var f = this;
            p3.fT(f.template, function(g) {
                f.$el.html(g({}));
                f.Containers.Header = $("#score-header");
                f.Containers.Results = $("#score-results");
                f.renderHeader();
                f.renderScoreboard()
            })
        },
        renderHeader: function() {
            var g = this,
                f = new d.Vs.Header({});
            p3.rV(f, g.Containers.Header, true);
            f.on("DateRangeChanged", function() {
                g.renderScoreboard()
            });
            f.on("ViewTypeChanged", function() {
                g.renderScoreboard()
            })
        },
        renderScoreboard: function() {
            var j = this,
                i, f, h, g;
            if (d.Data.DateView == 2) {
                i = d.Data.CustomStart;
                f = d.Data.CustomEnd
            } else {
                i = d.Data.StartDate;
                f = d.Data.EndDate
            }
            h = new d.Cs.AthleticScoreboard({}, {
                lookupDate: b.getDateString(i).ApiFormat(),
                endDate: b.getDateString(f).ApiFormat()
            });
            g = new d.Vs.Scoreboard({
                parentView: j,
                scores: h
            });
            h.fetch({
                success: function() {
                    p3.rV(g, j.Containers.Results, true)
                },
                error: function() {
                    p3.displayError("Error loading scoreboard")
                }
            })
        }
    });
    d.Vs.Scoreboard = Bb.View.extend({
        template: "dashboard/dashboard.athletics.scoreboard.template.html",
        events: {},
        renderTemplate: function() {
            var h = this,
                f, g;
            if (h.collection.length > 0) {
                f = 0;
                if (d.Data.ViewType == 0) {
                    h.collection.each(function(i) {
                        if (i.get("ath_schedule_id") != f) {
                            f = i.get("ath_schedule_id");
                            g = [];
                            i.set("opponents", g);
                            i.set("haveOpponent", (i.get("sort_order") != null))
                        } else {
                            i.set("hide", true)
                        }
                        g.push({
                            name: i.get("name"),
                            result: i.get("result"),
                            score: i.get("score"),
                            score_vs: i.get("score_vs")
                        });
                        var j = b.getDate(i.get("schedule_date"));
                        i.set("display_date", b.displayDate(j, "longDate"))
                    })
                }
                if (d.Data.ViewType == 1) {
                    h.template = "scoreboard/scoreboard.list.template.html"
                }
                p3.fT(h.template, function(i) {
                    h.$el.html(i({
                        events: h.collection.toJSON(),
                        schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                        schoolName: p3.Data.SchoolContext.get("SchoolInfo").SchoolName,
                        viewOnly: true,
                        DefaultLogo: d.Data.DefaultLogo
                    }));
                    $(".btn-add").bind("click", function(j) {
                        h.showAddDialog(j)
                    });
                    $(".btn-edit").bind("click", function(j) {
                        h.showEditDialog(j)
                    })
                });
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.Isotope, function() {
                    window.setTimeout(function() {
                        $(".scoreboard-container").isotope({
                            itemSelector: ".score-container"
                        });
                        $(".scoreboard-container").imagesLoaded(function() {
                            $(".scoreboard-container").isotope({
                                itemSelector: ".score-container"
                            })
                        })
                    }, 200)
                })
            } else {
                h.$el.html('<h4 style="margin-left:10px;">There are not any scoreboard results available for the date range you have selected.</h4>')
            }
        },
        initialize: function() {
            var f = this;
            f.parentView = f.options.parentView;
            f.collection = f.options.scores
        },
        render: function(f) {
            $(f).append(this.el);
            this.renderTemplate()
        }
    });
    d.Vs.Header = Bb.View.extend({
        template: "scoreboard/scoreboard.header.template.html",
        events: {
            "click #this-week-button": "thisWeekClick",
            "click #last-week-button": "lastWeekClick",
            "click #custom-range-button": "customRangeClick",
            "click #scoreboard-list-button": "scoreboardListClick",
            "click #scoreboard-grid-button": "scoreboardGridClick",
            "click .dropdown-menu.range-dropdown": "rangeClick",
            "change #range-start-date": "setDateRange",
            "change #range-end-date": "setDateRange"
        },
        renderTemplate: function() {
            var h = this,
                g, f;
            if (d.Data.CustomStart && d.Data.CustomStart != "undefined") {
                g = b.getDateString(d.Data.CustomStart)
            }
            if (d.Data.CustomEnd && d.Data.CustomEnd != "undefined") {
                f = b.getDateString(d.Data.CustomEnd)
            }
            p3.fT(h.template, function(i) {
                h.$el.html(i({
                    dateType: d.Data.DateView,
                    viewType: d.Data.ViewType,
                    start: g,
                    end: f
                }))
            })
        },
        render: function(f) {
            $(f).append(this.el);
            this.renderTemplate();
            window.setTimeout(function() {
                c.Us.initialize(".date-input")
            }, 400)
        },
        thisWeekClick: function(f) {
            $(".scoreboard-view-item").removeClass("active");
            $("#this-week-item").addClass("active");
            d.Data.DateView = 0;
            $(".range-dropdown").hide();
            d.Us.getRange();
            this.trigger("DateRangeChanged");
            return false
        },
        lastWeekClick: function(f) {
            $(".scoreboard-view-item").removeClass("active");
            $("#last-week-item").addClass("active");
            d.Data.DateView = 1;
            $(".range-dropdown").hide();
            d.Us.getRange();
            this.trigger("DateRangeChanged");
            return false
        },
        customRangeClick: function(f) {
            if (!$("#custom-range-button").hasClass("active") && !_.isUndefined(d.Data.CustomStart) && !_.isUndefined(d.Data.CustomEnd)) {
                d.Data.DateView = 2;
                $(".scoreboard-view-item").removeClass("active");
                $("#custom-range-item").addClass("active");
                this.trigger("DateRangeChanged")
            }
            $(".range-dropdown").toggle();
            return false
        },
        scoreboardListClick: function(f) {
            $("#scoreboard-grid-item").removeClass("active");
            $("#scoreboard-list-item").addClass("active");
            d.Data.ViewType = 1;
            $(".range-dropdown").hide();
            this.trigger("ViewTypeChanged");
            return false
        },
        scoreboardGridClick: function(f) {
            $("#scoreboard-grid-item").addClass("active");
            $("#scoreboard-list-item").removeClass("active");
            d.Data.ViewType = 0;
            $(".range-dropdown").hide();
            this.trigger("ViewTypeChanged");
            return false
        },
        setDateRange: function(f) {
            var i = true,
                h, g;
            if ($("#range-start-date").val() == "") {
                i = false
            } else {
                h = b.getDate($("#range-start-date").val())
            }
            if ($("#range-end-date").val() == "") {
                i = false
            } else {
                g = b.getDate($("#range-end-date").val())
            }
            if (i) {
                $(".scoreboard-view-item").removeClass("active");
                $("#custom-range-item").addClass("active");
                d.Data.DateView = 2;
                d.Data.CustomStart = h;
                d.Data.CustomEnd = g;
                this.trigger("DateRangeChanged");
                $(".range-dropdown").hide()
            }
        },
        rangeClick: function(f) {
            f.preventDefault();
            f.stopPropagation()
        }
    });
    d.Vs.Settings = Bb.View.extend({
        template: "scoreboard/scoreboard.settings.template.html",
        events: {
            "click #btn-show-yes": "showClick",
            "click #btn-show-no": "hideClick",
            "click #btn-list-view": "listClick",
            "click #btn-grid-view": "gridClick",
            "click #btn-change-logo": "changeLogo"
        },
        renderTemplate: function() {
            var f = this;
            p3.fT(f.template, function(g) {
                f.$el.html(g({
                    DefaultGrid: f.settings.get("DefaultGrid"),
                    ShowScoreboard: f.navSettings.get("ShowScoreboard"),
                    LogoId: f.settings.get("LogoId"),
                    Filename: f.settings.get("Filename"),
                    imagePath: p3.Config.FtpImagePath + "logo/"
                }))
            })
        },
        initialize: function() {
            var f = this;
            f.getSettings();
            this.navSettings = new d.Ms.NavSettings({
                SchoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId
            });
            this.navSettings.fetch({
                async: false,
                error: function() {
                    p3.displayError("Error getting nav settings")
                }
            })
        },
        render: function(f) {
            var g = this;
            $(f).html(g.el);
            this.renderTemplate()
        },
        showClick: function(f) {
            var g = this;
            g.saveNavSettings(1)
        },
        hideClick: function(f) {
            var g = this;
            g.saveNavSettings(0)
        },
        listClick: function(f) {
            var g = this;
            g.settings.set("DefaultGrid", false);
            g.saveSettings()
        },
        gridClick: function(f) {
            var g = this;
            g.settings.set("DefaultGrid", true);
            g.saveSettings()
        },
        saveNavSettings: function(g) {
            var f = new d.Ms.NavSettings({
                SchoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                ShowScoreboard: g
            });
            f.save({}, {
                error: function() {
                    p3.displayError("Error saving nav settings.")
                }
            })
        },
        saveSettings: function() {
            this.settings.save({}, {
                error: function() {
                    p3.displayError("Error saving settings.")
                }
            })
        },
        changeLogo: function(f) {
            var i = this,
                h = new e.Cs.SchoolLogos(),
                g = new e.Ms.SchoolLogo();
            g.bind("sync", i.renderData, i);
            h.fetch({
                cache: true,
                success: function(k) {
                    p3.showModal(p3.Layout.Containers.Modal, {
                        backOnHide: false
                    });
                    var j = new d.Vs.EditLogo({
                        model: g,
                        collection: k,
                        settingsModel: i.settings,
                        layoutView: i
                    });
                    p3.rV(j, p3.Layout.Containers.Modal, true);
                    j.on("logoSaved", function() {
                        i.getSettings();
                        i.renderTemplate()
                    })
                }
            })
        },
        getSettings: function() {
            var g = this,
                f = new d.Ms.Settings();
            f.fetch({
                async: false,
                error: function() {
                    p3.displayError("Error getting settings")
                },
                success: function() {
                    var h = f.get("LogoId"),
                        i;
                    if (h < 0) {
                        h = 0
                    }
                    i = new d.Ms.SettingsSave({
                        DefaultGrid: f.get("DefaultGrid"),
                        LogoId: h,
                        Filename: f.get("Filename")
                    });
                    g.settings = i
                }
            })
        }
    });
    d.Vs.EditLogo = Bb.View.extend({
        template: "scoreboard/scoreboard.logo.edit.template.html",
        initialize: function(f) {
            var g = this;
            g.model.defaults = $.extend(true, {}, g.model.attributes);
            g.selector = g.options.selector || "name";
            Bb.Validation.bind(g, {
                forceUpdate: true,
                selector: g.selector
            })
        },
        events: {
            "click button.cancel": "cancelModel",
            "click button.save": "savePath",
            "click .logoGroup .btn": "selectLogo"
        },
        render: function(f) {
            var g = this;
            $(f).append(g.el);
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, g.initializeFileUpload, g)
            });
            g.renderData()
        },
        renderData: function() {
            var f = this;
            p3.fT(f.template, function(h) {
                var g = {};
                g.model = f.model.toJSON();
                g.collection = f.options.collection.toJSON();
                g.layoutView = f.options.layoutView;
                g.dictionaries = f.options.dictionaries;
                g.variables = f.options.variables;
                g.options = f.options;
                g.imagePath = p3.Config.FtpImagePath + "logo/";
                g.canDrag = !window.head.browser.ie;
                g.editMode = false;
                g.selectedLogo = f.options.settingsModel.get("LogoId");
                f.$el.html(h(g));
                f.setFocus();
                $(".required-indicator").tooltip()
            })
        },
        initializeFileUpload: function(f) {
            window.setTimeout(function() {
                var g = p3.Us.Enum.UploadType.JPGPNG;
                $("#fileupload").fileupload({
                    url: p3.Config.RootPath + "utilities/FileTransferHandler.ashx",
                    autoUpload: true,
                    acceptFileTypes: g.ValidExtensions,
                    dropZone: ".dragRegion",
                    add: function(i, h) {
                        var j = p3.Us.FileTools.isValidFile(g, h.files[0].name);
                        if (j) {
                            h.submit()
                        } else {
                            f.$el.find("#invalid_filetype").append(p3.Us.FileTools.validateFiles(g, h))
                        }
                    }
                }).bind("fileuploaddone", function(i, h) {
                    f.showUploadedFile(i, h)
                })
            }, 100)
        },
        showUploadedFile: function(g, f) {
            if (this.$el.find(".alert-error").length > 0) {
                this.$el.find(".alert-error").remove()
            }
            this.$el.find(".uploaded-file-region img").attr("src", "/ftpimages/pdTemp/" + f.result[0].name);
            this.$el.find("#UploadedFile").attr("data-img-val", f.result[0].name);
            this.$el.find(".uploaded-file-region").show();
            this.$el.find("#UploadedFile").val(f.files[0].name);
            $(".logoGroup .btn").removeClass("active");
            this.uploadFile = true;
            window.setTimeout(function() {
                p3.setModalHeight(p3.Layout.Containers.Modal)
            }, 100)
        },
        savePath: function(f) {
            var h = this,
                g;
            if (h.uploadFile) {
                h.saveUpload()
            } else {
                g = $(".logo-select.active").data("id");
                h.updateSettings(g)
            }
        },
        saveUpload: function() {
            var h = this,
                g = this.$el.find("#UploadedFile").attr("data-img-val"),
                f;
            h.model.set({
                ShortDescription: h.$el.find("#ShortDescription").val(),
                Type: "image/pjpe",
                FileName: h.$el.find("#UploadedFile").val(),
                DefaultLogo: false,
                DefaultSeal: false,
                BannerInd: 0,
                UploadedFile: g
            });
            if (g == undefined) {
                if ($(".modal-body").find(".alert-error").length == 0) {
                    p3.Us.InfoMessage.ErrorBox("Please select a file.", ".modal-body", false);
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                }
                h.$(".save").button("reset")
            } else {
                if (h.$el.find("#UploadedFile").val() == "") {
                    if ($(".modal-body").find(".alert-error").length == 0) {
                        f = h.$el.find("#UploadedFile");
                        f.closest("div.control-group").addClass("error");
                        f.addClass("box-validate");
                        p3.Us.InfoMessage.ErrorBox("Please enter a file name.", ".modal-body", false);
                        p3.setModalHeight(p3.Layout.Containers.Modal)
                    }
                    h.$(".save").button("reset")
                } else {
                    if (h.model.isValid(true)) {
                        h.model.save({}, {
                            success: function(i, j) {
                                if (i.get("LogoId") == 0) {
                                    if (!h.options.editMode) {
                                        h.model.clear({
                                            silent: true
                                        })
                                    }
                                    if ($(".modal-body").find(".alert-error").length == 0) {
                                        p3.Us.InfoMessage.ErrorBox("The file name for this image has already be used for one previously uploaded. Change the file name in order to upload this image.", ".modal-body", false);
                                        p3.setModalHeight(p3.Layout.Containers.Modal);
                                        h.$(".save").button("reset")
                                    }
                                } else {
                                    var k = i.get("LogoId");
                                    h.updateSettings(k)
                                }
                            },
                            error: function() {
                                p3.displayError("Error saving logo.");
                                h.$(".save").button("reset")
                            }
                        })
                    } else {
                        h.$(".save").button("reset")
                    }
                }
            }
        },
        selectLogo: function(g) {
            g.preventDefault();
            var f = $(g.currentTarget).hasClass("active");
            $(".logoGroup .btn").removeClass("active");
            if (!f) {
                $(g.currentTarget).addClass("active")
            }
        },
        cancelModel: function(f) {
            this.model.set(this.model.defaults)
        },
        updateSettings: function(f) {
            var g = this;
            g.options.settingsModel.set("LogoId", f);
            g.options.settingsModel.save({}, {
                success: function(h) {
                    g.trigger("logoSaved");
                    $("#site-modal").modal("hide");
                    p3.displaySiteMessage("Changes saved successfully.", "alert-success");
                    p3.Data.SchoolContext.fetch()
                },
                error: function() {
                    p3.displayError("Error saving logos.");
                    g.$(".save").button("reset")
                }
            })
        },
        setFocus: function() {
            $("form:first *:input[type!=hidden]:first").focus()
        }
    });
    d.Us.getRange = function() {
        if (d.Data.DateView < 2) {
            var i = b.localDateTime(),
                h, g, f;
            if (d.Data.DateView == 1) {
                i = new Date(i.setDate(i.getDate() - 7))
            }
            h = i.getDay();
            if (h == 0) {
                g = i
            } else {
                g = new Date(i.getTime());
                g = new Date(g.setDate(g.getDate() - h))
            }
            if (h == 6) {
                f = i
            } else {
                f = new Date(i.getTime());
                f = new Date(f.setDate(f.getDate() + (6 - h)))
            }
            d.Data.StartDate = g;
            d.Data.EndDate = f
        }
    };
    p3.router().route("Scoreboard", "Scoreboard", function() {
        p3.rV(new a.Vs.NewsSubNav({
            page: "scoreboard"
        }), p3.Layout.Containers.LowerNav, true);
        p3.renderMainPage(new d.Vs.LayoutView({}))
    });
    p3.router().route("ScoreboardSettings", "ScoreboardSettings", function() {
        p3.renderMainPage(new d.Vs.Settings())
    })
}(p3.module("lms/scoreboard")));
(function(n) {
    var m = p3.module("shared/task"),
        a = p3.module("cms/shared/announcement"),
        o = p3.module("cms/shared/text"),
        i = p3.module("cms/shared/link"),
        f = p3.module("cms/shared/download"),
        j = p3.module("cms/shared/media"),
        k = p3.module("cms/shared/news"),
        d = p3.Us.Culture,
        e = p3.module("shared/datepicker"),
        p = p3.module("shared/timepicker"),
        l = p3.module("shared/notification"),
        h = p3.module("cms/shared/grouppublish"),
        c = p3.module("LMS/classpage"),
        b = p3.module("LMS/Shared/AthleticsLiteScoreBoard"),
        g = p3.module("LMS/groupPageEdit");
    n.Ms.Sections = Bbm.extend({
        idAttribute: "SectionId",
        url: function() {
            return ""
        }
    });
    n.Cs.Sections = Bbc.extend({
        model: n.Ms.Sections,
        initialize: function(q, r) {
            this.sectionId = r.sectionId || 0
        },
        url: function() {
            return aP + "datadirect/SectionsForTeacher/?format=json"
        }
    });
    n.Ms.Results = Bbm.extend({
        url: function() {
            return ""
        }
    });
    n.Cs.Results = Bbc.extend({
        model: n.Ms.Results,
        initialize: function(q, r) {
            this.sectionId = r.sectionId || 0
        },
        url: function() {
            return aP + "datadirect/athleticresultsget/?format=json"
        }
    });
    n.Cs.OpponentResults = Bbc.extend({
        initialize: function(q, r) {
            this.athScheduleId = r.athScheduleId || 0
        },
        url: function() {
            return aP + "datadirect/OpponentResultsGet/?format=json"
        }
    });
    n.Ms.ResultsSave = Bbm.extend({
        url: function() {
            return aP + "athleticschedule/ResultsSave"
        }
    });
    n.Cs.Opponent = Bbc.extend({
        url: function() {
            return aP + "datadirect/athleticopponentsget/"
        }
    });
    n.Vs.TeamPageLayoutView = Bb.View.extend({
        template: "grouppage/layout.template.html",
        events: {
            "click #edit_on": "switchEditMode",
            "click #edit_off": "switchEditMode",
            "click #btn-import": "openImportDialog"
        },
        initialize: function() {
            var q = this;
            q.Containers = {};
            q.sectionId = q.options.sectionId || 0;
            q.leadSectionId = q.options.leadSectionId || 0;
            q.contentTypes = q.options.content;
            q.coachId = q.options.coachId || 0;
            q.userHasFullAccess = this.options.userHasFullAccess || 0;
            q.isOwner = this.options.isOwner || 0;
            q.isManager = this.options.isManager || 0;
            q.isEditor = false;
            q.schoolYears = new c.Cs.ExistingSchoolYears();
            q.schoolYears.fetch({
                error: function() {
                    p3.displayError("Error loading schoolYears")
                }
            });
            q.possibleOpponents = new n.Cs.Opponent();
            if (q.userHasFullAccess) {
                q.possibleOpponents.fetch({
                    error: function() {
                        p3.displayError("Error loading athletic opponents")
                    }
                })
            }
        },
        render: function(q) {
            var r = this;
            p3.fT(r.template, function(s) {
                p3.setTitle("Team Page");
                r.$el.html(s({
                    leftClass: "span6 col-md-6",
                    rightClass: "span6 col-md-6"
                }));
                $(q).html(r.el);
                r.Containers.LeftColumn = $("#left_column");
                r.Containers.RightColumn = $("#right_column");
                r.Containers.MediaContainer = $("#media_container");
                r.Containers.ManageContainer = $("#manage_container");
                $("#manage_container").hide();
                $(".nav-pills li:first").addClass("active");
                r.renderContent()
            })
        },
        renderContent: function() {
            var Z = this,
                T = 0,
                L = 0,
                O = 0,
                N = 0,
                Q = 0,
                M = 0,
                U = 0,
                S = 0,
                R = 0,
                P = 0,
                D, K, y, z, I, J, V, W, r, q, F, E, v, C, u, x, w, B, A, H, Y, t, G, X, s;
            this.contentTypes.each(function(aa) {
                y = aa.get("EditorAccess");
                switch (aa.get("ContentId")) {
                    case 2:
                        if (Z.userHasFullAccess || y) {
                            O = 2;
                            Z.isEditor = true
                        } else {
                            O = 1
                        }
                        break;
                    case 3:
                        if (Z.userHasFullAccess || y) {
                            N = 2;
                            Z.isEditor = true
                        } else {
                            N = 1
                        }
                        break;
                    case 6:
                        if (Z.userHasFullAccess || y) {
                            P = 2;
                            Z.isEditor = true
                        } else {
                            P = 1
                        }
                        break;
                    case 10:
                        if (Z.userHasFullAccess || y) {
                            L = 2;
                            Z.isEditor = true
                        } else {
                            L = 1
                        }
                        break;
                    case 31:
                        if (Z.userHasFullAccess || y) {
                            Q = 2;
                            Z.isEditor = true
                        } else {
                            Q = 1
                        }
                        break;
                    case 45:
                        if (Z.userHasFullAccess || y) {
                            R = 2;
                            Z.isEditor = true
                        } else {
                            R = 1
                        }
                        break;
                    case 71:
                        if (Z.userHasFullAccess || y) {
                            S = 2;
                            Z.isEditor = true
                        } else {
                            S = 1
                        }
                        break;
                    case 165:
                        if (Z.userHasFullAccess || y) {
                            M = 2;
                            Z.isEditor = true
                        } else {
                            M = 1
                        }
                        break;
                    case 167:
                        if (Z.userHasFullAccess || y) {
                            U = 2;
                            Z.isEditor = true
                        } else {
                            U = 1
                        }
                        break;
                    case 250:
                        if (Z.userHasFullAccess || y) {
                            T = 2;
                            Z.isEditor = true
                        } else {
                            T = 1
                        }
                        break;
                    default:
                        break
                }
            });
            K = new n.Cs.Sections({}, {
                sectionId: Z.sectionId
            });
            Z.sections = K;
            if (Z.userHasFullAccess || Z.isEditor) {
                if (Z.isOwner) {
                    z = 0
                } else {
                    if (Z.isManager) {
                        z = 1
                    } else {
                        z = 2
                    }
                }
                K.fetch({
                    async: false,
                    data: {
                        sectionId: Z.sectionId,
                        filterInd: z
                    },
                    success: function() {
                        if (K.length > 0) {
                            var aa = -1;
                            K.each(function(ab) {
                                if (ab.get("SectionId") == Z.sectionId) {
                                    ab.set("Primary", true)
                                }
                                if (ab.get("ContextLabelId") != aa) {
                                    ab.set("GroupHead", ab.get("Association"));
                                    ab.set("ShowHead", (aa == -1));
                                    aa = ab.get("ContextLabelId")
                                }
                            })
                        }
                    },
                    error: function() {
                        p3.displayError("Error loading coach sections")
                    }
                })
            }
            if (R || S) {
                I = new n.Cs.Results({}, {
                    sectionId: this.leadSectionId
                });
                J = new n.Vs.ScoreboardView({
                    editMode: false,
                    canEdit: (Z.userHasFullAccess || R == 2),
                    showScores: R,
                    showStats: S,
                    sections: K,
                    possibleOpponents: Z.possibleOpponents
                });
                J.parentView = Z;
                J.collection = I;
                p3.rV(J, this.Containers.LeftColumn, false);
                I.fetch({
                    data: {
                        sectionId: I.sectionId
                    },
                    success: function() {
                        J.renderTemplate()
                    },
                    error: function() {
                        p3.displayError("Error loading athletic results")
                    }
                })
            } else {
                $("#left_column").html("&nbsp")
            }
            this.scoreboardView = J;
            if (T) {
                V = new o.Cs.Text({}, {
                    sectionId: this.sectionId,
                    leadSectionId: this.leadSectionId,
                    contextLabelId: 3
                });
                W = new o.Vs.TextView({
                    collection: V,
                    contextLabelId: 3,
                    canEdit: (Z.userHasFullAccess || T == 2)
                });
                p3.rV(W, this.Containers.RightColumn, false);
                V.fetch({
                    success: function() {
                        W.renderTemplate(false)
                    },
                    error: function() {
                        p3.displayError("Error loading text")
                    }
                })
            }
            if (L) {
                q = new a.Cs.Announcement({}, {
                    sectionId: this.sectionId,
                    leadSectionId: this.leadSectionId,
                    editMode: false,
                    active: true,
                    future: false,
                    expired: false,
                    contextLabelId: 3
                });
                D = m.Us.getUrlById(300, "clid=2&cv=" + this.leadSectionId);
                r = new a.Vs.AnnouncementView({
                    collection: q,
                    manageTask: D,
                    leadSectionId: this.leadSectionId,
                    editMode: false,
                    active: true,
                    future: false,
                    expired: false,
                    sections: K,
                    contextLabelId: 3,
                    canEdit: (Z.userHasFullAccess || L == 2)
                });
                p3.rV(r, this.Containers.RightColumn, false);
                q.fetch({
                    error: function() {
                        p3.displayError("Error loading announcements")
                    }
                })
            }
            this.announceView = r;
            if (P) {
                E = new k.Cs.News({}, {
                    sectionId: this.sectionId,
                    leadSectionId: this.leadSectionId,
                    editMode: false,
                    active: true,
                    future: false,
                    expired: false,
                    contextLabelId: 3
                });
                D = m.Us.getUrlById(300, "clid=2&cv=" + this.leadSectionId);
                v = function() {
                    Z.scoreboardView.collection.fetch({
                        async: false,
                        data: {
                            sectionId: Z.leadSectionId
                        },
                        success: function() {
                            Z.scoreboardView.renderTemplate()
                        },
                        error: function() {
                            p3.displayError("Error loading athletic results")
                        }
                    })
                };
                C = false;
                if (Z.userHasFullAccess || P == 2) {
                    if (p3.Data.Context.findByTaskId(53222)) {
                        u = new k.Ms.NewsCategory();
                        u.fetch({
                            data: {
                                id: 0,
                                contextLabelId: 3
                            },
                            async: false,
                            success: function() {
                                C = (u.get("CommentApprovalInd") == 1)
                            },
                            error: function() {
                                p3.displayError("Error loading news category settings")
                            }
                        })
                    }
                }
                F = new k.Vs.NewsView({
                    collection: E,
                    manageTask: D,
                    leadSectionId: this.leadSectionId,
                    editMode: false,
                    active: true,
                    future: false,
                    expired: false,
                    sections: K,
                    canEdit: (Z.userHasFullAccess || P == 2),
                    contextLabelId: 3,
                    narrowChannel: true,
                    contextValue: this.leadSectionId,
                    deleteCallback: v,
                    manageComments: C
                });
                p3.rV(F, this.Containers.RightColumn, false);
                E.fetch({
                    error: function() {
                        p3.displayError("Error loading news")
                    }
                })
            }
            this.newsView = F;
            if (N) {
                w = new f.Cs.Download({}, {
                    sectionId: this.sectionId,
                    leadSectionId: this.leadSectionId,
                    contextLabelId: 3
                });
                D = m.Us.getUrlById(185, "clid=2&cv=" + this.leadSectionId);
                x = new f.Vs.DownloadView({
                    collection: w,
                    manageTask: D,
                    leadSectionId: this.leadSectionId,
                    editMode: false,
                    active: true,
                    future: false,
                    expired: false,
                    sections: K,
                    contextLabelId: 3,
                    canEdit: (Z.userHasFullAccess || N == 2)
                });
                p3.rV(x, this.Containers.RightColumn, false);
                w.fetch({
                    error: function() {
                        p3.displayError("Error loading downloads")
                    }
                })
            }
            this.downloadView = x;
            if (O) {
                A = new i.Cs.Link({}, {
                    sectionId: this.sectionId,
                    leadSectionId: this.leadSectionId,
                    contextLabelId: 3
                });
                D = m.Us.getUrlById(96, "clid=2&cv=" + this.leadSectionId);
                B = new i.Vs.LinkView({
                    collection: A,
                    manageTask: D,
                    leadSectionId: this.leadSectionId,
                    editMode: false,
                    active: true,
                    future: false,
                    expired: false,
                    sections: K,
                    contextLabelId: 3,
                    canEdit: (Z.userHasFullAccess || O == 2)
                });
                p3.rV(B, this.Containers.RightColumn, false);
                A.fetch({
                    error: function() {
                        p3.displayError("Error loading links")
                    }
                })
            }
            this.linkView = B;
            if (Z.userHasFullAccess || Z.isEditor) {
                p3.rV(new n.Vs.EditView({
                    sectionId: this.sectionId,
                    leadSectionId: this.leadSectionId
                }), this.Containers.ManageContainer, false)
            }
            if (M || Q || U) {
                H = false;
                Y = false;
                t = false;
                G = new j.Cs.Media({}, {
                    sectionId: this.sectionId,
                    leadSectionId: this.leadSectionId,
                    contentId: 31,
                    editMode: false,
                    active: true,
                    future: false,
                    expired: false,
                    contextLabelId: 3
                });
                X = new j.Cs.Media({}, {
                    sectionId: this.sectionId,
                    leadSectionId: this.leadSectionId,
                    contentId: 167,
                    editMode: false,
                    active: true,
                    future: false,
                    expired: false,
                    contextLabelId: 3
                });
                s = new j.Cs.Media({}, {
                    sectionId: this.sectionId,
                    leadSectionId: this.leadSectionId,
                    contentId: 165,
                    editMode: false,
                    active: true,
                    future: false,
                    expired: false,
                    contextLabelId: 3
                });
                if (Q) {
                    G.fetch({
                        success: function() {
                            var aa = -1;
                            G.each(function(ab) {
                                aa += 1;
                                if (aa > 0 && aa % 4 === 0) {
                                    ab.set("newRow", true)
                                }
                                if (ab.get("FileCount") == 1) {
                                    ab.set("CountLabel", "1 photo")
                                } else {
                                    ab.set("CountLabel", ab.get("FileCount") + " photos")
                                }
                                if (ab.get("NumberOfViews") == 1) {
                                    ab.set("ViewLabel", "1 view")
                                } else {
                                    ab.set("ViewLabel", ab.get("NumberOfViews") + " views")
                                }
                            });
                            H = true;
                            if (H && Y && t) {
                                Z.renderMedia(Z, M, U, Q, s, X, G, K)
                            }
                        },
                        error: function() {
                            p3.displayError("Error loading photos")
                        }
                    })
                } else {
                    H = true
                }
                if (M) {
                    s.fetch({
                        success: function() {
                            var ab = -1,
                                ac, aa;
                            s.each(function(ad) {
                                ab += 1;
                                if (ab > 0 && ab % 4 === 0) {
                                    ad.set("newRow", true)
                                }
                                ac = new Date(parseInt(ad.get("PublishDate").substr(6), 10));
                                aa = ac.getMonth() + "/" + ac.getDate() + "/" + ac.getFullYear();
                                ad.set("PublishDisplay", aa);
                                if (ad.get("FileCount") == 1) {
                                    ad.set("CountLabel", "1 audio clip")
                                } else {
                                    ad.set("CountLabel", ad.get("FileCount") + " audio clips")
                                }
                                if (ad.get("NumberOfViews") == 1) {
                                    ad.set("ViewLabel", "1 view")
                                } else {
                                    ad.set("ViewLabel", ad.get("NumberOfViews") + " views")
                                }
                            });
                            t = true;
                            if (H && Y && t) {
                                Z.renderMedia(Z, M, U, Q, s, X, G, K)
                            }
                        },
                        error: function() {
                            p3.displayError("Error loading audio")
                        }
                    })
                } else {
                    t = true
                }
                if (U) {
                    X.fetch({
                        success: function() {
                            var aa = -1;
                            X.each(function(ac) {
                                var ad, ab;
                                aa += 1;
                                if (aa > 0 && aa % 4 === 0) {
                                    ac.set("newRow", true)
                                }
                                ad = new Date(parseInt(ac.get("PublishDate").substr(6), 10));
                                ab = ad.getMonth() + "/" + ad.getDate() + "/" + ad.getFullYear();
                                ac.set("PublishDisplay", ab);
                                if (ac.get("FileCount") == 1) {
                                    ac.set("CountLabel", "1 video")
                                } else {
                                    ac.set("CountLabel", ac.get("FileCount") + " videos")
                                }
                                if (ac.get("NumberOfViews") == 1) {
                                    ac.set("ViewLabel", "1 view")
                                } else {
                                    ac.set("ViewLabel", ac.get("NumberOfViews") + " views")
                                }
                            });
                            Y = true;
                            if (H && Y && t) {
                                Z.renderMedia(Z, M, U, Q, s, X, G, K)
                            }
                        },
                        error: function() {
                            p3.displayError("Error loading videos")
                        }
                    })
                } else {
                    Y = true
                }
            }
            $("#manage_container").show()
        },
        renderMedia: function(G, B, E, C, q, F, z, A) {
            var s = (G.userHasFullAccess || C == 2),
                t = (G.userHasFullAccess || E == 2),
                r = (G.userHasFullAccess || B == 2),
                u = (B && q.length > 0),
                x = (E && F.length > 0),
                w = (C && z.length > 0),
                v = u || x || w,
                D, y;
            C = (w || s);
            B = (u || r);
            E = (x || t);
            D = (B && E) || (C && E) || (B && C);
            y = new j.Vs.MediaView({
                haveData: v,
                showTabs: D,
                audio: q,
                photo: z,
                video: F,
                showAudio: B,
                showVideo: E,
                showPhoto: C,
                sections: A,
                leadSectionId: G.leadSectionId,
                contextLabelId: 3,
                editPhoto: s,
                editVideo: t,
                editAudio: r
            });
            p3.rV(y, G.Containers.MediaContainer, false);
            y.renderTemplate();
            G.mediaView = y
        },
        switchEditMode: function(s) {
            var r = true,
                t = this,
                q;
            if (s.target.id == "edit_on") {
                $("a.btn.edit-btn").show();
                $("div.btn-manage").show();
                $("div.view-range").show();
                $(".edit-header").show();
                $("#edit_on").html("<h5>ON</h5>");
                $("#edit_on").attr("style", "border-color:#67b65c");
                $("#edit_off").html("OFF");
                $("#edit_off").attr("style", "");
                $(".announce-edit-button").show();
                $(".announce-delete-button").show();
                $(".tab-nodata").show();
                if ($(".tab-pane.active").length === 0) {
                    $(".tab-pane").first().addClass("active")
                }
                if (t.isOwner) {
                    $("#btn-import").show()
                }
            } else {
                r = false;
                $("a.btn.edit-btn").hide();
                $("div.btn-manage").hide();
                $("div.view-range").hide();
                $(".edit-header").hide();
                $("#edit_off").html("<h5>OFF</h5>");
                $("#edit_off").attr("style", "border-color:#67b65c");
                $("#edit_on").html("ON");
                $("#edit_on").attr("style", "");
                $(".announce-edit-button").hide();
                $(".announce-delete-button").hide();
                $(".tab-nodata").hide();
                if ($(".tab-nodata.active").length === 1) {
                    q = $("ul.nav-tabs").children(".inactive").first();
                    $(".tab-nodata.active").removeClass("active").addClass("inactive");
                    q.removeClass("inactive").addClass("active");
                    $(".tab-pane").removeClass("active");
                    $("#mediaPane_" + q.children("a").attr("href").substring(1)).addClass("active")
                }
                $("#btn-import").hide()
            }
            if (this.announceView && this.announceView.options.canEdit) {
                a.Us.refreshAnnouncements(r, this.sectionId, this.leadSectionId, this.announceView)
            }
            if (this.newsView && this.newsView.options.canEdit) {
                k.Us.refreshNews(r, this.sectionId, this.leadSectionId, this.newsView)
            }
            if (this.linkView && this.linkView.options.canEdit) {
                i.Us.refreshLinks(r, this.sectionId, this.leadSectionId, this.linkView)
            }
            if (this.downloadView && this.announceView.options.canEdit) {
                f.Us.refreshDownloads(r, this.sectionId, this.leadSectionId, this.downloadView)
            }
            if (this.mediaView.photoView && this.mediaView.options.editPhoto) {
                j.Us.refreshMediaTab(r, this.sectionId, this.leadSectionId, this.mediaView.photoView)
            }
            if (this.mediaView.audioView && this.mediaView.options.editAudio) {
                j.Us.refreshMediaTab(r, this.sectionId, this.leadSectionId, this.mediaView.audioView)
            }
            if (this.mediaView.videoView && this.mediaView.options.editVideo) {
                j.Us.refreshMediaTab(r, this.sectionId, this.leadSectionId, this.mediaView.videoView)
            }
            if (this.scoreboardView && this.scoreboardView.options.canEdit) {
                this.scoreboardView.switchEditMode(r)
            }
        },
        openImportDialog: function() {
            var r = this,
                q = new c.Vs.ImportContent({
                    schoolYears: r.schoolYears,
                    currentSections: r.sections,
                    leadSectionId: r.leadSectionId,
                    associationId: 2
                });
            q.on("save", function(s) {
                if (r.linkView && s.indexOf(2) !== -1) {
                    i.Us.refreshLinks(true, r.sectionId, r.leadSectionId, r.linkView)
                }
                if (r.downloadView && s.indexOf(3) !== -1) {
                    f.Us.refreshDownloads(true, r.sectionId, r.leadSectionId, r.downloadView)
                }
                if (r.mediaView) {
                    if (r.mediaView.photoView && s.indexOf(31) !== -1) {
                        j.Us.refreshMediaTab(true, r.sectionId, r.leadSectionId, r.mediaView.photoView)
                    }
                    if (r.mediaView.audioView && s.indexOf(165) !== -1) {
                        j.Us.refreshMediaTab(true, r.sectionId, r.leadSectionId, r.mediaView.audioView)
                    }
                    if (r.mediaView.videoView && s.indexOf(167) !== -1) {
                        j.Us.refreshMediaTab(true, r.sectionId, r.leadSectionId, r.mediaView.videoView)
                    }
                }
            });
            p3.rV(q, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        }
    });
    n.Vs.EditView = Bb.View.extend({
        template: "grouppage/editbuilder.template.html",
        events: {},
        renderTemplate: function() {
            var q = this;
            p3.fT(q.template, function(r) {
                q.$el.html(r({}))
            })
        },
        render: function(q) {
            this.renderTemplate();
            $(q).append(this.el)
        }
    });
    n.Vs.EditResultsView = Bb.View.extend({
        template: "athleticteam/athleticteam.result.edit.template.html",
        events: {
            "click #btnSaveResults": "saveResult",
            "click #btnDeleteHighlight": "deleteHighlight",
            "click .result-type-button": "switchResultType",
            "click .opponent-link": "addOpponent",
            "click input[type=score]": "setScoreFocus"
        },
        setScoreFocus: function(q) {
            $(q.currentTarget).focus();
            q.preventDefault()
        },
        initialize: function() {
            var r = this,
                q;
            this.gameId = this.options.gameId || 0;
            this.parentView = this.options.parentView;
            this.existingData = this.options.existingData || false;
            this.newsId = this.options.newsId || 0;
            this.siteInd = this.options.siteInd;
            r.Containers = {};
            q = new n.Ms.Sections({
                PhotoTitleInd: 0,
                PhotoCaptionInd: 1,
                PhotoDescriptionInd: 0
            });
            r.options.photoItem = q
        },
        initializePlugins: function() {
            window.setTimeout(function() {
                e.Us.initialize(".dp-non-pre-pop");
                p3.showHtmlEditor("fldDescription", p3.Us.Enum.HtmlEditorCategories.FULL, false, undefined, p3.Us.Enum.HtmlEditorEncoding.NUMERIC);
                p3.showHtmlEditor("fldBriefDescription", p3.Us.Enum.HtmlEditorCategories.FULL, false, undefined, p3.Us.Enum.HtmlEditorEncoding.NUMERIC);
                p3.setModalHeight(p3.Layout.Containers.Modal);
                p.Us.initialize(".time-picker-field");
                $("#photo_table tbody.sort-container").sortable({});
                $("#send_notif_label").tooltip()
            }, 400)
        },
        initializeFileUpload: function(q) {
            var r = this;
            window.setTimeout(function() {
                $("#fileupload").fileupload({
                    url: p3.Config.RootPath + "utilities/FileTransferHandler.ashx",
                    autoUpload: true,
                    acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
                    dropZone: ".dragRegion"
                }).bind("fileuploaddone", function(t, s) {
                    j.Us.mediaFileCompleted(t, s, "photo", r)
                }).bind("fileuploadadd", function(t, s) {
                    if (j.Us.mediaFileSelected(t, s, "photo", r.options.detailedInd, r)) {
                        s.submit()
                    }
                }).bind("fileuploadprogress", function(t, s) {
                    j.Us.mediaFileUpdateProgress(t, s, "tr.photo-item-row")
                })
            }, 300)
        },
        render: function(s) {
            var C = this,
                w = "",
                q = "",
                u = "",
                y = [],
                v = [],
                B = false,
                r = "",
                t = d.getDateString(d.localDateTime()),
                x, A, z;
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, function() {
                    if (C.newsId > 0) {
                        x = (C.options.isLite ? new b.Ms.News({}, {
                            newsId: C.newsId
                        }) : new k.Ms.News({}, {
                            newsId: C.newsId
                        }));
                        x.fetch({
                            async: false,
                            error: function() {
                                p3.displayError("Error loading news")
                            },
                            success: function() {
                                var D;
                                w = x.get("Name");
                                B = x.get("CommentType") != 0;
                                y = x.get("PhotoList");
                                q = x.get("Author");
                                r = x.get("BriefDescription");
                                u = x.get("Description");
                                if (y.length > 0) {
                                    for (D = 0; D < y.length; D++) {
                                        y[D].Id = y[D].LargeFilename.split("_")[2].split(".")[0]
                                    }
                                }
                            }
                        });
                        v = new k.Cs.NewsIndex({}, {
                            newsId: C.newsId
                        });
                        v.fetch({
                            async: false,
                            data: {
                                Id: v.newsId
                            },
                            success: function() {
                                v.each(function(E) {
                                    var F;
                                    if (E.get("PublishDate")) {
                                        F = E.get("PublishDate").split(" ");
                                        E.set("PublishDate", F[0]);
                                        if (F[1] != "00:00:00") {
                                            E.set("PTime", F[1])
                                        }
                                        E.set("IsSelected", true)
                                    }
                                    if (E.get("ExpireDate")) {
                                        F = E.get("ExpireDate").split(" ");
                                        E.set("ExpireDate", F[0]);
                                        if (F[1] != "00:00:00") {
                                            E.set("ETime", F[1])
                                        }
                                    }
                                });
                                var D = new k.Cs.NewsIndex({}, {
                                    newsId: C.newsId
                                });
                                D = h.Us.buildPublishGroupList(null, v, 3);
                                v = D
                            },
                            error: function() {
                                p3.displayError("Error loading news index")
                            }
                        })
                    } else {
                        v = C.parentView.options.sections;
                        v.models[0].set("PublishDate", t)
                    }
                    C.photoList = y;
                    A = new l.Cs.NotificationActive({}, {
                        actionId: 45,
                        pk: C.parentView.options.sections.sectionId
                    });
                    A.fetch({
                        async: false,
                        success: function() {
                            A.setNotificationProperties()
                        },
                        error: function() {
                            p3.displayError("Error loading notification settings")
                        }
                    });
                    if (!C.options.possibleOpponents) {
                        C.options.possibleOpponents = new n.Cs.Opponent();
                        C.options.possibleOpponents.fetch({
                            async: false,
                            error: function() {
                                p3.displayError("Error loading athletic opponents")
                            }
                        })
                    }
                    z = new n.Cs.OpponentResults({}, {
                        athScheduleId: C.gameId
                    });
                    z.fetch({
                        data: {
                            athScheduleId: z.athScheduleId
                        },
                        success: function() {
                            var H = false,
                                E = -1,
                                F = 0,
                                D = "",
                                G;
                            C.noResults = (z.length < 2);
                            z.each(function(I) {
                                E += 1;
                                if (I.get("result") && I.get("result").length > 0) {
                                    var J = I.get("result");
                                    I.set("result", J.charAt(0).toUpperCase() + J.substring(1))
                                }
                                if (I.get("opponent_id") === null) {
                                    F = E
                                }
                                if (I.get("schedule_type") !== null) {
                                    H = (I.get("schedule_type") == 1)
                                }
                                if (I.get("score_conversion_delete") && I.get("score_conversion_delete").length > 0) {
                                    if (D.length > 0) {
                                        D += ", "
                                    }
                                    D += I.get("score_conversion_delete")
                                }
                            });
                            C.thisSchool = z.models[F].toJSON();
                            C.conversionScore = D;
                            G = "";
                            if (C.siteInd == 0) {
                                G = "VS"
                            } else {
                                if (C.siteInd == 1) {
                                    G = "@"
                                }
                            }
                            C.usePoints = H;
                            C.results = z;
                            C.siteText = G;
                            p3.fT(C.template, function(I) {
                                C.$el.html(I({
                                    existingData: C.existingData,
                                    canDrag: !window.head.browser.ie,
                                    headline: w,
                                    author: q,
                                    description: u,
                                    useComments: B,
                                    PhotoList: y,
                                    briefDescription: r,
                                    newsId: C.newsId,
                                    notifEnabled: A.enabled,
                                    notifTooltip: A.tooltip,
                                    isLite: C.options.isLite || false,
                                    possibleOpponents: C.options.possibleOpponents.toJSON(),
                                    usePoints: C.usePoints
                                }));
                                $(s).html(C.el);
                                C.groupView = new h.Vs.PublishView({
                                    groups: v,
                                    defaultDate: t,
                                    showPublish: true,
                                    showPublishTime: true,
                                    showExpire: true,
                                    showExpireTime: true,
                                    showPrimary: true,
                                    isEdit: C.existingData,
                                    contentId: 6
                                });
                                window.setTimeout(function() {
                                    p3.rV(C.groupView, $("#groups-container"), true);
                                    window.setTimeout(function() {
                                        p3.setModalHeight(p3.Layout.Containers.Modal);
                                        if (C.parentView.options.sections) {
                                            e.Us.LoadPreSelDatePickers(C.parentView.options.sections.toJSON())
                                        }
                                    }, 1000);
                                    C.Containers.ResultContainer = C.$("#result-list-container");
                                    C.renderResults()
                                }, 100);
                                C.initializeFileUpload();
                                C.initializePlugins()
                            })
                        },
                        error: function() {
                            p3.displayError("Error loading opponent results")
                        }
                    })
                })
            })
        },
        dispose: function() {
            var q;
            q = tinyMCE.get("fldDescription");
            if (q) {
                q.remove()
            }
            q = tinyMCE.get("fldBriefDescription");
            if (q) {
                q.remove()
            }
        },
        validateNews: function() {
            var w = this,
                v = true,
                r, t, u = (w.newsId > 0 || w.noResults),
                s = true,
                q = $("#txtHeadline");
            if (q.val().length === 0) {
                v = false;
                s = false
            } else {
                u = true
            }
            r = tinyMCE.get("fldDescription");
            if (r) {
                r.save();
                if ($("#fldDescription").val().length > 0) {
                    u = true
                }
            }
            r = tinyMCE.get("fldBriefDescription");
            if (r) {
                r.save();
                if ($("#fldBriefDescription").val().length > 0) {
                    u = true
                }
            }
            if ($("#txtAuthor").val().length > 0) {
                u = true
            }
            if ($("tr.photo-item-row").length > 0) {
                u = true
            }
            if (u && v) {
                t = 1
            } else {
                if (u) {
                    if (!s) {
                        $(".news-headline-group").addClass("error");
                        q.addClass("box-validate")
                    }
                    t = 2
                } else {
                    t = 0
                }
            }
            return t
        },
        saveResult: function(q) {
            var A = this,
                z = true,
                v = [],
                t = "",
                r, w = [],
                x, u, s, y;
            $("#btnSaveResults").button("loading");
            if ($(".modal-body").children()[0].className == "alert alert-error") {
                $(".modal-body").find("div.alert-error:first").remove()
            }
            if (A.conversionScore.length > 0) {
                $(".opponent-score").each(function(B) {
                    if ($(this).val().length === 0) {
                        t = "Please update scores.";
                        z = false
                    }
                });
                if (z && !A.usePoints) {
                    $(".school-score").each(function(B) {
                        if ($(this).val().length === 0) {
                            t = "Please update scores.";
                            z = false
                        }
                    })
                }
            }
            if (z) {
                u = A.validateNews();
                if (u == 2) {
                    z = false
                } else {
                    if (u == 1) {
                        z = A.groupView.getSelectedGroupArray();
                        if (z) {
                            r = A.groupView.selectedArray
                        } else {
                            t = A.groupView.errorMessage
                        }
                        w = [];
                        $("tr.photo-item-row").each(function(C) {
                            var G = $(this).find("td:first").attr("pid").length ? $(this).find("td:first").attr("pid") : 0,
                                D, E, H, B, F;
                            if (G == 0) {
                                E = $(this).find("td:first").attr("tfn");
                                H = 0;
                                B = 0
                            } else {
                                for (s = 0; s < A.photoList.length; s++) {
                                    F = A.photoList[s];
                                    if (F.Id == G) {
                                        D = F.LargeFilename;
                                        B = F.LargeHeight;
                                        H = F.LargeWidth;
                                        break
                                    }
                                }
                            }
                            w.push({
                                DeleteInd: $(this).find(".photo-delete-check").is(":checked"),
                                caption: $(this).find(".photo-caption-box").val(),
                                photo_Id: G,
                                original_filename: E,
                                large_filename: D,
                                sort: C + 1,
                                pk: C + 1,
                                original_height: B,
                                original_width: H,
                                large_height: B,
                                large_width: H
                            })
                        })
                    }
                }
            }
            if (z) {
                if (!A.noResults) {
                    y = 0;
                    if (A.usePoints) {
                        y = 1
                    }
                    x = new n.Ms.ResultsSave({
                        schedule_id: A.gameId,
                        SendNotification: $("#send_notif_check").hasClass("active"),
                        schedule_type: y
                    });
                    A.collectOpponents(true, 0, "");
                    A.results.each(function(B) {
                        if (A.usePoints) {
                            v.push({
                                Id: B.get("opponent_id") > 0 ? B.get("opponent_id") : -1,
                                Score: B.get("score"),
                                WinLoss: B.get("opponent_id") > 0 ? "" : B.get("result")
                            })
                        } else {
                            if (B.get("opponent_id") > 0) {
                                v.push({
                                    Id: B.get("opponent_id"),
                                    Score: B.get("score"),
                                    WinLoss: B.get("result"),
                                    ScoreVersus: B.get("score_vs")
                                })
                            }
                        }
                    });
                    x.set("opponentList", v);
                    x.save({}, {
                        error: function() {
                            p3.showModal(p3.Layout.Containers.Modal, "hide");
                            p3.displayError("Error saving results")
                        },
                        success: function(B, C) {
                            if (u == 1) {
                                A.saveNews(r, w)
                            } else {
                                A.saveSuccessfull()
                            }
                        }
                    })
                } else {
                    if (u == 1) {
                        A.saveNews(r, w)
                    }
                }
            } else {
                $("#btnSaveResults").button("reset");
                if (t.length > 0) {
                    p3.Us.InfoMessage.ErrorBox(t, ".modal-body", false)
                }
            }
            return false
        },
        saveNews: function(r, t) {
            var u = this,
                s, q = 0;
            if (u.newsId == 0) {
                s = new k.Ms.NewsCreate({
                    news_id: 0,
                    ScheduleId: u.gameId
                })
            } else {
                s = new k.Ms.NewsUpdate({
                    news_id: u.newsId,
                    ScheduleId: u.gameId
                })
            }
            if ($("#chkComment").find(".active").hasClass("btn-approve")) {
                q = 1
            }
            s.set({
                headline: $("#txtHeadline").val(),
                author: $("#txtAuthor").val(),
                brief_description: $("#fldBriefDescription").val(),
                groups: r,
                photo_list: t,
                comment_type: q,
                description: $("#fldDescription").val()
            });
            s.save({}, {
                error: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    p3.displayError("Error saving news")
                },
                success: function() {
                    u.saveSuccessfull()
                }
            })
        },
        saveSuccessfull: function() {
            var r = this,
                q;
            p3.showModal(p3.Layout.Containers.Modal, "hide");
            r.parentView.collection.fetch({
                async: false,
                data: {
                    sectionId: r.parentView.collection.sectionId
                },
                success: function() {
                    r.parentView.renderTemplate()
                },
                error: function() {
                    p3.displayError("Error loading athletic results")
                }
            });
            if (r.parentView.parentView.newsView) {
                q = r.parentView.collection.sectionId;
                k.Us.refreshNews(true, q, q, r.parentView.parentView.newsView)
            }
        },
        deleteHighlight: function() {
            var r = this,
                q;
            q = new k.Cs.NewsIndex({}, {
                newsId: r.newsId,
                groupId: 0
            });
            q.fetch({
                data: {
                    Id: q.newsId,
                    groupId: q.groupId
                },
                success: function() {
                    var w = '<div class="modal" data-keyboard="false" data-backdrop="static" tabindex="-1" id="delete-highlight-modal"></div>',
                        t, s, v, u;
                    $(w).modal();
                    u = $("#delete-highlight-modal");
                    t = function() {
                        var y, x;
                        r.newsId = 0;
                        $("#btnDeleteHighlight").hide();
                        $("#txtHeadline").val("");
                        $("#txtAuthor").val("");
                        $("#fldBriefDescription").val("");
                        x = tinyMCE.get("fldBriefDescription");
                        x.setContent("");
                        x.save();
                        $("#fldDescription").val("");
                        x = tinyMCE.get("fldDescription");
                        x.setContent("");
                        x.save();
                        $("#comment-yes-button").removeClass("active");
                        $("#comment-no-button").addClass("active");
                        $("#photo_table tbody").children().remove();
                        $(".group-header-row").each(function(z) {
                            if ($(this).children()[0].innerText.indexOf("Athletics") === -1) {
                                $(this).remove()
                            }
                        });
                        $('.group-row[data-contextLabel!="3"]').remove();
                        $(".group-row").each(function(z) {
                            if ($(this).find(".group-section-check").data("contextvalue") != r.parentView.collection.sectionId) {
                                $(this).remove()
                            }
                        });
                        $(".pub-date-box").val(d.getDateString(d.localDateTime()));
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, r.initializeFileUpload, r);
                        u.modal("hide");
                        u.remove();
                        $(".modal-backdrop").css("z-index", "1100");
                        r.parentView.collection.fetch({
                            async: false,
                            data: {
                                sectionId: r.parentView.collection.sectionId
                            },
                            success: function() {
                                r.parentView.renderTemplate()
                            },
                            error: function() {
                                p3.displayError("Error loading athletic results")
                            }
                        });
                        if (r.parentView.parentView.newsView) {
                            y = r.parentView.collection.sectionId;
                            k.Us.refreshNews(true, y, y, r.parentView.parentView.newsView)
                        }
                    };
                    s = function() {
                        u.modal("hide");
                        u.remove();
                        $(".modal-backdrop").css("z-index", "1100")
                    };
                    v = q.length > 1;
                    p3.rV(new k.Vs.NewsDeleteView({
                        groups: q,
                        showRadios: v,
                        newsView: r,
                        Id: r.newsId,
                        groupId: 0,
                        confirmCallback: t,
                        cancelCallback: s,
                        contextValue: r.parentView.collection.sectionId
                    }), "#delete-highlight-modal", true);
                    $(".modal-backdrop").css("z-index", "1101")
                },
                error: function() {
                    p3.displayError("Error loading news index")
                }
            })
        },
        switchResultType: function(r) {
            var s = this,
                q;
            s.collectOpponents(false, 0, "");
            if (r.currentTarget.id == "versus-button") {
                s.usePoints = false
            } else {
                s.usePoints = true
            }
            q = tinyMCE.get("fldDescription");
            if (q) {
                q.save();
                q.remove();
                q = null
            }
            q = tinyMCE.get("fldBriefDescription");
            if (q) {
                q.save();
                q.remove();
                q = null
            }
            s.renderResults()
        },
        renderResults: function() {
            var r = this,
                q;
            q = new n.Vs.ResultsList({
                opponents: r.results,
                usePoints: r.usePoints,
                thisSchool: r.thisSchool,
                noResults: r.noResults,
                conversionScores: r.conversionScore,
                siteText: r.siteText
            });
            p3.rV(q, r.Containers.ResultContainer, true)
        },
        addOpponent: function(r) {
            var t = this,
                q = true,
                s = $(r.currentTarget).data("id");
            $("tr.result-row").each(function(u) {
                if ($(this).data("id") == s) {
                    q = false
                }
            });
            if (q) {
                t.collectOpponents(true, s, $(r.currentTarget).text());
                t.renderResults()
            }
            $(".btn-group.open").removeClass("open");
            $("#site-modal .modal-body").scrollTop(1);
            return false
        },
        collectOpponents: function(s, r, q) {
            var v = this,
                t, u = 0;
            v.results.reset();
            if (!v.usePoints) {
                v.results.add(v.thisSchool)
            }
            $(".result-row").each(function(w) {
                u += 1;
                t = new n.Ms.Results({
                    opponent_id: $(this).data("id"),
                    schedule_type: v.usePoints ? 1 : 0,
                    name: $(this).data("name"),
                    sort_order: u
                });
                if (s) {
                    if (v.usePoints) {
                        t.set("score", $(this).find(".opponent-score").val())
                    } else {
                        t.set("score", $(this).find(".school-score").val());
                        t.set("score_vs", $(this).find(".opponent-score").val())
                    }
                    if (!v.usePoints || !$(this).data("id")) {
                        if ($(this).find(".win-button").hasClass("active")) {
                            t.set("result", "Win")
                        } else {
                            if ($(this).find(".loss-button").hasClass("active")) {
                                t.set("result", "Loss")
                            } else {
                                if ($(this).find(".tie-button").hasClass("active")) {
                                    t.set("result", "Tie")
                                }
                            }
                        }
                    }
                }
                v.results.add(t)
            });
            if (r > 0) {
                if (v.usePoints && v.results.length === 0) {
                    v.results.add(v.thisSchool)
                }
                u += 1;
                t = new n.Ms.Results({
                    opponent_id: r,
                    schedule_type: v.usePoints ? 1 : 0,
                    name: q,
                    sort_order: u
                });
                v.results.add(t)
            }
            v.noResults = (v.results.length < 2)
        }
    });
    n.Vs.ResultsList = Bb.View.extend({
        template: "athleticteam/athleticteam.versus.result.list.template.html",
        events: {
            "click .delete-opponent-button": "deleteOpponent"
        },
        renderTemplate: function() {
            var r = this,
                q = "";
            if (r.options.usePoints) {
                r.template = "athleticteam/athleticteam.points.result.list.template.html"
            }
            if (r.options.opponents.length > 1) {
                if (r.options.opponents.models[1].get("score_conversion_delete") != null) {
                    q = r.options.opponents.models[1].get("score_conversion_delete")
                }
            }
            p3.fT(r.template, function(s) {
                r.$el.html(s({
                    opponents: r.options.opponents.toJSON(),
                    noResults: r.options.noResults,
                    thisSchool: r.options.thisSchool,
                    conversionScores: r.options.conversionScores,
                    siteText: r.options.siteText,
                    scoreConversion: q
                }));
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                    var t = function(u, v) {
                        v.children().each(function() {
                            $(this).width($(this).width())
                        });
                        return v
                    };
                    window.setTimeout(function() {
                        $(".sortContainer tbody").sortable({
                            items: "tr.result-row",
                            helper: t
                        })
                    }, 400)
                })
            })
        },
        render: function(q) {
            $(q).append(this.el);
            this.renderTemplate()
        },
        deleteOpponent: function(q) {
            $('.result-row[data-id="' + $(q.currentTarget).data("id") + '"]').remove()
        }
    });
    n.Vs.TeamScores = Bb.View.extend({
        template: "athleticteam/athleticteam.scores.template.html",
        events: {
            "click .result-edit-link": "editResults",
            "click #scores-show-all": "toggleItems"
        },
        renderTemplate: function() {
            var A = this,
                q = [],
                s = -1,
                t = 0,
                y, u, r, v, w = "",
                x = "",
                z = "0";
            if (A.collection !== undefined) {
                A.collection.each(function(B) {
                    r = (B.get("result") || B.get("score") || B.get("news_id") || (s >= 0 && q[s].gameId == B.get("ath_schedule_id")));
                    if (A.editMode || r) {
                        w = "";
                        x = "";
                        v = B.get("result");
                        if (v) {
                            v = v.toUpperCase()
                        }
                        switch (v) {
                            case "WIN":
                                w = "teamWin";
                                x = "W";
                                break;
                            case "LOSS":
                                w = "teamLoss";
                                x = "L";
                                break;
                            case "TIE":
                                w = "teamTie";
                                x = "T";
                                break
                        }
                        y = "";
                        u = "";
                        if (B.get("ath_schedule_id") != t) {
                            s += 1;
                            t = B.get("ath_schedule_id");
                            var C = d.getDate(B.get("schedule_date"));
                            if (B.get("schedule_type") == "Game") {
                                if (B.get("score") != null) {
                                    y = '<h4 style="line-height:25px;margin-top:0px;">' + B.get("score");
                                    if (B.get("score_vs") && B.get("score_vs").length > 0) {
                                        y += "-" + B.get("score_vs")
                                    }
                                    y += "</h4>"
                                }
                                u = '<div style="margin-top:3px;">';
                                if (B.get("site_ind") == 0) {
                                    u += "vs "
                                } else {
                                    if (B.get("site_ind") == 1) {
                                        u += "@ "
                                    }
                                }
                                if (B.get("opponent_id") != null) {
                                    if (B.get("name") != null) {
                                        u += B.get("name")
                                    } else {
                                        u += "&nbsp;"
                                    }
                                }
                                u += "</div>"
                            } else {
                                y = '<div style="margin-top:5px;">';
                                if (B.get("score") != null && B.get("score").length > 0) {
                                    y += B.get("score")
                                } else {
                                    y += "&nbsp;"
                                }
                                y += "</div>";
                                u = '<div style="margin-top:5px;">';
                                if (B.get("name") != null) {
                                    u += B.get("name")
                                } else {
                                    u += "&nbsp;"
                                }
                                u += "</div>"
                            }
                            q.push({
                                gameId: t,
                                gameDate: d.displayDate(C, "shortDayMonthDate"),
                                isMeet: (B.get("schedule_type") == "Meet"),
                                newsId: B.get("news_id"),
                                haveResult: r,
                                siteInd: B.get("site_ind"),
                                description: B.get("short_description"),
                                opponent: u,
                                resultDisplay: v ? '<div class="' + w + ' pull-right" style="margin-top:' + z + 'px;margin-bottom:3px;margin-right:10px;">' + x + "</div>" : "",
                                scoreDisplay: y,
                                hide: s >= A.options.ItemCount
                            })
                        } else {
                            if (B.get("schedule_type") == "Game") {
                                if (B.get("score") && B.get("score").length > 0) {
                                    y = '<h4 style="line-height:25px;margin-top:0px;">' + B.get("score")
                                }
                                if (B.get("score_vs") && B.get("score_vs").length > 0) {
                                    y += "-" + B.get("score_vs")
                                }
                                y += "</h4>";
                                if (B.get("site_ind") == 0) {
                                    u += "vs "
                                } else {
                                    if (B.get("site_ind") == 1) {
                                        u += "@ "
                                    }
                                }
                                u += B.get("name");
                                q[s].scoreDisplay += y;
                                q[s].resultDisplay += '<div class="' + w + ' pull-right" style="margin-top:2px;margin-bottom:3px;margin-right:10px;">' + x + "</div>";
                                q[s].opponent += '<div style="margin-top:7px;">' + u + "</div>"
                            } else {
                                if (B.get("score") != null) {
                                    y = B.get("score") + "<br />"
                                } else {
                                    y = "<br />"
                                }
                                u = B.get("name") + "<br />";
                                q[s].scoreDisplay += y;
                                q[s].opponent += u;
                                if (v && q[s].resultDisplay.length == 0) {
                                    q[s].resultDisplay += '<div class="' + w + ' pull-right" style="margin-top:2px;margin-bottom:3px;margin-right:10px;">' + x + "</div>"
                                }
                            }
                        }
                    }
                });
                p3.fT(A.template, function(C) {
                    var B = 0;
                    if (A.editMode) {
                        B = A.options.sections.sectionId
                    }
                    A.$el.html(C({
                        games: q,
                        editMode: A.editMode,
                        sectionId: B,
                        expanded: A.options.expanded,
                        showViewAll: q.length > A.options.ItemCount,
                        isNarrow: A.options.isNarrow,
                        customHeader: A.options.customHeader,
                        canEdit: A.options.canEdit
                    }))
                })
            }
        },
        initialize: function() {
            var q = this;
            q.editMode = q.options.editMode
        },
        render: function(q) {
            $(q).append(this.el)
        },
        editResults: function(s) {
            var t = this,
                q = $(s.currentTarget),
                r = q.hasClass("existing");
            p3.rV(new n.Vs.EditResultsView({
                gameId: q.data("gameid"),
                existingData: r,
                parentView: t,
                newsId: q.data("newsid"),
                siteInd: q.data("site"),
                possibleOpponents: t.options.possibleOpponents
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        },
        toggleItems: function(q) {
            var r = false;
            if ($("#scores-show-all").hasClass("show-data")) {
                r = true;
                $("#scores-show-all").removeClass("show-data").addClass("hide-data").html("Show Less");
                $(".score-region.initial-hide").show()
            } else {
                $("#scores-show-all").removeClass("hide-data").addClass("show-data").html("Show All");
                $(".score-region.initial-hide").hide()
            }
            this.options.expanded = r;
            this.trigger("showAll", r)
        }
    });
    n.Vs.Statistics = Bb.View.extend({
        template: "athleticteam/athleticteam.statistics.template.html",
        renderTemplate: function() {
            var y = this,
                t = 0,
                q = 0,
                s = 0,
                x = 0,
                u = 0,
                w = 0,
                r = "-",
                v = "-";
            if (y.collection !== undefined) {
                y.collection.each(function(z) {
                    if (z.get("result") && !z.get("scrimmage_ind")) {
                        var B, A;
                        A = z.get("league_ind");
                        B = z.get("result");
                        if (B) {
                            B = B.toUpperCase()
                        }
                        switch (B) {
                            case "WIN":
                                if (A) {
                                    t += 1
                                } else {
                                    x += 1
                                }
                                break;
                            case "LOSS":
                                if (A) {
                                    q += 1
                                } else {
                                    u += 1
                                }
                                break;
                            case "TIE":
                                if (A) {
                                    s += 1
                                } else {
                                    w += 1
                                }
                                break
                        }
                    }
                });
                r = y.getPercentage(t, q, s);
                v = y.getPercentage(x, u, w);
                p3.fT(y.template, function(z) {
                    y.$el.html(z({
                        leagueWins: t,
                        leagueLosses: q,
                        leagueTies: s,
                        nonLeagueWins: x,
                        nonLeagueLosses: u,
                        nonLeagueTies: w,
                        leaguePercentage: r,
                        nonLeaguePercentage: v,
                        isNarrow: y.options.isNarrow,
                        customHeader: y.options.customHeader
                    }))
                })
            }
        },
        render: function(q) {
            $(q).append(this.el)
        },
        getPercentage: function(t, q, s) {
            var r = "-";
            if (t + q + s > 0) {
                if (t == 0) {
                    r = ".000"
                } else {
                    if (q == 0) {
                        r = "1.000"
                    } else {
                        r = (t / (t + q)).toFixed(3).substring(1)
                    }
                }
            }
            return r
        }
    });
    p3.router().route("teampageedit/:sectionId/:leadSectionId", "teampageedit", function(r, q) {
        p3.setTitle("Edit Team Page");
        g.Us.loadPageEditor(q, r, 2, 3)
    })
}(p3.module("LMS/teampage")));
(function(q) {
    var o = p3.module("shared/tabs"),
        e = p3.module("shared/datepicker"),
        m = p3.module("shared/mediaviewer"),
        j = p3.module("cms/shared/link"),
        p = p3.module("cms/shared/text"),
        g = p3.module("cms/shared/download"),
        l = p3.module("cms/shared/media"),
        a = p3.module("shared/base"),
        d = p3.Us.Culture,
        b = p3.module("cms/shared/content"),
        i = p3.module("cms/shared/grouppublish"),
        k = p3.module("shared/ltitool"),
        n = p3.module("utilities/smodal"),
        h = p3.Us.Enum,
        f = p3.module("LMS/discussion"),
        c = p3.module("cms/shared/contentsubcategory");
    q.Ms.Topic = Bbm.extend({
        idAttribute: "Id",
        url: function() {
            return aP || ""
        }
    });
    q.Ms.TopicWarningSave = Bbm.extend({
        idAttribute: "TopicIndexId",
        urlRoot: "Topic/TopicWarningSave"
    });
    q.Cs.Topic = Bbc.extend({
        model: q.Ms.Topic,
        initialize: function(r, s) {
            this.sectionId = s.sectionId || 0;
            this.leadSectionId = s.leadSectionId || 0;
            this.active = s.active || false;
            this.future = s.future || false;
            this.expired = s.expired || false;
            this.shared = s.shared || false
        },
        url: function() {
            return aP + "datadirect/sectiontopicsget/" + this.leadSectionId + "/?format=json&active=" + this.active + "&future=" + this.future + "&expired=" + this.expired + "&sharedTopics=" + this.shared
        }
    });
    q.Cs.ExistingTopic = Bbc.extend({
        model: q.Ms.Topic,
        initialize: function(r, s) {
            this.sectionId = s.sectionId || 0;
            this.leadSectionId = s.leadSectionId || 0;
            this.active = s.active || false;
            this.future = s.future || false;
            this.expired = s.expired || false;
            this.shared = s.shared || false
        },
        url: function() {
            return aP + "datadirect/sectiontopicsget/" + this.leadSectionId + "/?format=json&active=" + this.active + "&future=" + this.future + "&expired=" + this.expired + "&sharedTopics=" + this.shared
        },
        filters: undefined,
        comparator: function(r) {
            return r.get("Name")
        },
        changeSort: function(r) {
            if (!_.isUndefined(this.filters)) {
                this.comparator = this.filters[r]
            }
        }
    });
    q.Ms.Sections = Bbm.extend({
        idAttribute: "SectionId",
        url: function() {
            return ""
        }
    });
    q.Cs.Sections = Bbc.extend({
        model: q.Ms.Sections,
        initialize: function(r, s) {
            this.sectionId = s.sectionId || 0
        },
        url: function() {
            return aP + "datadirect/SectionsForTeacher/?format=json"
        }
    });
    q.Ms.TopicSave = Bbm.extend({
        idAttribute: "TopicId",
        url: function() {
            var r;
            if (this.get("TopicId") > 0) {
                r = aP + "topic/update/?format=json"
            } else {
                r = aP + "topic/create/?format=json"
            }
            return r
        }
    });
    q.Cs.TopicCopy = Bbc.extend({
        model: Bbm.extend({
            idAttribute: "TopicId"
        }),
        url: function() {
            return aP + "topic/copy/?format=json"
        }
    });
    q.Ms.TopicGroup = Bbm.extend({
        idAttribute: "Id",
        url: function() {
            return aP || ""
        }
    });
    q.Cs.TopicGroup = Bbc.extend({
        model: q.Ms.TopicGroup,
        initialize: function(r, s) {
            this.topicId = s.topicId || 0
        },
        url: function() {
            return aP + "datadirect/topicget/" + this.topicId + "/?format=json"
        },
        useFullEditModal: function(s) {
            var r = this,
                t = false;
            r.each(function(u) {
                if (u.get("Primary") && u.get("ViewerIsOwnerInd")) {
                    t = true
                }
                if (u.get("Primary") && u.get("SectionId").toString() === s.toString()) {
                    t = true
                }
            });
            return t
        },
        isPrimarySection: function(s) {
            var r = this,
                t = false;
            s = s.toString();
            r.each(function(u) {
                if (s === u.get("SectionId").toString() && u.get("Primary")) {
                    t = true
                }
            });
            return t
        },
        getShareInfo: function(A) {
            var r = this,
                x = 0,
                z = "",
                y = "",
                s = "",
                w, v, t, u;
            A = A.toString();
            r.each(function(B) {
                v = B.get("SectionId").toString();
                t = B.get("GroupName");
                u = B.get("Primary");
                w = B.get("SchoolYear");
                if (w !== undefined && w !== null && w.length > 0) {
                    w = " (" + w + ")"
                } else {
                    w = ""
                }
                if (r.isPrimarySection(A)) {
                    if ((A !== v) && !u) {
                        x = x + 1;
                        y = "Shared with: ";
                        z = z + (z.length > 0 ? "; " : "") + t + w
                    }
                } else {
                    if ((A !== v) && u) {
                        x = x + 1;
                        y = "Shared from: ";
                        z = z + (z.length > 0 ? "; " : "") + t + w
                    }
                }
                if (u) {
                    if (s.length === 0) {
                        s = B.get("CreatedByUser")
                    }
                }
                if ((A === v) && (B.get("ShareWarningInd") === 0) && (q.Data.shareWarningDismissed === false)) {
                    q.Data.shareWarningDismissed = true
                }
            });
            return {
                createText: s,
                shareLabelText: y,
                shareText: z,
                shareCount: x
            }
        }
    });
    q.Ms.TopicDelete = Bbm.extend({
        idAttribute: "Id",
        url: function() {
            return aP + "topic/delete/" + this.get("Id") + "/?format=json&sections=" + this.get("sections") + "&option=" + this.get("option")
        }
    });
    q.Ms.TopicContent = Bbm.extend({
        url: function() {
            return aP || ""
        }
    });
    q.Cs.TopicContent = Bbc.extend({
        model: q.Ms.TopicContent,
        initialize: function(r, s) {
            this.topicId = s.topicId || 0;
            this.topicIndexId = s.topicIndexId || 0
        },
        url: function() {
            return aP + "datadirect/topiccontentget/" + this.topicId + "/?format=json&index_id=" + this.topicIndexId
        }
    });
    q.Ms.TopicWidgetCreate = Bbm.extend({
        idAttribute: "WidgetId",
        url: function() {
            return aP + "widget/create/?format=json"
        }
    });
    q.Ms.TopicWidgetUpdate = Bbm.extend({
        idAttribute: "WidgetId",
        url: function() {
            return aP + "widget/update/" + this.get("WidgetId") + "/?format=json"
        }
    });
    q.Ms.TopicWidgetDelete = Bbm.extend({
        idAttribute: "Id",
        url: function() {
            return aP + "widget/delete/" + this.get("Id") + "/?format=json"
        }
    });
    q.Ms.TopicContentSort = Bbm.extend({
        idAttribute: "TopicId",
        url: function() {
            return aP + "topic/updatecontentsort/?format=json"
        }
    });
    q.Ms.DiscussionItem = Bbm.extend({
        idAttribute: "MessageId",
        url: function() {
            return aP || ""
        }
    });
    q.Cs.DiscussionItem = Bbc.extend({
        model: q.Ms.DiscussionItem,
        initialize: function(r, s) {
            this.topicIndexId = s.topicIndexId || 0;
            this.lastDate = s.lastDate || ""
        },
        url: function() {
            return aP + "discussionitem/discussionitemsget/?format=json&contentIndexId=" + this.topicIndexId + "&viewDate=" + this.lastDate + "&contentId=386"
        }
    });
    q.Cs.DiscussionItemRefresh = a.Cs.Stream.extend({
        model: q.Ms.DiscussionItem,
        initialize: function(r, s) {
            this.topicIndexId = s.topicIndexId || 0;
            this.lastDate = s.lastDate || "";
            this.count = 0
        },
        add: function(w, x) {
            var t = [],
                r, v, s, u;
            if (w.length) {
                s = 0;
                u = _.max(w, function(y) {
                    return y.ModifiedDateTicks
                });
                if (u && u.ModifiedDateTicks) {
                    this.lastDate = u.ModifiedDateTicks
                }
                for (r = 0; r < w.length; r++) {
                    v = w[r];
                    switch (v.AuditAction) {
                        case "D":
                            $("#message_container_" + v.MessageId).remove();
                            break;
                        case "I":
                            if (_.isUndefined(this.get(v.MessageId))) {
                                s += 1;
                                t.push(v)
                            }
                            break;
                        case "U":
                            $("#msgDisplay_" + v.MessageId).html("<p>" + v.Message + "</p>");
                            $("#msgEdit_" + v.MessageId).text(v.Message);
                            break;
                        default:
                            break
                    }
                }
                this.count = this.count + s;
                if (s > 0) {
                    $("#messageLoadButton").html("(  <strong>" + this.count + "</strong> ) Load New Content");
                    $("#messageLoadRegion").show()
                }
            }
            return Bbc.prototype.add.call(this, t, x)
        },
        url: function() {
            return aP + "discussionitem/discussionitemsrefresh/?format=json&contentIndexId=" + this.topicIndexId + "&viewDate=" + this.lastDate + "&contentId=386"
        }
    });
    q.Ms.DiscussionItemCreate = Bbm.extend({
        idAttribute: "MessageId",
        url: function() {
            return aP + "discussionitem/create/?format=json"
        }
    });
    q.Ms.DiscussionItemUpdate = Bbm.extend({
        idAttribute: "MessageId",
        url: function() {
            return aP + "discussionitem/update/?format=json"
        }
    });
    q.Ms.DiscussionItemDelete = Bbm.extend({
        idAttribute: "Id",
        url: function() {
            return aP + "discussionitem/delete/" + this.get("Id") + "/?format=json&contextLabelId=27&contextValue=" + this.get("contextValue")
        }
    });
    q.Cs.ExistingSchoolYears = Bbc.extend({
        url: "datadirect/SchoolYearsGet/"
    });
    q.Cs.ExistingSections = Bbc.extend({
        url: "datadirect/TopicSectionsForTeacher/"
    });
    q.Cs.SchoolYearTermGet = Bbc.extend({
        url: function() {
            return aP + "datadirect/SchoolYearTermGet/"
        }
    });
    q.Cs.TopicContentTypes = Bbc.extend({
        model: Bbm,
        url: "DataDirect/TopicContentTypesGet"
    });
    q.Ms.TopicContentIndex = Bbm.extend({
        url: function() {
            return aP + "datadirect/topiccontentindexget?format=json&topicId=" + this.get("topicId") + "&contentId=" + this.get("contentId")
        }
    });
    q.Cs.ExistingContent = Bbc.extend({
        initialize: function(r, s) {
            this.contentId = s.contentId || 0;
            this.sectionId = s.sectionId || 0
        },
        url: function() {
            return aP + "datadirect/movecontentget?format=json&contentId=" + this.contentId + "&sectionId=" + this.sectionId
        },
        changeSort: function(r) {
            if (!_.isUndefined(this.filters)) {
                this.comparator = this.filters[r]
            }
        }
    });
    q.Ms.TopicContentMove = Bbm.extend({
        url: function() {
            return aP + "topic/movecontentsave/?format=json"
        }
    });
    q.Ms.RemoveContent = Bbm.extend({
        url: function() {
            return aP + "topic/removecontent/?format=json"
        }
    });
    q.Cs.SectionsByYear = Bbc.extend({
        url: "datadirect/AssignmentSectionsForTeacher/"
    });
    q.Ms.SetPriorities = Bbm.extend({
        url: function() {
            return aP + "topic/setpriorities"
        }
    });
    q.Cs.CurrentYearFaculty = Bbc.extend({
        url: "datadirect/CurrentYearFaculty/"
    });
    q.Cs.CopyableFaculty = Bbc.extend({
        url: "datadirect/GetCopyableTopicOwners/"
    });
    q.Ms.TopicContentUnlock = Bbm.extend({
        urlRoot: "topic/TopicContentUnlock"
    });
    q.Vs.TopicManageView = Bb.View.extend({
        template: "topic/topic.manage.template.html",
        events: {
            "click input": "refreshTopics",
            "click .topic-add-button": "openAddModal",
            "click #import-topic-btn": "openImportModal",
            "click img.mediaContainer": "showImgTopicDetail",
            "click .fadeBox": "showTopicDescription",
            "click .topic-delete": "showTopicDelete",
            "click #set-priority-buton": "showPriorityDialog",
            "click .topic-share": "showTopicShare",
            "click .topic-publish-box": "showTopicPublish",
            "click .topic-share-edit": "showTopicPublish"
        },
        renderTemplate: function() {
            var t = this,
                s = p3.Data.Context.getSelectedPersona().Id,
                r = (s !== h.AppPersona.PARENT.Value && s !== h.AppPersona.STUDENT.Value && s !== h.AppPersona.FRIEND.Value && s !== h.AppPersona.ALUM.Value);
            t.options.studentId = t.options.studentId || 0;
            t.collection.fetch({
                success: function() {
                    if (t.collection.length > 0) {
                        var u = -1;
                        t.collection.each(function(v) {
                            u += 1;
                            if (u > 0 && u % 4 === 0) {
                                v.set("newRow", true)
                            }
                            if (v.get("TopicAuthorShare") && v.get("TopicAuthorShare").length > 0 && v.get("PublishDate") === null && v.get("TopicAuthorCopy") === null) {
                                v.set("ShowPublish", true)
                            }
                        })
                    }
                    p3.fT(t.template, function(v) {
                        t.$el.html(v({
                            topic: t.collection.toJSON(),
                            active: t.options.active,
                            future: t.options.future,
                            expired: t.options.expired,
                            shared: t.options.shared,
                            schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                            canAdd: t.canEdit,
                            leadSectionId: t.options.leadSectionId,
                            sectionId: t.options.sectionId,
                            studentId: t.options.studentId,
                            displayTopicAuthorInfo: r
                        }));
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.MathJax, function() {
                            MathJax.Hub.Queue(["Typeset", MathJax.Hub])
                        })
                    });
                    window.setTimeout(function() {
                        $(".topicBox").each(function(w, v) {
                            if (v.scrollHeight === v.clientHeight) {
                                $("#topicFade_" + v.id.substring(9)).hide()
                            }
                        })
                    }, 100)
                },
                error: function() {
                    p3.displayError("Error loading current date")
                }
            })
        },
        initialize: function(v) {
            var z = this,
                y = new q.Cs.Topic({}, {
                    sectionId: this.options.sectionId,
                    leadSectionId: this.options.leadSectionId,
                    active: this.options.active,
                    future: this.options.future,
                    expired: this.options.expire,
                    shared: this.options.shared
                }),
                r, x, u, t, w, s = (p3.Config.IsSmallCollege) ? "Error loading faculty sections" : "Error loading teacher sections";
            this.collection = y;
            this.userHasFullAccess = this.options.userHasFullAccess || false;
            this.isOwner = this.options.isOwner || false;
            this.isManager = this.options.isManager || false;
            this.content = this.options.content;
            this.canEdit = false;
            this.isEditor = false;
            if (this.userHasFullAccess) {
                this.canEdit = true
            } else {
                if (this.content) {
                    r = this.content.get(386);
                    if (r && r.get("EditorAccess")) {
                        this.canEdit = true;
                        this.isEditor = true
                    }
                }
            }
            x = new q.Cs.Sections({}, {
                sectionId: this.options.leadSectionId
            });
            this.sections = x;
            if (this.canEdit) {
                if (z.isOwner) {
                    u = 0
                } else {
                    if (z.isManager) {
                        u = 1
                    } else {
                        u = 2
                    }
                }
                x.fetch({
                    async: false,
                    data: {
                        sectionId: x.sectionId,
                        associationId: 1,
                        filterInd: u
                    },
                    error: function() {
                        p3.displayError(s)
                    },
                    success: function() {
                        if (x.length > 0) {
                            x.each(function(A) {
                                if (A.get("SectionId") == z.options.sectionId) {
                                    A.set("Primary", true)
                                }
                            })
                        }
                    }
                })
            }
            t = new g.Cs.FileTypes({}, {});
            p3.Data.fileTypes = t;
            t.fetch({
                error: function() {
                    p3.displayError("Error loading filetypes")
                }
            });
            w = new q.Cs.ExistingSchoolYears({}, {});
            this.schoolYears = w;
            w.fetch({
                error: function() {
                    p3.displayError("Error loading school years")
                }
            });
            if (_.isUndefined(q.Data)) {
                q.Data = {}
            }
            q.Data.LevelNum = v.levelNum;
            q.Data.DurationId = v.durationId;
            q.Data.Duration = null;
            q.Data.SchoolYear = v.schoolYearLabel;
            q.Data.contextLabelId = this.options.contextLabelId
        },
        render: function(r) {
            $(r).append(this.el);
            this.renderTemplate()
        },
        refreshTopics: function() {
            q.Us.refreshTopics(true, 0, this.options.leadSectionId, this)
        },
        openAddModal: function(r) {
            r.preventDefault();
            var s = new q.Ms.Topic({
                Id: 0
            });
            q.Us.showEditModal(s, this.sections, this);
            return false
        },
        openImportModal: function(r) {
            var t = this,
                s = new q.Vs.ImportWindow({
                    schoolYears: t.schoolYears,
                    sections: t.sections,
                    currentSection: t.options.sectionId,
                    leadSectionId: t.options.leadSectionId,
                    topicView: t
                });
            r.preventDefault();
            p3.rV(s, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        },
        showImgTopicDetail: function(r) {
            p3.router().navigate("#topicdetail/" + r.currentTarget.id.substring(4) + "/" + this.options.leadSectionId + "/" + this.options.sectionId + "/" + $("#" + r.currentTarget.id).attr("tiid") + "/" + this.options.studentId + "/0", true);
            return false
        },
        showTopicDescription: function(t) {
            var u = t.currentTarget.id.substring(10),
                r = $("#topicBox_" + u),
                s = $("#topicFade_" + u).children()[0];
            if (r.hasClass("topicBox-expanded")) {
                r.removeClass("topicBox-expanded").addClass("topicBox");
                s.innerHTML = '<i class="p3icon-moreInfo"></i> Show Full Description'
            } else {
                r.removeClass("topicBox").addClass("topicBox-expanded");
                s.innerHTML = '<i class="p3icon-moreInfo"></i> Hide Full Description'
            }
            return false
        },
        showTopicDelete: function(s) {
            var w = this,
                r = $(s.currentTarget),
                t = r.data("id"),
                v = w.getTopic(t),
                u;
            u = v.length > 1;
            p3.rV(new q.Vs.TopicDeleteView({
                topicId: t,
                groups: v,
                showRadios: u,
                sectionId: w.sections.sectionId,
                leadSectionId: w.options.leadSectionId,
                topicView: w
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal, {});
            return false
        },
        showTopicShare: function(s) {
            var v = this,
                r = $(s.currentTarget),
                t = r.data("id"),
                u = v.getTopic(t);
            p3.rV(new q.Vs.ShareModal({
                topicId: t,
                leadSectionId: v.options.leadSectionId,
                groups: u,
                topicView: v
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal, {});
            return false
        },
        showTopicPublish: function(s) {
            var w = this,
                r = $(s.currentTarget),
                t = r.data("id"),
                v = w.getTopic(t),
                u = w.collection.find(function(x) {
                    return x.get("TopicID") == t
                });
            p3.rV(new q.Vs.PublishShareModal({
                topicId: t,
                leadSectionId: w.options.leadSectionId,
                groups: v,
                topicView: w,
                canEditTopicInd: u.get("AllowEdit")
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal, {});
            return false
        },
        getTopic: function(r) {
            var s = new q.Cs.TopicGroup({}, {
                topicId: r
            });
            s.fetch({
                data: {
                    id: r
                },
                async: false,
                error: function() {
                    p3.displayError("Error loading topic sections")
                }
            });
            return s
        },
        showPriorityDialog: function(r) {
            var t = this,
                s = new q.Vs.PriorityEditView({
                    leadSectionId: t.options.leadSectionId
                });
            p3.rV(s, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            s.on("priorityChanged", function() {
                t.refreshTopics()
            })
        }
    });
    q.Vs.TopicEditView = Bb.View.extend({
        template: "topic/topic.edit.template.html",
        events: {
            "click #btnSaveTopic": "saveTopic",
            "click #btnSaveAddTopic": "saveTopic",
            "click #btnSaveEditTopic": "saveTopic",
            "change #txtTitle": "removeTitleValidation",
            "click a.accordion-toggle": "accordionClick",
            initPlugins: "initPlugins"
        },
        renderTemplate: function() {
            var t = this,
                s, r;
            t.sharedGroups = [];
            t.groups = new q.Cs.TopicGroup({}, {
                topicId: t.options.topic.id
            });
            t.groups.remove(t.groups.at(0));
            if (t.options.groups.length > 0) {
                t.options.groups.each(function(u) {
                    if (t.options.topic.id > 0) {
                        if (u.get("TopicIndexId")) {
                            if (u.get("Primary")) {
                                if (u.get("PublishDate")) {
                                    u.set("PDate", u.get("PublishDate").split(" ", 1)[0]);
                                    u.set("PublishDate", u.get("PDate"));
                                    u.set("IsSelected", true)
                                }
                                if (u.get("ExpireDate")) {
                                    u.set("EDate", u.get("ExpireDate").split(" ", 1)[0]);
                                    u.set("ExpireDate", u.get("EDate"))
                                }
                                t.groups.add(u)
                            } else {
                                t.sharedGroups.push(u.toJSON())
                            }
                        }
                    } else {
                        u.set("TopicIndexId", 0);
                        u.set("SectionId", u.get("LeadSectionId"));
                        t.groups.add(u)
                    }
                })
            }
            if (t.options.topic.id > 0) {
                p3.fT(t.template, function(u) {
                    t.$el.html(u({
                        topic: t.options.topic.toJSON(),
                        defaultDate: t.options.defaultDate,
                        schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                        canDrag: !window.head.browser.ie
                    }));
                    t.addGroupsView(true);
                    t.Containers = {};
                    t.Containers.shareContainer = $("#share-container");
                    t.addShareView()
                })
            } else {
                s = t.options.topicView.schoolYears;
                p3.fT(t.template, function(u) {
                    t.$el.html(u({
                        topic: t.options.topic.toJSON(),
                        defaultDate: t.options.defaultDate,
                        schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                        canDrag: !window.head.browser.ie,
                        SchoolYears: s.toJSON()
                    }));
                    t.addGroupsView(false);
                    t.Containers = {};
                    t.Containers.shareContainer = $("#share-container");
                    t.addShareView()
                });
                r = s.where({
                    Current: true
                });
                if (r.length > 0) {
                    t.currentYear = r[0].get("Id")
                }
            }
            t.$el.trigger("initPlugins")
        },
        initialize: function() {
            var r = this;
            p3.Layout.Containers.Modal.on("shown", function() {
                r.$el.trigger("initPlugins")
            })
        },
        initPlugins: function() {
            var r = $("#fldDescription");
            if (r.length === 0) {
                if (q._htmlEditorTimer) {
                    window.clearInterval(q._htmlEditorTimer);
                    q._htmlEditorTimer = null
                }
                q._htmlEditorTimer = window.setInterval(function() {
                    r = $("#fldDescription");
                    if (r.length > 0) {
                        p3.showHtmlEditor("fldDescription", p3.Us.Enum.HtmlEditorCategories.FULLFONT, false, undefined, p3.Us.Enum.HtmlEditorEncoding.NUMERIC);
                        window.clearInterval(q._htmlEditorTimer);
                        q._htmlEditorTimer = null
                    }
                }, 100)
            } else {
                p3.showHtmlEditor("fldDescription", p3.Us.Enum.HtmlEditorCategories.FULLFONT, false, undefined, p3.Us.Enum.HtmlEditorEncoding.NUMERIC)
            }
            if ($(".date-input").length < 2) {
                if (q._datepickerTimer) {
                    window.clearInterval(q._datepickerTimer);
                    q._datepickerTimer = null
                }
                q._datepickerTimer = window.setInterval(function() {
                    r = $("#fldDescription");
                    if ($("#fldDescription").length > 0) {
                        e.Us.initialize(".date-input");
                        window.clearInterval(q._datepickerTimer);
                        q._datepickerTimer = null
                    }
                }, 100)
            } else {
                e.Us.initialize(".date-input")
            }
        },
        render: function(r) {
            var s = this;
            $(r).append(this.el);
            this.renderTemplate();
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, s.initializeFileUpload)
            })
        },
        dispose: function() {
            var r = tinyMCE.get("fldDescription");
            if (r) {
                r.remove()
            }
        },
        addGroupsView: function(r) {
            var s = this;
            s.groupView = new i.Vs.PublishView({
                groups: s.groups,
                defaultDate: s.options.defaultDate,
                showPublish: true,
                showExpire: true,
                isEdit: r,
                contentId: 386
            });
            window.setTimeout(function() {
                p3.rV(s.groupView, $("#groups-container"), true);
                window.setTimeout(function() {
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                }, 1000)
            }, 100)
        },
        addShareView: function() {
            var r = this;
            r.shareView = new q.Vs.ShareView({
                groups: r.sharedGroups,
                topic: r.options.topic
            });
            p3.rV(r.shareView, r.Containers.shareContainer, true)
        },
        initializeFileUpload: function() {
            var t = false,
                r = $("#fileupload"),
                s = function() {
                    r.fileupload({
                        url: p3.Config.RootPath + "utilities/FileTransferHandler.ashx",
                        autoUpload: true
                    }).bind("fileuploadadd", function(v, u) {
                        t = l.Us.mediaFileSelected(v, u, "photo");
                        if (t) {
                            u.submit()
                        }
                    }).bind("fileuploaddone", function(v, u) {
                        if (t) {
                            $("#fileupload p.muted").removeClass("alert alert-error").html("Change Photo");
                            $(".topic-cover-image").attr("src", "/ftpimages/pdTemp/" + u.result[0].name)
                        } else {
                            $("#fileupload p.muted").addClass("alert alert-error").html("Unsupported image type, upload failed.")
                        }
                    })
                };
            if (r.length < 1) {
                if (q._fileuploadTimer) {
                    window.clearInterval(q._fileuploadTimer);
                    q._fileuploadTimer = null
                }
                q._fileuploadTimer = window.setInterval(function() {
                    if ($("#fldDescription").length > 0) {
                        s();
                        window.clearInterval(q._fileuploadTimer);
                        q._fileuploadTimer = null
                    }
                }, 100)
            } else {
                s()
            }
        },
        saveTopic: function(A) {
            var I = this,
                y = (A.target.id === "btnSaveAddTopic"),
                E = (A.target.id === "btnSaveEditTopic"),
                H = true,
                D = "",
                B, z, F, G, C, r = $("#btnSaveTopic"),
                s = $("#btnSaveAddTopic"),
                t = $("#btnSaveEditTopic"),
                w = $(".btn-layout.active"),
                x = $("#txtTitle"),
                u = $(".topic-cover-image"),
                v = $("#topic_edit_error_region");
            r.button("loading");
            s.button("loading");
            t.button("loading");
            if (w.length === 0) {
                H = false;
                D = "Please select a layout."
            }
            if (x.val().length === 0) {
                H = false;
                $(".topic-title-group").addClass("error")
            } else {
                if (H) {
                    H = I.groupView.getSelectedGroupArray();
                    if (H) {
                        B = I.groupView.selectedArray
                    } else {
                        D = I.groupView.errorMessage
                    }
                }
            }
            if (I.shareView.getSharedGroups()) {
                if (H) {
                    B = B.concat(I.shareView.sharedGroups)
                }
            } else {
                H = false;
                D += "<div>" + I.shareView.errorMessage + "<div>"
            }
            if (H) {
                z = tinyMCE.get("fldDescription");
                if (z) {
                    z.save()
                }
                F = new q.Ms.TopicSave({
                    TopicId: I.options.topic.id,
                    ContextLabelId: q.Data.contextLabelId,
                    OldThumbFilename: I.options.topic.get("ThumbFilename"),
                    AllowCopy: I.shareView.allowCopy
                });
                G = "";
                if (u.attr("src").indexOf("topicholder.png") === -1) {
                    G = u.attr("src")
                }
                F.set({
                    ShortDescription: x.val(),
                    LongDescription: $("#fldDescription").val(),
                    groups: B,
                    ThumbFilename: G,
                    LayoutId: w.data("layout")
                });
                F.save({}, {
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error saving topic")
                    },
                    success: function() {
                        var K, L, J;
                        if (E) {
                            I.doSaveEdit(F.get("TopicId"), I.options.topicView.options.leadSectionId)
                        } else {
                            if (y) {
                                K = new q.Ms.Topic({
                                    Id: 0
                                });
                                p3.rV(new q.Vs.TopicEditView({
                                    topic: K,
                                    groups: I.options.topicView.sections,
                                    defaultDate: I.options.defaultDate,
                                    topicView: I.options.topicView,
                                    detailPage: I.options.detailPage,
                                    callback: I.options.callback
                                }), p3.Layout.Containers.Modal, true);
                                e.Us.initialize(".date-input");
                                p3.showHtmlEditor("fldDescription", p3.Us.Enum.HtmlEditorCategories.FULLFONT, false, undefined, p3.Us.Enum.HtmlEditorEncoding.NUMERIC);
                                p3.setModalHeight(p3.Layout.Containers.Modal)
                            } else {
                                if (!I.options.detailPage) {
                                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                                }
                            }
                            if (I.options.detailPage) {
                                G = "";
                                if (I.options.topic.id > 0) {
                                    if (F.get("ThumbFilename")) {
                                        G = F.get("ThumbFilename")
                                    }
                                    K = new q.Ms.Topic({
                                        Id: I.options.topic.id,
                                        Name: F.get("ShortDescription"),
                                        Description: F.get("LongDescription"),
                                        ThumbFilename: G,
                                        LayoutId: F.get("LayoutId"),
                                        AllowCopy: I.shareView.allowCopy
                                    });
                                    I.options.topic = K;
                                    I.options.topicView.model = K;
                                    L = new q.Cs.TopicGroup({}, {
                                        topicId: I.options.topic.id
                                    });
                                    L.remove(L.at(0));
                                    I.options.topicView.options.topicGroups = L;
                                    I.options.topicView.topicGroups = L;
                                    for (C = 0; C < B.length; C++) {
                                        if (B[C].Selected) {
                                            J = new q.Ms.TopicGroup();
                                            L.add(J);
                                            if (B[C].ExpireDate) {
                                                J.set("ExpireDate", B[C].ExpireDate + " 1")
                                            }
                                            J.set("PublishDate", B[C].PublishDate + " 1");
                                            J.set("Selected", true);
                                            J.set("GroupName", B[C].GroupName);
                                            J.set("Primary", B[C].PrimaryInd);
                                            J.set("SectionId", B[C].ContextValue);
                                            J.set("TopicIndexId", 1);
                                            J.set("GroupName", B[C].GroupName);
                                            J.set("AllowEdit", B[C].AllowEdit);
                                            J.set("ContextLabelId", B[C].ContextLabelId)
                                        }
                                    }
                                    if (I.options.callback !== undefined) {
                                        I.options.callback()
                                    }
                                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                                }
                            } else {
                                q.Us.refreshTopics(true, 0, I.options.topicView.options.leadSectionId, I.options.topicView)
                            }
                        }
                    }
                })
            } else {
                if (!H) {
                    r.button("reset");
                    s.button("reset");
                    t.button("reset");
                    if (D.length > 0) {
                        v.html(D);
                        v.addClass("alert").addClass("alert-error")
                    } else {
                        v.html("");
                        v.removeClass()
                    }
                }
            }
            return false
        },
        doSaveEdit: function(t, r) {
            var v = this,
                s = new q.Cs.TopicGroup({}, {
                    topicId: t
                }),
                u;
            s.fetch({
                data: {
                    id: t
                },
                success: function() {
                    if (s.length > 0) {
                        s.each(function(w) {
                            if (w.get("SectionId") == r) {
                                u = w.get("TopicIndexId")
                            }
                        })
                    }
                    p3.router().navigate("#topicdetailedit/" + t + "/" + r + "/" + v.options.topicView.options.sectionId + "/" + u + "/" + v.options.topicView.options.studentId, true)
                },
                error: function() {
                    p3.displayError("Error getting topic index id")
                }
            })
        },
        removeTitleValidation: function(r) {
            $(".topic-title-group").removeClass("error")
        },
        accordionClick: function(s) {
            var r = $(".accordion-body");
            r.fadeToggle();
            return false
        }
    });
    q.Vs.TopicDetailLayoutView = Bb.View.extend({
        template: "topic/topic.detaillayout.template.html",
        events: {
            "click .topic-back-btn": "goBack"
        },
        isFixed: false,
        renderTemplate: function() {
            var v = this,
                u, t, r, s;
            v.options.contextLabelId = -1;
            p3.fT(v.template, function(w) {
                u = new q.Cs.TopicGroup({}, {
                    topicId: v.options.topicId
                });
                v.topicGroups = u;
                t = new q.Ms.Topic({
                    Id: v.options.topicId
                });
                v.topic = t;
                u.fetch({
                    data: {
                        id: v.topicGroups.Id
                    },
                    success: function() {
                        var x;
                        if (u.length > 0) {
                            r = -1;
                            u.each(function(y) {
                                r += 1;
                                x = y.get("SectionId").toString();
                                if (x === v.options.sectionId || x === v.options.leadSectionId) {
                                    t.set("Name", y.get("Name"));
                                    t.set("Description", y.get("Description"));
                                    t.set("ThumbFilename", y.get("ThumbFilename"));
                                    t.set("LayoutId", y.get("LayoutId"));
                                    v.options.contextLabelId = y.get("ContextLabelId")
                                } else {
                                    if (r === 0) {
                                        t.set("Name", y.get("Name"));
                                        t.set("Description", y.get("Description"));
                                        t.set("ThumbFilename", y.get("ThumbFilename"));
                                        t.set("LayoutId", y.get("LayoutId"));
                                        v.options.contextLabelId = y.get("ContextLabelId")
                                    }
                                }
                            })
                        }
                        s = q.Us.buildRows(t.get("LayoutId"));
                        v.$el.html(w({
                            row: s
                        }));
                        v.outputContent(v.options.topicId, v.options.topicIndexId, t.get("ThumbFilename"), t.get("Name"), t.get("Description"))
                    },
                    error: function() {
                        p3.displayError("Error loading topic")
                    }
                })
            })
        },
        initialize: function() {
            this.enableScrollNav()
        },
        dispose: function() {
            $(document).off("scroll", this.processScroll)
        },
        render: function(r) {
            $(r).append(this.el);
            this.renderTemplate()
        },
        goBack: function(r) {
            var t = this,
                s;
            r.stopPropagation();
            r.preventDefault();
            s = q.Us.getBackToTopicsLink(t.options);
            if (s) {
                window.location = s
            } else {
                window.history.back()
            }
        },
        enableScrollNav: function(t) {
            var s = $(document),
                r = $(".subnavbar"),
                u = r.length && r.offset().top - 120;

            function v() {
                if (r.length === 0) {
                    r = $(".subnavbar");
                    u = r.length && r.offset().top - 120
                }
                var x = s.scrollTop(),
                    w = r.hasClass("subnavbar-fixed");
                if (x >= u && !w) {
                    r.addClass("subnavbar-fixed")
                } else {
                    if (x <= u && w) {
                        r.removeClass("subnavbar-fixed")
                    }
                }
            }
            s.on("scroll", v)
        },
        outputContent: function(v, w, s, t, r) {
            var x = this,
                u = new q.Cs.TopicContent({}, {
                    topicId: v,
                    topicIndexId: w
                });
            u.fetch({
                data: {
                    id: u.topicIndexId
                },
                success: function() {
                    var F, z, A, G, B, E, D = 0,
                        H = "",
                        y, C, I = true;
                    G = p3.Data.SchoolContext.get("SchoolInfo").SchoolId;
                    if (u.length > 0) {
                        u = q.Us.collpaseDownloads(u);
                        u.each(function(J) {
                            B = "";
                            E = true;
                            J.set("inProcessing", false);
                            J.set("AVAlbum", false);
                            J.set("FileDesc", "");
                            switch (J.get("ContentId")) {
                                case 1:
                                    break;
                                case 2:
                                    J.set("IconClass", "p3icon-topicLink");
                                    if (J.get("Url").indexOf("www.") === 0) {
                                        J.set("Url", "http://" + J.get("Url"))
                                    }
                                    if (J.get("LinkImage") && J.get("LinkImage").length > 0) {
                                        J.set("LinkImageUrl", "/ftpimages/" + G + "/link/" + J.get("LinkImage"))
                                    }
                                    if (J.get("HoverFileName") && J.get("HoverFileName").length > 0) {
                                        J.set("HoverImageUrl", "/ftpimages/" + G + "/link/" + J.get("HoverFileName"))
                                    }
                                    break;
                                case 3:
                                    J.set("IconClass", "p3icon-topicDownload");
                                    J.set("index", D);
                                    J.set("outputSubCat", true);
                                    H = J.get("GenericSettings");
                                    y = J.get("AdditionalItems");
                                    for (C = 0; C < y.length; C++) {
                                        D = D + 1;
                                        y[C].index = D;
                                        if (H != y[C].GenericSettings && y[C].SubCategory && y[C].SubCategory.length > 0) {
                                            y[C].outputSubCat = true
                                        } else {
                                            y[C].outputSubCat = false
                                        }
                                        H = y[C].GenericSettings
                                    }
                                    break;
                                case 31:
                                    J.set("IconClass", "p3icon-topicPhoto");
                                    break;
                                case 165:
                                    J.set("showViewer", true);
                                    J.set("IconClass", "p3icon-topicAudio");
                                    if (!J.get("FilesProcessed")) {
                                        E = false
                                    }
                                    if (J.get("FilesInProcessing") > 0) {
                                        J.set("inProcessing", true)
                                    }
                                    J.set("AVAlbum", true);
                                    if (J.get("TotalFiles") == 1) {
                                        J.set("FileDesc", "Clip")
                                    } else {
                                        J.set("FileDesc", "Clips")
                                    }
                                    if (J.get("FileName")) {
                                        J.set("FileName", "/ftpimages/" + G + "/audio/" + J.get("FileName"))
                                    } else {
                                        J.set("FileName", "//libs-e1.myschoolapp.com/style1/icons/audioDefault.png")
                                    }
                                    break;
                                case 167:
                                    J.set("showViewer", true);
                                    J.set("IconClass", "p3icon-topicVideo");
                                    if (!J.get("RenditionsComplete")) {
                                        E = false
                                    }
                                    if (J.get("RenditionsComplete") == 0) {
                                        J.set("inProcessing", true)
                                    }
                                    J.set("AVAlbum", true);
                                    if (J.get("TotalFiles") == 1) {
                                        J.set("FileDesc", "Video")
                                    } else {
                                        J.set("FileDesc", "Videos")
                                    }
                                    if (J.get("FileName")) {
                                        J.set("FileName", "/ftpimages/" + G + "/video/" + J.get("FileName"))
                                    }
                                    break;
                                case 387:
                                    J.set("IconClass", "p3icon-topicWidget");
                                    J.set("Caption", J.get("ShortDescription"));
                                    J.set("Embed", "true");
                                    break;
                                case 404:
                                    J.set("thumb", s);
                                    break;
                                case 405:
                                    if (I) {
                                        B = '<div style="margin-bottom:10px;background-color:#fff;padding:10px;"><h2 style="margin-top:0px;">' + t + "</h2></div>"
                                    } else {
                                        B = '<div style="margin-bottom:10px;"><h2>' + t + "</h2></div>"
                                    }
                                    break;
                                case 406:
                                    if (r == null) {
                                        B = "<div></div>"
                                    } else {
                                        if (I) {
                                            B = '<div style="margin-bottom:10px;background-color:#fff;padding:10px;"><p>' + r + "</p></div>"
                                        } else {
                                            B = '<div style="margin-bottom:10px;"><p>' + r + "</p></div>"
                                        }
                                    }
                                    break;
                                case 407:
                                    B = '<div style="height:10px;">&nbsp;</div>';
                                    break;
                                case 408:
                                    B = '<div style="margin-bottom:10px;"><hr class="styleProp" /></div>';
                                    break;
                                case 415:
                                    break;
                                case p3.Us.Enum.Content.LTI.Value:
                                    J.set("IconClass", "p3icon-pageTools");
                                    J.set("Caption", J.get("ShortDescription"));
                                    J.set("Lti", "true");
                                    break;
                                default:
                                    break
                            }
                            if (B.length > 0) {
                                $("#column" + J.get("RowIndex") + "_" + J.get("ColumnIndex")).append(B)
                            } else {
                                if (J.get("ContentId") == 415) {
                                    F = p3.Data.Context.getSelectedPersona().Id;
                                    if (F == 2 || (F == 3) || F == 5 || F == 20 || (F == 1 && q.Data.contextLabelId == 12)) {
                                        z = new q.Cs.DiscussionItem({}, {
                                            topicIndexId: w
                                        });
                                        z.fetch({
                                            async: false,
                                            data: {
                                                topicIndexId: z.topicIndexId
                                            },
                                            success: function() {
                                                A = new q.Vs.DiscussionView({
                                                    topicIndexId: w,
                                                    row: J.get("RowIndex"),
                                                    column: J.get("ColumnIndex")
                                                });
                                                A.collection = z;
                                                p3.rV(A, "#column" + J.get("RowIndex") + "_" + J.get("ColumnIndex"), false);
                                                x.discussionView = A
                                            },
                                            error: function() {
                                                p3.displayError("Error loading discussion thread")
                                            }
                                        })
                                    }
                                } else {
                                    if (E) {
                                        p3.rV(new q.Vs.ContentView({
                                            content: J,
                                            previewInd: x.options.previewInd,
                                            topicIndexId: w
                                        }), "#column" + J.get("RowIndex") + "_" + J.get("ColumnIndex"), false)
                                    }
                                }
                            }
                        });
                        _.delay(function() {
                            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.MathJax, function() {
                                MathJax.Hub.Queue(["Typeset", MathJax.Hub])
                            })
                        }, 200)
                    }
                },
                error: function() {
                    p3.displayError("Error loading topic content")
                }
            })
        }
    });
    q.Vs.DetailView = Bb.View.extend({
        template: "topic/topic.detail.template.html",
        events: {},
        renderTemplate: function() {
            var r = this;
            p3.fT(r.template, function(t) {
                var s = r.options.topic.get("ThumbFilename");
                if (s) {
                    s += "?ver=" + d.localDateTime().getTime()
                }
                r.$el.html(t({
                    thumb: s,
                    Description: r.options.topic.get("Description"),
                    schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId
                }))
            })
        },
        render: function(r) {
            $(r).append(this.el);
            this.renderTemplate()
        }
    });
    q.Vs.ContentItem = Bb.View.extend({
        className: "pages-layout-block editable",
        template: "topic/topic.block.template.html",
        events: {
            "click .stuckalbum-delete-button": "openDeleteModal"
        },
        renderTemplate: function() {
            var w = this,
                u, s, v, r, t;
            if (w.model.get("ContentId") == 3) {
                w.template = "topic/topic.download.block.template.html";
                w.model.set("outputSubCat", true);
                v = w.model.get("GenericSettings");
                r = w.model.get("AdditionalItems");
                for (t = 0; t < r.length; t++) {
                    if (v != r[t].GenericSettings && r[t].SubCategory && r[t].SubCategory.length > 0) {
                        r[t].outputSubCat = true
                    } else {
                        r[t].outputSubCat = false
                    }
                    v = r[t].GenericSettings
                }
            } else {
                if (w.model.get("ContentId") === 2) {
                    s = "optTitle";
                    if (w.model.get("GenericSettings")) {
                        u = JSON.parse(w.model.get("GenericSettings"));
                        if (u.DisplayOption) {
                            s = u.DisplayOption
                        }
                    }
                }
            }
            switch (w.model.get("ContentId")) {
                case 3:
                    w.model.set("InfoNote", "Downloads from copied topics cannot be edited.");
                    break;
                case 31:
                    w.model.set("InfoNote", "Photos from copied topics cannot be edited.");
                    break;
                case 165:
                    w.model.set("InfoNote", "Audio from copied topics cannot be edited.");
                    break;
                case 167:
                    w.model.set("InfoNote", "Video from copied topics cannot be edited.");
                    break
            }
            p3.fT(w.template, function(x) {
                w.$el.html(x({
                    contentInfo: w.model.toJSON(),
                    displayOption: s
                }))
            })
        },
        render: function(r) {
            $(r).append(this.el);
            this.renderTemplate()
        },
        openDeleteModal: function(u) {
            var x = this,
                r = $(u.currentTarget),
                t = u.currentTarget.id.split("_"),
                v = t[0],
                s = t[1],
                w = new l.Ms.Video({}, {
                    albumId: s
                });
            w.fetch({
                success: function() {
                    if (w.get("FeatureDate")) {
                        w.set("FeatureDate", w.get("FeatureDate").split(" ")[0])
                    }
                    if (w.get("FeatureExpireDate")) {
                        w.set("FeatureExpireDate", w.get("FeatureExpireDate").split(" ")[0])
                    }
                    if (v === "edit") {
                        var y;
                        if (x.options.groupPageEdit && x.collection.length > 0 && x.collection.models.length > 0) {
                            y = x.collection.models[0].get("GroupId")
                        } else {
                            y = x.options.categoryId
                        }
                        l.Us.showPageVideoDeleteDialog(s, w, y, l.Us.getEditGroupList(x.options.sections, w.get("GroupList"), 0), w.get("Files"), w.get("AlbumDescription"), x.options.groupPageEdit, function(z) {
                            z.on({
                                videoSaved: function() {
                                    var A = x.options.parentView;
                                    if (this.options.deleteOption === 1) {
                                        r.parents(".pages-layout-block").remove();
                                        A.saveLayout(A.getLayoutOrder(-1, -1, -1), false)
                                    } else {
                                        A.trigger("contentChange")
                                    }
                                }
                            })
                        })
                    }
                },
                error: function() {
                    p3.displayError("Error loading video")
                }
            });
            return false
        }
    });
    q.Vs.ContentView = Bb.View.extend({
        className: "sortContainer",
        template: "topic/topic.content.template.html",
        events: {
            "click .media-cover": "showMedia",
            "click .album-refresh-link": "refreshProcessing",
            "click .lti-launch": "ltiLaunch"
        },
        renderTemplate: function() {
            var u = this,
                r, s = false,
                t = true;
            if (u.options.content.get("ContentId") == 3) {
                u.template = "topic/topic.download.template.html"
            } else {
                if (u.options.content.get("ContentId") === 2) {
                    if (u.options.content.get("GenericSettings")) {
                        r = JSON.parse(u.options.content.get("GenericSettings"));
                        if (r.DisplayOption) {
                            switch (r.DisplayOption) {
                                case "optImage":
                                    t = false;
                                    s = true;
                                    break;
                                case "optTitleImage":
                                    s = true;
                                    break
                            }
                        }
                    }
                }
            }
            p3.fT(u.template, function(v) {
                u.$el.html(v({
                    content: u.options.content.toJSON(),
                    SchoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                    previewInd: u.options.previewInd,
                    showTitle: t,
                    showImage: s
                }))
            })
        },
        initialize: function() {
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                return true
            })
        },
        render: function(r) {
            $(r).append(this.el);
            this.renderTemplate()
        },
        ltiLaunch: function(s) {
            s.stopPropagation();
            s.preventDefault();
            var x = this,
                v, r = "27",
                w, u = 0,
                t, z = "",
                y = "";
            if (x.options.topicIndexId && x.options.content) {
                v = x.options.content.get("ContentIndexId");
                w = x.options.topicIndexId;
                u = x.options.content.get("PresentationTarget");
                if (v && w && u) {
                    t = k.Us.BuildLaunchUrl(v, u, r, w);
                    if (u === h.LtiPresentationTargets.Redirect.id) {
                        t = t + "&url=" + encodeURIComponent(window.location.pathname + window.location.hash);
                        window.location.href = t
                    } else {
                        z = x.options.content.get("Caption");
                        window.open(t, z, y)
                    }
                }
            }
        },
        showMedia: function(u) {
            var r = $(u.currentTarget).attr("data-album"),
                t = $(u.currentTarget).attr("data-type"),
                s = "";
            switch (t) {
                case "31":
                    s = "photo";
                    break;
                case "165":
                    s = "audio";
                    break;
                case "167":
                    s = "video";
                    break;
                default:
                    break
            }
            m.Us.showModal(r, s);
            return false
        },
        refreshProcessing: function(u) {
            var t = u.currentTarget.attributes.getNamedItem("aid").value,
                s, r = $("#album_processing_" + t);
            r.hide();
            s = new l.Ms.Video({}, {
                albumId: t
            });
            s.fetch({
                success: function() {
                    var A = false,
                        z = false,
                        x = s.get("Files"),
                        y, w, v;
                    for (y = 0; y < x.length; y++) {
                        if (x[y].ProcessingStatus > 0) {
                            A = true
                        } else {
                            z = true
                        }
                    }
                    if (z) {
                        $("#album_label_" + t).hide();
                        $("#viewer_link_" + t).show()
                    }
                    if (A) {
                        r.show(400)
                    } else {
                        w = r.closest("div.span11").children(".topic-content-edit-disabled");
                        if (w === undefined || w === null || w.length === 0) {
                            w = r.closest("div.col-md-11").children(".topic-content-edit-disabled")
                        }
                        v = r.closest("div.span11").children(".topic-content-delete-disabled");
                        if (v === undefined || v === null || v.length === 0) {
                            v = r.closest("div.col-md-11").children(".topic-content-delete-disabled")
                        }
                        w.removeClass("topic-content-edit-disabled");
                        w.addClass("topic-content-edit-btn");
                        w.show();
                        v.removeClass("topic-content-delete-disabled");
                        v.addClass("topic-content-delete-btn");
                        v.show()
                    }
                },
                error: function() {
                    r.show();
                    p3.displayError("Error refreshing album")
                }
            });
            return false
        }
    });
    q.Vs.DiscussionView = Bb.View.extend({
        template: "topic/topic.discussion.template.html",
        events: {
            "click #btnPostNote": "postNote",
            "keypress .note-comment-box": "postComment",
            "change #txtNote": "removeNoteValidation",
            "click .message-edit": "editMessageClick",
            "click .message-delete": "deleteMessageClick",
            "keypress .message-edit-box": "updateComment",
            "keyup .message-edit-box": "hideEditComment",
            "keypress #txtNote": "postNoteKeypress",
            "click #messageLoadButton": "displayInsertedMessages",
            "click .btn-show-more": "toggleAdditionalItems"
        },
        renderTemplate: function() {
            var v = this,
                s, r, u, t;
            p3.fT(v.template, function(w) {
                v.$el.html(w({
                    discussion: v.collection.toJSON(),
                    SchoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                    row: v.options.row,
                    column: v.options.column
                }))
            });
            if (v.collection.length > 0) {
                s = _.min(v.collection.models, function(w) {
                    return w.get("ParentDateTicks")
                });
                if (s) {
                    v.lastDate = s.get("ParentDateTicks")
                }
            }
            r = "";
            u = d.localDateTime();
            t = u.getTime() - (u.getTimezoneOffset() * 60000);
            r = (t * 10000) + 6.21355968e+17;
            v.refreshCollection = new q.Cs.DiscussionItemRefresh({}, {
                topicIndexId: v.options.topicIndexId,
                lastDate: r
            });
            v.startStream()
        },
        dispose: function() {
            $(window).unbind("scroll");
            this.stopStream()
        },
        render: function(r) {
            $(r).append(this.el);
            this.renderTemplate()
        },
        displayInsertedMessages: function() {
            var E = this,
                w, B, y, t, A, s, z, v, C, x, D, u, r = $("#message_container_" + B);
            $("#messageLoadRegion").hide();
            $(".added-comment").removeClass("added-comment");
            $(".added-note").removeClass("added-note");
            E.refreshCollection.count = 0;
            C = p3.Data.SchoolContext.get("SchoolInfo").SchoolId;
            x = p3.Data.Context.getSelectedPersona().Id == 3 || p3.Data.Context.getSelectedPersona().Id == 5 || p3.Data.Context.getSelectedPersona().Id == 20;
            D = p3.Data.Context.get("UserInfo").UserId;
            u = d.localDateTime();
            for (w = 0; w < E.refreshCollection.models.length; w++) {
                y = E.refreshCollection.models[w];
                $("#message_container_" + y.get("MessageId")).remove();
                B = y.get("ParentMessageId");
                if (B > 0) {
                    t = q.Us.OutputMessage(y.toJSON(), true, C, B, false, true, D, x, u);
                    $("#child_container_" + B).append(t);
                    A = r[0].outerHTML;
                    if (A.indexOf("<hr></div>", A.length - 10) === -1) {
                        A = A.substring(0, A.length - 6) + "<hr></div>"
                    }
                    r.remove();
                    $(".topic-discussion-container").prepend(A)
                } else {
                    s = q.Us.BeginNoteRegion(y.toJSON(), true, C, E.options.row, E.options.column);
                    z = q.Us.OutputMessage(y.toJSON(), false, C, y.get("MessageId"), true, false, D, x, d.localDateTime());
                    v = q.Us.EndNoteRegion(y.get("MessageId"), true);
                    $(".topic-discussion-container").prepend(s + z + v)
                }
            }
            E.refreshCollection.remove(E.refreshCollection.models);
            return false
        },
        postNote: function(r) {
            var s = this;
            if ($("#txtNote").val().length === 0) {
                $(".discussion-note").addClass("error")
            } else {
                this.removeNoteValidation();
                this.saveDiscussionItem(0, $("#txtNote").val(), 0, s.options.topicId, s.options.topicIndexId);
                $("#txtNote").val("")
            }
        },
        postNoteKeypress: function(r) {
            var s = this;
            if (r.keyCode === 13 && !r.shiftKey && $("#txtNote").val().length > 0) {
                this.removeNoteValidation();
                this.saveDiscussionItem(0, $("#txtNote").val(), 0, s.options.topicId, s.options.topicIndexId);
                $("#txtNote").val("");
                r.preventDefault()
            }
        },
        postComment: function(r) {
            var s = this;
            if (r.keyCode === 13 && !r.shiftKey && r.currentTarget.value.length > 0) {
                this.saveDiscussionItem(0, r.currentTarget.value, r.currentTarget.attributes.getNamedItem("pmsg").value, s.options.topicId, s.options.topicIndexId);
                r.currentTarget.value = "";
                r.preventDefault()
            }
        },
        editMessageClick: function(r) {
            var s = r.currentTarget.attributes.getNamedItem("mid").value;
            if ($("#msgEdit_" + s).is(":visible")) {
                $("#msgEdit_" + s).hide();
                $("#msgDisplay_" + s).show()
            } else {
                $("#msgEdit_" + s).show();
                $("#msgEdit_" + s).find("textarea").focus();
                $("#msgDisplay_" + s).hide()
            }
            return false
        },
        updateComment: function(r) {
            var t = this,
                s = r.currentTarget.attributes.getNamedItem("mid").value;
            if (r.keyCode === 13 && !r.shiftKey && r.currentTarget.value.length > 0) {
                this.saveDiscussionItem(s, r.currentTarget.value, 0, t.options.topicId, t.options.topicIndexId);
                $("#msgDisplay_" + s).html("<p>" + r.currentTarget.value + "</p>");
                $("#msgEdit_" + s).hide();
                $("#msgDisplay_" + s).show()
            }
        },
        hideEditComment: function(r) {
            var s = r.currentTarget.attributes.getNamedItem("mid").value;
            if (r.keyCode === 27) {
                $("#msgEdit_" + s).hide();
                $("#msgDisplay_" + s).show()
            }
        },
        deleteMessageClick: function(s) {
            var u = this,
                t = s.currentTarget.attributes.getNamedItem("mid").value,
                r;
            p3.showConfirm(null, "Are you sure you want to delete this?", null, function() {
                r = new q.Ms.DiscussionItemDelete({
                    Id: t,
                    contextLabelId: 27,
                    contextValue: u.options.topicIndexId
                });
                r.destroy({
                    error: function() {
                        p3.displayError("Error deleting Note")
                    },
                    success: function() {
                        $("#message_container_" + t).remove()
                    }
                })
            });
            return false
        },
        removeNoteValidation: function(r) {
            $(".discussion-note").removeClass("error")
        },
        saveDiscussionItem: function(r, u, s, v, w) {
            var t, x = this;
            u = f.Us.removeWordMarkup(u, false);
            if (r == 0) {
                t = new q.Ms.DiscussionItemCreate({
                    MessageId: r,
                    Message: u,
                    ParentMessageId: s,
                    ContextLabelId: 27,
                    ContextValue: w,
                    ApprovalInd: true
                })
            } else {
                t = new q.Ms.DiscussionItemUpdate({
                    MessageId: r,
                    Message: u,
                    ParentMessageId: s,
                    ContextLabelId: 27,
                    ContextValue: w,
                    ApprovalInd: true
                })
            }
            t.save({}, {
                error: function() {
                    p3.displayError("Error saving Note")
                },
                success: function(C, E) {
                    var F, B, G, z, y, D, A;
                    if (!r) {
                        E.InsertDate = E.MessageDate;
                        F = p3.Data.SchoolContext.get("SchoolInfo").SchoolId;
                        B = p3.Data.Context.getSelectedPersona().Id == 3 || p3.Data.Context.getSelectedPersona().Id == 5 || p3.Data.Context.getSelectedPersona().Id == 20;
                        G = p3.Data.Context.get("UserInfo").UserId;
                        if (s) {
                            z = q.Us.OutputMessage(E, false, F, s, false, true, G, B, d.localDateTime());
                            $("#child_container_" + s).append(z)
                        } else {
                            y = q.Us.BeginNoteRegion(E, false, F, x.options.row, x.options.column);
                            D = q.Us.OutputMessage(E, false, F, E.MessageId, true, false, G, B, d.localDateTime());
                            A = q.Us.EndNoteRegion(E.MessageId, true);
                            $(".topic-discussion-container").prepend(y + D + A)
                        }
                    }
                }
            })
        },
        stopStream: function() {
            var r = this;
            if (r.refreshCollection) {
                r.refreshCollection.unstream()
            }
        },
        startStream: function() {
            var r = this;
            r.refreshCollection.stream({
                interval: 60000,
                add: true
            })
        },
        toggleAdditionalItems: function(t) {
            var r = $(t.currentTarget),
                u = r.data("row"),
                s = r.data("column");
            if (r.hasClass("show-data")) {
                r.removeClass("show-data").addClass("hide-data").html("Show Less");
                $("#more-region-" + u + "-" + s).show()
            } else {
                r.removeClass("hide-data").addClass("show-data").html("Show All");
                $("#more-region-" + u + "-" + s).hide()
            }
        }
    });
    q.Vs.TopicDeleteView = Bb.View.extend({
        template: "topic/topic.delete.template.html",
        events: {
            "click #btnConfirm": "deleteTopic"
        },
        renderTemplate: function() {
            var r = this;
            p3.fT(r.template, function(s) {
                r.$el.html(s({
                    group: r.options.groups.toJSON(),
                    showRadios: r.options.showRadios
                }))
            })
        },
        render: function(r) {
            this.renderTemplate();
            $(r).append(this.el)
        },
        deleteTopic: function(u) {
            $("#btnConfirm").button("loading");
            var w = this,
                r = 1,
                t = false,
                v = "",
                s;
            if (w.options.showRadios) {
                $(".remove-section-check").each(function(y, x) {
                    if (x.checked) {
                        t = true;
                        v += "," + x.attributes.getNamedItem("sid").value
                    } else {
                        r = 0
                    }
                })
            } else {
                t = true
            }
            if (t) {
                s = new q.Ms.TopicDelete({
                    Id: this.options.topicId,
                    groupId: this.options.leadSectionId,
                    option: r,
                    sectionId: this.options.sectionId,
                    sections: v
                });
                s.destroy({
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error deleting topic")
                    },
                    success: function(x, y) {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        q.Us.refreshTopics(true, 0, w.options.leadSectionId, w.options.topicView)
                    }
                })
            } else {
                p3.showModal(p3.Layout.Containers.Modal, "hide")
            }
            return false
        }
    });
    q.Vs.TopicTextEditView = Bb.View.extend({
        template: "topic/topic.text.edit.template.html",
        events: {
            "click #btnSaveText": "saveText"
        },
        renderTemplate: function() {
            var r = this;
            p3.fT(r.template, function(s) {
                r.$el.html(s({
                    Id: r.options.Id,
                    Text: r.options.Text
                }))
            });
            window.setTimeout(function() {
                q.Us.loadHTMLEditor()
            }, 500)
        },
        dispose: function() {
            p3.Layout.Containers.Modal.off("shown", q.Us.loadHTMLEditor);
            var r = tinyMCE.get("myeditor");
            if (r) {
                r.remove()
            }
        },
        render: function(r) {
            this.renderTemplate();
            $(r).append(this.el)
        },
        saveText: function(t) {
            var v = this,
                u, s, r = $("#btnSaveText");
            r.button("loading");
            if ($("#myeditor").length > 0 && $(".editor").length > 0) {
                s = tinyMCE.get("myeditor");
                if (s) {
                    s.save()
                }
            }
            if ($("#myeditor").val().length === 0) {
                $(".alert-error").show();
                r.button("reset");
                $("#btnSaveAddText").button("reset");
                p3.Us.InfoMessage.ErrorBox("Text is required.", ".modal-body", true)
            } else {
                if (s) {
                    s.remove()
                }
                if (v.options.Id == 0) {
                    u = new p.Ms.TextCreate({
                        AlbumID: 0,
                        Description: "",
                        LongText: $("#myeditor").val(),
                        ContextLabelID: 27,
                        ContextValue: v.options.topicId,
                        SortOrder: v.options.sort
                    })
                } else {
                    u = new p.Ms.TextUpdate({
                        AlbumID: v.options.Id,
                        Description: "",
                        LongText: $("#myeditor").val(),
                        ContextLabelID: 27,
                        ContextValue: v.options.topicId,
                        SortOrder: v.options.sort
                    })
                }
                u.save({}, {
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error saving topic text")
                    },
                    success: function() {
                        v.trigger("textSaved")
                    }
                })
            }
            return false
        }
    });
    q.Vs.TopicWidgetEditView = Bb.View.extend({
        template: "topic/topic.widget.edit.template.html",
        mode: "Add",
        loadedId: 0,
        events: {
            "click #btnSaveWidget": "doSave"
        },
        initialize: function(r) {
            this.mode = r.mode || this.mode;
            this.loadedId = r.loadedId || this.loadedId
        },
        render: function(r) {
            $(r).append(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var r = this;
            p3.fT(r.template, function(s) {
                r.$el.html(s({
                    Mode: r.mode,
                    AddAnother: (r.mode === "Add")
                }));
                $("#topic-widget-edit-text").height(110);
                if (!_.isUndefined(r.options.contentItem)) {
                    r.doLoad(r.options.contentItem.get("ShortDescription"), r.options.contentItem.get("LongDescription"))
                }
            })
        },
        doLoad: function(s, r) {
            this.$("#topic-widget-edit-title").val(s);
            this.$("#topic-widget-edit-text").val(r)
        },
        doSave: function(u) {
            var x = this,
                v = x.$("#topic-widget-edit-title").val(),
                t = x.$("#topic-widget-edit-text").val(),
                y, w = true,
                r = $("#btnSaveWidget"),
                s = $("#btnSaveAddWidget");
            r.button("loading");
            s.button("loading");
            if (typeof v !== "string" || v === "") {
                x.$("#topic-widget-edit-title").closest(".control-group").addClass("error");
                w = false
            } else {
                x.$("#topic-widget-edit-title").closest(".control-group").removeClass("error")
            }
            if (typeof t !== "string" || t === "") {
                x.$("#topic-widget-edit-text").closest(".control-group").addClass("error");
                w = false
            } else {
                x.$("#topic-widget-edit-text").closest(".control-group").removeClass("error")
            }
            if (w) {
                if (x.mode === "Add") {
                    y = new q.Ms.TopicWidgetCreate({
                        ShortDescription: v,
                        LongDescription: t,
                        ContextLabelId: 27,
                        ContextValue: x.options.ContextValue,
                        SortOrder: x.options.sortOrder
                    })
                } else {
                    y = new q.Ms.TopicWidgetUpdate({
                        WidgetId: x.loadedId,
                        ShortDescription: v,
                        LongDescription: t,
                        ContextLabelId: 27,
                        ContextValue: x.options.ContextValue,
                        SortOrder: x.options.sortOrder
                    })
                }
                y.save({}, {
                    error: function(z, A) {
                        $("#btnSaveText").button("reset")
                    },
                    success: function(z, A) {
                        x.trigger("embedSaved")
                    }
                })
            } else {
                r.button("reset");
                s.button("reset")
            }
            return false
        }
    });
    q.Vs.TopicContentDeleteView = Bb.View.extend({
        template: "topic/topic.content.delete.template.html",
        events: {
            "click #btnConfirm": "deleteContent"
        },
        renderTemplate: function() {
            var s = this,
                r = "";
            switch (s.options.ContentId) {
                case 2:
                    r = "Link";
                    break;
                case 3:
                    r = "Download";
                    break;
                case 31:
                    r = "Photo Album";
                    break;
                case 165:
                    r = "Audio Album";
                    break;
                case 167:
                    r = "Video Album";
                    break;
                case 1:
                    r = "Text";
                    break;
                case 387:
                    r = "Embed";
                    break;
                case p3.Us.Enum.Content.LTI.Value:
                    r = "Learning Tool";
                    break
            }
            p3.fT(s.template, function(t) {
                s.$el.html(t({
                    ContentType: r
                }))
            })
        },
        render: function(r) {
            this.renderTemplate();
            $(r).append(this.el)
        },
        deleteContent: function(s) {
            var t = this,
                r;
            $("#btnConfirm").button("loading");
            switch (t.options.ContentId) {
                case 1:
                    r = new p.Ms.TextDelete({
                        Id: this.options.Id,
                        contextLabelId: 27
                    });
                    break;
                case 2:
                    r = new j.Ms.LinkDelete({
                        Id: this.options.Id,
                        groupId: 0,
                        option: 2,
                        contextValue: this.options.TopicId
                    });
                    break;
                case 3:
                    r = new g.Ms.DownloadDelete({
                        Id: this.options.Id,
                        FileName: this.options.FileName,
                        groupId: 0,
                        option: 2,
                        contextValue: this.options.TopicId
                    });
                    break;
                case 31:
                    r = new l.Ms.AlbumDelete({
                        Id: this.options.Id,
                        contentId: 31,
                        groupId: 0,
                        option: 2,
                        contextValue: this.options.TopicId,
                        contextLabelId: 27
                    });
                    break;
                case 165:
                    r = new l.Ms.AlbumDelete({
                        Id: this.options.Id,
                        contentId: 165,
                        groupId: 0,
                        option: 2,
                        contextValue: this.options.TopicId,
                        contextLabelId: 27
                    });
                    break;
                case 167:
                    r = new l.Ms.AlbumDelete({
                        Id: this.options.Id,
                        contentId: 167,
                        groupId: 0,
                        option: 2,
                        contextValue: this.options.TopicId,
                        contextLabelId: 27
                    });
                    break;
                case 387:
                    r = new q.Ms.TopicWidgetDelete({
                        Id: this.options.Id
                    });
                    break;
                case p3.Us.Enum.Content.LTI.Value:
                    r = new k.Ms.Tool({
                        ToolId: this.options.Id
                    });
                    break;
                default:
                    break
            }
            r.destroy({
                error: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    p3.displayError("Error deleting " + t.options.ContentType)
                },
                success: function() {
                    t.trigger("contentDeleted");
                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                }
            });
            return false
        }
    });
    q.Vs.ImportWindow = Bb.View.extend({
        template: "topic/topic.import.layout.template.html",
        events: {
            "click #import-topics-save-button": "doSave",
            refreshTopics: "doRefresh"
        },
        initialize: function(t) {
            var v = this,
                s, u, r;
            t = t || {};
            this.schoolYears = t.schoolYears || 0;
            this.sections = t.sections || 0;
            this.SectionsForTeacher = t.SectionsForTeacher || new q.Cs.ExistingSections();
            this.currentSection = t.currentSection || 0;
            this.leadSection = t.leadSectionId || 0;
            this.terms = new q.Cs.SchoolYearTermGet();
            if (this.schoolYears !== 0 && this.schoolYears.length > 0) {
                s = this.schoolYears.where({
                    Current: true
                });
                if (s.length > 0) {
                    this.currentYear = s[0].get("Id");
                    this.terms.fetch({
                        data: {
                            schoolYearLabel: q.Data.SchoolYear,
                            levelNum: q.Data.LevelNum
                        },
                        async: false,
                        success: function(w, y, x) {
                            u = w.where({
                                DurationId: q.Data.DurationId
                            });
                            if (u.length > 0) {
                                q.Data.Duration = _.extend(u[0], {})
                            }
                        }
                    })
                }
                if (this.SectionsForTeacher.length < 1) {
                    r = q.Us.getAssociationFromContext(v.options.topicView.options.contextLabelId);
                    this.SectionsForTeacher.association = r;
                    this.SectionsForTeacher.fetch({
                        data: {
                            facultyUserId: p3.Data.Context.get("UserInfo").UserId,
                            schoolYear: this.currentYear,
                            associationId: r,
                            copyInd: false
                        },
                        async: false,
                        error: function(w, x) {
                            p3.displayError("Error retreiving sections.")
                        }
                    })
                }
                this.filters = new q.Vs.ImportFilters({
                    schoolYears: this.schoolYears,
                    sections: this.SectionsForTeacher,
                    leadSection: this.leadSection
                });
                this.contentView = new q.Vs.ImportContent({
                    currentSection: this.leadSection || 0
                });
                this.sectionView = new q.Vs.ImportSections({
                    sections: this.sections
                });
                this.bankFilterView = new q.Vs.ImportBankFilters({
                    schoolYears: this.schoolYears
                });
                this.bankContentView = new q.Vs.BankContent({
                    currentSection: 0
                });
                this.bankFilterView.on("sectionChange", function(w) {
                    v.bankContentView.currentSection = w;
                    v.bankContentView.updateContent()
                })
            }
        },
        render: function(r) {
            var s = this;
            $(r).html(s.el);
            p3.fT(s.template, function(t) {
                s.$el.html(t({}));
                p3.rV(s.filters, p3.Layout.Containers.Modal.find("#import-topic-filter-container"), true);
                p3.rV(s.contentView, p3.Layout.Containers.Modal.find("#import-topic-content-container"), true);
                p3.rV(s.sectionView, p3.Layout.Containers.Modal.find("#import-topic-section-container"), true);
                p3.rV(s.bankFilterView, p3.Layout.Containers.Modal.find("#import-topicbank-filter-container"), true);
                p3.rV(s.bankContentView, p3.Layout.Containers.Modal.find("#import-topicbank-content-container"), true)
            })
        },
        doSave: function(u) {
            u.preventDefault();
            u.stopPropagation();
            var x = this,
                w = x.contentView.getSelected(),
                v = x.sectionView.getSelected(),
                t = x.bankContentView.getSelected(),
                r = [],
                s;
            _.each(w, function(y) {
                var z = {
                    TopicId: y.TopicId,
                    groups: [],
                    ContextLabelId: x.options.topicView.options.contextLabelId
                };
                _.each(v, function(A) {
                    z.groups.push({
                        ContextValue: A.ContextValue,
                        PublishDate: y.PublishDate,
                        ExpireDate: y.ExpireDate,
                        PublishInd: A.notify,
                        Selected: true,
                        ContextLabelId: x.options.topicView.options.contextLabelId,
                        Sort: 1,
                        Type: 1
                    })
                });
                r.push(z)
            });
            _.each(t, function(y) {
                var z = {
                    TopicId: y.TopicId,
                    groups: [],
                    ContextLabelId: x.options.topicView.options.contextLabelId
                };
                _.each(v, function(A) {
                    z.groups.push({
                        ContextValue: A.ContextValue,
                        PublishDate: y.PublishDate,
                        ExpireDate: y.ExpireDate,
                        ContextLabelId: x.options.topicView.options.contextLabelId
                    })
                });
                r.push(z)
            });
            s = new q.Cs.TopicCopy(r);
            s.sync("update", s, {
                error: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    p3.displayError("Error importing topic(s)")
                },
                success: function() {
                    q.Us.refreshTopics(true, 0, x.options.leadSectionId, x.options.topicView);
                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                }
            })
        },
        doRefresh: function(r) {
            var s = this;
            r.preventDefault();
            r.stopPropagation();
            s.contentView.$el.trigger({
                type: "updateContent",
                section: s.filters.getSection()
            })
        }
    });
    q.Vs.ImportFilters = Bb.View.extend({
        template: "topic/topic.import.filters.template.html",
        events: {
            "change #import-years-dd": "doSelectYear",
            "change #import-sections-dd": "doSelectSection"
        },
        initialize: function(r) {
            this.schoolYears = r.schoolYears || 0;
            this.sections = r.sections || 0;
            this._selectedSection = r.leadSection || null;
            this.sections.on("reset", this.updateSections, this)
        },
        render: function(s) {
            var t = this,
                r = $("#import-sections-dd");
            $(s).html(t.el);
            p3.fT(t.template, function(u) {
                t.$el.html(u({
                    years: t.schoolYears.toJSON(),
                    sections: t.sections.toJSON()
                }));
                if (t.sections.where({
                        SectionId: t._selectedSection
                    }).length > 0) {
                    r.val(t._selectedSection)
                } else {
                    t._selectedSection = r.val()
                }
                r.trigger("change")
            })
        },
        updateSections: function(r) {
            var t = $("#import-sections-dd"),
                u = "",
                s;
            if (t.length > 0) {
                this.sections.each(function(v) {
                    u += '<option value="' + v.get("SectionId") + '">' + v.get("Name") + "</option>"
                });
                if (u === "") {
                    t.html("<option>No sections available.</option>");
                    return false
                }
                t.html(u);
                s = $.Event("change");
                s.currentTarget = t;
                t.trigger(s)
            }
        },
        doSelectYear: function(r) {
            var s = $(r.currentTarget).val();
            this.sections.fetch({
                data: {
                    facultyUserId: p3.Data.Context.get("UserInfo").UserId,
                    schoolYear: s,
                    associationId: this.sections.association,
                    copyInd: false
                },
                async: false,
                error: function(t, u) {
                    p3.displayError("Error retreiving sections.")
                }
            })
        },
        doSelectSection: function(r) {
            this._selectedSection = $(r.currentTarget).val();
            this.$el.trigger("refreshTopics")
        },
        getSection: function() {
            return this._selectedSection
        }
    });
    q.Vs.ImportBankFilters = Bb.View.extend({
        template: "topic/topic.importbank.filters.template.html",
        events: {
            "change #bank-years-dd": "doSelectYear",
            "change #bank-faculty-dd": "doSelectFaculty",
            "change #bank-sections-dd": "doSelectSection"
        },
        initialize: function(r) {
            this.associationId = q.Us.getAssociationFromContext(q.Data.contextLabelId);
            this.schoolYears = r.schoolYears;
            this.faculty = new q.Cs.CopyableFaculty();
            this.sections = new q.Cs.ExistingSections()
        },
        render: function(r) {
            var s = this;
            $(r).html(s.el);
            p3.fT(s.template, function(t) {
                s.$el.html(t({
                    years: s.schoolYears.toJSON()
                }));
                $("#bank-years-dd").trigger("change")
            })
        },
        updateSections: function(r) {
            var t = $("#import-sections-dd"),
                u = "",
                s;
            if (t.length > 0) {
                this.sections.each(function(v) {
                    u += '<option value="' + v.get("SectionId") + '">' + v.get("Name") + "</option>"
                });
                if (u === "") {
                    t.html("<option>No sections available.</option>");
                    return false
                }
                t.html(u);
                s = $.Event("change");
                s.currentTarget = t;
                t.trigger(s)
            }
        },
        doSelectYear: function(s) {
            var v = this,
                u = $(s.currentTarget).val(),
                r = $("#bank-faculty-dd"),
                t = (p3.Config.IsSmallCollege) ? "Error retreiving faculty." : "Error retreiving teachers.";
            v.faculty.fetch({
                data: {
                    associationId: v.associationId,
                    schoolYearLabel: u
                },
                success: function() {
                    r.empty();
                    if (v.faculty.length > 0) {
                        v.faculty.each(function(w) {
                            r.append($("<option></option>").attr("value", w.get("id")).text(w.get("owner_name")))
                        })
                    } else {
                        r.html("<option>No faculty available.</option>")
                    }
                    r.trigger("change")
                },
                error: function(w, x) {
                    p3.displayError(t)
                }
            })
        },
        doSelectSection: function(r) {
            this._selectedSection = $(r.currentTarget).val();
            this.trigger("sectionChange", this._selectedSection)
        },
        getSection: function() {
            return this._selectedSection
        },
        doSelectFaculty: function(s) {
            var v = this,
                t = $(s.currentTarget).val(),
                r = $("#bank-sections-dd"),
                u = 0;
            r.empty();
            if (t > 0) {
                v.sections.fetch({
                    data: {
                        facultyUserId: t,
                        schoolYear: $("#bank-years-dd").val(),
                        associationId: v.associationId,
                        copyInd: true
                    },
                    success: function() {
                        r.empty();
                        if (v.sections.length > 0) {
                            v.sections.each(function(w) {
                                if (u === 0) {
                                    u = w.get("SectionId")
                                }
                                r.append($("<option></option>").attr("value", w.get("SectionId")).text(w.get("Name")))
                            })
                        } else {
                            r.html("<option>No sections available.</option>")
                        }
                        v.trigger("sectionChange", u)
                    },
                    error: function(w, x) {
                        p3.displayError("Error retreiving sections.")
                    }
                })
            }
        }
    });
    q.Vs.ImportContent = Bb.View.extend({
        template: "topic/topic.import.content.list.template.html",
        events: {
            updateContent: "updateContent",
            "click #existing-search-button": "doSearch",
            "keypress #existing-search-field": "filterKeys",
            "click #topic-import-select-all-button": "doSelectAll"
        },
        initialize: function(r) {
            r = r || {};
            this.currentSection = r.currentSection || 0;
            this.collection = new q.Cs.ExistingTopic(null, {
                sectionId: 0,
                leadSectionId: this.currentSection,
                active: true,
                future: true,
                expired: true
            })
        },
        render: function(r) {
            var t = this,
                s;
            $(r).html(t.el);
            p3.fT(t.template, function(u) {
                t.$el.html(u())
            });
            _.delay(function() {
                s = $("#import-sections-dd");
                if (s.val() > 0) {
                    t.collection.leadSectionId = s.val();
                    t.doSearch()
                }
            }, 200)
        },
        updateContent: function(r) {
            var s = this;
            if (_.isUndefined(s.collection)) {
                return false
            }
            if (!_.isUndefined(r.section) && r.section !== null) {
                s.currentSection = s.collection.leadSectionId = r.section
            }
            s.collection.fetch({
                async: false,
                success: function(u, y) {
                    var v = u.toJSON(),
                        A = d.localDateTime(),
                        w = d.localDateTime(),
                        x, z, B, t = $("#existing-search-field");
                    if (q.Data.Duration) {
                        A = d.getDate(q.Data.Duration.get("BeginDate"))
                    }
                    if (s.options.currentSection === 0) {
                        $("#notice-of-import-functionality").removeClass("alert-info").addClass("alert-warning");
                        $("#notice-of-import-functionality").find("i").removeClass("p3icon-notification").addClass("p3icon-warning");
                        $("#notice-of-import-functionality").find("strong").html("Whoops!");
                        $("#keep-in-mind-import").html(" At this point you do not have any existing Topics to import.")
                    } else {
                        $("#keep-in-mind-import").html(" if the term has already started then the publish date will be set automatically to today's date. If the term has not started then the publish date will be set to the first day of the next term. You will need to select the Future view to see future dated Topics.")
                    }
                    $("#notice-of-import-functionality").show();
                    x = d.getDateString((w >= A ? w : A));
                    _.each(v, function(C) {
                        C.PublishDate = x
                    });
                    if (t.length > 0 && t.val() !== "") {
                        v = [];
                        z = t.val().toLowerCase();
                        B = u.filter(function(C) {
                            return (C.get("Name").toLowerCase().indexOf(z) > -1)
                        });
                        _.each(B, function(C) {
                            v.push(C.toJSON())
                        })
                    }
                    s.renderItems(v)
                },
                error: function(t, u) {
                    p3.displayError("Error retreiving Existing Topics.")
                }
            })
        },
        renderItems: function(u) {
            var v = this,
                s, t, r = $("#import-topics-content-items");
            if (r.length < 1) {
                if (q._renderItemsTimer) {
                    window.clearInterval(q._renderItemsTimer);
                    q._renderItemsTimer = null
                }
                q._renderItemsTimer = window.setInterval(function() {
                    if ($("#import-topics-content-items").length > 0) {
                        v.renderItems(u);
                        window.clearInterval(q._renderItemsTimer);
                        q._renderItemsTimer = null
                    }
                }, 100)
            } else {
                r.html('<tr class="ignore"></tr>');
                if (!u || u.length === 0) {
                    r.append("<tr><th></th><th>No topics found.</th><th></th><th></th><th></th></tr>")
                } else {
                    for (s = 0; s < u.length; s++) {
                        t = u[s];
                        p3.rV(new q.Vs.ImportContentItem({
                            content: t
                        }), r, false)
                    }
                    if (r.find(".datepicker").length < 1) {
                        if (q._datepickerTimer) {
                            window.clearInterval(q._datepickerTimer);
                            q._datepickerTimer = null
                        }
                        q._datepickerTimer = window.setInterval(function() {
                            if (r.find(".datepicker").length > 0) {
                                e.Us.initialize(".datepicker");
                                window.clearInterval(q._datepickerTimer);
                                q._datepickerTimer = null
                            }
                        }, 100)
                    } else {
                        e.Us.initialize(".datepicker")
                    }
                }
            }
        },
        doSelectAll: function(t) {
            var s = $(t.currentTarget),
                r = $("#import-topics-content-items").find(".btn-approve");
            if (s.hasClass("active")) {
                r.each(function(u, v) {
                    $(v).removeClass("active")
                })
            } else {
                r.each(function(u, v) {
                    $(v).addClass("active")
                })
            }
        },
        doSearch: function(r) {
            this.$el.trigger("updateContent")
        },
        filterKeys: function(r) {
            var s = this;
            if (r.keyCode === 13) {
                s.$el.trigger("updateContent");
                return false
            }
        },
        getSelected: function() {
            var r = $("#import-topics-content-items").find(".btn-approve.active"),
                s = [];
            r.each(function(t, v) {
                var u = $(v).closest("tr").find("input");
                if (u.length === 2) {
                    s.push({
                        TopicId: $(v).data("topicId"),
                        PublishDate: $(u[0]).val().split(" ")[0],
                        ExpireDate: $(u[1]).val()
                    })
                }
            });
            return s
        }
    });
    q.Vs.BankContent = Bb.View.extend({
        template: "topic/topic.import.bank.list.template.html",
        events: {
            "click #bank-search-button": "doSearch",
            "keypress #bank-search-field": "filterKeys",
            "click #topic-bank-select-all-button": "doSelectAll"
        },
        initialize: function(r) {
            r = r || {};
            this.currentSection = r.currentSection || 0;
            this.collection = new q.Cs.ExistingTopic(null, {
                sectionId: 0,
                leadSectionId: this.currentSection,
                active: true,
                future: true,
                expired: true
            })
        },
        render: function(r) {
            var s = this;
            $(r).html(s.el);
            p3.fT(s.template, function(t) {
                s.$el.html(t())
            })
        },
        updateContent: function() {
            var r = this;
            if (_.isUndefined(r.collection)) {
                return false
            }
            r.collection.leadSectionId = r.currentSection;
            r.collection.fetch({
                async: false,
                success: function(t, x) {
                    var u = t.toJSON(),
                        z = d.localDateTime(),
                        v = d.localDateTime(),
                        w, y, A, s = $("#bank-search-field");
                    if (q.Data.Duration) {
                        z = d.getDate(q.Data.Duration.get("BeginDate"))
                    }
                    w = d.getDateString((v >= z ? v : z));
                    _.each(u, function(B) {
                        B.PublishDate = w
                    });
                    u = [];
                    y = s.val().toLowerCase();
                    A = t.filter(function(B) {
                        return B.get("AllowCopy") && (y.length === 0 || B.get("Name").toLowerCase().indexOf(y) > -1)
                    });
                    _.each(A, function(B) {
                        u.push(B.toJSON())
                    });
                    r.renderItems(u)
                },
                error: function(s, t) {
                    p3.displayError("Error retreiving Existing Topics.")
                }
            })
        },
        renderItems: function(u) {
            var s, t, r = $("#import-topics-bank-items");
            r.html('<tr class="ignore"></tr>');
            if (!u || u.length === 0) {
                r.append("<tr><th></th><th>No topics found.</th><th></th><th></th><th></th></tr>")
            } else {
                for (s = 0; s < u.length; s++) {
                    t = u[s];
                    p3.rV(new q.Vs.ImportContentItem({
                        content: t
                    }), r, false)
                }
                e.Us.initialize(".datepicker")
            }
        },
        doSelectAll: function(t) {
            var s = $(t.currentTarget),
                r = $("#import-topics-bank-items").find(".btn-approve");
            if (s.hasClass("active")) {
                r.each(function(u, v) {
                    $(v).removeClass("active")
                })
            } else {
                r.each(function(u, v) {
                    $(v).addClass("active")
                })
            }
        },
        doSearch: function(r) {
            this.updateContent()
        },
        filterKeys: function(r) {
            var s = this;
            if (r.keyCode === 13) {
                s.updateContent();
                return false
            }
        },
        getSelected: function() {
            var r = $("#import-topics-bank-items").find(".btn-approve.active"),
                s = [];
            r.each(function(t, v) {
                var u = $(v).closest("tr").find("input");
                if (u.length === 2) {
                    s.push({
                        TopicId: $(v).data("topicId"),
                        PublishDate: $(u[0]).val().split(" ")[0],
                        ExpireDate: $(u[1]).val()
                    })
                }
            });
            return s
        }
    });
    q.Vs.ImportContentItem = Bb.View.extend({
        template: "topic/topic.import.content.item.template.html",
        tagName: "tr",
        events: {},
        render: function(r) {
            var s = this;
            $(r).append(s.el);
            p3.fT(s.template, function(t) {
                s.$el.html(t({
                    content: s.options.content,
                    schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId
                }))
            })
        }
    });
    q.Vs.ImportSections = Bb.View.extend({
        template: "topic/topic.import.section.list.template.html",
        events: {},
        initialize: function(r) {
            r = r || {};
            this.sections = r.sections || null
        },
        render: function(r) {
            var s = this;
            $(r).html(s.el);
            p3.fT(s.template, function(t) {
                s.$el.html(t({}));
                s.renderItems(s.sections.toJSON())
            })
        },
        renderItems: function(u) {
            var s, t, r = $("#import-topics-section-items");
            r.html('<tr class="ignore"></tr>');
            if (!u || u.length === 0) {
                r.append("<tr><th>No sections found.</th><th></th></tr>")
            } else {
                for (s = 0; s < u.length; s++) {
                    t = u[s];
                    p3.rV(new q.Vs.ImportSectionItem({
                        content: t
                    }), r, false)
                }
                this.$el.trigger("groupsRendered")
            }
            p3.initModalHeightTimer(p3.Layout.Containers.Modal)
        },
        getSelected: function() {
            var r = $("#import-topic-section-container").find("input.section-selection-box:checked"),
                s = [];
            r.each(function(t, u) {
                s.push({
                    ContextValue: $(u).val()
                })
            });
            return s
        }
    });
    q.Vs.ImportSectionItem = Bb.View.extend({
        template: "topic/topic.import.section.item.template.html",
        tagName: "tr",
        events: {},
        render: function(r) {
            var s = this;
            $(r).append(s.el);
            p3.fT(s.template, function(t) {
                s.$el.html(t({
                    content: s.options.content
                }))
            })
        }
    });
    q.Vs.EditDetail = Bb.View.extend({
        template: "topic/topic.detail.edit.template.html",
        events: {
            "click .share-info-link": "toggleShareInfo"
        },
        initialize: function() {
            this.Containers = {};
            this.options.editMode = this.options.editMode || "content"
        },
        dispose: function() {
            p3.closeFixedSidebar();
            p3.closeFixedFooter()
        },
        render: function(r) {
            var t = this,
                s = (p3.Config.IsSmallCollege) ? "Error loading faculty sections" : "Error loading teacher sections";
            t.options.studentId = t.options.studentId || 0;
            t.options.contextLabelId = -1;
            $(r).html(t.el);
            p3.fT(t.template, function(w) {
                var y, x, v, u = false;
                t.$el.html(w({}));
                t.Containers.WorkspaceWrap = $(".topic-page-wrap");
                t.Containers.Workspace = $("#topic-workspace");
                y = new q.Cs.TopicGroup({}, {
                    topicId: t.options.topicId
                });
                t.topicGroups = y;
                x = new q.Ms.Topic({
                    Id: t.options.topicId,
                    topicIndexId: t.options.topicIndexId
                });
                t.topic = x;
                v = new q.Cs.Sections({}, {
                    sectionId: t.options.sectionId
                });
                t.sections = v;
                v.fetch({
                    async: false,
                    data: {
                        sectionId: v.sectionId,
                        associationId: 1,
                        teacherId: 0
                    },
                    error: function() {
                        p3.displayError(s)
                    },
                    success: function() {
                        if (v.length > 0) {
                            v.each(function(z) {
                                t.options.contextLabelId = z.get("ContextLabelId");
                                if (z.get("SectionId") == t.options.sectionId) {
                                    z.set("Primary", true)
                                }
                            })
                        }
                    }
                });
                y.fetch({
                    data: {
                        id: t.topicGroups.Id
                    },
                    success: function() {
                        q.Data.useFullEditModal = y.useFullEditModal(t.options.leadSectionId);
                        q.Data.shareWarningDismissed = false;
                        if (y.length > 0) {
                            var z = -1;
                            y.each(function(A) {
                                if (A.get("LockedInd")) {
                                    u = true
                                }
                                z += 1;
                                if (z === 0) {
                                    x.set("Name", A.get("Name"));
                                    x.set("Description", A.get("Description"));
                                    x.set("ThumbFilename", A.get("ThumbFilename"));
                                    x.set("LayoutId", A.get("LayoutId"));
                                    x.set("AllowCopy", A.get("AllowCopy"))
                                }
                            })
                        }
                        if (u) {
                            p3.fT("topic/topic.unlock.modal.template.html", function(A) {
                                new q.Ms.TopicContentUnlock().save({
                                    id: t.options.topicId
                                }, {
                                    success: function() {
                                        t.renderTopic()
                                    }
                                });
                                p3.clearContainer(p3.Layout.Containers.Modal);
                                p3.showModal(p3.Layout.Containers.Modal.append(A({})))
                            })
                        } else {
                            t.renderTopic()
                        }
                    },
                    error: function() {
                        p3.displayError("Error loading topic")
                    }
                })
            })
        },
        renderTopic: function() {
            this.renderSidebar();
            this.renderBuilder();
            this.renderFooter()
        },
        toggleShareInfo: function(r) {
            var t = this,
                s = t.$(".share-info-text");
            r.preventDefault();
            r.stopPropagation();
            if (s.hasClass("hidden")) {
                s.show();
                s.removeClass("hidden")
            } else {
                s.hide();
                s.addClass("hidden")
            }
        },
        renderSidebar: function() {
            var s = this,
                r = {};
            s.options.sidebarView = new q.Vs.Sidebar({
                model: s.topic,
                sections: s.sections,
                topicGroups: s.topicGroups,
                editMode: s.options.editMode,
                parentView: s
            });
            p3.renderFixedSidebar(s.options.sidebarView, r)
        },
        renderBuilder: function() {
            var t = this,
                s = new q.Cs.TopicContent({}, {
                    topicId: t.topic.get("Id"),
                    topicIndexId: t.topic.get("topicIndexId")
                }),
                r = p3.Data.SchoolContext.get("SchoolInfo").SchoolId;
            s = new q.Cs.TopicContent({}, {
                topicId: t.topic.get("Id"),
                topicIndexId: t.topic.get("topicIndexId")
            });
            s.fetch({
                data: {
                    id: s.topicIndexId
                },
                success: function() {
                    if (s.length > 0) {
                        s = q.Us.collpaseDownloads(s);
                        s.each(function(v) {
                            v.set("inProcessing", false);
                            v.set("AVAlbum", false);
                            switch (v.get("ContentId")) {
                                case 165:
                                    if (v.get("FilesInProcessing") > 0) {
                                        v.set("inProcessing", true)
                                    }
                                    v.set("AVAlbum", true);
                                    break;
                                case 167:
                                    if (v.get("RenditionsComplete") == 0) {
                                        v.set("inProcessing", true)
                                    }
                                    break;
                                case 2:
                                    if (v.get("LinkImage") && v.get("LinkImage").length > 0) {
                                        v.set("LinkImageUrl", "/ftpimages/" + r + "/link/" + v.get("LinkImage"))
                                    }
                                    if (v.get("HoverFileName") && v.get("HoverFileName").length > 0) {
                                        v.set("HoverImageUrl", "/ftpimages/" + r + "/link/" + v.get("HoverFileName"))
                                    }
                                    break;
                                default:
                                    break
                            }
                            var w = b.Us.findContentById(v.get("ContentId"));
                            if (w) {
                                v.set("Name", w.Name);
                                v.set("IconClass", w.IconClass)
                            }
                        })
                    }
                    var u = new q.Vs.Builder({
                        model: t.topic,
                        content: s,
                        leadSectionId: t.options.leadSectionId
                    });
                    p3.rV(u, t.Containers.Workspace, true);
                    u.on("contentChange", function() {
                        t.renderBuilder()
                    });
                    u.on("settingsClick", function(v) {
                        t.options.sidebarView.showEditSettings(v)
                    })
                },
                error: function() {
                    p3.displayError("Error loading topic content")
                }
            })
        },
        renderFooter: function() {
            var s = this,
                r = new q.Vs.Footer({
                    topicId: s.options.topicId,
                    leadSectionId: s.options.leadSectionId,
                    sectionId: s.options.sectionId,
                    topicIndexId: s.options.topicIndexId,
                    studentId: s.options.studentId
                });
            p3.renderFixedFooter(r)
        }
    });
    q.Vs.Footer = Bb.View.extend({
        template: "topic/topic.footer.template.html",
        render: function(r) {
            var s = this;
            $(r).html(s.el);
            s.renderTemplate()
        },
        renderTemplate: function() {
            var r = this;
            p3.fT(r.template, function(s) {
                r.$el.html(s({
                    topicId: r.options.topicId,
                    leadSectionId: r.options.leadSectionId,
                    sectionId: r.options.sectionId,
                    topicIndexId: r.options.topicIndexId,
                    studentId: r.options.studentId
                }))
            })
        }
    });
    q.Vs.Sidebar = Bb.View.extend({
        template: "topic/topic.sidebar.template.html",
        shareTemplate: "topic/topic.detail.shareinfo.template.html",
        className: "workspace-sidebar",
        events: {
            "click .workspace-sidebar-tab": "tabClicked",
            "click #pages-layout-settings": "showEditSettings",
            "click .backlink": "goBack"
        },
        initialize: function() {
            this.Containers = {};
            this.leadSectionId = this.options.parentView.options.leadSectionId;
            _.bindAll(this, "publishSaveCallback", "fullEditSaveCallback")
        },
        render: function(r) {
            var s = this;
            $(r).html(s.el);
            s.loadContentData(function() {
                s.renderTemplate()
            })
        },
        renderTemplate: function() {
            var r = this;
            p3.fT(r.template, function(t) {
                var s = r.getLayoutIcon(r.model.get("LayoutId"));
                r.$el.html(t({
                    model: r.model.toJSON(),
                    layoutIcon: s,
                    groups: r.options.topicGroups.toJSON(),
                    content: r.filterContentData(16),
                    elements: r.filterContentData(32),
                    topicElements: r.filterContentData(64)
                }));
                r.selectTab(r.options.editMode);
                r.updateView()
            })
        },
        goBack: function(r) {
            var t = this,
                s;
            r.stopPropagation();
            r.preventDefault();
            s = q.Us.getBackToTopicsLink(t.options.parentView.options);
            if (s) {
                window.location = s
            } else {
                window.history.back()
            }
        },
        getLayoutIcon: function(s) {
            var r = "";
            switch (s) {
                case 0:
                    r = "p3icon-2colLeft";
                    break;
                case 1:
                    r = "p3icon-2colRight";
                    break;
                case 2:
                    r = "p3icon-2rowLeft";
                    break;
                case 3:
                    r = "p3icon-2rowRight";
                    break;
                case 4:
                    r = "p3icon-2colSplit";
                    break;
                case 5:
                    r = "p3icon-3col";
                    break
            }
            return r
        },
        tabClicked: function(t) {
            t.preventDefault();
            var u = this,
                r = $(t.currentTarget),
                s = r.data("action");
            u.selectTab(s);
            return false
        },
        selectTab: function(r) {
            var s = this;
            s.$el.find(".workspace-sidebar-tabs LI.active").removeClass("active");
            $(".workspace-sidebar-tab").removeClass("active");
            s.$el.find(".workspace-sidebar-content > div").hide();
            s.$el.find('.workspace-sidebar-tab[data-action="' + r + '"]').parent().addClass("active");
            s.$el.find('.workspace-sidebar-tab[data-action="' + r + '"]').addClass("active");
            s.$el.find('.workspace-sidebar-content > div[data-id="' + r + '"]').show()
        },
        loadContentData: function(r) {
            var t = this,
                s;
            if (t.options.contentTypes) {
                return r()
            }
            s = new q.Cs.TopicContentTypes();
            s.fetch({
                success: function() {
                    t.options.contentTypes = s.toJSON();
                    return r()
                },
                error: function() {
                    p3.displayError("Error loading content types.")
                }
            })
        },
        filterContentData: function(u) {
            var v = this,
                s = [],
                r, t;
            if (v.options.contentTypes) {
                r = v.options.contentTypes;
                _.each(r, function(w) {
                    if (w.ObjectTypeId == u) {
                        t = b.Us.findContentById(w.Id);
                        if (t) {
                            w.Name = t.Name;
                            w.IconClass = t.IconClass;
                            s.push(w)
                        }
                    }
                })
            }
            return s
        },
        getElements: function() {
            var r = [];
            r.push({
                Id: 0,
                Name: "Header",
                IconClass: "p3icon-header"
            });
            return r
        },
        getBoardElements: function() {
            var r = [];
            r.push({
                Id: 0,
                Name: "Cover Image",
                IconClass: "p3icon-image"
            });
            return r
        },
        updateView: function() {
            var u = this,
                r = $("#groups-list"),
                s = $("#groups-list-shared"),
                t;
            $("#topic-name").html(u.model.get("Name"));
            $("#layout-icon").removeClass().addClass(u.getLayoutIcon(u.model.get("LayoutId")));
            r.children().remove();
            s.children().remove();
            u.options.topicGroups.each(function(v) {
                if (v.get("Primary")) {
                    r.append("<li>" + v.get("GroupName") + "</li>")
                } else {
                    s.append("<li>" + v.get("GroupName") + "</li>")
                }
            });
            p3.fT(u.shareTemplate, function(v) {
                t = u.options.topicGroups.getShareInfo(u.options.parentView.options.leadSectionId);
                t.shareLabel = q.Us.getPluralLabel(q.Us.getAssociationFromContext(q.Data.contextLabelId));
                u.options.parentView.$(".topic-share-display-area").html(v({
                    shareInfo: t
                }));
                q.Us.checkShareWarning(t, u.model.get("topicIndexId"))
            })
        },
        showEditSettings: function(r) {
            r.preventDefault();
            var v = this,
                t = v.options.topicGroups,
                u, s;
            if (v.options.sections.length > 0) {
                v.options.sections.each(function(w) {
                    if (t.select(function(x) {
                            return x.get("SectionId") == w.get("LeadSectionId")
                        }).length === 0) {
                        u = new q.Ms.TopicGroup();
                        u.set("SectionId", w.get("LeadSectionId"));
                        u.set("IsSelected", false);
                        u.set("PublishDate", null);
                        u.set("ExpireDate", null);
                        u.set("Primary", false);
                        u.set("GroupName", w.get("GroupName"));
                        u.set("TopicIndexId", 0);
                        u.set("ContextLabelId", w.get("ContextLabelId"));
                        t.add(u)
                    }
                })
            }
            t.each(function(w) {
                w.set("LeadSectionId", w.get("SectionId"))
            });
            if (q.Data.useFullEditModal) {
                s = new q.Vs.TopicEditView({
                    topic: v.model,
                    groups: t,
                    defaultDate: d.getDateString(d.localDateTime()),
                    topicView: v,
                    detailPage: true,
                    callback: v.fullEditSaveCallback
                })
            } else {
                s = new q.Vs.PublishShareModal({
                    topicId: v.model.get("Id"),
                    leadSectionId: v.leadSectionId,
                    groups: t,
                    topicView: v,
                    callback: v.publishSaveCallback,
                    canEditTopicInd: true
                })
            }
            p3.rV(s, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        },
        fullEditSaveCallback: function() {
            var s = this,
                r = s.options.model.get("Id");
            s.options.topicGroups.fetch({
                data: {
                    id: r
                },
                success: function() {
                    s.updateView();
                    s.options.parentView.topic = s.model;
                    s.options.parentView.renderBuilder()
                },
                error: function() {
                    p3.displayError("Error loading topic sections")
                }
            })
        },
        publishSaveCallback: function(s) {
            var v = this,
                u, t, r = function(w) {
                    return v.options.topicGroups.find(function(x) {
                        return x.get("LeadSectionId") === w.ContextValue
                    })
                };
            for (t = 0; t < s.length; t++) {
                u = r(s[t]);
                if (u) {
                    u.set("ExpireDate", s[t].ExpireDate);
                    u.set("PublishDate", s[t].PublishDate)
                }
            }
        },
        getBlockModel: function() {
            var w = this,
                t = w.options.parentView.options.page,
                u = t.get("PageRegions")[0],
                v = $(".style-element.selected").data("row"),
                s = $(".style-element.selected").data("column"),
                r = $(".style-element.selected").data("block");
            return u.Rows[v].Columns[s].ContentBlocks[r]
        },
        savePage: function() {
            var s = this,
                r = s.options.parentView.options.page;
            r.set("PendingInd", true);
            r.save({}, {
                dataParam: {
                    saveStructure: true,
                    returnModel: true
                },
                success: function(t, u) {
                    s.options.builderData.set({
                        PageRegions: t.get("PageRegions")
                    }, {
                        silent: true
                    });
                    s.options.builderData.trigger("save");
                    r.trigger("change")
                },
                error: function() {
                    p3.displayError("Error saving page")
                }
            })
        }
    });
    q.Vs.Builder = Bb.View.extend({
        template: "topic/topic.builder.template.html",
        events: {
            "click .pages-layout-block-delete": "deleteContent",
            "click .pages-layout-block-edit": "editContent",
            "click .pages-layout-block-add": "addAdditionalContent",
            "click .download-edit-button": "editContent",
            "click .download-delete-button": "deleteContent",
            "click .topic-detail-edit-button": "showEditSettings",
            "click .topic-options-button": "showOptions",
            "click .pages-layout-block-remove": "removeContent",
            "click .pages-layout-block-remove-share": "removeShared",
            "click .download-remove-button": "removeShared",
            "click .pages-layout-block-organize": "organizeContent"
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(r) {
            var s = this;
            $(r).html(s.el);
            s.renderTemplate()
        },
        renderTemplate: function() {
            var s = this,
                r = q.Us.buildRows(s.model.get("LayoutId"));
            p3.fT(s.template, function(v) {
                var t, u;
                s.$el.html(v({
                    rows: r
                }));
                t = $("#topic-workspace");
                t.css({
                    "background-color": "rgb(242,249,255)",
                    "background-image": "linear-gradient(90deg, transparent 28px, rgba(255,255,255,61) 38px)",
                    "background-size": "38px"
                });
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                    window.setTimeout(function() {
                        var w;
                        s.initDraggable();
                        s.initSortable();
                        s.options.content.each(function(x) {
                            w = x.get("ContentId");
                            if (w === p3.Us.Enum.Content.LTI.Value) {
                                x.set("canEdit", true)
                            } else {
                                if (w < 404) {
                                    x.set("canEdit", true)
                                }
                            }
                            if (w === p3.Us.Enum.Content.VIDEO.Value) {
                                if (x.get("HasCorruptedFile") === 1) {
                                    x.set("inProcessing", true)
                                }
                            }
                            u = new q.Vs.ContentItem({
                                model: x,
                                parentView: s
                            });
                            p3.rV(u, $("#column" + x.get("RowIndex") + "_" + x.get("ColumnIndex")), false);
                            _.delay(function() {
                                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.MathJax, function() {
                                    MathJax.Hub.Queue(["Typeset", MathJax.Hub])
                                })
                            }, 200)
                        })
                    }, 400)
                })
            })
        },
        initDraggable: function() {
            $(".pages-layout-draggable-content").draggable({
                connectToSortable: ".pages-layout-col.editable",
                placeholder: "pages-layout-placeholder",
                forcePlaceholderSize: true,
                tolerance: "pointer",
                helper: "clone",
                delay: 300,
                appendTo: "body"
            }).disableSelection()
        },
        initSortable: function() {
            var r = this;
            $(".pages-layout-col").sortable({
                items: "> DIV.pages-layout-block.editable",
                connectWith: ".pages-layout-col.editable",
                handle: ".pages-layout-block-header",
                placeholder: "pages-layout-placeholder",
                forcePlaceholderSize: true,
                tolerance: "pointer",
                delay: 300,
                stop: function(B, K) {
                    var t = $(K.item),
                        s = t.closest(".pages-layout-col"),
                        w = s.data("col"),
                        G = s.data("row"),
                        x = t.data("id"),
                        I = r.model.get("Id"),
                        J = r.model.get("topicIndexId"),
                        v = t.index(),
                        C, D, y, E, z, F, u, L, H, A;
                    if (t.hasClass("workspace-draggable-item")) {
                        _.defer(function() {
                            t.remove()
                        });
                        D = r.getLayoutOrder(G, w, v);
                        if (x == 415) {
                            for (C = 0; C < D.length; C++) {
                                if (D[C].ContentId == 415) {
                                    return
                                }
                            }
                        }
                        y = new q.Ms.TopicContent({
                            topicContentId: 0,
                            shortDescription: "",
                            longDescription: "",
                            Url: "",
                            FileName: ""
                        });
                        switch (x) {
                            case 2:
                                E = j.Us.showTopicLinkDialog(0, y, I, J, 999, r.options.leadSectionId, q.Data.contextLabelId);
                                E.on("linkSaved", function(N, M) {
                                    if (!M) {
                                        M = -1
                                    }
                                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                                    r.addContent(D, x, M, G, w, v, 0)
                                });
                                break;
                            case 3:
                                z = g.Us.showTopicDownloadDialog(0, y, I, J, 999, r.options.leadSectionId, q.Data.contextLabelId);
                                z.on("downloadAdded", function(M) {
                                    if (!M) {
                                        M = -1
                                    }
                                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                                    r.addContent(D, x, M, G, w, v, 0)
                                });
                                break;
                            case 31:
                                F = l.Us.showTopicPhotoDialog(0, y, I, J, 999, r.options.leadSectionId, q.Data.contextLabelId);
                                F.on("photoSaved", function(M) {
                                    if (!M) {
                                        M = -1
                                    }
                                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                                    r.addContent(D, x, M, G, w, v, 0)
                                });
                                break;
                            case 165:
                                u = l.Us.showTopicAudioDialog(0, y, I, J, 999, "", r.options.leadSectionId, q.Data.contextLabelId);
                                u.on("audioSaved", function(M) {
                                    if (!M) {
                                        M = -1
                                    }
                                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                                    r.addContent(D, x, M, G, w, v, 0)
                                });
                                break;
                            case 167:
                                L = l.Us.showTopicVideoDialog(0, y, I, J, 999, "", r.options.leadSectionId, q.Data.contextLabelId);
                                L.on("videoSaved", function(M) {
                                    if (!M) {
                                        M = -1
                                    }
                                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                                    r.addContent(D, x, M, G, w, v, 0)
                                });
                                break;
                            case 1:
                                H = new q.Vs.TopicTextEditView({
                                    Id: 0,
                                    Text: "",
                                    topicId: I,
                                    topicIndexId: J,
                                    sort: 0
                                });
                                p3.rV(H, p3.Layout.Containers.Modal, true);
                                p3.showModal(p3.Layout.Containers.Modal, {});
                                H.on("textSaved", function() {
                                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                                    r.addContent(D, x, -1, G, w, v, 0)
                                });
                                break;
                            case 387:
                                A = new q.Vs.TopicWidgetEditView({
                                    mode: "Add",
                                    loadedId: 0,
                                    topicId: I,
                                    topicIndexId: J,
                                    ContextValue: I,
                                    sortOrder: 0,
                                    contentItem: y
                                });
                                p3.rV(A, p3.Layout.Containers.Modal, true);
                                p3.showModal(p3.Layout.Containers.Modal, {});
                                A.on("embedSaved", function() {
                                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                                    r.addContent(D, x, -1, G, w, v, 0)
                                });
                                break;
                            case p3.Us.Enum.Content.LTI.Value:
                                k.Us.OpenToolModal("Add", 0, 27, I, false, function(M) {
                                    M.on("ltiToolSaved", function() {
                                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                                        r.addContent(D, x, -1, G, w, v, 0)
                                    })
                                });
                                break;
                            default:
                                r.addContent(D, x, 0, G, w, v, 0);
                                break
                        }
                    } else {
                        D = r.getLayoutOrder(-1, -1, -1);
                        r.saveLayout(D, false)
                    }
                }
            }).disableSelection()
        },
        getLayoutOrder: function(B, t, y) {
            var u = [],
                s = -1,
                A = -1,
                z = -1,
                v, D, E = 0,
                C, w, r, x;
            $(".pages-layout-col").each(function(F, G) {
                A = $(G).data("row");
                s = $(G).data("col");
                z = -1;
                $(G).find(".pages-layout-block").each(function(I, H) {
                    C = null;
                    D = false;
                    if (B == A && t == s && I == y) {
                        z += 2
                    } else {
                        z += 1
                    }
                    r = $(H).find(".pages-layout-block-header");
                    v = r.data("id");
                    x = r.data("locked");
                    if (v == 3 && $(H).find(".pages-layout-block-header").data("indexid") == "0") {
                        D = true
                    } else {
                        if (v == 3) {
                            E = $(H).find(".download-row").data("sort");
                            C = $(H).find(".download-row").data("categoryid") || 0
                        } else {
                            if (v === 2) {
                                w = r.data("display");
                                if (w) {
                                    C = {
                                        DisplayOption: w
                                    };
                                    C = C ? JSON.stringify(C) : null
                                }
                            }
                        }
                    }
                    if (!D) {
                        u.push({
                            ContentId: v,
                            ContentIndexId: $(H).find(".pages-layout-block-header").data("indexid"),
                            RowIndex: A,
                            ColumnIndex: s,
                            CellIndex: z,
                            SortOrder: E,
                            GenericSettings: C,
                            Locked: x
                        })
                    }
                    if (v == 3) {
                        $(H).find(".additional-download-item").each(function(J, K) {
                            u.push({
                                ContentId: v,
                                ContentIndexId: $(K).data("index"),
                                RowIndex: A,
                                ColumnIndex: s,
                                CellIndex: z,
                                SortOrder: $(K).data("sort"),
                                GenericSettings: $(K).data("categoryid") || 0,
                                Locked: x
                            })
                        })
                    }
                })
            });
            return u
        },
        saveLayout: function(r, s) {
            var u = this,
                t = new q.Ms.TopicContentSort({
                    TopicId: u.model.get("Id")
                });
            t.set({
                ContentItems: r
            });
            t.save({}, {
                error: function() {
                    p3.displayError("Error saving topic layout")
                },
                success: function() {
                    if (s) {
                        u.trigger("contentChange")
                    }
                }
            })
        },
        addContent: function(z, t, u, A, s, r, B) {
            var C = this,
                x, v = false,
                y, w = null;
            if (u == -1) {
                y = new q.Ms.TopicContentIndex({
                    contentId: t,
                    topicId: C.model.get("Id")
                });
                y.fetch({
                    async: false,
                    success: function() {
                        u = y.get("content_index_id")
                    },
                    error: function() {
                        p3.displayError("Error getting content index")
                    }
                })
            }
            if (t === 3) {
                w = 0;
                for (x = 0; x < z.length; x++) {
                    if (z[x].ContentId === t && z[x].RowIndex === A && z[x].ColumnIndex === s && z[x].CellIndex === r) {
                        if (v) {
                            z[x].SortOrder = z[x].SortOrder + 1
                        } else {
                            if (z[x].GenericSettings.toString() !== "0") {
                                v = true;
                                B = x;
                                z[x].SortOrder = z[x].SortOrder + 1
                            }
                        }
                    }
                }
            }
            z.push({
                ContentId: t,
                ContentIndexId: u,
                RowIndex: A,
                ColumnIndex: s,
                CellIndex: r,
                SortOrder: B,
                GenericSettings: w
            });
            C.saveLayout(z, true)
        },
        deleteContent: function(x) {
            x.preventDefault();
            var C = this,
                r = $(x.currentTarget),
                t = r.data("id"),
                v = r.data("itemid"),
                y = "",
                u, w, A, s, z, B;
            switch (t) {
                case 2:
                case 31:
                case 165:
                case 167:
                case 1:
                case 387:
                    u = q.Us.getContentItem(C.options.content, v);
                    y = u.get("FileName");
                    w = new q.Vs.TopicContentDeleteView({
                        Id: v,
                        ContentId: t,
                        TopicId: C.model.get("Id"),
                        FileName: y,
                        topicIndexId: C.model.get("topicIndexId")
                    });
                    p3.rV(w, p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal, {});
                    w.on("contentDeleted", function() {
                        r.parents(".pages-layout-block").remove();
                        C.saveLayout(C.getLayoutOrder(-1, -1, -1), false)
                    });
                    break;
                case p3.Us.Enum.Content.LTI.Value:
                    w = new q.Vs.TopicContentDeleteView({
                        Id: v,
                        ContentId: t,
                        TopicId: C.model.get("ToolId"),
                        FileName: y,
                        topicIndexId: C.model.get("topicIndexId")
                    });
                    p3.rV(w, p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal, {});
                    w.on("contentDeleted", function() {
                        r.parents(".pages-layout-block").remove();
                        C.saveLayout(C.getLayoutOrder(-1, -1, -1), false)
                    });
                    break;
                case 3:
                    A = r.data("parentid");
                    B = true;
                    if (A) {
                        s = q.Us.getContentItem(C.options.content, A).get("AdditionalItems");
                        for (z = 0; z < s.length; z++) {
                            if (s[z].ContentItemId == v) {
                                u = new q.Ms.TopicContent(s[z])
                            }
                        }
                        B = false
                    } else {
                        u = q.Us.getContentItem(C.options.content, v);
                        if (u.get("AdditionalItems") && u.get("AdditionalItems").length > 0) {
                            B = false;
                            r.parents(".pages-layout-block").find(".pages-layout-block-header").data("indexid", "0")
                        }
                    }
                    y = u.get("FileName");
                    w = new q.Vs.TopicContentDeleteView({
                        Id: v,
                        ContentId: t,
                        TopicId: C.model.get("Id"),
                        FileName: y,
                        topicIndexId: C.model.get("topicIndexId")
                    });
                    p3.rV(w, p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal, {});
                    w.on("contentDeleted", function() {
                        if (B) {
                            r.parents(".pages-layout-block").remove()
                        } else {
                            r.parents("tr").remove()
                        }
                        C.saveLayout(C.getLayoutOrder(-1, -1, -1), false)
                    });
                    break;
                default:
                    r.parents(".pages-layout-block").remove();
                    C.saveLayout(C.getLayoutOrder(-1, -1, -1), false);
                    break
            }
        },
        removeContent: function(r) {
            r.preventDefault();
            this.doRemoveContent(r, false)
        },
        removeShared: function(r) {
            r.preventDefault();
            this.doRemoveContent(r, true)
        },
        doRemoveContent: function(x, z) {
            x.preventDefault();
            var E = this,
                r = $(x.currentTarget),
                u = parseInt(r.data("id"), 10),
                t = r.data("column"),
                C = r.data("row"),
                s = r.data("cell"),
                D, w = [],
                y, B = true,
                A, v;
            if (z) {
                y = "Are you sure you want to remove this content from the topic?<br />The content will remain on copied versions of this topic.";
                if (u === 3) {
                    A = r.data("parentid");
                    if (A) {
                        B = false
                    } else {
                        v = q.Us.getContentItem(E.options.content, r.data("itemid"));
                        if (v.get("AdditionalItems") && v.get("AdditionalItems").length > 0) {
                            B = false;
                            r.parents(".pages-layout-block").find(".pages-layout-block-header").data("indexid", "0")
                        }
                    }
                }
            } else {
                y = "Are you sure you want to remove this copied content from the topic?"
            }
            p3.showConfirm(null, y, null, function() {
                w.push({
                    ContentId: u,
                    RowIndex: C,
                    ColumnIndex: t,
                    CellIndex: s,
                    ContentIndexId: u === 3 && z ? r.data("itemid") : null
                });
                D = new q.Ms.RemoveContent({
                    TopicId: E.model.get("Id"),
                    ContentItems: w
                });
                D.save({}, {
                    error: function() {
                        p3.displayError("Error removing copied content")
                    },
                    success: function() {
                        if (B) {
                            r.parents(".pages-layout-block").remove()
                        } else {
                            r.parents("tr").remove()
                        }
                        E.saveLayout(E.getLayoutOrder(-1, -1, -1), false)
                    }
                })
            })
        },
        editContent: function(y) {
            y.preventDefault();
            var H = this,
                r = $(y.currentTarget),
                u = r.data("id"),
                w = r.data("itemid"),
                E = H.model.get("Id"),
                F = H.model.get("topicIndexId"),
                v = q.Us.getContentItem(H.options.content, w),
                A, B, s, x, C, t, G, D, z;
            switch (u) {
                case 2:
                    B = j.Us.showTopicLinkDialog(w, v, E, F, 999, q.Data.contextLabelId);
                    B.on("linkSaved", function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        H.trigger("contentChange")
                    });
                    break;
                case 3:
                    if (!v) {
                        s = q.Us.getContentItem(H.options.content, r.data("parentid")).get("AdditionalItems");
                        for (A = 0; A < s.length; A++) {
                            if (s[A].ContentItemId == w) {
                                v = new q.Ms.TopicContent(s[A])
                            }
                        }
                    }
                    x = g.Us.showTopicDownloadDialog(w, v, E, F, 999, q.Data.contextLabelId);
                    x.on("downloadAdded", function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        H.trigger("contentChange")
                    });
                    break;
                case 31:
                    C = l.Us.showTopicPhotoDialog(w, v, E, F, 999, q.Data.contextLabelId);
                    C.on("photoSaved", function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        H.trigger("contentChange")
                    });
                    break;
                case 165:
                    t = l.Us.showTopicAudioDialog(w, v, E, F, 999, v.get("LongDescription"), q.Data.contextLabelId);
                    t.on("audioSaved", function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        H.trigger("contentChange")
                    });
                    break;
                case 167:
                    G = l.Us.showTopicVideoDialog(w, v, E, F, 999, v.get("LongDescription"), q.Data.contextLabelId);
                    G.on("videoSaved", function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        H.trigger("contentChange")
                    });
                    break;
                case 1:
                    D = new q.Vs.TopicTextEditView({
                        Id: w,
                        Text: v.get("LongDescription"),
                        topicId: E,
                        topicIndexId: F,
                        sort: 0
                    });
                    p3.rV(D, p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal, {});
                    D.on("textSaved", function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        H.trigger("contentChange")
                    });
                    break;
                case 387:
                    z = new q.Vs.TopicWidgetEditView({
                        mode: "Edit",
                        loadedId: w,
                        topicId: E,
                        topicIndexId: F,
                        ContextValue: E,
                        sortOrder: 0,
                        contentItem: v
                    });
                    p3.rV(z, p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal, {});
                    z.on("embedSaved", function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        H.trigger("contentChange")
                    });
                    break;
                case p3.Us.Enum.Content.LTI.Value:
                    k.Us.OpenToolModal("Edit", w, 27, E, false, function(I) {
                        I.on("ltiToolSaved", function() {
                            p3.showModal(p3.Layout.Containers.Modal, "hide");
                            H.trigger("contentChange")
                        })
                    });
                    break
            }
        },
        organizeContent: function(w) {
            var B = this,
                r = B.$(w.currentTarget),
                A = r.data("row"),
                t = r.data("column"),
                s = r.data("cell"),
                x, v, y = new c.Ms.GroupId(),
                z = [],
                u;
            w.preventDefault();
            u = _.filter(B.options.content.toJSON(), function(C) {
                return C.CellIndex === s && C.ColumnIndex === t && C.RowIndex === A
            })[0];
            z.push({
                id: u.ContentItemId,
                sort: u.SortOrder
            });
            if (u.AdditionalItems.length > 0) {
                _.each(u.AdditionalItems, function(C) {
                    z.push({
                        id: C.ContentItemId,
                        sort: C.SortOrder
                    })
                })
            }
            y.fetch({
                data: {
                    contextLabelId: 27,
                    contentType: "D"
                },
                success: function(C, E) {
                    x = E;
                    v = new g.Cs.Download({}, {
                        active: true,
                        future: true,
                        expired: true,
                        categoryId: x,
                        contextLabelId: 27
                    });
                    var D = new c.Vs.SubCategoryOrganize({
                        collection: v,
                        categoryId: x,
                        enumObj: p3.Us.Enum.Content.DOWNLOAD,
                        contextLabelId: 27,
                        contextValue: B.options.content.topicId,
                        topicRow: A,
                        topicColumn: t,
                        topicCell: s,
                        downloadIds: z
                    });
                    D.on("organizeDataSaved", function() {
                        B.trigger("contentChange")
                    });
                    p3.rV(D, p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal)
                },
                error: function() {
                    p3.displayError("Error loading group Id.")
                }
            });
            return false
        },
        addAdditionalContent: function(x) {
            x.preventDefault();
            var C = this,
                r = $(x.currentTarget),
                u = r.data("id"),
                z = r.data("row"),
                t = r.data("column"),
                s = r.data("cell"),
                A = C.model.get("Id"),
                B = C.model.get("topicIndexId"),
                v = new q.Ms.TopicContent({
                    topicContentId: 0,
                    shortDescription: "",
                    longDescription: "",
                    Url: "",
                    FileName: ""
                }),
                w, y = r.parents(".pages-layout-block").find(".download-row").length;
            switch (u) {
                case 3:
                    w = g.Us.showTopicDownloadDialog(0, v, A, B, 999, C.options.leadSectionId, q.Data.contextLabelId);
                    w.on("downloadAdded", function(D) {
                        if (!D) {
                            D = -1
                        }
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        C.addContent(C.getLayoutOrder(-1, -1, -1), u, D, z, t, s, y)
                    });
                    break
            }
        },
        showEditSettings: function(r) {
            r.preventDefault();
            this.trigger("settingsClick", r)
        },
        showOptions: function(v) {
            var z = this,
                r = $(v.currentTarget),
                t = r.data("itemid"),
                x, s, y, u = "optTitle",
                w;
            v.preventDefault();
            s = q.Us.getContentItem(z.options.content, t);
            if (s.get("GenericSettings")) {
                y = JSON.parse(s.get("GenericSettings"));
                if (y.DisplayOption) {
                    u = y.DisplayOption
                }
            }
            x = new q.Vs.Options({
                displayOption: u
            });
            p3.rV(x, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            x.on("OptionsSaved", function(A) {
                r.parents(".pages-layout-block-header").data("display", A);
                y = {
                    DisplayOption: A
                };
                s.set("GenericSettings", JSON.stringify(y));
                w = z.getLayoutOrder(-1, -1, -1);
                z.saveLayout(w, false)
            })
        }
    });
    q.Vs.ExistingContent = Bb.View.extend({
        template: "topic/topiccontent.existing.template.html",
        events: {
            "change #existing-content-school-year-dd": "schoolYearChange",
            "change #existing-content-section-dd": "sectionChange",
            "click .existing-content-sort": "updateSort"
        },
        renderTemplate: function() {
            var s = this,
                r = new q.Cs.ExistingSchoolYears({}, {});
            r.fetch({
                success: function() {
                    var u = r.where({
                            Current: true
                        }),
                        t;
                    if (u.length > 0) {
                        s.currentYear = u[0].get("Id")
                    }
                    s.SectionsForTeacher = new q.Cs.SectionsByYear();
                    t = 1;
                    if (q.Data.contextLabelId == 12) {
                        t = 3
                    }
                    s.SectionsForTeacher.fetch({
                        data: {
                            facultyUserId: p3.Data.Context.get("UserInfo").UserId,
                            schoolYear: s.currentYear,
                            associationId: t
                        },
                        success: function(w, x) {
                            var v = w.toJSON(),
                                y;
                            v = _.uniq(v, true, function(z) {
                                return z.SectionId
                            });
                            switch (s.options.contentType) {
                                case 31:
                                case 165:
                                case 167:
                                    y = "album_filename_url";
                                    break;
                                default:
                                    y = "content_short_description";
                                    break
                            }
                            s.sortColumn = y;
                            p3.fT(s.template, function(z) {
                                s.$el.html(z({
                                    SchoolYears: r.toJSON(),
                                    Sections: v,
                                    sortColumn: y
                                }));
                                if (s.SectionsForTeacher.length > 0) {
                                    s.activeSection = s.SectionsForTeacher.models[0].get("SectionId")
                                }
                                s.getExistingContent()
                            })
                        },
                        error: function(v, w) {
                            p3.displayError("Error retrieving sections.")
                        }
                    })
                },
                error: function() {
                    p3.displayError("Error loading school years")
                }
            })
        },
        initialize: function() {
            var r = new q.Cs.ExistingSchoolYears({}, {});
            this.schoolYears = r;
            r.fetch({
                error: function() {
                    p3.displayError("Error loading school years")
                }
            })
        },
        render: function(r) {
            $(r).append(this.el);
            this.renderTemplate()
        },
        schoolYearChange: function(t) {
            var w = this,
                v, s, u, r;
            w.currentYear = $("#existing-content-school-year-dd").val();
            w.SectionsForTeacher.fetch({
                data: {
                    facultyUserId: p3.Data.Context.get("UserInfo").UserId,
                    schoolYear: w.currentYear
                },
                success: function(x, y) {
                    s = x.toJSON();
                    s = _.uniq(s, true, function(z) {
                        return z.SectionId
                    });
                    r = $("#existing-content-section-dd");
                    r.html("");
                    for (v = 0; v < s.length; v++) {
                        u = $("<option>", {
                            value: s[v].SectionId
                        }).html(s[v].Name);
                        r.append(u)
                    }
                    if (w.SectionsForTeacher.length > 0) {
                        w.activeSection = w.SectionsForTeacher.models[0].get("SectionId")
                    }
                    w.getExistingContent()
                },
                error: function(x, y) {
                    p3.displayError("Error retrieving sections.")
                }
            })
        },
        sectionChange: function(r) {
            var s = this;
            s.activeSection = $("#existing-content-section-dd").val();
            s.getExistingContent()
        },
        getExistingContent: function() {
            var s = this,
                r = false;
            if (s.activeSection <= 0) {
                s.renderItems([]);
                if (!_.isUndefined(s.ExistingContent)) {
                    s.ExistingContent.remove(s.ExistingTopics.models)
                }
                return
            }
            if (_.isUndefined(s.ExistingContent)) {
                s.ExistingContent = new q.Cs.ExistingContent({}, {
                    contentId: s.options.contentType,
                    sectionId: s.activeSection
                });
                s.ExistingContent.filters = {
                    album_filename_url: function(v, w) {
                        var t = v.get("album_filename_url") || "",
                            u = w.get("album_filename_url") || "";
                        return t < u ? -1 : t > u ? 1 : 0
                    },
                    content_insert_date: function(t) {
                        return d.getDate(t.get("content_insert_date")).getTime()
                    },
                    content_short_description: function(v, w) {
                        var t = v.get("content_short_description") || "",
                            u = w.get("content_short_description") || "";
                        return t < u ? -1 : t > u ? 1 : 0
                    },
                    album_filename_url_invert: function(v, w) {
                        var t = v.get("album_filename_url") || "",
                            u = w.get("album_filename_url") || "";
                        return t < u ? 1 : t > u ? -1 : 0
                    },
                    content_insert_date_invert: function(t) {
                        return -d.getDate(t.get("content_insert_date")).getTime()
                    },
                    content_short_description_invert: function(v, w) {
                        var t = v.get("content_short_description") || "",
                            u = w.get("content_short_description") || "";
                        return t < u ? 1 : t > u ? -1 : 0
                    }
                };
                r = true
            } else {
                s.ExistingContent.sectionId = s.activeSection
            }
            s.ExistingContent.fetch({
                success: function(t, u) {
                    if (r) {
                        s.CurrentSort = s.sortColumn;
                        s.ExistingContent.changeSort(s.sortColumn);
                        s.ExistingContent.sort()
                    }
                    s.renderItems(t.toJSON());
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                },
                error: function(t, u) {
                    p3.displayError("Error retreiving Existing Content.")
                }
            })
        },
        renderItems: function(t) {
            var r = "",
                s;
            if (t && t.length > 0) {
                for (s = 0; s < t.length; s++) {
                    r += '<tr><td><label class="radio"><input type="radio" name="existing-content-options" value="' + t[s].content_item_id + '" data-index="' + t[s].content_index_id + '"></label></td>';
                    if (t[s].content_short_description == null) {
                        r += "<td>" + t[s].album_filename_url + "</td>"
                    } else {
                        r += "<td>" + t[s].content_short_description + "</td>"
                    }
                    r += "<td>" + d.getDateString(d.getDate(t[s].content_insert_date)) + "</td></tr>"
                }
                $("#existing-items-table").html(r)
            } else {
                $("#existing-items-table").html("<tr><td></td><td>There is no content to display.</td><td></td></tr>")
            }
        },
        moveContent: function() {
            var x = this,
                u = 0,
                w = x.$("input:radio[name=existing-content-options]:checked"),
                r, t, s, v;
            if (w.length) {
                r = w.val();
                t = [];
                s = w.data("index");
                t.push({
                    ContentId: x.options.contentType,
                    ContentIndexId: r
                });
                v = new q.Ms.TopicContentMove({
                    TopicId: x.options.topicId,
                    SectionId: x.activeSection,
                    ContentItems: t
                });
                v.save({}, {
                    async: false,
                    success: function(y, z) {
                        u = s
                    },
                    error: function(y, z) {
                        p3.displayError("Error moving content")
                    }
                })
            }
            return u
        },
        updateSort: function(s) {
            var u = this,
                r = $(s.currentTarget),
                t = r.data("sort");
            $(".sort-icon").removeClass("p3icon-sortDown p3icon-sortUp p3icon-sortOff");
            $(".sort-icon").addClass("p3icon-sortOff");
            $(".existing-content-sort").removeClass("sort-active").addClass("muted");
            if (t) {
                if (u.CurrentSort === t) {
                    t = t + "_invert";
                    r.removeClass("muted").addClass("sort-active");
                    r.children("i").removeClass("p3icon-sortOff").addClass("p3icon-sortUp")
                } else {
                    r.removeClass("muted").addClass("sort-active");
                    r.children("i").removeClass("p3icon-sortOff").addClass("p3icon-sortDown")
                }
                u.CurrentSort = t;
                u.ExistingContent.changeSort(t);
                u.ExistingContent.sort();
                u.renderItems(u.ExistingContent.toJSON())
            }
        }
    });
    q.Vs.PriorityEditView = Bb.View.extend({
        template: "topic/topic.priority.template.html",
        events: {
            "click #btnSave": "savePriority",
            "click .move-top-button": "moveToTop"
        },
        render: function(r) {
            var s = this;
            $(r).html(s.el);
            s.renderTemplate()
        },
        renderTemplate: function() {
            var s = this,
                r = new q.Cs.Topic({}, {
                    sectionId: 0,
                    leadSectionId: this.options.leadSectionId,
                    active: true,
                    future: true,
                    expired: true,
                    shared: true
                });
            r.fetch({
                success: function() {
                    var u = d.localDateTime(),
                        v = new Date(u.getFullYear(), u.getMonth(), u.getDate()),
                        t;
                    r.each(function(w) {
                        if (w.get("PublishDate") !== null && d.getDate(w.get("PublishDate")).getTime() > v.getTime()) {
                            w.set("inactiveMessage", "Future Publish Date")
                        } else {
                            if (w.get("ExpireDate")) {
                                if (d.getDate(w.get("ExpireDate")).getTime() < v.getTime()) {
                                    w.set("inactiveMessage", "Expired")
                                }
                            }
                        }
                    });
                    p3.fT(s.template, function(w) {
                        s.$el.html(w({
                            topic: r.toJSON(),
                            schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId
                        }))
                    });
                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                        t = function(w, x) {
                            x.children().each(function() {
                                $(this).width($(this).width())
                            });
                            return x
                        };
                        window.setTimeout(function() {
                            $(".sortContainer tbody").sortable({
                                items: "tr.postContainer",
                                helper: t
                            }).disableSelection()
                        }, 400)
                    })
                },
                error: function() {
                    p3.displayError("Error loading topics")
                }
            })
        },
        savePriority: function(r) {
            var v = this,
                u = [],
                t = 0,
                s;
            $("#btnSave").button("loading");
            $(".postContainer").each(function() {
                t += 1;
                u.push({
                    ContentIndexId: $(this).data("id"),
                    SortOrder: t
                })
            });
            s = new q.Ms.SetPriorities({
                ContentItems: u
            });
            s.save({}, {
                error: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    p3.displayError("Error saving priority")
                },
                success: function() {
                    v.trigger("priorityChanged");
                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                }
            })
        },
        moveToTop: function(t) {
            var s = $(t.currentTarget),
                r = s.parentsUntil(1, "tr"),
                v = r.data("id"),
                u = r.html();
            r.remove();
            $(".sortContainer tr:first").after('<tr class="postContainer sort-hover" data-id="' + v + '">' + u + "</tr>")
        }
    });
    q.Vs.Options = Bb.View.extend({
        template: "topic/topic.options.template.html",
        events: {
            "click #btnSave": "saveOption"
        },
        render: function(r) {
            var s = this;
            $(r).html(s.el);
            s.renderTemplate()
        },
        renderTemplate: function() {
            var r = this;
            p3.fT(r.template, function(s) {
                r.$el.html(s({
                    linkOption: r.options.displayOption
                }))
            })
        },
        saveOption: function(r) {
            var s = this;
            s.trigger("OptionsSaved", $('input[type="radio"][name=DisplayOption]:checked:first').val());
            p3.Layout.Containers.Modal.modal("hide")
        }
    });
    q.Vs.ShareView = Bb.View.extend({
        template: "topic/topic.share.template.html",
        itemTemplate: "topic/topic.share.item.template.html",
        events: {
            "click .can-edit-check": "editClick",
            "change #share-next-faculty-dropdown": "facultyChange",
            "change #share-next-section-dropdown": "sectionChange",
            "click .topic-share-remove": "removeShareRow",
            "click .share-next-link": "doAddNext",
            "click #add-bank-button": "editClick",
            "click .topic-share-delete": "deleteShareRow"
        },
        render: function(r) {
            var s = this;
            $(r).html(s.el);
            q.Us.getCurrentYearFaculty();
            s.renderTemplate()
        },
        renderTemplate: function() {
            var s = this,
                r;
            r = q.Us.getAssociationFromContext(q.Data.contextLabelId);
            p3.fT(s.template, function(t) {
                s.$el.html(t({
                    groups: s.options.groups,
                    faculty: q.Data.FacultyList.toJSON(),
                    sectionLabel: q.Us.getSectionLabel(r),
                    pluralLabel: q.Us.getPluralLabel(r),
                    ownerLabel: q.Us.getOwnerLabel(r),
                    topic: s.options.topic.toJSON()
                }));
                s.doAdjustAddAreaUI();
                p3.setModalHeight(p3.Layout.Containers.Modal)
            })
        },
        editClick: function(s) {
            var t = this,
                r = $(s.currentTarget);
            if (r.hasClass("active")) {
                r.removeClass("active");
                if (r.hasClass("share-next-can-edit")) {
                    t.selectedCanEdit = false
                }
            } else {
                r.addClass("active");
                if (r.hasClass("share-next-can-edit")) {
                    t.selectedCanEdit = true
                }
            }
        },
        facultyChange: function(s) {
            var u = this,
                r = $(s.currentTarget),
                t = parseInt(r.val(), 10);
            u.selectedFacultyId = t;
            u.selectedFacultyName = s.currentTarget.options[s.currentTarget.selectedIndex].text;
            u.selectedSectionId = 0;
            u.selectedSectionName = "";
            u.buildSectionDropdown()
        },
        sectionChange: function(s) {
            var u = this,
                r = $(s.currentTarget),
                t = parseInt(r.val(), 10);
            u.selectedSectionId = t;
            u.selectedSectionName = s.currentTarget.options[s.currentTarget.selectedIndex].text;
            u.doAdjustAddAreaUI()
        },
        addAreaIsValid: function() {
            var r = this;
            return (r.selectedFacultyId > 0 && r.selectedSectionId > 0)
        },
        addAreaIsHidden: function() {
            var r = this;
            return (r.$(".share-next-area").hasClass("hidden"))
        },
        doAdjustAddAreaUI: function() {
            var v = this,
                r = v.$(".share-next-link-active"),
                s = v.$(".share-next-link-inactive"),
                t = v.$(".share-next-link-nother"),
                u;
            u = (v.$("#shared-table").find("tr").length) - 1;
            if (v.addAreaIsValid() || !(v.addAreaIsHidden())) {
                u = u + 1
            }
            if (u === 0) {
                t.hide()
            } else {
                t.show()
            }
            if (v.addAreaIsHidden() || v.addAreaIsValid()) {
                s.hide();
                r.show()
            } else {
                r.hide();
                s.show()
            }
        },
        doAddNext: function(w) {
            var y = this,
                u = y.$(".share-next-area"),
                s = y.$("#share-next-faculty-dropdown"),
                t = y.$("#share-next-section-dropdown"),
                r = y.$(".share-next-can-edit"),
                x, v;
            w.stopPropagation();
            w.preventDefault();
            if (y.addAreaIsHidden()) {
                u.removeClass("hidden");
                u.show()
            }
            if (y.selectedFacultyId > 0 && y.selectedSectionId > 0) {
                x = new q.Ms.TopicGroup();
                x.set("GroupName", y.selectedSectionName);
                x.set("SectionId", y.selectedSectionId);
                x.set("ContextLabelId", q.Data.contextLabelId);
                x.set("AllowEdit", y.selectedCanEdit);
                p3.fT(y.itemTemplate, function(z) {
                    v = q.Us.getAssociationFromContext(q.Data.contextLabelId);
                    $("#shared-body tr:last").after(z({
                        item: x.toJSON(),
                        sectionLabel: q.Us.getSectionLabel(v),
                        pluralLabel: q.Us.getPluralLabel(v),
                        ownerLabel: q.Us.getOwnerLabel(v),
                        topic: y.options.topic.toJSON()
                    }));
                    y.selectedFacultyId = 0;
                    y.selectedFacultyName = null;
                    y.selectedSectionId = 0;
                    y.selectedSectionName = null;
                    y.selectedCanEdit = false;
                    s.val(0);
                    t.val(0);
                    t.prop("disabled", true);
                    r.removeClass("active")
                })
            }
            y.doAdjustAddAreaUI();
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        removeShareRow: function(r) {
            var s = this;
            $(r.currentTarget).parents("tr").remove();
            s.buildSectionDropdown();
            s.doAdjustAddAreaUI();
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        deleteShareRow: function(s) {
            var r = $(s.currentTarget).parents("tr");
            r.addClass("delete");
            r.html('<td colspan="3"><div style="margin-bottom:0px;"class="alert alert-error">This share will be removed on save.</div></td>')
        },
        getSharedSectionArray: function() {
            var s = this,
                r = [];
            s.$("tr.add-share-row[data-sectionid]").each(function(t, u) {
                r.push($(u).data("sectionid"))
            });
            return r
        },
        buildSectionDropdown: function() {
            var t = this,
                r = t.$("#share-next-section-dropdown"),
                s;
            r.empty().prop("disabled", true);
            r.append($("<option></option>").attr("value", "0").text("-- " + q.Us.getSectionLabel(q.Data.FacultyList.associationId) + " --"));
            if (t.selectedFacultyId > 0) {
                s = new q.Cs.SectionsByYear();
                s.fetch({
                    data: {
                        facultyUserId: t.selectedFacultyId,
                        schoolYear: p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel,
                        associationId: q.Data.FacultyList.associationId
                    },
                    success: function(v, x) {
                        var u = v.toJSON(),
                            w;
                        w = t.getSharedSectionArray();
                        u = _.uniq(u, true, function(y) {
                            return y.SectionId
                        });
                        if (u.length > 0) {
                            r.prop("disabled", false);
                            _.each(u, function(y) {
                                if (y.SectionId && w.indexOf(y.SectionId) < 0) {
                                    r.append($("<option></option>").attr("value", y.SectionId).text(y.Name))
                                }
                            })
                        }
                    },
                    error: function(u, v) {
                        p3.displayError("Error retrieving sections.")
                    }
                })
            }
            t.doAdjustAddAreaUI()
        },
        getSharedGroups: function() {
            var u = this,
                t = true,
                r = [],
                s = "";
            u.allowCopy = $("#add-bank-button").hasClass("active");
            $(".add-share-row").each(function(C, D) {
                var w = $(D),
                    y = w.hasClass("existing"),
                    G = !w.hasClass("delete"),
                    F, x, A, v = w.find("td"),
                    B = [],
                    E, z;
                if (y) {
                    F = w.data("sectionid");
                    x = w.data("contextlabelid");
                    A = $(v[0]).text();
                    E = w.data("publish");
                    z = w.data("expire")
                } else {
                    F = w.data("sectionid");
                    x = w.data("contextlabelid");
                    A = $(v[0]).text()
                }
                if (F === 0) {
                    w.addClass("error");
                    t = false;
                    s = "Please select a section to share with"
                } else {
                    if (F > 0) {
                        B = _.pluck(r, "ContextValue");
                        B.push(F);
                        if (_.uniq(B).length === B.length) {
                            r.push({
                                Selected: G,
                                PrimaryInd: false,
                                ContextLabelId: x,
                                ContextValue: F,
                                Sort: 1,
                                Type: 1,
                                AllowEdit: w.find(".can-edit-check").hasClass("active"),
                                GroupName: A,
                                PublishDate: E,
                                ExpireDate: z
                            });
                            w.removeClass("error")
                        }
                    } else {
                        w.removeClass("error")
                    }
                }
            });
            if (!(u.$(".share-next-area").hasClass("hidden"))) {
                if (u.selectedSectionId > 0) {
                    r.push({
                        Selected: true,
                        PrimaryInd: false,
                        ContextLabelId: q.Data.contextLabelId,
                        ContextValue: u.selectedSectionId,
                        Sort: 1,
                        Type: 1,
                        AllowEdit: u.selectedCanEdit,
                        GroupName: u.selectedSectionName,
                        PublishDate: null,
                        ExpireDate: null
                    })
                }
            }
            u.sharedGroups = r;
            u.errorMessage = s;
            return t
        }
    });
    q.Vs.ShareModal = Bb.View.extend({
        template: "topic/topic.share.modal.template.html",
        events: {
            "click #save-button": "saveTopic"
        },
        render: function(r) {
            var s = this;
            $(r).html(s.el);
            q.Us.getCurrentYearFaculty();
            s.createModel();
            s.renderTemplate()
        },
        renderTemplate: function() {
            var r = this;
            p3.fT(r.template, function(s) {
                r.$el.html(s({}));
                r.Containers = {};
                r.Containers.shareContainer = $("#share-container");
                r.addShareView()
            })
        },
        addShareView: function() {
            var r = this;
            r.shareView = new q.Vs.ShareView({
                groups: r.sharedGroups,
                topic: r.topic
            });
            p3.rV(r.shareView, r.Containers.shareContainer, true);
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        saveTopic: function(s) {
            var t = this,
                r = $("#save-button");
            r.button("loading");
            if (t.shareView.getSharedGroups()) {
                t.groups = t.groups.concat(t.shareView.sharedGroups);
                t.topic.set("groups", t.groups);
                t.topic.set("AllowCopy", t.shareView.allowCopy);
                t.topic.save({}, {
                    error: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        p3.displayError("Error saving topic")
                    },
                    success: function() {
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        q.Us.refreshTopics(true, 0, t.options.topicView.options.leadSectionId, t.options.topicView)
                    }
                })
            } else {
                r.button("reset");
                $("#topic_share_error_region").html(t.shareView.errorMessage).addClass("alert").addClass("alert-error")
            }
        },
        createModel: function() {
            var r = this;
            r.topic = new q.Ms.TopicSave({
                TopicId: r.options.topicId
            });
            r.sharedGroups = [];
            r.groups = [];
            if (r.options.groups.length > 0) {
                r.options.groups.each(function(s, t) {
                    if (t === 0) {
                        r.topic.set("ShortDescription", s.get("Name"));
                        r.topic.set("LongDescription", s.get("Description"));
                        r.topic.set("OldThumbFilename", s.get("ThumbFilename"));
                        r.topic.set("LayoutId", s.get("LayoutId"));
                        r.topic.set("AllowCopy", s.get("AllowCopy"))
                    }
                    if (s.get("Primary")) {
                        r.groups.push({
                            ContextLabelId: s.get("ContextLabelId"),
                            ContextValue: s.get("SectionId"),
                            ExpireDate: s.get("ExpireDate"),
                            PrimaryInd: true,
                            PublishDate: s.get("PublishDate"),
                            Selected: true,
                            Sort: 1,
                            Type: 1
                        })
                    } else {
                        r.sharedGroups.push(s.toJSON())
                    }
                })
            }
        }
    });
    q.Vs.PublishShareModal = Bb.View.extend({
        template: "topic/topic.publish.share.template.html",
        events: {
            "click #save-button": "saveTopic"
        },
        render: function(r) {
            var s = this;
            $(r).html(s.el);
            q.Us.getCurrentYearFaculty();
            s.createModel();
            s.renderTemplate()
        },
        renderTemplate: function() {
            var r = this;
            p3.fT(r.template, function(s) {
                r.$el.html(s({
                    groups: r.sharedGroups,
                    canEditTopicInd: r.options.canEditTopicInd
                }));
                r.Containers = {};
                r.Containers.groupContainer = $("#groups-container");
                r.addGroupsView()
            })
        },
        addGroupsView: function() {
            var r = this;
            r.groupView = new i.Vs.PublishView({
                groups: r.sharedGroups,
                defaultDate: d.getDateString(d.localDateTime()),
                showPublish: true,
                showExpire: true,
                isEdit: true,
                contentId: 386
            });
            window.setTimeout(function() {
                p3.rV(r.groupView, r.Containers.groupContainer, true);
                window.setTimeout(function() {
                    $("#show-more-groups").remove();
                    r.$("h3").remove();
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                }, 100)
            }, 100)
        },
        saveTopic: function(s) {
            var u = this,
                r = $("#save-button"),
                t;
            r.button("loading");
            u.groupView.getSelectedGroupArray();
            _.each(u.groupView.selectedArray, function(v) {
                t = _.filter(u.groups, function(w) {
                    return v.ContextValue === w.ContextValue
                })[0];
                if (v.Selected) {
                    t.PublishDate = v.PublishDate;
                    t.ExpireDate = v.ExpireDate
                } else {
                    t.PublishDate = null;
                    t.ExpireDate = null
                }
            });
            u.topic.set("groups", u.groups);
            u.topic.save({}, {
                error: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    p3.displayError("Error saving topic")
                },
                success: function() {
                    if (u.options.callback !== undefined) {
                        u.options.callback(u.groups)
                    } else {
                        q.Us.refreshTopics(true, 0, u.options.topicView.options.leadSectionId, u.options.topicView)
                    }
                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                }
            })
        },
        createModel: function() {
            var t = this,
                r = null,
                s = null;
            t.topic = new q.Ms.TopicSave({
                TopicId: t.options.topicId
            });
            t.sharedGroups = new Bbc();
            t.groups = [];
            if (t.options.groups.length > 0) {
                t.options.groups.each(function(u, v) {
                    if (v === 0) {
                        t.topic.set("ShortDescription", u.get("Name"));
                        t.topic.set("LongDescription", u.get("Description"));
                        t.topic.set("OldThumbFilename", u.get("ThumbFilename"));
                        t.topic.set("LayoutId", u.get("LayoutId"));
                        t.topic.set("AllowCopy", u.get("AllowCopy"))
                    }
                    if (u.get("PublishDate")) {
                        s = u.get("PublishDate").split(" ", 1)[0]
                    }
                    if (u.get("ExpireDate")) {
                        r = u.get("ExpireDate").split(" ", 1)[0]
                    }
                    if ((!u.get("Primary")) && (u.get("ViewerIsOwnerInd") || (u.get("SectionId") === t.options.leadSectionId))) {
                        u.set("LeadSectionId", u.get("SectionId"));
                        u.set("IsSelected", u.get("PublishDate") !== null);
                        u.set("PublishDate", s);
                        u.set("ExpireDate", r);
                        t.sharedGroups.add(u)
                    }
                    t.groups.push({
                        ContextLabelId: u.get("ContextLabelId"),
                        ContextValue: u.get("SectionId"),
                        ExpireDate: u.get("ExpireDate"),
                        PrimaryInd: u.get("Primary"),
                        ViewerIsOwnerInd: u.get("ViewerIsOwnerInd"),
                        ShareWarningInd: u.get("ShareWarningInd"),
                        PublishDate: u.get("PublishDate"),
                        PDate: s,
                        EDate: r,
                        Selected: true,
                        Sort: 1,
                        Type: 1,
                        AllowEdit: u.get("AllowEdit")
                    })
                })
            }
        }
    });
    q.Us.buildRows = function(s) {
        var t = [],
            r = [];
        t.push({
            rowId: 0,
            columns: r
        });
        switch (s) {
            case 0:
                r.push({
                    rowId: 0,
                    colId: 0,
                    className: "span9 col-md-9"
                });
                r.push({
                    rowId: 0,
                    colId: 1,
                    className: "span3 col-md-3"
                });
                break;
            case 1:
                r.push({
                    rowId: 0,
                    colId: 0,
                    className: "span3 col-md-3"
                });
                r.push({
                    rowId: 0,
                    colId: 1,
                    className: "span9 col-md-9"
                });
                break;
            case 2:
                r.push({
                    rowId: 0,
                    colId: 0,
                    className: "span12 col-md-12"
                });
                r = [];
                t.push({
                    rowId: 1,
                    columns: r
                });
                r.push({
                    rowId: 1,
                    colId: 0,
                    className: "span9 col-md-9"
                });
                r.push({
                    rowId: 1,
                    colId: 1,
                    className: "span3 col-md-3"
                });
                break;
            case 3:
                r.push({
                    rowId: 0,
                    colId: 0,
                    className: "span12 col-md-12"
                });
                r = [];
                t.push({
                    rowId: 1,
                    columns: r
                });
                r.push({
                    rowId: 1,
                    colId: 0,
                    className: "span3 col-md-3"
                });
                r.push({
                    rowId: 1,
                    colId: 1,
                    className: "span9 col-md-9"
                });
                break;
            case 4:
                r.push({
                    rowId: 0,
                    colId: 0,
                    className: "span6 col-md-6"
                });
                r.push({
                    rowId: 0,
                    colId: 1,
                    className: "span6 col-md-6"
                });
                break;
            case 5:
                r.push({
                    rowId: 0,
                    colId: 0,
                    className: "span4 col-md-4"
                });
                r.push({
                    rowId: 0,
                    colId: 1,
                    className: "span4 col-md-4"
                });
                r.push({
                    rowId: 0,
                    colId: 2,
                    className: "span4 col-md-4"
                });
                break
        }
        return t
    };
    q.Us.getSectionLabel = function(r) {
        var s;
        switch (r) {
            case 1:
                s = "Class Section";
                break;
            case 3:
                s = "Community";
                break;
            case 7:
                s = "Dorm";
                break;
            case 8:
                s = "Activity";
                break;
            case 9:
                s = "Advisory";
                break
        }
        return s
    };
    q.Us.getPluralLabel = function(r) {
        var s;
        switch (r) {
            case 1:
                s = "Class Sections";
                break;
            case 3:
                s = "Communities";
                break;
            case 7:
                s = "Dorms";
                break;
            case 8:
                s = "Activities";
                break;
            case 9:
                s = "Advisories";
                break
        }
        return s
    };
    q.Us.getOwnerLabel = function(r) {
        var s, t = (p3.Config.IsSmallCollege) ? "Faculty" : "Teacher";
        switch (r) {
            case 1:
                s = t;
                break;
            case 3:
                s = "Owner";
                break;
            case 7:
                s = "Dorm Leader";
                break;
            case 8:
                s = "Activity Leader";
                break;
            case 9:
                s = "Advisor";
                break
        }
        return s
    };
    q.Us.refreshTopics = function(s, x, w, A) {
        var u = false,
            r = false,
            v = false,
            t = false,
            y = false,
            z;
        r = $("#chkActiveTopics").is(":checked");
        v = $("#chkFutureTopics").is(":checked");
        t = $("#chkExpiredTopics").is(":checked");
        y = $("#chkSharedTopics").is(":checked");
        if (s == false || r || v || t || y) {
            u = true
        }
        z = new q.Cs.Topic({}, {
            sectionId: x,
            leadSectionId: w,
            active: r,
            future: v,
            expired: t,
            shared: y
        });
        A.options.active = r;
        A.options.future = v;
        A.options.expired = t;
        A.options.shared = y;
        if (u) {
            z.fetch({
                success: function() {
                    A.collection = z;
                    A.renderTemplate()
                }
            })
        } else {
            z.remove(z.at(0));
            A.collection = z;
            A.renderTemplate()
        }
    };
    q.Us.loadHTMLEditor = function() {
        $(".modal-body textarea").attr("style", "height: 280px;width: 100%;");
        var r = $("#myeditor");
        if (r.length > 0) {
            p3.showHtmlEditor("myeditor", p3.Us.Enum.HtmlEditorCategories.FULLFONT, false, undefined, p3.Us.Enum.HtmlEditorEncoding.NUMERIC);
            window.setTimeout(function() {
                var s = tinyMCE.get("myeditor");
                if (s) {
                    $("#myeditor_tbl").width("100%");
                    s.focus()
                }
            }, 100)
        }
    };
    q.Us.showEditModal = function(t, s, u) {
        var r = new o.Ms.DateTime();
        r.fetch({
            success: function() {
                var v = t.get("Id") > 0;
                p3.rV(new q.Vs.TopicEditView({
                    topic: t,
                    groups: s,
                    defaultDate: r.attributes[0].local_date.split(" ", 1)[0],
                    topicView: u,
                    detailPage: v
                }), p3.Layout.Containers.Modal, true);
                p3.showModal(p3.Layout.Containers.Modal)
            },
            error: function() {
                p3.displayError("Error loading current date")
            }
        })
    };
    q.Us.loadTopicManage = function(s, r) {
        p3.router().navigate("#academicclass/" + s + "/0/topics", false)
    };
    q.Us.getElapsedTimeString = function(r, B) {
        var v = 60 * 1000,
            u = v * 60,
            t = u * 24,
            w = t * 30,
            x = t * 365,
            y, z = "",
            A, s = r.getTime() - B.getTime();
        if (s < v) {
            y = Math.round(s / 1000);
            if (y <= 0) {
                y = 1
            }
            z = " second"
        } else {
            if (s < u) {
                y = Math.round(s / v);
                z = " minute"
            } else {
                if (s < t) {
                    y = Math.round(s / u);
                    z = " hour"
                } else {
                    if (s < w) {
                        y = Math.round(s / t);
                        z = " day"
                    } else {
                        if (s < x) {
                            y = Math.round(s / w);
                            z = " month"
                        } else {
                            y = Math.round(s / x);
                            z = " year"
                        }
                    }
                }
            }
        }
        if (y === 1) {
            A = y + z + " ago"
        } else {
            A = y + z + "s ago"
        }
        return A
    };
    q.Us.BeginNoteRegion = function(u, t, x, w, s) {
        var y = "1",
            z = "11",
            v, r = $("#column" + w + "_" + s);
        if (r.hasClass("span3") || r.hasClass("col-md-3")) {
            y = "2";
            z = "10"
        }
        v = '<div id="message_container_' + u.MessageId + '"><div class="container-fluid row-fluid"><div class="row" style="width:100%;"><div class="span12 col-md-12"><div class="container-fluid row-fluid"><div class="row" style="width:100%;"><div class="span' + y + " col-md-" + y + ' ">';
        if (u.UserPhoto) {
            v += '<img class="imgNice" src="/ftpimages/' + x + "/user/" + u.UserPhoto + '" style="max-height:40px;">'
        } else {
            v += "&nbsp;"
        }
        v += '</div><div class="span' + z + " col-md-" + z + '"><div class="arrow_box';
        if (t) {
            v += " added-note"
        }
        v += '">';
        return v
    };
    q.Us.EndNoteRegion = function(s, r) {
        var t = '</div><textarea style="width:95%;" class="note-comment-box" pmsg="' + s + '" placeholder="write a comment" rows="1"></textarea>';
        t += "</div></div></div></div></div></div></div>";
        if (r) {
            t += "<hr>"
        }
        t += "</div>";
        return t
    };
    q.Us.OutputMessage = function(w, u, z, x, r, t, A, v, s) {
        var y = "";
        if (t) {
            y += '<div id="message_container_' + w.MessageId + '" ';
            if (u) {
                y += ' class="added-comment"'
            }
            y += ">"
        }
        if (t && w.UserPhoto) {
            y += '<img class="imgNice" style="float: left;max-height:25px;" src="/ftpimages/' + z + "/user/" + w.UserPhoto + '">'
        }
        y += '<h6 class="pull-right">';
        y += q.Us.getElapsedTimeString(s, d.getDate(w.InsertDate));
        y += "</h6>";
        if (!t) {
            y += "<h4>"
        } else {
            y += "<h5>"
        }
        y += '<a href="#profile/' + w.UserId + '/contactcard">';
        y += w.FirstName + " " + w.LastName;
        y += "</a>";
        if (!t) {
            y += "</h4>"
        } else {
            y += "</h5>"
        }
        if (w.UserId == A || v) {
            y += '<a href="#" class="btn btn-default btn-mini pull-right message-delete" mid=' + w.MessageId + ' style="margin-left:3px;"><i class="p3icon-delete"></i></a>'
        }
        if (w.UserId == A) {
            y += '<a href="#" class="btn btn-default btn-mini pull-right message-edit" mid=' + w.MessageId + ' style="margin-left:3px;"><i class="p3icon-edit"></i></a>'
        }
        y += '<span id="msgDisplay_' + w.MessageId + '">';
        y += "<p>" + w.Message + "</p>";
        y += "</span>";
        y += '<div id="msgEdit_' + w.MessageId + '" style="display:none;"><textarea style="width:100%;" class=" message-edit-box" mid="' + w.MessageId + '" rows="1">' + w.Message + "</textarea></div>";
        if (r) {
            y += "<br /><br />"
        }
        if (!t) {
            y += '<div id="child_container_' + w.MessageId + '">'
        }
        if (t) {
            y += "<hr>";
            y += "</div>"
        }
        return y
    };
    q.Us.buildDiscussionOutput = function(u, z, s) {
        var t = d.localDateTime(),
            y = "",
            v, x = 0,
            r = false,
            A, w, B;
        if (u.length) {
            A = p3.Data.SchoolContext.get("SchoolInfo").SchoolId;
            w = p3.Data.Context.getSelectedPersona().Id == 3 || p3.Data.Context.getSelectedPersona().Id == 5 || p3.Data.Context.getSelectedPersona().Id == 20;
            B = p3.Data.Context.get("UserInfo").UserId;
            for (v = 0; v < u.length; v++) {
                if (u[v].ChildRank == 0) {
                    if (x > 0) {
                        y += q.Us.EndNoteRegion(x, true)
                    }
                    if (v >= 9 && !r) {
                        r = true;
                        y += '<div style="display:none;" id="more-region-' + z + "-" + s + '">'
                    }
                    x = u[v].MessageId;
                    y += q.Us.BeginNoteRegion(u[v], false, A, z, s)
                }
                y += q.Us.OutputMessage(u[v], false, A, x, u[v].ChildRank == 0, u[v].ChildRank, B, w, t)
            }
            y += q.Us.EndNoteRegion(x, false);
            if (r) {
                y += "</div>";
                y += '<button class="btnn btn-default btn-show-more show-data pull-right" style="margin-top:10px;" data-row="' + z + '" data-column="' + s + '">Show All</button><div class="clear">'
            }
            return y
        }
    };
    q.Us.collpaseDownloads = function(w) {
        var v = new q.Cs.TopicContent({}, {
                topicId: w.topicId,
                topicIndexId: w.topicIndexId
            }),
            u = -1,
            s = -1,
            r = -1,
            t;
        v.remove(v.at(0));
        w.each(function(y) {
            if (y.get("ContentId") == 3) {
                if (y.get("CellIndex") == r && y.get("ColumnIndex") == s && y.get("RowIndex") == u) {
                    var x = t.get("AdditionalItems");
                    x.push(y.toJSON());
                    t.set("AdditionalItems", x)
                } else {
                    y.set("AdditionalItems", []);
                    v.add(y);
                    r = y.get("CellIndex");
                    u = y.get("RowIndex");
                    s = y.get("ColumnIndex");
                    t = y
                }
            } else {
                v.add(y)
            }
        });
        return v
    };
    q.Us.getContentItem = function(r, s) {
        var t;
        r.each(function(u) {
            if (u.get("ContentItemId") === s) {
                t = u
            }
        });
        return t
    };
    q.Us.getBackToTopicsLink = function(s) {
        var r = "";
        if (s.previewInd === "1" || s.previewInd === 1) {
            r = "#topicdetailedit/" + s.topicId + "/" + s.leadSectionId + "/" + s.sectionId + "/" + s.topicIndexId + "/" + (s.studentId || 0)
        } else {
            switch (s.contextLabelId) {
                case 2:
                    r = "#academicclass/" + s.sectionId + "/" + (s.studentId || 0) + "/topics";
                    break;
                case 12:
                    r = "#communitypage/" + s.sectionId + "/topics";
                    break;
                case 22:
                    r = "#advisorypage/" + s.sectionId + "/topics";
                    break;
                case 23:
                    r = "#dormpage/" + s.sectionId + "/topics";
                    break;
                case 24:
                    r = "#activitypage/" + s.sectionId + "/topics";
                    break;
                default:
                    r = ""
            }
        }
        return r
    };
    q.Us.getAssociationFromContext = function(s) {
        var r = 1;
        switch (s) {
            case 12:
                r = 3;
                break;
            case 24:
                r = 8;
                break;
            case 22:
                r = 9;
                break;
            case 23:
                r = 7;
                break
        }
        return r
    };
    q.Vs.ShareWarning = n.Vs.Modal2.extend({
        template: "topic/topic.sharewarning.template.html",
        messageTemplate: "topic/topic.sharewarning.message.template.html",
        selector: "id",
        modalRendered: function() {
            var r = this;
            r.renderTemplate()
        },
        renderTemplate: function() {
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        modalUpdate: function(s) {
            var t = this,
                r = $(s.eventCurrentTarget[0]);
            if (r.hasClass("dismiss-warning")) {
                if (r.hasClass("active")) {
                    r.removeClass("active");
                    t.$("#btnShareWarningSave").hide();
                    t.$("#btnShareWarningCancel").show()
                } else {
                    r.addClass("active");
                    t.$("#btnShareWarningCancel").hide();
                    t.$("#btnShareWarningSave").show()
                }
            }
            return true
        }
    });
    q.Us.checkShareWarning = function(s, t) {
        var r;
        if ((s.shareCount > 0) && !(q.Data.shareWarningDismissed)) {
            r = new q.Vs.ShareWarning({
                model: new q.Ms.TopicWarningSave({
                    TopicIndexId: t
                }),
                variables: {
                    shareInfo: s
                }
            });
            p3.showModal(p3.Layout.Containers.Modal, {
                backOnHide: false
            });
            p3.rV(r, p3.Layout.Containers.Modal, true)
        }
        q.Data.shareWarningDismissed = true
    };
    q.Us.getCurrentYearFaculty = function() {
        var r = q.Us.getAssociationFromContext(q.Data.contextLabelId);
        if (!q.Data.FacultyList || q.Data.FacultyList.associationId !== r) {
            q.Data.FacultyList = new q.Cs.CurrentYearFaculty();
            q.Data.FacultyList.associationId = r;
            q.Data.FacultyList.fetch({
                async: false,
                data: {
                    associationId: r
                },
                error: function() {
                    p3.displayError("Error loading faculty list")
                }
            })
        }
    };
    Hb.registerHelper("discussionOutput", function(s, t, r) {
        return new Hb.SafeString(q.Us.buildDiscussionOutput(s, t, r))
    });
    p3.router().route("topicdetail/:id/:leadSectionId/:sectionId/:topicIndexId/:studentId/:previewInd", "topicdetail", function(r, s, u, w, v, t) {
        p3.renderMainPage(new q.Vs.TopicDetailLayoutView({
            topicId: r,
            sections: null,
            leadSectionId: s,
            sectionId: u,
            topicIndexId: w,
            editMode: false,
            studentId: v,
            previewInd: t
        }))
    });
    p3.router().route("topicdetailedit/:id/:leadSectionId/:sectionId/:topicIndexId/:studentId", "topicdetailedit", function(s, t, u, w, v, r) {
        p3.renderMainPage(new q.Vs.EditDetail({
            topicId: s,
            sections: null,
            leadSectionId: t,
            sectionId: u,
            topicIndexId: w,
            studentId: v,
            editMode: "content"
        }))
    })
}(p3.module("LMS/topic")));
(function(c) {
    var b = p3.module("shared/datepicker"),
        a = p3.Us.Culture;
    c.Cs.ParentStudentAcademicGroup = Bbc.extend({
        url: "datadirect/ParentStudentUserAcademicGroupsGet"
    });
    c.Ms.UserTask = Bbm.extend({
        idAttribute: "UserTaskId",
        urlRoot: "usertask/edit",
        validation: {
            ShortDescription: [{
                required: true,
                msg: p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered
            }, {
                maxLength: 500,
                msg: p3.Us.InfoMessageLibrary.P3.MaxLengthExceeded
            }],
            AssignedDate: [{
                date: true
            }, {
                required: true,
                msg: p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered
            }, {
                fn: function(f, e, d) {
                    if (a.getDate(f) > a.getDate(d.DueDate)) {
                        return "Assigned date must come before due date."
                    }
                }
            }],
            DueDate: [{
                date: true
            }, {
                required: true,
                msg: p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered
            }, {
                fn: function(f, e, d) {
                    if (a.getDate(f) < a.getDate(d.AssignedDate)) {
                        return "Due date must come after assigned date."
                    }
                }
            }]
        }
    });
    c.Vs.UsertTaskModal = Bb.View.extend({
        template: "assignmentcenter/usertask.modal.template.html",
        className: "modal-dialog",
        attributes: {
            role: "document"
        },
        events: {
            'click [data-action="save"]': "saveTask",
            "change .form-control": "changeInput",
            'click [data-action="delete"]': "deleteTask",
            'keyup [name="ShortDescription"]': "characterCount"
        },
        initialize: function(e) {
            var d = a.getDateString(a.localDateTime());
            if (e.model.isNew()) {
                if (!e.model.has("DueDates")) {
                    e.model.set({
                        DueDate: d
                    })
                }
                if (!e.model.has("AssignedDate")) {
                    e.model.set({
                        AssignedDate: d
                    })
                }
                this.fetchGroups(e.model)
            } else {
                e.model.once("sync", this.fetchGroups, this).fetch()
            }
            e.model.on("validated:invalid", this.saveValidated, this);
            Bb.Validation.bind(this)
        },
        render: function(d) {
            this.$el.appendTo(d);
            p3.showModal(p3.Layout.Containers.Modal)
        },
        fetchGroups: function(d) {
            new c.Cs.ParentStudentAcademicGroup().once("reset", this.renderTemplate, this).fetch({
                data: {
                    userId: d.get("UserId"),
                    persona: p3.Data.Context.getSelectedPersona().Id,
                    memberLevel: -1,
                    durationList: ""
                }
            })
        },
        renderTemplate: function(d) {
            var e = this;
            p3.fT(e.template, function(f) {
                e.$el.html(f({
                    groups: d.toJSON(),
                    model: e.model.toJSON(),
                    edit: !e.model.isNew()
                }));
                b.Us.initialize('[name="AssignedDate"]');
                b.Us.initialize('[name="DueDate"]');
                if (!e.model.isNew()) {
                    e.$('[name="ShortDescription"]').keyup()
                }
            })
        },
        changeInput: function(d) {
            var e = $(d.currentTarget),
                f = e.prop("name"),
                g = e.val();
            this.model.set(f, (f === "SectionId") ? parseInt(g, 10) : g).isValid(f)
        },
        saveTask: function(e) {
            var f = this,
                d = $(e.currentTarget);
            if (f.model.isValid(true)) {
                d.button("loading");
                this.model.save({}, {
                    success: function(g) {
                        g.trigger("save");
                        p3.showModal(p3.Layout.Containers.Modal, "hide")
                    },
                    error: function() {
                        p3.displayError("Error saving data.");
                        d.button("reset")
                    }
                })
            }
        },
        deleteTask: function(d) {
            this.model.destroy({
                success: function(e) {
                    e.trigger("save");
                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                }
            })
        },
        saveValidated: function(e, d) {
            var f = "";
            _.each(d, function(g) {
                if (!f.includes(g)) {
                    f = f + g + "<br>"
                }
            });
            p3.Us.InfoMessage.ErrorBox(f, this.$("#user-task-errors").empty(), false)
        },
        characterCount: function(d) {
            this.$("#titleCountField").html($(d.currentTarget).val().length)
        },
        dispose: function() {
            Bb.Validation.unbind(this)
        }
    });
    c.Us.UserTaskModal = function(d) {
        p3.rV(new c.Vs.UsertTaskModal({
            model: d
        }), p3.Layout.Containers.Modal, true)
    }
}(p3.module("LMS/userTask")));
(function(b) {
    var a = p3.module("app"),
        d = p3.Us.Tools,
        c = p3.Us.Flyout;
    b.Data = {};
    b.Ms.Rubric = Bbm.extend({
        urlRoot: "Rubric/AssignmentRubric/",
        idAttribute: "Id"
    });
    b.Ms.AddToBank = Bbm.extend({
        urlRoot: "Rubric/AddToRubricBank/"
    });
    b.Ms.CopyFromBank = Bbm.extend({
        urlRoot: "Rubric/CopyFromRubricBank/"
    });
    b.Cs.SchoolLevels = Bbc.extend({
        url: "SchoolInfo/SchoolLevel"
    });
    b.Cs.GradeLevels = Bbc.extend({
        url: "SchoolInfo/GradeLevel"
    });
    b.Cs.Departments = Bbc.extend({
        url: "Rubric/DepartmentLevelList"
    });
    b.Cs.Rubric = Bbc.extend({
        url: "Rubric/List",
        model: b.Ms.Rubric
    });
    b.Ms.Lock = Bbm.extend({
        urlRoot: "Rubric/CreateLockedCopy/"
    });
    b.Ms.RubricResultSave = Bbm.extend({
        urlRoot: "Rubric/RubricResultsSave/",
        idAttribute: "SkillId"
    });
    b.Ms.RubricResultsPost = Bbm.extend({
        urlRoot: "Rubric/PostRubricResults/"
    });
    b.Cs.RubricResults = Bbc.extend({
        url: "Rubric/RubricResultsGet",
        model: b.Ms.RubricResultSave
    });
    b.Ms.RubricDeleteValidate = Bbm.extend({
        urlRoot: "Rubric/RubricDeleteValidate/"
    });
    b.Vs.EditRubric = Bb.View.extend({
        template: "rubric/rubric.edit.template.html",
        modalTemplate: "Shared/modal.template.html",
        events: {
            "click #rubric-save-button": "saveRubric",
            "change #rubric-type": "typeChange",
            "click #add-skill-link": "addSkill",
            "click .remove-grade": "removeGrade",
            "click .remove-department": "removeDepartment",
            "click #grade-levels-link": "editGrades",
            "click #departments-link": "editDepartments",
            "click #rubric-cancel-button": "cancelClick",
            "change input": "inputChange",
            "change textarea": "inputChange",
            "click .add-rubric-level": "inputChange"
        },
        initialize: function() {
            $("#site-modal").addClass("bb-modal-fullpage").css("position", "fixed");
            this.Containers = {};
            this.Changed = false;
            b.Data.EditView = this;
            if (!b.Data.SchooLevels) {
                b.Data.SchooLevels = new b.Cs.SchoolLevels();
                b.Data.SchooLevels.fetch({
                    error: function(e, f) {
                        p3.displayError("Error getting school levels")
                    }
                });
                b.Data.GradeLevels = new b.Cs.GradeLevels();
                b.Data.GradeLevels.fetch({
                    error: function(e, f) {
                        p3.displayError("Error getting grade levels")
                    }
                });
                b.Data.Departments = new b.Cs.Departments();
                b.Data.Departments.fetch({
                    error: function(e, f) {
                        p3.displayError("Error getting departments")
                    }
                })
            }
        },
        dispose: function() {
            $("#site-modal").removeClass("bb-modal-fullpage").css("position", "");
            $(window).off("resize");
            $(".modal-backdrop").remove()
        },
        render: function(e) {
            var j = this,
                h = "my rubrics",
                g, i, f = 0;
            if (j.options.bank) {
                h = "rubric bank"
            }
            if (j.options.Id === 0) {
                j.model = j.buildAddModel()
            } else {
                j.model = new b.Ms.Rubric({
                    Id: j.options.Id,
                    BankInd: this.options.bank
                });
                j.model.fetch({
                    async: false,
                    success: function() {
                        j.model.set("BankInd", j.options.bank);
                        j.model.set("AdminInd", j.options.admin);
                        i = j.model.get("Skills");
                        if (j.options.duplicate) {
                            j.model.set("Name", "Copy of " + j.model.get("Name"));
                            j.options.Id = 0;
                            _.each(i, function(k) {
                                k.Id = 0;
                                _.each(k.Levels, function(l) {
                                    l.Id = 0
                                })
                            })
                        } else {
                            j.model.set("Id", j.options.Id)
                        }
                        f = b.Us.getMaxPointTotal(i, (j.model.get("EvaluationType")))
                    },
                    error: function() {
                        p3.displayError("Error loading rubric")
                    }
                })
            }
            p3.fT(j.template, function(k) {
                j.$el.html(k({
                    Type: j.buildTypeList(),
                    saveLabel: h,
                    model: j.model.toJSON(),
                    duplicate: j.options.duplicate,
                    maxPoints: f
                }))
            });
            j.$el.appendTo(e);
            _.delay(function() {
                j.Containers.Skills = j.$("#skill-container");
                j.renderSkills();
                j.initSortable();
                j.setModalBodyHeight()
            }, 600);
            g = _.debounce(function() {
                j.setLevelContainerWidth();
                j.setModalBodyHeight()
            }, 100);
            $(window).resize(g)
        },
        renderSkills: function() {
            var g = this,
                e = g.model.get("Skills"),
                f;
            g.skillViews = [];
            if (e !== undefined && e.length > 0) {
                _.each(e, function(h) {
                    f = new b.Vs.EditSkill({
                        model: g.model,
                        skill: h,
                        EditMode: (g.options.Id === 0 && !g.options.duplicate),
                        parentView: g,
                        Completed: g.options.Id > 0 || g.options.duplicate
                    });
                    p3.rV(f, g.Containers.Skills, false);
                    g.skillViews.push(f);
                    f.on("skillModeChange", function() {
                        g.skillModeChange()
                    })
                })
            }
        },
        typeChange: function() {
            var k = this,
                i = false,
                j, f, e, h, g = k.model.get("EvaluationType");
            k.Changed = true;
            _.each(k.skillViews, function(l) {
                if (l.Completed) {
                    i = true
                }
            });
            if (i) {
                j = '<div class="modal" tabindex="-1" id="confirm-modal" data-keyboard="false" data-backdrop="static"></div>';
                $(j).modal();
                h = $(".modal-backdrop");
                f = function() {
                    $("#confirm-modal").remove();
                    h.css("z-index", "1100");
                    k.model.set("EvaluationType", parseInt($("#rubric-type").val(), 10));
                    _.each(k.skillViews, function(l) {
                        if (!l.options.EditMode) {
                            l.options.EditMode = true;
                            l.options.EvalChange = true;
                            l.render()
                        } else {
                            if (l.Completed) {
                                l.$(".skill-cancel-button").remove()
                            }
                        }
                    });
                    k.toggleControls()
                };
                e = function() {
                    $("#confirm-modal").remove();
                    h.css("z-index", "1100");
                    $("#rubric-type").val(g)
                };
                p3.rV(new a.Vs.Confirm({
                    ConfirmationTitle: "Are you sure you want to change how this rubric is evaluated?",
                    ConfirmationText: "If so, the evaluation fields (e.g., points, letter grades, etc.) on each of this rubric's skills will be reset, and you'll need to enter new evaluation information for each skill.",
                    ConfirmCallback: f,
                    CancelCallback: e,
                    KeepOpen: true
                }), "#confirm-modal", true);
                h.css("z-index", "1101")
            } else {
                k.model.set("EvaluationType", parseInt($("#rubric-type").val(), 10));
                k.toggleControls()
            }
            $("#point-summary-value").html("0")
        },
        toggleControls: function() {
            var f = this,
                e = $("#point-summary-region");
            $(".level-type-region").hide();
            e.show();
            switch (f.model.get("EvaluationType")) {
                case p3.Us.Enum.RubricEvaluationTypes.Points.Value:
                    $(".level-points-region").show();
                    break;
                case p3.Us.Enum.RubricEvaluationTypes.Range.Value:
                    $(".level-range-region").show();
                    break;
                case p3.Us.Enum.RubricEvaluationTypes.Letter.Value:
                    $(".level-letter-region").show();
                    break;
                case p3.Us.Enum.RubricEvaluationTypes.Percent.Value:
                    $(".level-percentage-region").show();
                    break;
                case p3.Us.Enum.RubricEvaluationTypes.Comment.Value:
                    e.hide();
                    break
            }
        },
        saveRubric: function(f) {
            var n = this,
                m = false,
                i = $("#rubric-name"),
                h = i.val(),
                g = "",
                l = [],
                k = $("#rubric-save-button"),
                j = n.$(".rubric-message");
            k.button("loading");
            j.hide();
            if (h !== undefined) {
                h = h.toString().trim();
                m = (h.length > 0)
            }
            if (m) {
                i.removeClass("box-validate")
            } else {
                i.addClass("box-validate");
                g = "Please enter all required information.<br />"
            }
            _.each(n.skillViews, function(e) {
                if (e.options.EditMode) {
                    m = false;
                    if (g.indexOf("editing") === -1) {
                        g += "Please complete editing all skills before saving."
                    }
                } else {
                    $.each($(".skill-item"), function(o, p) {
                        if (e.$el[0] === p) {
                            e.options.skill.SortOrder = o + 1
                        }
                    });
                    if (!e.options.skill.defaultSkill || e.Completed) {
                        l.push(e.collectData())
                    }
                }
            });
            if (m) {
                n.model.set("Name", h);
                n.model.set("Description", $("#rubric-description").val());
                n.model.set("EvaluationType", $("#rubric-type").val());
                n.model.set("Skills", l);
                n.model.save({}, {
                    success: function(e, o) {
                        n.trigger("rubricSave");
                        p3.showModal(p3.Layout.Containers.Modal, "hide")
                    },
                    error: function(o, e) {
                        p3.displayError("Error adding assignment rubric");
                        k.button("reset")
                    }
                })
            } else {
                j.html(g).show();
                k.button("reset")
            }
        },
        buildTypeList: function() {
            var e = [];
            e.push({
                Id: p3.Us.Enum.RubricEvaluationTypes.Points.Value,
                Name: p3.Us.Enum.RubricEvaluationTypes.Points.Name
            });
            e.push({
                Id: p3.Us.Enum.RubricEvaluationTypes.Range.Value,
                Name: p3.Us.Enum.RubricEvaluationTypes.Range.Name
            });
            e.push({
                Id: p3.Us.Enum.RubricEvaluationTypes.Comment.Value,
                Name: p3.Us.Enum.RubricEvaluationTypes.Comment.Name
            });
            return e
        },
        buildAddModel: function() {
            var e = [],
                g = [],
                f = new b.Ms.Rubric({
                    EvaluationType: 0,
                    Skills: g,
                    BankInd: this.options.bank,
                    AdminInd: this.options.admin
                });
            e.push({});
            e.push({});
            e.push({});
            e.push({});
            g.push({
                Levels: e,
                defaultSkill: true
            });
            return f
        },
        addSkill: function(f) {
            var m = this,
                k = {},
                i = [],
                g, l, h, j = m.$(".modal-body");
            f.preventDefault();
            m.Changed = true;
            if (m.skillViews.length > 0) {
                g = m.skillViews[m.skillViews.length - 1].levelViews;
                _.each(g, function(e) {
                    h = e.options.level;
                    i.push({
                        Name: h.Name,
                        Points: h.Points,
                        Grade: h.Grade,
                        PointsTo: h.PointsTo,
                        Percentage: h.Percentage
                    })
                })
            } else {
                i.push({});
                i.push({});
                i.push({});
                i.push({})
            }
            k.Levels = i;
            l = new b.Vs.EditSkill({
                model: m.model,
                skill: k,
                EditMode: true,
                parentView: m,
                Completed: false
            });
            p3.rV(l, m.Containers.Skills, false);
            m.skillViews.push(l);
            l.on("skillModeChange", function() {
                m.skillModeChange()
            });
            $("#add-skill-region").hide();
            m.skillModeChange();
            _.delay(function() {
                j.scrollTop(j[0].scrollHeight)
            }, 400)
        },
        setLevelContainerWidth: function() {
            $(".level-container.edit").width($(".edit-skill-section").width() - 160)
        },
        removeGrade: function(g) {
            var j = this,
                h = j.model.get("Grades"),
                f = $(g.currentTarget),
                i = f.data("id");
            f.parent("DIV").remove();
            h.splice(h.indexOf(_.filter(h, function(e) {
                return e.grade_id === i
            }), 1));
            j.Changed = true
        },
        removeDepartment: function(h) {
            var j = this,
                g = j.model.get("Departments"),
                f = $(h.currentTarget),
                i = f.data("id");
            f.parent("DIV").remove();
            g.splice(g.indexOf(_.filter(g, function(e) {
                return e.department_id === i
            }), 1));
            j.Changed = true
        },
        editGrades: function(f) {
            var g = this;
            f.preventDefault();
            g.showSelector(true, g.model.get("Grades"))
        },
        editDepartments: function(f) {
            var g = this;
            f.preventDefault();
            g.showSelector(false, g.model.get("Departments"))
        },
        showSelector: function(k, f) {
            var l = this,
                j, h, i = new b.Vs.TypeSelector({
                    existingSelections: f,
                    typeIsGrades: k
                }),
                e, g = "";
            h = $(".modal-backdrop");
            j = '<div class="modal" tabindex="-1" id="selector-modal" data-keyboard="false" data-backdrop="static"></div>';
            $(j).modal();
            p3.rV(i, "#selector-modal", true);
            i.on("selectionsUpdated", function(m) {
                l.Changed = true;
                if (k) {
                    l.model.set("Grades", m);
                    e = $("#grade-container");
                    _.each(m, function(n) {
                        g += '<div class="selected-item-box"><span>' + n.grade_name + '</span><span class="remove-grade remove-item-text" data-id="' + n.grade_id + '"><i class="fa fa-close"></i></span></div><div class="clear"></div>'
                    })
                } else {
                    l.model.set("Departments", m);
                    e = $("#department-container");
                    _.each(m, function(n) {
                        g += '<div class="selected-item-box"><span>' + n.department_description + '</span><span class="remove-department remove-item-text" data-id="' + n.department_id + '"><i class="fa fa-close"></i></span></div><div class="clear"></div>'
                    })
                }
                e.html(g)
            });
            h.css("z-index", "1101")
        },
        initSortable: function() {
            var e = this;
            $("#skill-container").sortable({
                items: "> .skill-item",
                handle: ".bb-tile-grab-handle",
                placeholder: "pages-layout-placeholder",
                forcePlaceholderSize: true,
                tolerance: "pointer",
                delay: 300,
                stop: function(f, g) {
                    e.Changed = true
                }
            });
            this.skillModeChange()
        },
        skillModeChange: function() {
            var h = this,
                g = false,
                f = $("#skillContainer"),
                e = $(".bb-tile-grab-handle");
            _.each(h.skillViews, function(i) {
                if (i.options.EditMode) {
                    g = true
                }
            });
            if (g) {
                f.sortable("disable");
                e.hide()
            } else {
                f.sortable("enable");
                e.show()
            }
        },
        updateMaxPoints: function() {
            var f = this,
                e = 0;
            if (f.model.get("EvaluationType") !== p3.Us.Enum.RubricEvaluationTypes.Comment.Value) {
                _.each(f.skillViews, function(g) {
                    e += g.getMaxPoints()
                });
                if (!Number.isInteger(e)) {
                    e = parseFloat(e).toFixed(2)
                }
                $("#point-summary-value").html(e)
            }
            f.Changed = true
        },
        cancelClick: function(i) {
            var j = this,
                f, h, g;
            if (j.Changed) {
                h = function() {
                    f.remove();
                    $(".modal-backdrop").css("z-index", "1100").last().remove();
                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                };
                g = function() {
                    f.remove();
                    $(".modal-backdrop").css("z-index", "1100").last().remove()
                };
                p3.fT(j.modalTemplate, function(e) {
                    f = $(e({}));
                    f.modal();
                    $(".modal-backdrop").css("z-index", "1101");
                    p3.rV(new a.Vs.Confirm({
                        ConfirmationTitle: "Discard changes",
                        ConfirmationText: "<p>There are unsaved changes to this rubric. Are you sure you want to discard the changes?</p>",
                        ConfirmCallback: h,
                        CancelCallback: g,
                        KeepOpen: true
                    }), f, true)
                })
            } else {
                p3.showModal(p3.Layout.Containers.Modal, "hide")
            }
        },
        inputChange: function(f) {
            this.Changed = true
        },
        setModalBodyHeight: function() {
            $(".modal-body").css("height", $(".modal-dialog").height() - 132)
        }
    });
    b.Vs.EditSkill = Bb.View.extend({
        template: "rubric/rubric.viewskill.template.html",
        className: "skill-item",
        events: {
            "click .add-rubric-level": "addLevel",
            "click .skill-save-button": "saveSkill",
            "click .edit-skill-button": "editSkill",
            "click .skill-cancel-button": "cancelEdit",
            "click .bb-tile-chevron": "toggleDisplay",
            "click .skill-delete-button": "deleteSkill"
        },
        initialize: function() {
            this.Containers = {};
            this.Completed = this.options.Completed
        },
        render: function(e) {
            var g = this,
                f;
            if (g.options.EditMode) {
                f = "rubric/rubric.editskill.template.html"
            } else {
                f = "rubric/rubric.viewskill.template.html"
            }
            p3.fT(f, function(h) {
                g.$el.html(h({
                    skill: g.options.skill,
                    Completed: g.Completed,
                    displayView: g.options.displayView,
                    EvalChange: g.options.EvalChange,
                    print: g.options.print
                }));
                g.$el.appendTo(e);
                g.Containers.Levels = g.$(".level-container");
                g.renderLevels();
                if (g.options.EditMode) {
                    g.$(".rubric-level-view").addClass("rubric-level-container").removeClass("rubric-level-view");
                    g.$(".level-container.edit").width(g.$(".edit-skill-section").width() - 160)
                } else {
                    g.$(".rubric-level-container").addClass("rubric-level-view").removeClass("rubric-level-container")
                }
            })
        },
        renderLevels: function() {
            var h = this,
                e = h.options.skill.Levels,
                g, f = h.levelViews !== undefined;
            if (f) {
                _.each(h.levelViews, function(i) {
                    i.options.EditMode = h.options.EditMode;
                    i.render(h.Containers.Levels)
                })
            } else {
                h.levelViews = [];
                if (e !== undefined && e.length > 0) {
                    _.each(e, function(i) {
                        g = new b.Vs.EditLevel({
                            rubric: h.model,
                            skill: h.options.skill,
                            level: i,
                            EditMode: h.options.EditMode,
                            parentView: h
                        });
                        p3.rV(g, h.Containers.Levels, false);
                        h.levelViews.push(g)
                    })
                }
            }
            _.delay(function() {
                var j = 0,
                    i;
                $.each(h.$(".bb-card"), function(k, l) {
                    i = $(l);
                    if (i.height() > j) {
                        j = i.height()
                    }
                });
                h.resizeCards(j)
            }, 200)
        },
        resizeCards: function(e) {
            var f = this;
            $.each(f.$(".bb-card"), function(g, h) {
                $(h).height(e)
            })
        },
        addLevel: function(f) {
            var i = this,
                g = [],
                h = new b.Vs.EditLevel({
                    rubric: i.model,
                    skill: i.options.skill,
                    level: g,
                    EditMode: i.options.EditMode,
                    parentView: i
                });
            p3.rV(h, i.Containers.Levels, false);
            i.levelViews.push(h);
            i.Containers.Levels.scrollLeft(i.Containers.Levels[0].scrollWidth)
        },
        saveSkill: function(f) {
            var g = this;
            if (g.validateSkill()) {
                g.options.EvalChange = false;
                g.options.EditMode = false;
                g.render();
                $("#add-skill-region").show();
                g.trigger("skillModeChange");
                g.options.parentView.updateMaxPoints()
            }
        },
        validateSkill: function() {
            var k = this,
                j = false,
                h = k.$(".skill-name"),
                g = h.val(),
                e = k.$(".alert-danger"),
                i = "",
                f = "";
            e.hide();
            if (g !== undefined) {
                g = g.toString().trim();
                j = (g.length > 0)
            }
            if (j) {
                h.removeClass("box-validate")
            } else {
                h.addClass("box-validate")
            }
            _.each(k.levelViews, function(l) {
                if (!l.validateLevel()) {
                    j = false;
                    if (!l.rangeValid) {
                        i = "<br />Point range maximum must be greater than minimum"
                    }
                    if (!l.decimalsValid) {
                        f = "<br />A maximum of 2 decimal points is allowed."
                    }
                }
            });
            if (j) {
                k.options.skill.Name = g;
                k.Completed = true
            } else {
                e.html("Please enter all required information" + i + f).show()
            }
            return j
        },
        collectData: function() {
            var f = this,
                e = [];
            _.each(f.levelViews, function(g) {
                e.push(g.options.level)
            });
            f.options.skill.Levels = e;
            return f.options.skill
        },
        editSkill: function(f) {
            this.options.EditMode = true;
            this.render();
            $("#add-skill-region").hide();
            this.trigger("skillModeChange")
        },
        cancelEdit: function(f) {
            var g = this;
            if (!g.Completed && g.options.skill.defaultSkill) {
                g.render()
            } else {
                if (g.Completed || g.options.skill.Id > 0) {
                    g.options.EditMode = false;
                    g.render();
                    g.$(".rubric-level-container").addClass("rubric-level-view").removeClass("rubric-level-container");
                    g.trigger("skillModeChange")
                } else {
                    g.options.EditMode = false;
                    g.options.parentView.skillModeChange();
                    g.options.parentView.skillViews.splice(g.options.parentView.skillViews.indexOf(g), 1);
                    g.remove();
                    g.render()
                }
            }
            $("#add-skill-region").show()
        },
        toggleDisplay: function(f) {
            var h = this,
                g = $(f.currentTarget);
            if (g.hasClass("fa-chevron-up")) {
                h.$(".bb-tile-content").hide();
                g.addClass("fa-chevron-down").removeClass("fa-chevron-up")
            } else {
                h.$(".bb-tile-content").show();
                g.addClass("fa-chevron-up").removeClass("fa-chevron-down")
            }
        },
        deleteSkill: function(h) {
            var k = this,
                j, g, f, i;
            h.preventDefault();
            i = $(".modal-backdrop");
            j = '<div class="modal" tabindex="-1" id="confirm-modal" data-keyboard="false" data-backdrop="static"></div>';
            $(j).modal();
            g = function() {
                $("#confirm-modal").remove();
                i.css("z-index", "1100");
                k.options.parentView.skillViews.splice(k.options.parentView.skillViews.indexOf(k), 1);
                k.remove();
                k.render();
                $("#add-skill-region").show();
                k.options.parentView.skillModeChange();
                k.options.parentView.updateMaxPoints()
            };
            f = function() {
                $("#confirm-modal").remove();
                i.css("z-index", "1100")
            };
            p3.rV(new a.Vs.Confirm({
                ConfirmationTitle: "Delete skill",
                ConfirmationText: "Are you sure you want to delete this skill?",
                ConfirmCallback: g,
                CancelCallback: f,
                KeepOpen: true
            }), "#confirm-modal", true);
            i.css("z-index", "1101")
        },
        getMaxPoints: function() {
            var g = this,
                e = 0,
                f = 0;
            _.each(g.levelViews, function(h) {
                f = h.getPoints();
                if (f > e) {
                    e = f
                }
            });
            return e
        }
    });
    b.Vs.EditLevel = Bb.View.extend({
        template: "rubric/rubric.viewlevel.template.html",
        className: "rubric-level-container",
        render: function(e) {
            var g = this,
                f;
            if (g.options.EditMode) {
                f = "rubric/rubric.editlevel.template.html"
            } else {
                f = "rubric/rubric.viewlevel.template.html"
            }
            if (g.updatedLevel !== undefined) {
                g.options.level = g.updatedLevel;
                g.updatedLevel = undefined
            }
            g.EvalType = g.options.rubric.get("EvaluationType");
            p3.fT(f, function(h) {
                g.$el.html(h({
                    level: g.options.level,
                    type: g.EvalType
                }));
                g.$(".remove-level-button").bind("click", function(i) {
                    g.removeLevel(i)
                })
            });
            g.$el.appendTo(e)
        },
        validateLevel: function() {
            var p = this,
                n = false,
                g = p.$(".level-name-box"),
                f = g.val(),
                l, i, o, k, m = false,
                j = false,
                h = true,
                e = true;
            p.updatedLevel = {};
            p.updatedLevel.Description = p.$(".level-description-box").val();
            if (f !== undefined) {
                p.updatedLevel.Name = f.toString().trim();
                p.updatedLevel.Id = p.options.level.Id;
                n = p.updatedLevel.Name.length > 0
            }
            if (n) {
                g.removeClass("box-validate")
            } else {
                g.addClass("box-validate")
            }
            switch (parseInt($("#rubric-type").val(), 10)) {
                case p3.Us.Enum.RubricEvaluationTypes.Points.Value:
                    l = p.$(".level-points-box");
                    o = l.val();
                    if (o !== undefined) {
                        if (o.length > 0 && !isNaN(o)) {
                            if (p.isValidDecimal(o)) {
                                m = true
                            } else {
                                e = false
                            }
                        }
                    }
                    if (m) {
                        p.updatedLevel.Points = o;
                        l.removeClass("box-validate")
                    } else {
                        n = false;
                        l.addClass("box-validate")
                    }
                    break;
                case p3.Us.Enum.RubricEvaluationTypes.Range.Value:
                    l = p.$(".level-points-from-box");
                    i = p.$(".level-points-to-box");
                    o = l.val();
                    k = i.val();
                    if (o !== undefined) {
                        if (o.length > 0 && !isNaN(o)) {
                            if (p.isValidDecimal(o)) {
                                m = true;
                                o = parseFloat(o)
                            } else {
                                e = false
                            }
                        }
                    }
                    if (!m) {
                        n = false
                    }
                    if (k !== undefined) {
                        if (k.length > 0 && !isNaN(k)) {
                            if (p.isValidDecimal(k)) {
                                j = true;
                                k = parseFloat(k)
                            } else {
                                e = false
                            }
                        }
                    }
                    if (!j) {
                        n = false
                    }
                    if (m && j) {
                        h = k > o;
                        if (!h) {
                            n = false
                        }
                    }
                    if (m && h) {
                        l.removeClass("box-validate");
                        p.updatedLevel.Points = o
                    } else {
                        l.addClass("box-validate")
                    }
                    if (j && h) {
                        i.removeClass("box-validate");
                        p.updatedLevel.PointsTo = k
                    } else {
                        i.addClass("box-validate")
                    }
                    break;
                case p3.Us.Enum.RubricEvaluationTypes.Letter.Value:
                    l = p.$(".level-grade-box");
                    o = l.val();
                    if (o !== undefined) {
                        o = o.toString().trim();
                        m = o.length > 0
                    }
                    if (m) {
                        p.updatedLevel.Grade = o;
                        l.removeClass("box-validate")
                    } else {
                        n = false;
                        l.addClass("box-validate")
                    }
                    break;
                case p3.Us.Enum.RubricEvaluationTypes.Percent.Value:
                    l = p.$(".level-percentage-box");
                    o = l.val();
                    if (o !== undefined) {
                        if (o.length > 0 && !isNaN(o) && parseFloat(o) <= 100) {
                            m = true
                        }
                    }
                    if (m) {
                        p.updatedLevel.Percentage = o;
                        l.removeClass("box-validate")
                    } else {
                        n = false;
                        l.addClass("box-validate")
                    }
                    break
            }
            if (!n) {
                p.updatedLevel = undefined
            }
            p.rangeValid = h;
            p.decimalsValid = e;
            return n
        },
        isValidDecimal: function(g) {
            var f = true,
                e = g.indexOf(".");
            if (e > -1 && g.length - e > 3) {
                f = false
            }
            return f
        },
        cancelUpdate: function() {
            this.updatedLevel = undefined
        },
        removeLevel: function(h) {
            var k = this,
                j, g, f, i;
            h.preventDefault();
            j = '<div class="modal" tabindex="-1" id="confirm-modal" data-keyboard="false" data-backdrop="static"></div>';
            $(j).modal();
            i = $(".modal-backdrop");
            g = function() {
                $("#confirm-modal").remove();
                i.css("z-index", "1100");
                k.options.parentView.levelViews.splice(k.options.parentView.levelViews.indexOf(k), 1);
                k.options.parentView.options.parentView.Changed = true;
                k.remove();
                k.render()
            };
            f = function() {
                $("#confirm-modal").remove();
                i.css("z-index", "1100")
            };
            p3.rV(new a.Vs.Confirm({
                ConfirmationTitle: "Delete level",
                ConfirmationText: "Are you sure you want to delete this proficiency level?",
                ConfirmCallback: g,
                CancelCallback: f,
                KeepOpen: true
            }), "#confirm-modal", true);
            i.css("z-index", "1101")
        },
        getPoints: function() {
            var g = this,
                f = 0,
                e;
            if (g.updatedLevel !== undefined) {
                e = g.updatedLevel
            } else {
                e = g.options.level
            }
            if (g.EvalType === p3.Us.Enum.RubricEvaluationTypes.Range.Value) {
                f = e.PointsTo
            } else {
                f = e.Points
            }
            return parseFloat(f)
        }
    });
    b.Vs.RubricDisplay = Bb.View.extend({
        template: "rubric/rubric.display.template.html",
        events: {
            "click #delete-rubric-button": "deleteRubric",
            "click #edit-rubric-button": "editRubric",
            "click #expand-rubric-button": "expandRubrics",
            "click #collapse-rubric-button": "collapseRubrics",
            "click #print-rubric-button": "printRubric",
            "click #add-bank-button": "addToBank",
            "click #my-rubric-button": "copyToBank"
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(f) {
            var i = this,
                g, h = 0,
                e = !i.options.bank && p3.Data.SchoolContext.get("SchoolInfo").AllowRubricBankAdd && !i.options.student;
            i.model = new b.Ms.Rubric({
                Id: i.options.id,
                BankInd: i.options.bank
            });
            i.model.fetch({
                success: function() {
                    i.model.set("Id", i.options.id);
                    i.model.set("BankInd", i.options.banks);
                    g = b.Us.findEvalTypeById(i.model.get("EvaluationType"));
                    h = b.Us.getMaxPointTotal(i.model.get("Skills"), g.Value);
                    p3.fT(i.template, function(j) {
                        i.$el.html(j({
                            model: i.model.toJSON(),
                            evalType: g.Name,
                            points: h,
                            bankInd: i.options.bank,
                            showGrade: i.model.get("Grades").length > 0,
                            showDepartment: i.model.get("Departments").length > 0,
                            print: i.options.print,
                            hideEditDelete: i.options.hideEditDelete,
                            addToMyRubrics: i.options.teacher,
                            addToBank: e,
                            student: i.options.student,
                            section: i.options.section,
                            assignment: i.options.assignment
                        }));
                        i.$el.appendTo(f);
                        i.Containers.Skills = i.$("#skill-container");
                        i.renderSkills()
                    })
                },
                error: function() {
                    p3.displayError("Error loading rubric")
                }
            })
        },
        renderSkills: function() {
            var g = this,
                e = g.model.get("Skills"),
                f;
            if (e !== undefined && e.length > 0) {
                _.each(e, function(h) {
                    f = new b.Vs.EditSkill({
                        model: g.model,
                        skill: h,
                        EditMode: false,
                        parentView: g,
                        displayView: true,
                        print: g.options.print
                    });
                    p3.rV(f, g.Containers.Skills, false)
                })
            }
        },
        deleteRubric: function(f) {
            var g = this;
            c.Hide();
            p3.rV(new b.Vs.RubricDelete({
                model: g.model,
                refreshFunction: function() {
                    g.trigger("refreshList")
                }
            }), p3.Layout.Containers.Modal, true)
        },
        addToBank: function(f) {
            var h = this,
                g = new b.Ms.AddToBank({
                    Id: h.options.id
                });
            c.Hide();
            p3.showConfirm("Add to bank", "Are you sure you want to add this rubric to the rubric bank?<p style=\"margin-top:5px;\">This will be added alongside any previous copies of this rubric you've added. You can manage all rubrics you've added through the rubric bank</p>", null, function() {
                g.save({}, {
                    success: function(e, i) {
                        h.trigger("refreshList")
                    },
                    error: function(i, e) {
                        p3.displayError("Error adding rubric to bank")
                    }
                })
            })
        },
        copyToBank: function(f) {
            var h = this,
                g = new b.Ms.CopyFromBank({
                    Id: h.options.id
                });
            c.Hide();
            p3.showConfirm("Add to my rubrics", "Are you sure you want to add this rubric to my rubrics?<p style=\"margin-top:5px;\">This will be added alongside any previous copies of this rubric you've added. You can manage all rubrics you've added through the my rubrics</p>", null, function() {
                g.save({}, {
                    success: function(e, i) {
                        h.trigger("refreshList")
                    },
                    error: function(i, e) {
                        p3.displayError("Error copying rubric from bank")
                    }
                })
            })
        },
        editRubric: function(f) {
            var h = this,
                g = new b.Vs.EditRubric({
                    bank: h.options.bank,
                    Id: h.options.id
                });
            c.Hide();
            p3.rV(g, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            g.on("rubricSave", function() {
                h.trigger("refreshList")
            })
        },
        expandRubrics: function(f) {
            var g = this;
            g.$(".bb-tile-content").show();
            g.$(".bb-tile-chevron").addClass("fa-chevron-up").removeClass("fa-chevron-down")
        },
        collapseRubrics: function(f) {
            var g = this;
            g.$(".bb-tile-content").hide();
            g.$(".bb-tile-chevron").addClass("fa-chevron-down").removeClass("fa-chevron-up")
        },
        printRubric: function(f) {
            var g = this;
            f.preventDefault();
            c.Hide();
            p3.rV(new b.Vs.PrintRubric({
                Id: this.options.id,
                student: g.options.student,
                section: g.options.section,
                assignment: g.options.assignment
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        }
    });
    b.Vs.RubricPreview = Bb.View.extend({
        template: "rubric/rubric.preview.template.html",
        events: {
            "click .preview-close-button": "closePreview"
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(e) {
            var h = this,
                f, g = 0;
            h.model = new b.Ms.Rubric({
                Id: h.options.id,
                BankInd: false
            });
            h.model.fetch({
                success: function() {
                    h.model.set("Id", h.options.id);
                    f = b.Us.findEvalTypeById(h.model.get("EvaluationType"));
                    g = b.Us.getMaxPointTotal(h.model.get("Skills"), f.Value);
                    p3.fT(h.template, function(i) {
                        h.$el.html(i({
                            model: h.model.toJSON(),
                            evalType: f.Name,
                            points: g,
                            showGrade: h.model.get("Grades").length > 0,
                            showDepartment: h.model.get("Departments").length > 0
                        }));
                        h.$el.appendTo(e);
                        h.Containers.Skills = h.$("#skill-container");
                        h.renderSkills();
                        $(".modal-body").css("height", $(".modal-dialog").height() - 72)
                    })
                },
                error: function() {
                    p3.displayError("Error loading rubric")
                }
            })
        },
        renderSkills: function() {
            var g = this,
                e = g.model.get("Skills"),
                f;
            if (e !== undefined && e.length > 0) {
                _.each(e, function(h) {
                    f = new b.Vs.EditSkill({
                        model: g.model,
                        skill: h,
                        EditMode: false,
                        parentView: g,
                        displayView: true,
                        print: g.options.print
                    });
                    p3.rV(f, g.Containers.Skills, false)
                })
            }
        },
        closePreview: function(g) {
            var f = $("#preview-modal");
            f.height(0);
            p3.showModal(f, "hide");
            f.remove()
        }
    });
    b.Vs.TypeSelector = Bb.View.extend({
        template: "rubric/rubric.selector.modal.template.html",
        events: {
            "click #cancel-link": "closeModal",
            "click .close": "closeModal",
            "click #apply-button": "applyChanges",
            "change #level-dropdown": "levelChange",
            "keyup #search-box": "searchValues",
            "click .bb-checklist-selectall": "selectAll",
            "click .bb-checklist-clear": "clear"
        },
        initialize: function() {
            this.Containers = {};
            this.levelId = 0;
            this.filterText = ""
        },
        render: function(f) {
            var l = this,
                k = [],
                j = false,
                g = 0,
                h, e, i;
            if (l.options.typeIsGrades) {
                b.Data.GradeLevels.each(function(m) {
                    if (!m.get("inactive")) {
                        j = _.filter(l.options.existingSelections, function(n) {
                            return n.grade_id === m.get("grade_id")
                        }).length > 0;
                        k.push({
                            Key: m.get("grade_id"),
                            Description: m.get("grade_name"),
                            AdditionalInfo: m.get("LevelDescription"),
                            Selected: j,
                            LevelId: m.get("LevelDescription")
                        })
                    }
                })
            } else {
                b.Data.Departments.each(function(m) {
                    if (m.get("department_id") === g) {
                        e += ", " + m.get("level_description");
                        i += "," + m.get("LevelNum")
                    } else {
                        if (g > 0) {
                            k.push({
                                Key: g,
                                Description: h,
                                AdditionalInfo: e,
                                Selected: j,
                                LevelId: i
                            })
                        }
                        g = m.get("department_id");
                        j = _.filter(l.options.existingSelections, function(n) {
                            return n.department_id === g
                        }).length > 0;
                        h = m.get("department_description");
                        e = m.get("level_description");
                        i = m.get("LevelNum")
                    }
                });
                if (g > 0) {
                    k.push({
                        Key: g,
                        Description: h,
                        AdditionalInfo: e,
                        Selected: j,
                        LevelId: i
                    })
                }
            }
            p3.fT(l.template, function(m) {
                l.$el.html(m({
                    typeIsGrades: l.options.typeIsGrades,
                    schoolLevels: b.Data.SchooLevels.toJSON(),
                    values: k
                }));
                l.$el.appendTo(f);
                p3.setModalHeight($("#selector-modal"));
                $(".picker-table-container").css("max-height", l.$(".modal-body").height() - 140 + "px")
            })
        },
        closeModal: function(g) {
            var f = $("#selector-modal");
            f.height(0);
            f.remove();
            $(".modal-backdrop").css("z-index", "1100");
            $("#site-modal").css("overflow-y", "auto")
        },
        applyChanges: function(g) {
            var i = this,
                f = $("#selector-modal"),
                h = [];
            $(".value-row").each(function(j, k) {
                var e = $(k).find("input");
                if (e.is(":checked")) {
                    if (i.options.typeIsGrades) {
                        h.push({
                            grade_id: e.data("value"),
                            grade_name: e.data("text")
                        })
                    } else {
                        h.push({
                            department_id: e.data("value"),
                            department_description: e.data("text")
                        })
                    }
                }
            });
            i.trigger("selectionsUpdated", h);
            f.height(0);
            f.remove();
            $(".modal-backdrop").css("z-index", "1100");
            $("#site-modal").css("overflow-y", "auto")
        },
        levelChange: function(g) {
            var h = this,
                f = $(g.currentTarget);
            h.levelId = parseInt(f.val(), 10);
            h.levelText = $("#level-dropdown option:selected").text();
            h.filterResults()
        },
        filterResults: function() {
            var f = this,
                e = "";
            if (f.levelId > 0) {
                if (f.options.typeIsGrades) {
                    e = f.levelText
                } else {
                    e = f.levelId.toString()
                }
            }
            $(".value-row").each(function(h, i) {
                var g = $(i),
                    l = g.text(),
                    j = g.find("input").data("level").toString(),
                    k = true;
                if (f.filterText.length > 0 || e.length > 0) {
                    if (f.filterText.length > 0) {
                        if (l.toUpperCase().indexOf(f.filterText.toUpperCase()) > -1) {
                            g.find(".name-cell").html(l.replace(new RegExp("(" + f.filterText + ")", "ig"), function(m, n) {
                                return '<span class="highlight">' + n + "</span>"
                            }))
                        } else {
                            k = false
                        }
                    } else {
                        g.find(".name-cell").html(l)
                    }
                    if (k && e.length > 0) {
                        if (j.indexOf(e) === -1) {
                            k = false
                        }
                    }
                    if (k) {
                        g.show()
                    } else {
                        g.find(".name-cell").html(l);
                        g.hide()
                    }
                } else {
                    g.find(".name-cell").html(l);
                    g.show()
                }
            })
        },
        searchValues: function(f) {
            var g = this;
            g.filterText = $("#search-box").val();
            g.filterResults()
        },
        selectAll: function() {
            $(".bb-grid-column-picker-table").find("input:checkbox").prop("checked", true)
        },
        clear: function() {
            $(".bb-grid-column-picker-table").find("input:checkbox").prop("checked", false)
        }
    });
    b.Vs.PrintRubric = Bb.View.extend({
        template: "rubric/print.modal.template.html",
        events: {
            "click #btn-print": "printRubric",
            "click #print-portrait": "setPortrait",
            "click #print-landscape": "setLandscape",
            "click .print-colors": "toggleColors",
            "click .cal-print-font-size li": "setFontSize",
            "click .close-print": "closeModal"
        },
        initialize: function() {
            var e = this;
            e.orientation = "landscape-calendar ";
            e.fontStyle = "cal-print-font-size-smallest"
        },
        render: function(e) {
            var f = this;
            $(e).append(f.el);
            f.renderTemplate()
        },
        renderTemplate: function() {
            var e = this;
            p3.fT(e.template, function(f) {
                e.$el.html(f({
                    orientation: e.orientation,
                    fontStyle: e.fontStyle,
                    fontLabel: "smallest"
                }));
                e.loadPrintPreview()
            })
        },
        loadPrintPreview: function() {
            var g = this,
                e, f;
            $("#printArea").empty();
            g.frame = $('<iframe id="print-frame" scrolling="auto" border="0" frameborder="0" name="print-frame"  style="width:100%;"><html></html></iframe>');
            e = "<title>" + document.title + '</title><link type="text/css" rel="stylesheet" href="//libs-e1.myschoolapp.com/sky/1.7.6/css/sky-bundle.css" media="all"><link rel="stylesheet" type="text/css" href="/app/src/ui/css/app.css" media="all" title="calStyles">';
            f = '<div id="cal-preview-holder" style="background-color:#fff;"><div id="cal-print-view"></div></div>';
            g.frame.load(function() {
                var h = $(this);
                h.contents().find("head").append(e);
                h.contents().find("body").append(f);
                g.renderRubric(this)
            }).appendTo("#printArea")
        },
        renderRubric: function(g) {
            var j = this,
                e = $("#print-frame"),
                f, h = j.$(".modal-body"),
                i;
            if (j.options.evaluated) {
                f = j.options.evaluatedView
            } else {
                f = new b.Vs.RubricDisplay({
                    id: j.options.Id,
                    bank: false,
                    print: true,
                    student: j.options.student,
                    section: j.options.section,
                    assignment: j.options.assignment
                })
            }
            j.printView = e.contents().find("#cal-print-view");
            p3.rV(f, j.printView, true);
            window.setTimeout(function() {
                g.style.height = 0;
                i = g.contentWindow.document.body.scrollHeight;
                g.style.height = i + "px";
                p3.setModalHeight(p3.Layout.Containers.Modal);
                if (h.height() < i) {
                    g.style.height = h.height() - 10 + "px"
                }
                e.contents().find("body").css("background-color", "#fff")
            }, 2000)
        },
        printRubric: function() {
            if ($(".ie").length > 0) {
                var e = document.getElementById("print-frame");
                e.contentWindow.document.execCommand("print", false, null)
            } else {
                window.frames["print-frame"].focus();
                window.frames["print-frame"].print()
            }
            return false
        },
        closeModal: function(f) {
            var g = this;
            f.preventDefault();
            if (g.options.$modal) {
                g.options.$modal.height(0);
                g.options.$modal.remove();
                $(".modal-backdrop").css("z-index", "1100").last().remove();
                $("#site-modal").css("overflow-y", "auto")
            } else {
                p3.showModal(p3.Layout.Containers.Modal, "hide")
            }
        }
    });
    b.Vs.AttachRubric = Bb.View.extend({
        template: "rubric/attach.template.html",
        events: {
            "click #associate-rubric": "showDropdown",
            "change #rubric-dropdown": "rubricSelect",
            "click #see-rubric-button": "previewRubric"
        },
        render: function(e) {
            var f = this;
            $(e).append(f.el);
            f.collection = new b.Cs.Rubric();
            f.collection.fetch({
                async: false,
                error: function(g, h) {
                    p3.displayError("Error getting rubric list")
                },
                success: function(g, h) {
                    f.renderTemplate()
                }
            })
        },
        renderTemplate: function() {
            var f = this,
                e = f.collection.length > 0;
            p3.fT(f.template, function(g) {
                f.$el.html(g({
                    haveRubrics: e,
                    rubrics: f.collection.toJSON()
                }))
            });
            $("#associate-rubric-label").tooltip()
        },
        showDropdown: function(g) {
            var i = this,
                h = $("#rubric-select-row"),
                f = $(g.currentTarget).is(":checked");
            if (f) {
                h.show()
            } else {
                h.hide()
            }
            $("#add-assignment-gradebook-max-points").prop("disabled", i.pointRubricSelected(true))
        },
        setRubricId: function(k, m, h, n) {
            var o = this,
                l = $("#rubric-select-row"),
                g = $("#rubric-dropdown"),
                f = $("#associate-rubric"),
                e = $("#see-rubric-button"),
                i = (k !== m),
                j;
            g.val(k);
            if (k > 0) {
                l.show();
                e.show();
                f.prop("checked", true);
                if (i) {
                    f.attr("disabled", "disabled");
                    g.attr("disabled", "disabled")
                }
                j = o.collection.get(k);
                if (j) {
                    if (j.get("Points")) {
                        $("#add-assignment-gradebook-max-points").attr("disabled", "disabled")
                    }
                } else {
                    g.append($("<option>", {
                        selected: "selected",
                        value: k
                    }).html(n))
                }
            } else {
                if (k === null) {
                    l.show();
                    e.show();
                    f.attr("disabled", "disabled");
                    g.attr("disabled", "disabled");
                    g.append($("<option>", {
                        selected: "selected",
                        value: m
                    }).html(n))
                } else {
                    l.hide();
                    e.hide();
                    f.prop("checked", false);
                    if (h) {
                        f.attr("disabled", "disabled")
                    }
                    $("#add-assignment-gradebook-max-points").prop("disabled", false)
                }
            }
        },
        getRubricId: function() {
            var e = 0;
            if ($("#associate-rubric").is(":checked")) {
                e = $("#rubric-dropdown").val()
            }
            return e
        },
        doValidate: function(f) {
            var g = true,
                e = $("#rubric-dropdown");
            e.removeClass("box-validate");
            if ($("#associate-rubric").is(":checked")) {
                if (e.val() === "0") {
                    g = false;
                    e.addClass("box-validate");
                    if (f.indexOf(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered) === -1) {
                        f.push(p3.Us.InfoMessageLibrary.P3.RequiredInfoNotEntered)
                    }
                }
                if (!$("#add-assignment-gradebook-include").is(":checked")) {
                    g = false;
                    f.push("Add the assignment to the gradebook in order to associate a rubric.")
                }
            }
            return g
        },
        rubricSelect: function(g) {
            var i = this,
                h = parseInt($("#rubric-dropdown").val(), 10),
                f = $("#see-rubric-button");
            if (h > 0) {
                f.show()
            } else {
                f.hide()
            }
            $("#add-assignment-gradebook-max-points").prop("disabled", i.pointRubricSelected(true))
        },
        previewRubric: function(g) {
            var h, f = new b.Vs.RubricPreview({
                id: parseInt($("#rubric-dropdown").val(), 10)
            });
            g.preventDefault();
            g.stopPropagation();
            h = '<div class="modal bb-modal-fullpage" style="display: block; position:fixed;" tabindex="-1" id="preview-modal" data-keyboard="false" data-backdrop="static"></div>';
            $(h).modal();
            p3.rV(f, "#preview-modal", true)
        },
        pointRubricSelected: function(h) {
            var j = this,
                g = false,
                f, e = parseInt($("#rubric-dropdown").val(), 10),
                i = 0;
            if (e > 0 && $("#associate-rubric").is(":checked")) {
                f = j.collection.get(e);
                if (f) {
                    g = f.get("Points") > 0;
                    if (g && h) {
                        i = f.get("Points");
                        if (!Number.isInteger(i)) {
                            i = parseFloat(i).toFixed(2)
                        }
                        $("#add-assignment-gradebook-max-points").val(i)
                    }
                }
            }
            return g
        }
    });
    b.Vs.RubricEvaluate = Bb.View.extend({
        template: "rubric/rubric.evaluate.template.html",
        events: {
            "click #clear-rubric-button": "clearRubric",
            "click #expand-rubric-button": "expandRubrics",
            "click #collapse-rubric-button": "collapseRubrics",
            "click #print-rubric-button": "printRubric",
            "click #adjust-grade-button": "teacherAdjustGrade"
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(e) {
            var g = this,
                f = g.model.get("EvaluationType");
            g.updateAdjustment();
            switch (f) {
                case p3.Us.Enum.RubricEvaluationTypes.Points.Value:
                case p3.Us.Enum.RubricEvaluationTypes.Range.Value:
                    g.points = b.Us.getMaxPointTotal(g.model.get("Skills"), f);
                    break;
                case p3.Us.Enum.RubricEvaluationTypes.Percent.Value:
                    g.points = g.options.maxPoints;
                    break
            }
            p3.fT(g.template, function(h) {
                g.$el.html(h({
                    points: g.points,
                    print: g.options.print,
                    heading: g.options.heading,
                    editable: g.options.editable,
                    assignment: g.options.assignment,
                    section: g.options.section,
                    teacher: g.options.teacher,
                    pointsEarned: g.options.pointsEarned,
                    adjPoints: g.options.adjPoints,
                    positiveAdj: g.options.positiveAdj,
                    negativeAdj: g.options.negativeAdj
                }));
                g.$el.appendTo(e);
                if (f !== p3.Us.Enum.RubricEvaluationTypes.Comment.Value) {
                    g.updatePointsEarned(false)
                }
                g.Containers.Skills = g.$("#skill-container");
                g.renderSkills()
            })
        },
        renderSkills: function() {
            var h = this,
                f = h.model.get("Skills"),
                g, e;
            if (f !== undefined && f.length > 0) {
                _.each(f, function(i) {
                    e = h.collection.get(i.Id);
                    if (e === undefined) {
                        e = new b.Ms.RubricResultSave({
                            SkillId: i.Id,
                            AssignmentIndexId: h.options.assignmentIndexId,
                            StudentId: h.options.userId
                        });
                        h.collection.add(e)
                    } else {
                        e.set({
                            AssignmentIndexId: h.options.assignmentIndexId,
                            StudentId: h.options.userId
                        })
                    }
                    g = new b.Vs.EvaluateSkill({
                        model: e,
                        skill: i,
                        EditMode: false,
                        parentView: h,
                        displayView: true,
                        print: h.options.print,
                        editable: h.options.editable,
                        rubric: h.model,
                        maxPoints: h.options.maxPoints
                    });
                    p3.rV(g, h.Containers.Skills, false);
                    g.on("pointChange", function() {
                        h.updatePointsEarned(true)
                    })
                })
            }
        },
        clearRubric: function(h) {
            var k = this,
                j = '<div class="modal" tabindex="-1" id="confirm-modal" data-keyboard="false" data-backdrop="static"></div>',
                i, g, f;
            $(j).modal();
            i = $(".modal-backdrop");
            g = function() {
                $("#confirm-modal").remove();
                i.css("z-index", "1100").remove();
                k.collection.each(function(e) {
                    if (e.get("SkillId") === 0) {
                        e.set({
                            AssignmentIndexId: k.options.assignmentIndexId,
                            StudentId: k.options.userId
                        });
                        k.options.adjPoints = null;
                        k.options.positiveAdj = false;
                        k.options.negativeAdj = false
                    }
                    e.set({
                        Points: null,
                        Comment: null,
                        LevelId: null
                    });
                    e.save({}, {
                        error: function(m, l) {
                            p3.displayError("Error clearing rubric results")
                        }
                    })
                });
                k.render();
                k.updatePointsEarned(true)
            };
            f = function() {
                $("#confirm-modal").remove();
                i.css("z-index", "1100").remove()
            };
            p3.rV(new a.Vs.Confirm({
                ConfirmationTitle: "Are you sure you want to clear this evaluation?",
                ConfirmationText: "If so this student's evaluation will be completely reset.",
                ConfirmCallback: g,
                CancelCallback: f,
                KeepOpen: true
            }), "#confirm-modal", true);
            i.css("z-index", "1101")
        },
        expandRubrics: function(f) {
            var g = this;
            g.$(".bb-tile-content").show();
            g.$(".bb-tile-chevron").addClass("fa-chevron-up").removeClass("fa-chevron-down");
            g.$(".bb-tile").removeClass("collapsed")
        },
        collapseRubrics: function(f) {
            var g = this;
            g.$(".bb-tile-content").hide();
            g.$(".bb-tile-chevron").addClass("fa-chevron-down").removeClass("fa-chevron-up");
            g.$(".bb-tile").addClass("collapsed")
        },
        printRubric: function(f) {
            var h = this,
                g = new b.Vs.RubricEvaluate({
                    print: true,
                    editable: false,
                    id: h.options.id,
                    userId: h.options.userId,
                    collection: h.collection,
                    model: h.model,
                    assignmentIndexId: h.options.assignmentIndexId,
                    section: h.options.section,
                    assignment: h.options.assignment,
                    maxPoints: h.options.maxPoints,
                    heading: h.options.heading,
                    pointsEarned: ($("#points-earned").html()),
                    teacher: h.options.teacher
                });
            f.preventDefault();
            c.Hide();
            p3.rV(new b.Vs.PrintRubric({
                evaluated: true,
                evaluatedView: g
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        },
        updatePointsEarned: function(f) {
            var i = this,
                h = 0,
                e = false,
                g;
            i.collection.each(function(j) {
                if (!_.isNaN(parseFloat(j.get("Points")))) {
                    h += j.get("Points");
                    e = true
                }
            });
            if (h > 0) {
                h = Math.floor(d.formatDecimal(h) * 100) / 100
            }
            $("#points-earned").html(h);
            if (i.options.adjPoints > 0) {
                $("#adjustment-message").show();
                $("#zero-message").hide();
                $("#adj-points").html("+" + i.options.adjPoints)
            } else {
                if (i.options.adjPoints < 0) {
                    $("#adjustment-message").show();
                    $("#zero-message").hide();
                    $("#adj-points").html(i.options.adjPoints)
                } else {
                    if (i.options.adjPoints === 0) {
                        $("#adjustment-message").hide();
                        $("#zero-message").show()
                    } else {
                        $("#adjustment-message").hide();
                        $("#zero-message").hide()
                    }
                }
            }
            if (i.options.assignDetail) {
                g = $(".roster-list li.selected").find(".rubric-points");
                if (f) {
                    if (e) {
                        g.html(h + " points").addClass("unposted-rubric")
                    } else {
                        g.html("Unposted").addClass("unposted-rubric")
                    }
                    $("#commit-rubric-message").show();
                    $("#post-rubrics-region").show()
                }
            } else {
                if (f) {
                    i.trigger("rubricEvaluateChange", h, e)
                }
            }
        },
        updateAdjustment: function() {
            var e = this;
            e.collection.each(function(f) {
                if (!_.isNaN(parseFloat(f.get("Points")))) {
                    if (f.get("LevelId") === 0 && f.get("SkillId") === 0) {
                        e.options.adjPoints = f.get("Points");
                        if (e.options.adjPoints > 0) {
                            e.options.positiveAdj = true;
                            e.options.negativeAdj = false
                        } else {
                            if (e.options.adjPoints < 0) {
                                e.options.negativeAdj = true;
                                e.options.positiveAdj = false
                            } else {
                                if (e.options.adjPoints === 0) {
                                    e.options.negativeAdj = false;
                                    e.options.positiveAdj = false
                                }
                            }
                        }
                    }
                }
            })
        },
        teacherAdjustGrade: function(g) {
            var h = this,
                f;
            f = new b.Vs.AdjustPoints({
                model: h,
                parentRender: function() {
                    h.render()
                }
            });
            f.on("pointChange", function() {
                h.updatePointsEarned(true)
            });
            p3.rV(f, p3.Layout.Containers.Modal, true)
        }
    });
    b.Vs.EvaluateSkill = Bb.View.extend({
        template: "rubric/rubric.evaluateskill.template.html",
        modalTemplate: "Shared/modal.template.html",
        className: "skill-item",
        initialize: function() {
            this.Containers = {}
        },
        dispose: function() {
            var e = tinyMCE.get("comment-editor-" + this.model.get("SkillId"));
            if (e) {
                e.remove();
                e = null
            }
        },
        events: {
            "click .add-comment-button": "showEditComment",
            "click .delete-comment-button": "deleteComment",
            "click .edit-comment-button": "editComment",
            "click .bb-tile-chevron": "toggleDisplay",
            "click .close-skill-comment": "closeCommentBox"
        },
        render: function(e) {
            var f = this;
            p3.fT(f.template, function(g) {
                f.$el.html(g({
                    skill: f.options.skill,
                    print: f.options.print,
                    result: f.model.toJSON(),
                    editable: f.options.editable
                }));
                f.$el.appendTo(e);
                f.Containers.Levels = f.$(".level-container");
                f.renderLevels()
            })
        },
        renderLevels: function() {
            var g = this,
                e = g.options.skill.Levels,
                f;
            if (e !== undefined && e.length > 0) {
                _.each(e, function(h) {
                    f = new b.Vs.EvaluateLevel({
                        rubric: g.options.rubric,
                        skill: g.options.skill,
                        level: h,
                        parentView: g,
                        model: g.model,
                        editable: g.options.editable,
                        maxPoints: g.options.maxPoints,
                        print: g.options.print
                    });
                    p3.rV(f, g.Containers.Levels, false);
                    f.on("levelChange", function(j, k, i) {
                        g.$(".bb-card").removeClass("bb-card-selected");
                        g.$(".select-level-check").attr("checked", false);
                        if (j) {
                            i[0].checked = true;
                            i.parents(".bb-card").addClass("bb-card-selected")
                        }
                        g.model.set({
                            LevelId: j,
                            Points: k
                        });
                        g.saveResults(true);
                        g.setHeaderSummaryText()
                    });
                    f.on("rangeLevelChange", function(j, k, i) {
                        g.$(".bb-card").removeClass("bb-card-selected");
                        g.$(".level-range-box").val("");
                        if (j) {
                            i.parents(".bb-card").addClass("bb-card-selected");
                            i.val(k)
                        }
                        g.model.set({
                            LevelId: j,
                            Points: k
                        });
                        g.saveResults(true);
                        g.setHeaderSummaryText()
                    })
                })
            }
            _.delay(function() {
                var i = 0,
                    h;
                $.each(g.$(".bb-card"), function(j, k) {
                    h = $(k);
                    if (h.height() > i) {
                        i = h.height()
                    }
                });
                g.resizeCards(i);
                g.setHeaderSummaryText()
            }, 200)
        },
        resizeCards: function(e) {
            var f = this;
            $.each(f.$(".bb-card"), function(g, h) {
                $(h).height(e)
            })
        },
        showEditComment: function(f) {
            var g = this;
            g.setCommentMode(true)
        },
        saveComment: function(e) {
            var f = this;
            f.updateComment(e);
            f.$(".comment-save-message").show()
        },
        closeCommentBox: function(f) {
            this.setCommentMode(false)
        },
        deleteComment: function(i) {
            var j = this,
                f, h, g;
            h = function() {
                f.remove();
                $(".modal-backdrop").css("z-index", "1100").last().remove();
                j.updateComment("");
                j.setCommentMode(false)
            };
            g = function() {
                f.remove();
                $(".modal-backdrop").css("z-index", "1100").last().remove()
            };
            p3.fT(j.modalTemplate, function(e) {
                f = $(e({}));
                f.modal();
                $(".modal-backdrop").css("z-index", "1101");
                p3.rV(new a.Vs.Confirm({
                    ConfirmationTitle: "Delete comment",
                    ConfirmationText: "Are you sure you want to delete this comment?</p>",
                    ConfirmCallback: h,
                    CancelCallback: g,
                    KeepOpen: true
                }), f, true)
            })
        },
        editComment: function(f) {
            this.setCommentMode(true)
        },
        setCommentMode: function(j) {
            var m = this,
                f = m.model.get("Comment"),
                l = f !== undefined && f.length > 0,
                e = m.$(".add-comment-button"),
                g = m.$(".display-comment-region"),
                k = m.$(".edit-comment-region"),
                h, i = "comment-editor-" + m.model.get("SkillId");
            if (j) {
                e.hide();
                g.hide();
                k.show();
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                    p3.showHtmlEditor(i, p3.Us.Enum.HtmlEditorCategories.FULL, false, function() {
                        var n = tinyMCE.get(i);
                        if (n !== undefined) {
                            n.onSetContent.add(function(p, o) {
                                var q = p.getContent();
                                m.saveComment(q)
                            });
                            n.onChange.add(function(p, o) {
                                var q = p.getContent();
                                m.saveComment(q)
                            })
                        } else {
                            p3.log("error TinyMCE not loaded yet.")
                        }
                    }, p3.Us.Enum.HtmlEditorEncoding.NUMERIC)
                })
            } else {
                k.hide();
                h = tinyMCE.get(i);
                if (h) {
                    h.remove();
                    h = null
                }
                if (l) {
                    e.hide();
                    g.show()
                } else {
                    e.show();
                    g.hide()
                }
                m.$(".comment-save-message").hide()
            }
        },
        updateComment: function(e) {
            var f = this;
            f.$(".comment-display").html(e);
            f.$(".skill-comment-box").val(e);
            f.model.set("Comment", e);
            f.saveResults(false)
        },
        saveResults: function(f) {
            var g = this,
                e;
            if (g.options.editable) {
                e = g.options.parentView.collection.findWhere({
                    SkillId: 0,
                    Points: 0
                });
                if (f && e) {
                    e.set({
                        Points: null
                    });
                    e.save({
                        AssignmentIndexId: g.options.parentView.options.assignmentIndexId,
                        StudentId: g.options.parentView.options.userId
                    }, {
                        success: function() {
                            g.options.parentView.options.adjPoints = null;
                            g.doSave()
                        }
                    })
                } else {
                    g.doSave()
                }
            }
        },
        doSave: function() {
            var e = this;
            e.model.save({}, {
                error: function(g, f) {
                    p3.displayError("Error saving rubric results")
                },
                success: function() {
                    e.trigger("pointChange")
                }
            })
        },
        toggleDisplay: function(f) {
            var h = this,
                g = $(f.currentTarget);
            if (g.hasClass("fa-chevron-up")) {
                h.$(".bb-tile").addClass("collapsed");
                h.$(".bb-tile-content").hide();
                g.addClass("fa-chevron-down").removeClass("fa-chevron-up")
            } else {
                h.$(".bb-tile").removeClass("collapsed");
                h.$(".bb-tile-content").show();
                g.addClass("fa-chevron-up").removeClass("fa-chevron-down")
            }
        },
        setHeaderSummaryText: function() {
            var h = this,
                g = "",
                e, f;
            if (h.model.get("LevelId")) {
                e = _.filter(h.options.skill.Levels, function(j, i) {
                    return j.Id === h.model.get("LevelId")
                });
                g = e[0].Name;
                f = h.model.get("Points");
                if (f) {
                    g += ", " + h.model.get("Points");
                    if (f === 1) {
                        g += " point"
                    } else {
                        g += " points"
                    }
                }
            }
            h.$(".bb-tile-header-content").html(g)
        }
    });
    b.Vs.EvaluateLevel = Bb.View.extend({
        template: "rubric/rubric.evaluatelevel.template.html",
        className: "rubric-level-view",
        events: {
            "click .select-level-check": "levelCheck",
            "change .level-range-box": "rangeEntry"
        },
        render: function(e) {
            var f = this;
            f.EvalType = f.options.rubric.get("EvaluationType");
            p3.fT(f.template, function(g) {
                f.$el.html(g({
                    level: f.options.level,
                    type: f.EvalType,
                    result: f.options.model.toJSON(),
                    editable: f.options.editable,
                    print: f.options.print
                }))
            });
            f.$el.appendTo(e)
        },
        levelCheck: function(f) {
            var i = this,
                g = null,
                h = null;
            if (f.currentTarget.checked) {
                g = i.options.level.Id;
                if (i.EvalType === p3.Us.Enum.RubricEvaluationTypes.Percent.Value) {
                    h = i.options.maxPoints * (i.options.level.Percentage / 100)
                } else {
                    if (i.options.level.Points) {
                        h = parseFloat(i.options.level.Points)
                    }
                }
            }
            i.trigger("levelChange", g, h, $(f.currentTarget))
        },
        rangeEntry: function(g) {
            var k = this,
                h = null,
                i = null,
                j = true,
                f = $(g.currentTarget);
            f.removeClass("box-validate");
            if (f.val().length > 0) {
                i = parseFloat(parseFloat(f.val()).toFixed(2));
                if (isNaN(i)) {
                    j = false
                } else {
                    if (i >= k.options.level.Points && i <= k.options.level.PointsTo) {
                        h = k.options.level.Id
                    } else {
                        j = false
                    }
                }
            }
            if (j) {
                $(".level-range-box").removeClass("box-validate");
                k.trigger("rangeLevelChange", h, i, f)
            } else {
                f.addClass("box-validate")
            }
        }
    });
    b.Vs.AdjustPoints = Bb.View.extend({
        template: "rubric/rubric.adjustpoints.template.html",
        events: {
            "click #cancel-button": "cancel",
            "click #apply-button": "applyClick",
            "click #setBy-1": "listenToForm",
            "click #setBy-2": "listenToForm",
            "click #setBy-3": "listenToForm",
            "click #setBy-4": "listenToForm",
            "click #positive-points": "listenToForm",
            "click #negative-points": "listenToForm"
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(e) {
            var f = this;
            p3.fT(f.template, function(g) {
                f.$el.html(g());
                f.$el.appendTo(e);
                f.setForms(f.model.options);
                p3.showModal(e, {
                    addClass: "bb-modal"
                })
            })
        },
        listenToForm: function(f) {
            var j = this.$("#positive-points")[0],
                h = this.$("#negative-points")[0],
                i = this.$('input[data-target="#positive-adj"]')[0],
                g = this.$('input[data-target="#negative-adj"]')[0];
            if (f.currentTarget.id === "setBy-1") {
                j.value = "";
                h.value = ""
            }
            if (f.currentTarget.id === "setBy-2") {
                j.selected = true;
                h.value = ""
            }
            if (f.currentTarget.id === "setBy-3") {
                j.value = "";
                h.selected = true
            }
            if (f.currentTarget.id === "setBy-4") {
                j.value = "";
                h.value = ""
            }
            if (f.currentTarget.id === "positive-points") {
                i.click()
            }
            if (f.currentTarget.id === "negative-points") {
                g.click()
            }
        },
        setForms: function(g) {
            var h = this.$('input[data-target="#positive-adj"]')[0],
                e = this.$('input[data-target="#negative-adj"]')[0],
                f = this.$('input[data-target="#no-adj"]')[0];
            if (g.positiveAdj) {
                $("#positive-points")[0].value = Math.abs(g.adjPoints);
                h.click()
            } else {
                if (g.negativeAdj) {
                    $("#negative-points")[0].value = Math.abs(g.adjPoints);
                    e.click()
                } else {
                    if (g.adjPoints === 0) {
                        this.$('input[data-target="#mark-zero"]').click()
                    } else {
                        f.click()
                    }
                }
            }
        },
        cancel: function(f) {
            if (f !== undefined) {
                f.preventDefault()
            }
            this.$el.parent().modal("hide");
            if (this.container) {
                $("#confirm-modal").remove();
                $(".modal-backdrop").css("z-index", "1100")
            }
        },
        isValidAdj: function(g, f) {
            var e = $("#invalid-adj-box");
            if (g >= 0) {
                e.hide();
                f.removeClass("error").removeClass("has-error");
                return true
            }
            e.show();
            f.addClass("error").addClass("has-error");
            return false
        },
        doApply: function(f) {
            var i, g, h;
            i = this;
            h = new b.Ms.RubricResultSave({
                SkillId: 0,
                LevelId: 0,
                AssignmentIndexId: i.model.options.assignmentIndexId,
                StudentId: i.model.options.userId,
                Points: i.model.options.adjPoints
            });
            g = false;
            _.each(i.model.collection.models, function(e) {
                if (e.get("SkillId") === 0) {
                    e.set({
                        Points: i.model.options.adjPoints
                    });
                    g = true
                }
            });
            if (!g) {
                i.model.collection.add(h)
            }
            h.save({}, {
                error: function(j, e) {
                    i.cancel(f);
                    p3.displayError("Error saving rubric results")
                },
                success: function() {
                    if (i.model.options.adjPoints > 0) {
                        i.model.options.positiveAdj = true;
                        i.model.options.negativeAdj = false
                    } else {
                        if (i.model.options.adjPoints < 0) {
                            i.model.options.negativeAdj = true;
                            i.model.options.positiveAdj = false
                        } else {
                            if (i.model.options.adjPoints === 0) {
                                i.model.options.negativeAdj = false;
                                i.model.options.positiveAdj = false;
                                _.each(i.model.collection.models, function(e) {
                                    if (e.get("SkillId") > 0) {
                                        e.set({
                                            Points: null,
                                            LevelId: null
                                        });
                                        e.save({}, {
                                            error: function(k, j) {
                                                p3.displayError("Error clearing rubric results")
                                            }
                                        })
                                    }
                                });
                                i.options.parentRender()
                            } else {
                                i.model.options.negativeAdj = false;
                                i.model.options.positiveAdj = false
                            }
                        }
                    }
                    i.trigger("pointChange");
                    i.cancel(f)
                }
            })
        },
        applyClick: function(f) {
            var k = this.$('input[data-target="#positive-adj"]')[0],
                h = this.$('input[data-target="#negative-adj"]')[0],
                j = this.$('input[data-target="#no-adj"]')[0],
                g = this.$('input[data-target="#mark-zero"]')[0],
                m = this,
                l, i;
            l = $("#positive-points");
            i = $("#negative-points");
            l.removeClass("error").removeClass("has-error");
            i.removeClass("error").removeClass("has-error");
            if (k.checked && m.isValidAdj(parseFloat(l[0].value, 10), l)) {
                m.model.options.adjPoints = parseFloat(l[0].value, 10);
                m.doApply(f)
            } else {
                if (h.checked && m.isValidAdj(parseFloat(i[0].value, 10), i)) {
                    m.model.options.adjPoints = parseFloat(i[0].value, 10) * -1;
                    m.doApply(f)
                } else {
                    if (g.checked) {
                        m.model.options.adjPoints = 0;
                        m.doApply(f)
                    } else {
                        if (j.checked) {
                            m.model.options.adjPoints = null;
                            m.doApply(f)
                        }
                    }
                }
            }
        }
    });
    b.Vs.RubricDetailTile = Bb.View.extend({
        template: "rubric/rubric.detail.tile.template.html",
        events: {
            "click #show-rubric-button": "showRubric"
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(e) {
            var f = this;
            p3.fT(f.template, function(g) {
                f.$el.html(g({
                    model: f.model.toJSON()
                }))
            });
            f.$el.appendTo(e)
        },
        showRubric: function(h) {
            var j = this,
                g, f, i;
            f = new b.Ms.Rubric({
                Id: j.model.get("rubricId"),
                BankInd: false
            });
            f.fetch({
                async: false,
                success: function() {
                    f.set("Id", j.model.get("rubricId"));
                    f.set("BankInd", false)
                },
                error: function() {
                    p3.displayError("Error loading rubric")
                }
            });
            if (j.model.get("showRubric") || ((j.model.get("pointsEarned") > 0 || j.model.get("Letter") !== null) && f.get("EvaluationType") === p3.Us.Enum.RubricEvaluationTypes.Comment.Value)) {
                i = new b.Cs.RubricResults();
                i.fetch({
                    async: false,
                    data: {
                        assignmentIndexId: j.options.assignmentIndexId,
                        studentId: j.options.userId
                    },
                    success: function(e, k) {
                        g = new b.Vs.RubricEvaluate({
                            id: j.model.get("rubricId"),
                            model: f,
                            userId: j.options.userId,
                            collection: i,
                            assignmentIndexId: j.options.assignmentIndexId,
                            editable: false,
                            section: j.model.get("sectionName"),
                            assignment: j.model.get("title"),
                            teacher: false
                        })
                    },
                    error: function() {
                        p3.displayError("Error loading rubric results")
                    }
                })
            } else {
                g = new b.Vs.RubricDisplay({
                    id: j.model.get("rubricId"),
                    bank: false,
                    hideEditDelete: true,
                    teacher: false,
                    student: true,
                    section: j.model.get("sectionName"),
                    assignment: j.model.get("title")
                })
            }
            c.Show({
                view: g,
                width: "75%"
            })
        }
    });
    b.Vs.ProgressPreview = Bb.View.extend({
        template: "rubric/rubric.progress.preview.template.html",
        modalTemplate: "Shared/modal.template.html",
        events: {
            "click .preview-close-button": "closePreview",
            "click #print-rubric-button": "print"
        },
        initialize: function() {
            this.Containers = {}
        },
        render: function(e) {
            var h = this,
                f, g = 0;
            h.model = new b.Ms.Rubric({
                Id: h.options.rubricId,
                BankInd: false
            });
            h.model.fetch({
                success: function() {
                    h.model.set("Id", h.options.rubricId);
                    f = b.Us.findEvalTypeById(h.model.get("EvaluationType"));
                    if (h.options.showEvaluated) {
                        g = b.Us.getMaxPointTotal(h.model.get("Skills"), f.Value)
                    }
                    p3.fT(h.template, function(i) {
                        h.$el.html(i({
                            assignment: h.options.assignment,
                            section: h.options.section,
                            points: g,
                            adjPoints: 0
                        }));
                        h.$el.appendTo(e);
                        h.Containers.Skills = h.$("#skill-container");
                        if (h.options.showEvaluated) {
                            h.renderResults()
                        } else {
                            h.renderSkills()
                        }
                        p3.showModal(e, {
                            addClass: "bb-modal-fullpage"
                        });
                        if (h.collection) {
                            h.updatePointsEarned()
                        }
                    })
                },
                error: function() {
                    p3.displayError("Error loading rubric")
                }
            })
        },
        renderSkills: function() {
            var g = this,
                e = g.model.get("Skills"),
                f;
            if (e !== undefined && e.length > 0) {
                _.each(e, function(h) {
                    f = new b.Vs.EditSkill({
                        model: g.model,
                        skill: h,
                        EditMode: false,
                        parentView: g,
                        displayView: true,
                        print: g.options.print
                    });
                    p3.rV(f, g.Containers.Skills, false)
                })
            }
        },
        renderResults: function() {
            var h = this,
                f = h.model.get("Skills"),
                g, e;
            h.collection = new b.Cs.RubricResults();
            h.collection.fetch({
                async: false,
                data: {
                    assignmentIndexId: h.options.assignmentIndex,
                    studentId: h.options.studentId
                },
                success: function(i, j) {
                    if (f !== undefined && f.length > 0) {
                        _.each(f, function(k) {
                            e = h.collection.get(k.Id);
                            if (e === undefined) {
                                e = new b.Ms.RubricResultSave({
                                    SkillId: k.Id,
                                    AssignmentIndexId: h.options.assignmentIndex,
                                    StudentId: h.options.studentId
                                })
                            }
                            g = new b.Vs.EvaluateSkill({
                                model: e,
                                skill: k,
                                EditMode: false,
                                parentView: h,
                                displayView: true,
                                print: false,
                                editable: false,
                                rubric: h.model
                            });
                            p3.rV(g, h.Containers.Skills, false)
                        })
                    }
                },
                error: function() {
                    p3.displayError("Error loading rubric results")
                }
            })
        },
        updatePointsEarned: function() {
            var f = this,
                e = 0;
            f.collection.each(function(g) {
                if (!_.isNaN(parseFloat(g.get("Points")))) {
                    e += g.get("Points");
                    if (g.get("SkillId") === 0 && g.get("LevelId") === 0) {
                        f.options.adjPoints = g.get("Points")
                    }
                }
            });
            if (e > 0) {
                e = Math.floor(e * 100) / 100
            }
            $("#points-earned").html(e);
            if (f.options.adjPoints > 0) {
                $("#adjustment-message").show();
                $("#zero-message").hide();
                $("#adj-points").html("+" + f.options.adjPoints)
            } else {
                if (f.options.adjPoints < 0) {
                    $("#adjustment-message").show();
                    $("#zero-message").hide();
                    $("#adj-points").html(f.options.adjPoints)
                } else {
                    if (f.options.adjPoints === 0) {
                        $("#zero-message").show();
                        $("#adjustment-message").hide()
                    } else {
                        $("#adjustment-message").hide();
                        $("#zero-message").hide()
                    }
                }
            }
        },
        print: function() {
            var h = this,
                e, g, f;
            p3.fT(h.modalTemplate, function(i) {
                e = $(i({}));
                e.modal();
                $(".modal-backdrop").css("z-index", "1101");
                if (h.options.showEvaluated) {
                    f = new b.Vs.RubricEvaluate({
                        print: true,
                        editable: false,
                        id: h.options.rubricId,
                        userId: h.options.studentId,
                        collection: h.collection,
                        model: h.model,
                        assignmentIndexId: h.options.assignmentIndex,
                        section: h.options.section,
                        assignment: h.options.assignment,
                        pointsEarned: ($("#points-earned").html()),
                        teacher: false
                    });
                    g = new b.Vs.PrintRubric({
                        evaluated: true,
                        evaluatedView: f,
                        $modal: e
                    })
                } else {
                    g = new b.Vs.PrintRubric({
                        Id: h.options.rubricId,
                        student: true,
                        section: h.options.section,
                        assignment: h.options.assignment,
                        $modal: e
                    })
                }
                p3.rV(g, e, true)
            })
        },
        closePreview: function(f) {
            var g = this;
            g.options.$modal.height(0);
            p3.showModal(g.options.$modal, "hide");
            g.options.$modal.remove();
            $(".modal-backdrop").css("z-index", "1100")
        }
    });
    b.Vs.RubricDelete = Bb.View.extend({
        className: "modal-dialog",
        template: "rubric/rubric.delete.modal.template.html",
        events: {
            'click [data-action="delete"]': "deleteRubric"
        },
        initialize: function(e) {
            new b.Ms.RubricDeleteValidate().once("sync", this.renderTemplate, this).fetch({
                data: {
                    rubricId: this.model.get("Id")
                }
            })
        },
        render: function(e) {
            this.$el.appendTo(e)
        },
        renderTemplate: function(e) {
            var f = this;
            p3.fT(f.template, function(g) {
                f.$el.html(g({
                    model: e.toJSON()
                }));
                p3.showModal(p3.Layout.Containers.Modal)
            })
        },
        deleteRubric: function(e) {
            this.model.once("destroy", this.closeModal, this).destroy({
                wait: true,
                error: function() {
                    p3.displayError("Error deleting rubric")
                }
            })
        },
        closeModal: function() {
            this.options.refreshFunction();
            p3.Layout.Containers.Modal.modal("hide")
        }
    });
    b.Us.getMaxPointTotal = function(h, e) {
        var g = 0,
            i = 0,
            f = 0;
        if (e === p3.Us.Enum.RubricEvaluationTypes.Points.Value || e === p3.Us.Enum.RubricEvaluationTypes.Range.Value) {
            _.each(h, function(j) {
                f = 0;
                _.each(j.Levels, function(k) {
                    if (e === p3.Us.Enum.RubricEvaluationTypes.Points.Value) {
                        g = parseFloat(k.Points)
                    } else {
                        g = parseFloat(k.PointsTo)
                    }
                    if (g > f) {
                        f = g
                    }
                });
                i += f
            });
            if (!Number.isInteger(i)) {
                i = parseFloat(i).toFixed(2)
            }
        }
        return i
    };
    b.Us.findEvalTypeById = function(e) {
        var g, h, f;
        e = parseInt(e, 10);
        h = p3.Us.Enum.RubricEvaluationTypes;
        for (g in h) {
            if (h.hasOwnProperty(g)) {
                f = h[g];
                if (f.Value === e) {
                    return f
                }
            }
        }
        return null
    };
    b.Us.EvaluateAssignment = function(p, g, i, f, l, e, h, m, o) {
        var j, n = new b.Cs.RubricResults(),
            k = b.Us.GetEvaluateHeading(e, i);
        n.fetch({
            data: {
                assignmentIndexId: f,
                studentId: i.get("user_id")
            },
            success: function(q, s) {
                j = new b.Vs.RubricEvaluate({
                    id: p,
                    model: g,
                    userId: i.get("user_id"),
                    assignmentIndexId: f,
                    collection: n,
                    editable: true,
                    maxPoints: l,
                    heading: k,
                    pointsEarned: i.get("points_earned"),
                    teacher: true,
                    assignDetail: true
                });
                if (m) {
                    p3.rV(j, $(".flyoutContent"), true);
                    b.Us.EnableNavigation(i, h)
                } else {
                    c.Show({
                        view: j,
                        nav: {
                            nextCallback: function() {
                                i = b.Us.EvaluateNewStudent(i, h, true);
                                b.Us.EvaluateAssignment(p, g, i, f, l, e, h, true);
                                o.changeUser(i.get("user_id"))
                            },
                            previousCallback: function() {
                                i = b.Us.EvaluateNewStudent(i, h, false);
                                b.Us.EvaluateAssignment(p, g, i, f, l, e, h, true);
                                o.changeUser(i.get("user_id"))
                            }
                        },
                        width: "75%"
                    });
                    _.delay(function() {
                        b.Us.EnableNavigation(i, h)
                    }, 200)
                }
            },
            error: function(q, s) {
                p3.displayError("Error loading rubric results")
            }
        })
    };
    b.Us.EvaluateNewStudent = function(f, e, i) {
        var g = e.indexOf(f),
            h;
        if (i) {
            h = e.at(g + 1)
        } else {
            h = e.at(g - 1)
        }
        return h
    };
    b.Us.EnableNavigation = function(f, e) {
        var g = e.indexOf(f),
            i = $(".flyoutPreviousButton"),
            h = $(".flyoutNextButton");
        if (g > 0) {
            i.prop("disabled", false)
        } else {
            i.prop("disabled", true)
        }
        if (g < e.length - 1) {
            h.prop("disabled", false)
        } else {
            h.prop("disabled", true)
        }
    };
    b.Us.GetEvaluateHeading = function(e, f) {
        var g = f.get("grad_year"),
            h = e + " - ";
        h += f.get("firstname");
        h += " " + f.get("lastname");
        if (g && g.length > 0) {
            h += " '";
            h += g.substring(2)
        }
        return h
    }
}(p3.module("lms/rubrics/assignmentrubric")));
(function(b) {
    var c = p3.module("shared/filterableviews/filterableviews"),
        a = p3.module("lms/rubrics/assignmentrubric"),
        d = p3.Us.Flyout;
    b.Vs.LayoutView = Bb.View.extend({
        template: "rubric/rubricmanagelist.layout.template.html",
        events: {
            "click .rubric-display-link": "displayRubricFlyout",
            "click .print-rubric-link": "printRubric",
            "click .edit-rubric-link": "editRubric",
            "click .delete-rubric-link": "deleteRubric",
            "click #facultyrubricbank-add-button": "addRubric",
            "click .add-my-rubric-link": "addToMyRubrics"
        },
        render: function(e) {
            p3.setTitle("Rubric bank");
            var f = this;
            p3.fT(f.template, function(g) {
                f.$el.html(g());
                f.Containers = {
                    Header: f.$("#header"),
                    MainColumn: f.$("#manage-list-container")
                };
                f.filterView = c.Us.RenderList({
                    Container: f.Containers.MainColumn,
                    DefinitionUrl: "FilterableViews/FacultyRubricBankListDefinition/",
                    ResultUrl: "Rubric/FacultyRubricBankGet/",
                    Title: "rubric",
                    DataKey: "facultyrubricbank",
                    HideTitle: true,
                    showAdd: p3.Data.SchoolContext.get("SchoolInfo").AllowRubricBankAdd,
                    showSettings: false
                })
            });
            f.$el.appendTo(e)
        },
        displayRubricFlyout: function(i) {
            var k = this,
                f = $(i.currentTarget),
                j = parseInt(f.data("id"), 10),
                h, g = f.parents("tr").find(".edit-rubric-link").length > 0;
            i.preventDefault();
            k.currentId = j;
            h = new a.Vs.RubricDisplay({
                id: j,
                bank: true,
                hideEditDelete: !g,
                teacher: true
            });
            d.Show({
                view: h,
                nav: {
                    nextCallback: function() {
                        k.loadNewRubric(false);
                        k.enableDisplayNavButtons(k.currentId)
                    },
                    previousCallback: function() {
                        k.loadNewRubric(true);
                        k.enableDisplayNavButtons(k.currentId)
                    }
                },
                width: "75%"
            });
            k.enableDisplayNavButtons(j);
            h.on("refreshList", function() {
                k.filterView.refresh()
            })
        },
        loadNewRubric: function(i) {
            var k = this,
                f = $(".rubric-display-link[data-id=" + k.currentId + "]"),
                j = parseInt(f.parents(".jqgrow")[0].id, 10),
                g, e = false,
                h;
            if (i) {
                j -= 1
            } else {
                j += 1
            }
            h = $("#" + j).find(".rubric-display-link");
            e = h.parents("tr").find(".edit-rubric-link").length > 0;
            k.currentId = parseInt(h.data("id"), 10);
            g = new a.Vs.RubricDisplay({
                id: k.currentId,
                bank: true,
                hideEditDelete: !e,
                teacher: true
            });
            p3.rV(g, $(".flyoutContent"), true);
            g.on("refreshList", function() {
                k.filterView.refresh()
            })
        },
        enableDisplayNavButtons: function(f) {
            var h = false,
                g = false,
                e = $(".rubric-display-link[data-id=" + f + "]"),
                i = parseInt(e.parents(".jqgrow")[0].id, 10);
            h = i > 1;
            if (h) {
                $(".flyoutPreviousButton").prop("disabled", false)
            } else {
                $(".flyoutPreviousButton").prop("disabled", true)
            }
            g = i < parseInt($(".jqgrow").last()[0].id, 10);
            if (g) {
                $(".flyoutNextButton").prop("disabled", false)
            } else {
                $(".flyoutNextButton").prop("disabled", true)
            }
        },
        printRubric: function(f) {
            f.preventDefault();
            p3.rV(new a.Vs.PrintRubric({
                Id: $(f.currentTarget).data("id")
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        },
        editRubric: function(f) {
            f.preventDefault();
            var h = this,
                g = new a.Vs.EditRubric({
                    bank: true,
                    Id: $(f.currentTarget).data("id"),
                    admin: false
                });
            p3.rV(g, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            g.on("rubricSave", function() {
                h.filterView.refresh()
            })
        },
        duplicateRubric: function(f) {
            f.preventDefault();
            var h = this,
                g = new a.Vs.EditRubric({
                    bank: true,
                    Id: $(f.currentTarget).data("id"),
                    duplicate: true,
                    admin: false
                });
            p3.rV(g, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            g.on("rubricSave", function() {
                h.filterView.refresh()
            })
        },
        deleteRubric: function(f) {
            var h = this,
                g = new a.Ms.Rubric({
                    Id: $(f.currentTarget).data("id")
                });
            f.preventDefault();
            p3.showConfirm("Delete Rubric", "Are you sure you want to remove this rubric?", null, function() {
                g.destroy({
                    success: function() {
                        h.filterView.refresh()
                    },
                    error: function() {
                        p3.displayError("Error deleting rubric")
                    }
                })
            })
        },
        addRubric: function(g) {
            var h = this,
                f = new a.Vs.EditRubric({
                    bank: true,
                    Id: 0,
                    admin: false
                });
            p3.rV(f, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            f.on("rubricSave", function() {
                h.filterView.refresh()
            })
        },
        addToMyRubrics: function(f) {
            var h = this,
                g = new a.Ms.CopyFromBank({
                    Id: $(f.currentTarget).data("id")
                });
            f.preventDefault();
            p3.showConfirm("Add to my rubrics", "Are you sure you want to add this rubric to my rubrics?<p style=\"margin-top:5px;\">This will be added alongside any previous copies of this rubric you've added. You can manage all rubrics you've added through the my rubrics</p>", null, function() {
                g.save({}, {
                    success: function(e, i) {
                        h.filterView.refresh()
                    },
                    error: function(i, e) {
                        p3.displayError("Error copying rubric from bank")
                    }
                })
            })
        }
    })
}(p3.module("LMS/Rubrics/facultyRubricbank")));
(function(d) {
    var b = p3.module("shared/filterableviews/filterableviews"),
        a = p3.module("lms/rubrics/assignmentrubric"),
        c = p3.Us.Flyout;
    d.Vs.LayoutView = Bb.View.extend({
        template: "rubric/rubricmanagelist.layout.template.html",
        events: {
            "click .rubric-display-link": "displayRubricFlyout",
            "click .print-rubric-link": "printRubric",
            "click .edit-rubric-link": "editRubric",
            "click .delete-rubric-link": "deleteRubric",
            "click #myrubrics-add-button": "addRubric",
            "click .dublicate-rubric-link": "duplicateRubric",
            "click .add-bank-link": "addToBank"
        },
        render: function(e) {
            p3.setTitle("My rubrics");
            var f = this;
            p3.fT(f.template, function(g) {
                f.$el.html(g());
                f.Containers = {
                    Header: f.$("#header"),
                    MainColumn: f.$("#manage-list-container")
                };
                f.filterView = b.Us.RenderList({
                    Container: f.Containers.MainColumn,
                    DefinitionUrl: "FilterableViews/MyRubricsListDefinition/",
                    ResultUrl: "Rubric/MyRubricsListGet/",
                    Title: "rubric",
                    DataKey: "myrubrics",
                    HideTitle: true,
                    showAdd: true,
                    showSettings: false
                })
            });
            f.$el.appendTo(e)
        },
        displayRubricFlyout: function(g) {
            var i = this,
                h = parseInt($(g.currentTarget).data("id"), 10),
                f;
            g.preventDefault();
            i.currentId = h;
            f = new a.Vs.RubricDisplay({
                id: h,
                bank: false
            });
            c.Show({
                view: f,
                nav: {
                    nextCallback: function() {
                        i.loadNewRubric(false);
                        i.enableDisplayNavButtons(i.currentId)
                    },
                    previousCallback: function() {
                        i.loadNewRubric(true);
                        i.enableDisplayNavButtons(i.currentId)
                    }
                },
                width: "75%"
            });
            i.enableDisplayNavButtons(h);
            f.on("refreshList", function() {
                i.filterView.refresh()
            })
        },
        loadNewRubric: function(g) {
            var i = this,
                e = $(".rubric-display-link[data-id=" + i.currentId + "]"),
                h = parseInt(e.parents(".jqgrow")[0].id, 10),
                f;
            if (g) {
                h -= 1
            } else {
                h += 1
            }
            i.currentId = parseInt($("#" + h).find(".rubric-display-link").data("id"), 10);
            f = new a.Vs.RubricDisplay({
                id: i.currentId,
                bank: false
            });
            p3.rV(f, $(".flyoutContent"), true);
            f.on("refreshList", function() {
                i.filterView.refresh()
            })
        },
        enableDisplayNavButtons: function(f) {
            var h = false,
                g = false,
                e = $(".rubric-display-link[data-id=" + f + "]"),
                i = parseInt(e.parents(".jqgrow")[0].id, 10);
            h = i > 1;
            if (h) {
                $(".flyoutPreviousButton").prop("disabled", false)
            } else {
                $(".flyoutPreviousButton").prop("disabled", true)
            }
            g = i < parseInt($(".jqgrow").last()[0].id, 10);
            if (g) {
                $(".flyoutNextButton").prop("disabled", false)
            } else {
                $(".flyoutNextButton").prop("disabled", true)
            }
        },
        printRubric: function(f) {
            f.preventDefault();
            p3.rV(new a.Vs.PrintRubric({
                Id: $(f.currentTarget).data("id")
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        },
        editRubric: function(f) {
            f.preventDefault();
            var h = this,
                g = new a.Vs.EditRubric({
                    bank: false,
                    Id: $(f.currentTarget).data("id")
                });
            p3.rV(g, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            g.on("rubricSave", function() {
                h.filterView.refresh()
            })
        },
        duplicateRubric: function(f) {
            f.preventDefault();
            var h = this,
                g = new a.Vs.EditRubric({
                    bank: false,
                    Id: $(f.currentTarget).data("id"),
                    duplicate: true
                });
            p3.rV(g, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            g.on("rubricSave", function() {
                h.filterView.refresh()
            })
        },
        deleteRubric: function(f) {
            var g = this;
            f.preventDefault();
            p3.rV(new a.Vs.RubricDelete({
                model: new a.Ms.Rubric({
                    Id: $(f.currentTarget).data("id")
                }),
                refreshFunction: function() {
                    g.filterView.refresh()
                }
            }), p3.Layout.Containers.Modal, true)
        },
        addRubric: function(g) {
            var h = this,
                f = new a.Vs.EditRubric({
                    bank: false,
                    Id: 0
                });
            p3.rV(f, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            f.on("rubricSave", function() {
                h.filterView.refresh()
            })
        },
        addToBank: function(f) {
            var h = this,
                g = new a.Ms.AddToBank({
                    Id: $(f.currentTarget).data("id")
                });
            f.preventDefault();
            p3.showConfirm("Add to bank", "Are you sure you want to add this rubric to the rubric bank?<p style=\"margin-top:5px;\">This will be added alongside any previous copies of this rubric you've added. You can manage all rubrics you've added through the rubric bank</p>", null, function() {
                g.save({}, {
                    success: function(e, i) {
                        h.filterView.refresh()
                    },
                    error: function(i, e) {
                        p3.displayError("Error adding rubric to bank")
                    }
                })
            })
        }
    })
}(p3.module("LMS/Rubrics/myRubrics")));
(function(d) {
    var b = p3.module("shared/filterableviews/filterableviews"),
        a = p3.module("lms/rubrics/assignmentrubric"),
        c = p3.Us.Flyout;
    a.Ms.SettingsSave = Bbm.extend({
        urlRoot: "Rubric/SettingsSave/"
    });
    d.Vs.LayoutView = Bb.View.extend({
        template: "rubric/rubricmanagelist.layout.template.html",
        events: {
            "click .rubric-display-link": "displayRubricFlyout",
            "click .print-rubric-link": "printRubric",
            "click .edit-rubric-link": "editRubric",
            "click .delete-rubric-link": "deleteRubric",
            "click #managerubricbank-add-button": "addRubric",
            "click #managerubricbank-settings-button": "showSettings",
            "click .dublicate-rubric-link": "duplicateRubric"
        },
        render: function(e) {
            p3.setTitle("Manage rubric bank");
            var f = this;
            p3.fT(f.template, function(g) {
                f.$el.html(g());
                f.Containers = {
                    Header: f.$("#header"),
                    MainColumn: f.$("#manage-list-container")
                };
                f.filterView = b.Us.RenderList({
                    Container: f.Containers.MainColumn,
                    DefinitionUrl: "FilterableViews/RubricBankManagerListDefintion/",
                    ResultUrl: "Rubric/RubricBankManagerListGet/",
                    Title: "rubric",
                    DataKey: "managerubricbank",
                    HideTitle: true,
                    showAdd: true,
                    showSettings: true
                })
            });
            f.$el.appendTo(e)
        },
        displayRubricFlyout: function(g) {
            var i = this,
                h = parseInt($(g.currentTarget).data("id"), 10),
                f;
            g.preventDefault();
            i.currentId = h;
            f = new a.Vs.RubricDisplay({
                id: h,
                bank: true
            });
            c.Show({
                view: f,
                nav: {
                    nextCallback: function() {
                        i.loadNewRubric(false);
                        i.enableDisplayNavButtons(i.currentId)
                    },
                    previousCallback: function() {
                        i.loadNewRubric(true);
                        i.enableDisplayNavButtons(i.currentId)
                    }
                },
                width: "75%"
            });
            i.enableDisplayNavButtons(h);
            f.on("refreshList", function() {
                i.filterView.refresh()
            })
        },
        loadNewRubric: function(g) {
            var i = this,
                e = $(".rubric-display-link[data-id=" + i.currentId + "]"),
                h = parseInt(e.parents(".jqgrow")[0].id, 10),
                f;
            if (g) {
                h -= 1
            } else {
                h += 1
            }
            i.currentId = parseInt($("#" + h).find(".rubric-display-link").data("id"), 10);
            f = new a.Vs.RubricDisplay({
                id: i.currentId,
                bank: true
            });
            p3.rV(f, $(".flyoutContent"), true);
            f.on("refreshList", function() {
                i.filterView.refresh()
            })
        },
        enableDisplayNavButtons: function(f) {
            var h = false,
                g = false,
                e = $(".rubric-display-link[data-id=" + f + "]"),
                i = parseInt(e.parents(".jqgrow")[0].id, 10);
            h = i > 1;
            if (h) {
                $(".flyoutPreviousButton").prop("disabled", false)
            } else {
                $(".flyoutPreviousButton").prop("disabled", true)
            }
            g = i < parseInt($(".jqgrow").last()[0].id, 10);
            if (g) {
                $(".flyoutNextButton").prop("disabled", false)
            } else {
                $(".flyoutNextButton").prop("disabled", true)
            }
        },
        printRubric: function(f) {
            f.preventDefault();
            p3.rV(new a.Vs.PrintRubric({
                Id: $(f.currentTarget).data("id")
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        },
        editRubric: function(f) {
            f.preventDefault();
            var h = this,
                g = new a.Vs.EditRubric({
                    bank: true,
                    Id: $(f.currentTarget).data("id"),
                    admin: true
                });
            p3.rV(g, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            g.on("rubricSave", function() {
                h.filterView.refresh()
            })
        },
        duplicateRubric: function(f) {
            f.preventDefault();
            var h = this,
                g = new a.Vs.EditRubric({
                    bank: true,
                    Id: $(f.currentTarget).data("id"),
                    duplicate: true,
                    admin: true
                });
            p3.rV(g, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            g.on("rubricSave", function() {
                h.filterView.refresh()
            })
        },
        deleteRubric: function(f) {
            var h = this,
                g = new a.Ms.Rubric({
                    Id: $(f.currentTarget).data("id")
                });
            f.preventDefault();
            p3.showConfirm("Delete Rubric", "Are you sure you want to remove this rubric?", null, function() {
                g.destroy({
                    success: function() {
                        h.filterView.refresh()
                    },
                    error: function() {
                        p3.displayError("Error deleting rubric")
                    }
                })
            })
        },
        addRubric: function(g) {
            var h = this,
                f = new a.Vs.EditRubric({
                    bank: true,
                    Id: 0,
                    admin: true
                });
            p3.rV(f, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            f.on("rubricSave", function() {
                h.filterView.refresh()
            })
        },
        showSettings: function(f) {
            var g = new d.Vs.Settings({});
            p3.rV(g, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        }
    });
    d.Vs.Settings = Bb.View.extend({
        template: "rubric/rubric.settings.template.html",
        events: {
            "click #settings-save-button": "saveSettings"
        },
        render: function(e) {
            var f = this;
            p3.fT(f.template, function(g) {
                f.$el.html(g({
                    allowAdd: p3.Data.SchoolContext.get("SchoolInfo").AllowRubricBankAdd
                }))
            });
            f.$el.appendTo(e)
        },
        saveSettings: function(f) {
            var h = $("#rubric-save-button"),
                g = new a.Ms.SettingsSave();
            h.button("loading");
            p3.Data.SchoolContext.get("SchoolInfo").AllowRubricBankAdd = ($("#settings-dropdown").val() === "1");
            g.save({
                AllowAddToBank: p3.Data.SchoolContext.get("SchoolInfo").AllowRubricBankAdd
            }, {
                success: function(e, i) {
                    p3.showModal(p3.Layout.Containers.Modal, "hide")
                },
                error: function(i, e) {
                    p3.displayError("Error saving settings");
                    h.button("reset")
                }
            })
        }
    });
    p3.router().route("rubricbank", "rubricbank", function(e) {
        p3.renderMainPage(new d.Vs.LayoutView({}))
    })
}(p3.module("lms/Rubrics/rubricbank")));
(function(a) {
    var j = p3.module("shared/task"),
        b = p3.module("LMS/assignment"),
        g = p3.module("shared/datepicker"),
        k = p3.module("shared/timepicker"),
        h = p3.module("shared/feeds"),
        c = p3.module("LMS/Shared/assignmentcenter"),
        f = p3.Us.Culture,
        m = p3.Us.Validate,
        i = p3.module("report"),
        e = p3.module("LMS/Shared/AssignmentTools"),
        d = p3.module("lms/assignmentoptions"),
        l = p3.module("LMS/userTask");
    a.Cs.Assignments = Bbc.extend({
        url: function() {
            return aP + "Assignment/AssignmentsByCourse/?format=json&sectionId=" + this.sectionId + "&startDate=" + this.startDate + "&endDate=" + this.endDate + "&personaId=" + p3.Data.Context.getSelectedPersona().Id + "&statusList=" + this.statusList
        }
    });
    a.Cs.MoveAssignment = Bbc.extend({
        url: "assignment2/AssignmentMoveTimes"
    });
    a.Cs.SectionForAssignments = Bbc.extend({
        initialize: function(n, o) {
            this.AssignmentId = o.AssignmentId || 0;
            this.SectionId = o.SectionId || 0;
            this.statusList = o.statusList
        },
        url: function() {
            return aP + "assignment/SectionLinksGet/?format=json&id=" + this.AssignmentId
        }
    });
    a.Data = {};
    a.Data.orientation = "landscape-calendar ";
    a.Data.fontStyle = "cal-print-font-size-smallest ";
    a.Vs.Calendar = Bb.View.extend({
        template: "assignmentcenter/calendar.template.html",
        id: "calendar-main-view",
        events: {
            refreshEvents: "eventRefresh",
            updateAssignments: "updateAssignments",
            "click .assignmentDisplayTypeFilter": "updateFilter",
            "click #week-view": "weekView",
            "click #month-view": "monthView",
            "click #button-today": "gotoToday",
            "click #previous-button": "movePrevious",
            "click #next-button": "moveNext",
            "click #mobile-previous-button": "movePrevious",
            "click #mobile-next-button": "moveNext",
            "click #filter-status": "showStatusFilter",
            "click #filter-status-menu": "showStatusFilter",
            "click #ical-dropdown": "showICalMenu",
            "click #report-dropdown": "showReportMenu",
            "click button[data-target]": "openFeed",
            "click .report-link": "hideReportMenu",
            "click #print-button": "printCalendar",
            "click #lti-config-btn": "showLtiConfigList",
            "click #lti-config-menu": "showLtiConfigList",
            "click #add-assessment-btn": "addAssessment",
            "click #add-assessment-menu": "addAssessment",
            "click #add-assignment-btn": "addAssignment",
            "click #add-assignment-menu": "addAssignment",
            "click a.assignment-status-link": "doStatusChange",
            "click #add-discuss-btn": "addDiscussion",
            "click #add-discuss-menu": "addDiscussion",
            "click #day-view": "setDayView",
            "click #today-menu": "gotoToday",
            "click .assignment-status-update": "showStatusUpdate"
        },
        initialize: function(n) {
            var o = this;
            a.Data.isOwner = n.isOwner;
            a.Data.isManager = n.isManager;
            a.Data.leadSectionId = b.Data.currentLeadSectionId = n.leadSectionId || 0;
            a.Data.containerName = n.containerName;
            o.collection = new a.Cs.Assignments();
            o.collection.sectionId = a.Data.leadSectionId;
            o.options.canEdit = o.options.hasFullAccess;
            if (_.isUndefined(p3.Data.LMS) || !p3.Data.LMS.OptionsDefaulted) {
                d.Us.getAssignmentOptionDefaults()
            }
            if (!_.isUndefined(p3.Data.LMS) && !_.isUndefined(p3.Data.LMS.AssignmentCenterfilter)) {
                o.options.currentFilter = n.filter || p3.Data.LMS.AssignmentCenterfilter
            } else {
                o.options.currentFilter = n.filter || 0
            }
        },
        dispose: function() {
            $('link[rel=stylesheet][href~="//libs-e1.myschoolapp.com/fullcalendar/2.4.0/fullcalendar.academic.css"]').remove();
            $(window).off("resize")
        },
        render: function(n) {
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                return true
            });
            var p = this,
                o;
            $(n).html(p.el);
            p.options.view = p;
            p3.fT(p.template, function(q) {
                p.$el.html(q());
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.AcademicCalendar, p.initializeCalendar, p.options);
                p.renderHeader()
            });
            o = _.debounce(function() {
                if (p.checkWidth) {
                    p.checkWidth()
                }
            }, 500);
            $(window).resize(o)
        },
        initializeCalendar: function(n) {
            a.Us.InitializeCalendar(n);
            n.view.requestCalendarData()
        },
        renderHeader: function() {
            var o = this,
                n = new a.Vs.HeaderView({
                    studentId: o.options.studentId,
                    assignCenter: false,
                    sectionId: a.Data.leadSectionId
                });
            p3.rV(n, "#calendar-header-container", true);
            window.setTimeout(function() {
                var p = $("#calendar-container");
                if (p.length > 0 && p.fullCalendar !== undefined) {
                    a.Us.updateHeaderDisplay(p.fullCalendar("getView"))
                }
            }, 100)
        },
        eventRefresh: function() {
            var o = this,
                n = $("#calendar-container");
            if (typeof n.fullCalendar === "function") {
                n.fullCalendar("removeEvents");
                n.fullCalendar("addEventSource", o.options.events.toJSON());
                if (!_.isUndefined(p3.Data.LMS) && !_.isUndefined(p3.Data.LMS.SectionCalendarView)) {
                    n.fullCalendar("changeView", p3.Data.LMS.SectionCalendarView)
                }
            }
        },
        requestCalendarData: function(q) {
            q = q || ((!_.isUndefined(p3.Data.LMS) && !_.isUndefined(p3.Data.LMS.saCaldate)) ? p3.Data.LMS.saCaldate : undefined) || f.localDateTime();
            var t = this,
                p = q.getMonth(),
                r = new Date(q),
                o = new Date(q),
                s = a.Us.getSectionStatusFilterList(),
                n = $("#calendar-container");
            r.setMonth(p - 3);
            o.setMonth(p + 3);
            t.collection.startDate = p3.Us.DateTime.format(r, "MM/dd/yyyy");
            t.collection.endDate = p3.Us.DateTime.format(o, "MM/dd/yyyy");
            t.collection.statusList = s;
            if (typeof n.fullCalendar === "function") {
                n.fullCalendar("gotoDate", q)
            }
            t.collection.fetch({
                success: function(u, w, v) {
                    t.options.events = a.Us.GenerateEventCollection(a.Data.leadSectionId, u, t.options.currentFilter, t.options.canEdit);
                    if (typeof n.fullCalendar === "function") {
                        n.fullCalendar("removeEvents");
                        n.fullCalendar("addEventSource", t.options.events.toJSON());
                        if (!_.isUndefined(p3.Data.LMS) && !_.isUndefined(p3.Data.LMS.SectionCalendarView)) {
                            n.fullCalendar("changeView", p3.Data.LMS.SectionCalendarView)
                        }
                    }
                }
            })
        },
        updateAssignments: function(o) {
            o.stopPropagation();
            o.preventDefault();
            var n;
            if (!_.isUndefined(p3.Data.LMS) && !_.isUndefined(p3.Data.LMS.saCaldate)) {
                n = p3.Data.LMS.saCaldate
            }
            this.requestCalendarData(n)
        },
        updateFilter: function(p) {
            var q = this,
                n, o = $(p.currentTarget);
            p.stopPropagation();
            p.preventDefault();
            $(".btn-group.open").removeClass("open");
            q.options.currentFilter = p3.Data.LMS.AssignmentCenterfilter = o.data("filter");
            $(".assignmentDisplayTypeFilter").each(function(r) {
                $(this).find("i").removeClass("p3icon-radioOn").addClass("p3icon-radioOff");
                $(this).removeClass("active cal-filter-on").addClass("cal-filter-off")
            });
            if (o.hasClass("sec-75-bgc-hover")) {
                n = $(".assignmentDisplayTypeFilter[data-filter='" + p3.Data.LMS.AssignmentCenterfilter.toString() + "']")
            } else {
                n = o
            }
            n.find("i").removeClass("p3icon-radioOff").addClass("p3icon-radioOn");
            n.addClass("active cal-filter-on").removeClass("cal-filter-off");
            q.requestCalendarData($("#calendar-container").fullCalendar("getDate").toDate())
        },
        weekView: function(n) {
            var o = this;
            o.requestCalendarData($("#calendar-container").fullCalendar("getDate").toDate());
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
            p3.Data.LMS.SectionCalendarView = "basicWeek"
        },
        monthView: function(n) {
            var o = this;
            o.requestCalendarData($("#calendar-container").fullCalendar("getDate").toDate());
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
            p3.Data.LMS.SectionCalendarView = "month"
        },
        setDayView: function(n) {
            var o = this;
            o.requestCalendarData($("#calendar-container").fullCalendar("getDate").toDate());
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
            p3.Data.LMS.SectionCalendarView = "basicDay"
        },
        gotoToday: function(n) {
            var p = this,
                o = f.localDateTime();
            if (o) {
                $("#calendar-container").fullCalendar("gotoDate", o);
                p.requestCalendarData(o);
                if (_.isUndefined(p3.Data.LMS)) {
                    p3.Data.LMS = {}
                }
                p3.Data.LMS.saCaldate = o
            }
            n.preventDefault()
        },
        movePrevious: function(p) {
            var q = this,
                o, n = $("#calendar-container");
            n.fullCalendar("prev");
            o = n.fullCalendar("getDate").toDate();
            q.requestCalendarData(o);
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
            p3.Data.LMS.saCaldate = o
        },
        moveNext: function(p) {
            var q = this,
                o, n = $("#calendar-container");
            n.fullCalendar("next");
            o = n.fullCalendar("getDate").toDate();
            q.requestCalendarData(o);
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
            p3.Data.LMS.saCaldate = o
        },
        addDiscussion: function(o) {
            var p = this,
                n = b.Us.AddDiscussionView();
            n.on("saveDiscussion", function(q, r) {
                setTimeout(function() {
                    $("#calendar-main-view").trigger("updateAssignments")
                }, 500)
            });
            n.on("saveAddDiscussion", function(q, r) {
                setTimeout(function() {
                    $("#calendar-main-view").trigger("updateAssignments")
                }, 500);
                p.addDiscussion()
            });
            return false
        },
        addAssessment: function(n) {
            b.Us.AddAssessmentView().on("saveAssessment", function(p, q) {
                var o = new b.Ms.Assignment();
                o.set("AssignmentId", p);
                o.fetch({
                    error: function() {
                        p3.displayError("Error loading assignment")
                    },
                    success: function(r, s) {
                        p3.router().navigate("#assessmentedit/" + p + "/" + o.get("SectionLinks")[0].AssignmentIndexId + "/0", true)
                    }
                })
            });
            n.preventDefault()
        },
        addAssignment: function(n) {
            b.Us.FetchTeacherSections(a.Data.leadSectionId, a.Data.isOwner, a.Data.isManager);
            b.Us.AddAssignmentView({
                defaultDate: f.localDateTime()
            }).on("saveAssignment", function() {
                setTimeout(function() {
                    $("#calendar-main-view").trigger("updateAssignments")
                }, 500)
            });
            n.preventDefault()
        },
        showLtiConfigList: function(n) {
            e.Us.showLtiConfigList(0, n)
        },
        showStatusFilter: function(n) {
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
            if (!p3.Data.LMS.sectionFilterStatus) {
                p3.Data.LMS.sectionFilterStatus = [];
                p3.Data.LMS.sectionFilterStatus.push({
                    Status: -1,
                    Name: "Need Action",
                    LabelClass: "label-info",
                    Selected: true
                });
                p3.Data.LMS.sectionFilterStatus.push({
                    Status: 0,
                    Name: "In Progress",
                    LabelClass: "label-warning",
                    Selected: true
                });
                if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSESSMENTS)) {
                    p3.Data.LMS.sectionFilterStatus.push({
                        Status: 6,
                        Name: "Paused",
                        LabelClass: "label-warning",
                        Selected: true
                    })
                }
                p3.Data.LMS.sectionFilterStatus.push({
                    Status: 2,
                    Name: "Overdue",
                    LabelClass: "label-important",
                    Selected: true
                });
                p3.Data.LMS.sectionFilterStatus.push({
                    Status: 1,
                    Name: "Completed",
                    LabelClass: "label-success",
                    Selected: true
                });
                if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK)) {
                    p3.Data.LMS.sectionFilterStatus.push({
                        Status: 4,
                        Name: "Graded",
                        LabelClass: "label-success",
                        Selected: true
                    })
                }
            }
            var o = new a.Vs.StatusFilter({
                assignmentFilterStatus: p3.Data.LMS.sectionFilterStatus
            });
            p3.rV(o, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            o.on("statusFiltered", function() {
                $("#calendar-main-view").trigger("updateAssignments")
            });
            n.preventDefault()
        },
        showICalMenu: function(n) {
            $("#report-menu").hide();
            $("#ical-menu").toggle();
            return false
        },
        showReportMenu: function(n) {
            $("#ical-menu").hide();
            $("#report-menu").toggle();
            return false
        },
        hideReportMenu: function(n) {
            $("#report-menu").hide()
        },
        openFeed: function(n) {
            $("#ical-menu").hide();
            window.open($(n.target).data().target, "_blank")
        },
        printCalendar: function(n) {
            p3.rV(new a.Vs.PrintCalendar({
                calendarEvents: this.options.events.toJSON()
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            n.preventDefault()
        },
        showStatusUpdate: function(o) {
            var s = $(o.currentTarget),
                n = s.data("id"),
                p = s.data("index"),
                q = s.data("overdue"),
                r = s.data("status"),
                t = s.data("user-task-ind");
            e.Us.ShowStatusChange(s, n, p, q, r, t)
        },
        checkWidth: function() {
            var o = $(".assignment-calendar-menu-bar").is(":visible"),
                p = this,
                n = $("#calendar-container");
            if (o) {
                if (p3.Data.LMS.SectionCalendarView !== "basicDay") {
                    p3.Data.LMS.previousCalView = p3.Data.LMS.SectionCalendarView;
                    p3.Data.LMS.SectionCalendarView = "basicDay";
                    p.requestCalendarData(n.fullCalendar("getDate").toDate())
                }
            } else {
                if (!_.isUndefined(p3.Data.LMS.previousCalView) && p3.Data.LMS.previousCalView !== "basicDay") {
                    p3.Data.LMS.SectionCalendarView = p3.Data.LMS.previousCalView;
                    p3.Data.LMS.previousCalView = undefined;
                    p.requestCalendarData(n.fullCalendar("getDate").toDate())
                }
            }
        }
    });
    a.Vs.ConfirmMoveModal = Bb.View.extend({
        template: "AcademicCalendar/confirmation.template.html",
        events: {
            "click #assignment-move-save-button": "doSave",
            "click #assignment-move-cancel-button": "doCancel",
            "click input[type=radio]": "doSectionDisplayUpdate"
        },
        initialize: function(n) {
            this.collection = new a.Cs.SectionForAssignments({}, {
                AssignmentId: n.AssignmentId,
                SectionId: n.SectionId
            });
            this.markingPeriods = new b.Cs.MarkingPeriods()
        },
        render: function(n) {
            var o = this;
            $(n).html(o.el);
            p3.fT(o.template, function(p) {
                o.$el.html(p());
                o.collection.fetch({
                    success: function(q, t, s) {
                        o.renderItems()
                    },
                    error: function(q, t, s) {
                        p3.log("Error: the retrieval of section data failed.")
                    }
                })
            })
        },
        renderItems: function() {
            var u = this,
                n, p, t, o, s, r, q;
            if (u.collection.length < 1) {
                p3.log("Error: No sections were found for the moved Assignment, this should not happen")
            }
            u.collection.each(function(v) {
                if (v.get("SectionId") === u.collection.SectionId) {
                    n = v
                } else {
                    if (u.options.byAssigned) {
                        v.set("AssignmentDate", u.options.AssignedDate);
                        q = f.getDate(v.get("DueDate"));
                        q.setDate(q.getDate() + u.options.dayDelta);
                        v.set("DueDate", f.getDateString(q))
                    } else {
                        v.set("DueDate", u.options.DueDate);
                        q = f.getDate(v.get("AssignmentDate"));
                        q.setDate(q.getDate() + u.options.dayDelta);
                        v.set("AssignmentDate", f.getDateString(q))
                    }
                }
            });
            if (n) {
                n.set("AssignmentDate", u.options.AssignedDate);
                n.set("DueDate", u.options.DueDate);
                p = n.get("Section").Name;
                $("#confirm-box-title").html(p);
                u.collection.remove(n, {
                    silent: true
                });
                u.collection.add(n, {
                    at: 0,
                    silent: true
                })
            }
            t = $("#sections-to-update-listing");
            o = new a.Vs.SectionsForMove({
                collection: u.collection
            });
            p3.rV(o, t, true);
            s = u.collection.map(function(v) {
                return {
                    AssignmentIndexId: v.get("AssignmentIndexId"),
                    SectionId: v.get("SectionId")
                }
            });
            r = "";
            _.each(s, function(v) {
                if (r.length > 0) {
                    r += ","
                }
                r += v.SectionId
            });
            u.markingPeriods.fetch({
                data: {
                    sectionList: r
                },
                success: function(y, J, H) {
                    var K, F, L, G, I, z, v, A, w, x, B, C, D = function(M) {
                            return M.AssignmentIndexId == $(K[F]).data("assignmentIndexId")
                        },
                        E = function(M) {
                            return M.get("section_id") === L
                        };
                    u.validateDueDates();
                    K = $(".grade-book-tooltip-location");
                    for (F = 0; F < K.length; F++) {
                        L = _.find(s, D);
                        if (L && L.SectionId > 0) {
                            L = L.SectionId;
                            G = y.filter(E);
                            I = "<strong>Marking Periods:</strong><br>Due date must fall within a marking period for this assignment to be included in Gradebook.<br>";
                            for (z = 0; z < G.length; z++) {
                                v = G[z].get("begin_date");
                                A = G[z].get("end_date");
                                if (typeof v === "string" && typeof A === "string") {
                                    w = f.getDateString(f.getDate(v));
                                    x = f.getTimeString(f.getTime(v));
                                    B = f.getDateString(f.getDate(A));
                                    C = f.getTimeString(f.getTime(A));
                                    I += G[z].get("marking_period_description") + "<br><div>Begin: " + w + " " + x + "<br>End: " + B + " " + C + "<br></div>"
                                }
                            }
                            $(K[F]).tooltip({
                                title: I
                            })
                        }
                    }
                }
            })
        },
        validateDueDates: function() {
            var y = this,
                n = $("#assignment-sections-to-delete-list"),
                t = [],
                x = [],
                s = 0,
                w = y.collection.map(function(z) {
                    return {
                        AssignmentIndexId: z.get("AssignmentIndexId"),
                        SectionId: z.get("SectionId")
                    }
                }),
                o, v, u, p, r, q;
            n.find("tr").each(function(A, B) {
                var z = $(B);
                if (z.data("ignore") !== true && z.find(".datepicker:last:hidden").length === 0) {
                    o = z.data("assignmentIndexId");
                    v = _.find(w, function(C) {
                        return C.AssignmentIndexId === o
                    });
                    t.push(true);
                    u = y.markingPeriods.filter(function(C) {
                        return C.get("section_id") === v.SectionId
                    });
                    _.each(u, function(C) {
                        p = f.getDate(C.get("begin_date"));
                        r = f.getDate(C.get("end_date"));
                        q = f.getDate(z.find(".datepicker:last").val());
                        if (q >= p && q <= r) {
                            t[A - s] = false;
                            x.push(v.SectionId);
                            z.find(".datepicker:last").closest("td.control-group").removeClass("error")
                        } else {
                            if (x.indexOf(v.SectionId) === -1) {
                                z.find(".datepicker:last").closest("td.control-group").addClass("error")
                            }
                        }
                    })
                } else {
                    s++
                }
            });
            if (t.indexOf(true) !== -1) {
                p3.Us.InfoMessage.ErrorBox(p3.Us.InfoMessageLibrary.Assignment.DueDateMustBeInMarkingPeriod, "#delete-confirm-modal-errors", false)
            } else {
                $("#delete-confirm-modal-errors").removeClass("alert alert-error").html("")
            }
        },
        doSave: function(o) {
            o.preventDefault();
            o.stopPropagation();
            $("#delete-confirm-modal-errors").removeClass("alert alert-error").html("");
            var s = this,
                p = new a.Cs.MoveAssignment(),
                n = $("#assignment-sections-to-delete-list"),
                r = n.children("tr"),
                q;
            r.each(function(u, v) {
                var t = $(v),
                    w, x;
                if (!t.data("ignore") && t.data("noSave") !== true) {
                    w = t.children("td");
                    x = {};
                    x.AssignmentIndexId = t.data("assignmentIndexId");
                    x.AssignmentDate = $(w[1]).children("input").val();
                    q = $(w[2]).children("input").getTime();
                    if (q) {
                        x.AssignmentTime = q
                    }
                    x.DueDate = $(w[3]).children("input").val();
                    x.PublishInd = $(w[4]).find("input:checked").length > 0 ? true : false;
                    p.add(x)
                }
            });
            s.validateDueDates();
            if (n.find(".error").length === 0) {
                p.sync("create", p, {
                    success: function(t, v, u) {
                        p3.Layout.Containers.Modal.modal("hide")
                    },
                    error: function(t, v, u) {
                        p3.Layout.Containers.Modal.modal("hide")
                    }
                })
            }
        },
        doCancel: function(n) {
            n.preventDefault();
            n.stopPropagation();
            p3.Layout.Containers.Modal.modal("hide")
        },
        doSectionDisplayUpdate: function(n) {
            var p = this,
                o = $("#assignment-sections-to-delete-list").children("tr");
            switch ($(n.currentTarget).val()) {
                case "1":
                    o.each(function(r, s) {
                        var q = $(s);
                        if (!q.data("ignore")) {
                            q.children("td:first").removeClass("muted");
                            q.data("noSave", false);
                            q.find("input").show();
                            q.find("span").show();
                            q.find("i").show()
                        }
                    });
                    break;
                default:
                    o.each(function(r, s) {
                        var q = $(s);
                        if (!q.data("ignore") && q.data("assignmentIndexId") !== p.options.AssignmentIndexId) {
                            q.children("td:first").addClass("muted");
                            q.data("noSave", true);
                            q.find("input").hide();
                            q.find("span").hide();
                            q.find("i").hide()
                        }
                    });
                    break
            }
        }
    });
    a.Vs.SectionsForMove = Bb.View.extend({
        template: "AcademicCalendar/sections.template.html",
        events: {},
        render: function(n) {
            var o = this;
            $(n).html(o.el);
            p3.fT(o.template, function(q) {
                o.$el.html(q({
                    items: o.collection.toJSON()
                }));
                p3.setModalHeight(p3.Layout.Containers.Modal);
                g.Us.initialize(".datepicker");
                k.Us.initialize(".timepicker");
                var p = $("input[type=radio]:checked");
                if (p.length > 0) {
                    p.trigger("click")
                }
            })
        }
    });
    a.Vs.SectionFilter = Bb.View.extend({
        template: "AcademicCalendar/sectionfilter.template.html",
        events: {
            "click #btn-filter-apply": "applyChanges",
            'click [name="select-all-button"]': "selectAll",
            "click .section-button": "selectChange"
        },
        render: function(n) {
            var o = this;
            $(n).html(o.el);
            p3.fT(o.template, function(p) {
                o.$el.html(p({
                    sections: p3.Data.LMS.assignmentFilterSections.toJSON()
                }));
                p3.setModalHeight(p3.Layout.Containers.Modal)
            })
        },
        applyChanges: function(n) {
            p3.Data.LMS.assignmentFilterSections.each(function(o) {
                o.set("Selected", $('.section-button[data-id="' + o.get("SectionId") + '"]').hasClass("active"))
            });
            this.trigger("sectionsFiltered");
            p3.Layout.Containers.Modal.modal("hide")
        },
        selectAll: function(n) {
            var o = this.$(".section-button");
            switch ($(n.currentTarget).val()) {
                case "all":
                    o.addClass("active");
                    break;
                case "clear":
                    o.removeClass("active");
                    break
            }
        },
        selectChange: function(n) {
            if ($(n.currentTarget).hasClass("active")) {
                $("#select-all-button").removeClass("active")
            } else {
                if ($(".section-button").length === $(".section-button.active").length + 1) {
                    $("#select-all-button").addClass("active")
                }
            }
        }
    });
    a.Vs.StatusFilter = Bb.View.extend({
        template: "AcademicCalendar/statusfilter.template.html",
        events: {
            "click #btn-filter-apply": "applyChanges",
            'click [name="select-all-button"]': "selectAll",
            "click .status-button": "selectChange"
        },
        render: function(n) {
            var o = this;
            $(n).html(o.el);
            p3.fT(o.template, function(p) {
                o.$el.html(p({
                    status: o.options.assignmentFilterStatus
                }));
                p3.setModalHeight(p3.Layout.Containers.Modal);
                if ($(".status-button").length === $(".status-button.active").length) {
                    $("#select-all-button").addClass("active")
                }
            })
        },
        applyChanges: function(n) {
            var p = this,
                o;
            for (o = 0; o < p.options.assignmentFilterStatus.length; o++) {
                p.options.assignmentFilterStatus[o].Selected = $('.status-button[data-id="' + p.options.assignmentFilterStatus[o].Status + '"]').hasClass("active")
            }
            this.trigger("statusFiltered");
            p3.Layout.Containers.Modal.modal("hide")
        },
        selectAll: function(n) {
            var o = this.$(".status-button");
            switch ($(n.currentTarget).val()) {
                case "all":
                    o.addClass("active");
                    break;
                case "clear":
                    o.removeClass("active");
                    break
            }
        },
        selectChange: function(n) {
            if ($(n.currentTarget).hasClass("active")) {
                $("#select-all-button").removeClass("active")
            } else {
                if ($(".status-button").length === $(".status-button.active").length + 1) {
                    $("#select-all-button").addClass("active")
                }
            }
        }
    });
    a.Vs.AssignmentCalendar = Bb.View.extend({
        template: "assignmentcenter/calendar.template.html",
        id: "calendar-main-view",
        events: {
            refreshEvents: "eventRefresh",
            updateAssignments: "updateAssignments",
            "click .assignmentDisplayTypeFilter": "updateFilter",
            "click #day-view": "dayView",
            "click #week-view": "weekView",
            "click #month-view": "monthView",
            "click #button-today": "gotoToday",
            "click #today-menu": "gotoToday",
            "click #previous-button": "movePrevious",
            "click #next-button": "moveNext",
            "click #mobile-previous-button": "movePrevious",
            "click #mobile-next-button": "moveNext",
            "click a.assignment-status-link": "doStatusChange",
            "click .list-mode-button": "showList",
            "click #list-view-menu": "showList",
            "click #settingsButton": "editSettings",
            "click #settings-menu": "editSettings",
            "click #add-assessment-btn": "addAssessment",
            "click #add-assessment-menu": "addAssessment",
            "click #add-assignment-btn": "addAssignment",
            "click #add-assignment-menu": "addAssignment",
            "click #lti-config-btn": "showLtiConfigList",
            "click #lti-config-menu": "showLtiConfigList",
            "click #filter-teacher-sections": "showSectionFilter",
            "click #filter-student-sections": "showSectionFilter",
            "click #filter-menu": "showSectionFilter",
            "click #filter-status": "showStatusFilter",
            "click #filter-status-menu": "showStatusFilter",
            "click #missing-assignment": "showMissingAssignmentList",
            "click #missing-assignment-menu": "showMissingAssignmentList",
            "click #ical-dropdown": "showICalMenu",
            "click #report-dropdown": "showReportMenu",
            "click #lti-button": "showLtiList",
            "click button[data-target]": "openFeed",
            "click .report-link": "hideReportMenu",
            "click #print-button": "printCalendar",
            "click #add-discuss-btn": "addDiscussion",
            "click #add-discuss-menu": "addDiscussion",
            "click .assignment-status-update": "showStatusUpdate",
            "click #add-task": "addTask"
        },
        initialize: function(n) {
            var p = this,
                o = p.options.studentId || p3.Data.Context.get("UserInfo").UserId;
            this.collection = new c.Cs.Assignments();
            this.options.canEdit = ((p3.Data.Context.getSelectedPersona().Id === 3 && o === p3.Data.Context.get("UserInfo").UserId) || p3.Data.Context.getSelectedPersona().Id == 5 || p3.Data.Context.getSelectedPersona().Id == 20);
            if (_.isUndefined(p3.Data.LMS) || !p3.Data.LMS.OptionsDefaulted) {
                d.Us.getAssignmentOptionDefaults()
            }
            if (!_.isUndefined(p3.Data.LMS) && !_.isUndefined(p3.Data.LMS.AssignmentCenterfilter)) {
                this.options.currentFilter = n.filter || p3.Data.LMS.AssignmentCenterfilter
            } else {
                this.options.currentFilter = n.filter || 0
            }
        },
        dispose: function() {
            $('link[rel=stylesheet][href~="//libs-e1.myschoolapp.com/fullcalendar/2.4.0/fullcalendar.academic.css"]').remove();
            $(window).off("resize")
        },
        render: function(n) {
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                return true
            });
            var p = this,
                o;
            $(n).html(p.el);
            p3.fT(p.template, function(q) {
                p.$el.html(q({
                    containerName: p.options.containerName
                }));
                p.options.view = p;
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.AcademicCalendar, p.initializeCalendar, p.options);
                p.renderHeader()
            });
            o = _.debounce(function() {
                if (p.checkWidth) {
                    p.checkWidth()
                }
            }, 500);
            $(window).resize(o)
        },
        initializeCalendar: function(n) {
            a.Us.InitializeCalendar(n);
            n.view.requestCalendarData()
        },
        renderHeader: function() {
            var o = this,
                n = new a.Vs.HeaderView({
                    studentId: o.options.studentId,
                    assignCenter: true,
                    sectionId: 0
                });
            p3.rV(n, "#calendar-header-container", true);
            window.setTimeout(function() {
                var p = $("#calendar-container");
                if (p.length > 0 && p.fullCalendar !== undefined) {
                    a.Us.updateHeaderDisplay(p.fullCalendar("getView"))
                }
            }, 100)
        },
        eventRefresh: function() {
            var n = $("#calendar-container");
            if (typeof n.fullCalendar === "function") {
                n.fullCalendar("removeEvents");
                n.fullCalendar("addEventSource", this.options.events.toJSON())
            }
        },
        showStatusUpdate: function(o) {
            var s = $(o.currentTarget),
                n = s.data("id"),
                p = s.data("index"),
                q = s.data("overdue"),
                r = s.data("status"),
                t = s.data("user-task-ind");
            e.Us.ShowStatusChange(s, n, p, q, r, t)
        },
        requestCalendarData: function(s) {
            var x = this,
                v, r, o, t = p3.Data.Context.getSelectedPersona().Id,
                q = s || p3.Data.LMS.saCaldate || f.localDateTime(),
                w, u, p, n = $("#calendar-container");
            p3.Data.LMS.saCaldate = q;
            if (n.length > 0) {
                if (!_.isUndefined(p3.Data.LMS) && !_.isUndefined(p3.Data.LMS.calendarView)) {
                    n.fullCalendar("changeView", p3.Data.LMS.calendarView)
                }
                o = n.fullCalendar("getView");
                v = o.start.toDate();
                r = o.end.toDate()
            } else {
                if (!_.isUndefined(p3.Data.LMS) && !_.isUndefined(p3.Data.LMS.calendarView)) {
                    switch (p3.Data.LMS.calendarView) {
                        case "basicDay":
                            v = q;
                            r = q;
                            break;
                        case "basicWeek":
                            v = new Date(q.getTime());
                            r = new Date(q.getTime());
                            v = new Date(v.setDate(v.getDate() - 7));
                            r = new Date(r.setDate(r.getDate() + 7));
                            break;
                        case "month":
                            v = new Date(q.getTime());
                            r = new Date(q.getTime());
                            v = new Date(v.setDate(v.getDate() - 40));
                            r = new Date(r.setDate(r.getDate() + 40));
                            break
                    }
                } else {
                    v = q;
                    r = q
                }
            }
            w = c.Us.getStatusFilterList();
            u = c.Us.getSectionFilterList();
            p = {
                filter: p3.Data.LMS.AssignmentCenterfilter,
                dateStart: (v.getMonth() + 1) + "/" + v.getDate() + "/" + v.getFullYear(),
                dateEnd: (r.getMonth() + 1) + "/" + r.getDate() + "/" + r.getFullYear(),
                persona: t,
                statusList: w,
                sectionList: u
            };
            p.filter = d.Us.verifyAssignmentCenterFilter(p.filter, b.Enum.viewByFilters.ACTIVE);
            if (x.options.studentId) {
                p.userId = x.options.studentId
            }
            if (typeof n.fullCalendar === "function") {
                n.fullCalendar("gotoDate", q)
            }
            c.Data.Assignments.fetch({
                data: p,
                success: function(y, B) {
                    var z, A;
                    y.each(function(C) {
                        z = C.get("date_ue");
                        A = C.get("date_assigned");
                        if (!m.isEmptier(z) && typeof z.substring === "function" && z.indexOf(" ") > 0) {
                            C.set("date_due", f.getDateString(f.getDate(z)))
                        }
                        if (!m.isEmptier(A) && typeof A.substring === "function" && A.indexOf(" ") > 0) {
                            C.set("date_assigned", f.getDateString(f.getDate(A)))
                        }
                        C.set("assess_assigned", A)
                    });
                    x.options.events = a.Us.GenerateCenterEventCollection(y, x.options.currentFilter, x.options.canEdit, x.options.studentId);
                    if (typeof n.fullCalendar === "function") {
                        n.fullCalendar("removeEvents");
                        n.fullCalendar("addEventSource", x.options.events.toJSON());
                        if (!_.isUndefined(p3.Data.LMS) && !_.isUndefined(p3.Data.LMS.calendarView)) {
                            n.fullCalendar("changeView", p3.Data.LMS.calendarView)
                        }
                    }
                }
            })
        },
        updateAssignments: function(o) {
            o.stopPropagation();
            o.preventDefault();
            var n;
            if (!_.isUndefined(p3.Data.LMS) && !_.isUndefined(p3.Data.LMS.AssignmentCenterDate)) {
                n = p3.Data.LMS.AssignmentCenterDate
            }
            this.requestCalendarData(n)
        },
        updateFilter: function(p) {
            var q = this,
                n, o = $(p.currentTarget);
            p.stopPropagation();
            p.preventDefault();
            $(".btn-group.open").removeClass("open");
            q.options.currentFilter = p3.Data.LMS.AssignmentCenterfilter = o.data("filter");
            $(".assignmentDisplayTypeFilter").each(function(s) {
                var r = $(this);
                r.find("i").removeClass("p3icon-radioOn").addClass("p3icon-radioOff");
                r.removeClass("active cal-filter-on").addClass("cal-filter-off")
            });
            if (o.hasClass("sec-75-bgc-hover")) {
                n = $(".assignmentDisplayTypeFilter[data-filter='" + p3.Data.LMS.AssignmentCenterfilter.toString() + "']")
            } else {
                n = o
            }
            n.find("i").removeClass("p3icon-radioOff").addClass("p3icon-radioOn");
            n.addClass("active cal-filter-on").removeClass("cal-filter-off");
            q.requestCalendarData($("#calendar-container").fullCalendar("getDate").toDate())
        },
        dayView: function(n) {
            var o = this;
            p3.Data.LMS.calendarView = "basicDay";
            o.requestCalendarData($("#calendar-container").fullCalendar("getDate").toDate());
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
        },
        weekView: function(n) {
            var o = this;
            p3.Data.LMS.calendarView = "basicWeek";
            o.requestCalendarData($("#calendar-container").fullCalendar("getDate").toDate());
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
        },
        monthView: function(n) {
            var o = this;
            p3.Data.LMS.calendarView = "month";
            o.requestCalendarData($("#calendar-container").fullCalendar("getDate").toDate());
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
        },
        gotoToday: function(n) {
            var p = this,
                o = f.localDateTime();
            if (o) {
                $("#calendar-container").fullCalendar("gotoDate", o);
                p.requestCalendarData(o);
                if (_.isUndefined(p3.Data.LMS)) {
                    p3.Data.LMS = {}
                }
                p3.Data.LMS.AssignmentCenterDate = o
            }
            n.preventDefault()
        },
        movePrevious: function(p) {
            var q = this,
                o, n = $("#calendar-container");
            n.fullCalendar("prev");
            o = n.fullCalendar("getDate").toDate();
            q.requestCalendarData(o);
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
            p3.Data.LMS.AssignmentCenterDate = o
        },
        moveNext: function(p) {
            var q = this,
                o, n = $("#calendar-container");
            n.fullCalendar("next");
            o = n.fullCalendar("getDate").toDate();
            q.requestCalendarData(o);
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
            p3.Data.LMS.AssignmentCenterDate = o
        },
        showList: function(o) {
            p3.Data.LMS.DisplayCalendar = false;
            var n = "#site-main";
            if (this.options.studentId && this.options.studentId > 0) {
                n = "#child-main"
            }
            p3.rV(new c.Vs.LayoutView({
                studentId: this.options.studentId,
                containerName: "Assignments"
            }), n, true);
            return false
        },
        editSettings: function(n) {
            $(".btn-group.open").removeClass("open");
            p3.rV(new c.Vs.AssignmentSettings(), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        },
        addDiscussion: function(o) {
            var p = this,
                n = b.Us.AddDiscussionView();
            n.on("saveDiscussion", function(q, r) {
                setTimeout(function() {
                    $("#calendar-main-view").trigger("updateAssignments")
                }, 500)
            });
            n.on("saveAddDiscussion", function(q, r) {
                setTimeout(function() {
                    $("#calendar-main-view").trigger("updateAssignments")
                }, 500);
                p.addDiscussion()
            });
            return false
        },
        addAssessment: function(n) {
            b.Us.AddAssessmentView().on("saveAssessment", function(p, q) {
                var o = new b.Ms.Assignment();
                o.set("AssignmentId", p);
                o.fetch({
                    error: function() {
                        p3.displayError("Error loading assignment")
                    },
                    success: function(r, s) {
                        p3.router().navigate("#assessmentedit/" + p + "/" + o.get("SectionLinks")[0].AssignmentIndexId + "/0", true)
                    }
                })
            });
            n.preventDefault()
        },
        addAssignment: function(n) {
            b.Us.FetchTeacherSections(a.Data.leadSectionId, a.Data.isOwner, a.Data.isManager);
            b.Us.AddAssignmentView({
                defaultDate: f.localDateTime()
            }).on("saveAssignment", function() {
                setTimeout(function() {
                    $("#calendar-main-view").trigger("updateAssignments")
                }, 500)
            });
            n.preventDefault()
        },
        showLtiConfigList: function(n) {
            e.Us.showLtiConfigList(0, n)
        },
        showSectionFilter: function(n) {
            var q, o, p;
            $(".btn-group.open").removeClass("open");
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
            if (!p3.Data.LMS.assignmentFilterSections) {
                p3.Data.LMS.assignmentFilterSections = new b.Cs.ExistingSections();
                p = p3.Data.Context.get("Groups");
                for (q = 0; q < p.length; q++) {
                    if (p[q].Association == 1 && p[q].CurrentEnrollment) {
                        p3.Data.LMS.assignmentFilterSections.add({
                            SectionId: p[q].SectionId,
                            Selected: true,
                            Name: p[q].GroupName
                        })
                    }
                }
            }
            o = new a.Vs.SectionFilter();
            p3.rV(o, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            o.on("sectionsFiltered", function() {
                $("#calendar-main-view").trigger("updateAssignments")
            });
            n.preventDefault()
        },
        showStatusFilter: function(n) {
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
            if (!p3.Data.LMS.assignmentFilterStatus) {
                p3.Data.LMS.assignmentFilterStatus = [];
                p3.Data.LMS.assignmentFilterStatus.push({
                    Status: -1,
                    Name: "Need Action",
                    LabelClass: "label-info",
                    Selected: true
                });
                p3.Data.LMS.assignmentFilterStatus.push({
                    Status: 0,
                    Name: "In Progress",
                    LabelClass: "label-warning",
                    Selected: true
                });
                p3.Data.LMS.assignmentFilterStatus.push({
                    Status: 2,
                    Name: "Overdue",
                    LabelClass: "label-important",
                    Selected: true
                });
                p3.Data.LMS.assignmentFilterStatus.push({
                    Status: 1,
                    Name: "Completed",
                    LabelClass: "label-success",
                    Selected: true
                });
                if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK)) {
                    p3.Data.LMS.assignmentFilterStatus.push({
                        Status: 4,
                        Name: "Graded",
                        LabelClass: "label-success",
                        Selected: true
                    })
                }
            }
            var o = new a.Vs.StatusFilter({
                assignmentFilterStatus: p3.Data.LMS.assignmentFilterStatus
            });
            p3.rV(o, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            o.on("statusFiltered", function() {
                $("#calendar-main-view").trigger("updateAssignments")
            });
            n.preventDefault()
        },
        showMissingAssignmentList: function(n) {
            var o = this;
            n.preventDefault();
            if (p3.Data.Context.getSelectedPersona().Id < 3) {
                e.Us.showStudentMissingAssignmentList((o.options.studentId || p3.Data.Context.get("UserInfo").UserId))
            }
        },
        showICalMenu: function(n) {
            $("#report-menu").hide();
            $("#ical-menu").toggle();
            return false
        },
        showReportMenu: function(n) {
            $("#ical-menu").hide();
            $("#report-menu").toggle();
            return false
        },
        showLtiList: function(n) {
            n.stopPropagation();
            n.preventDefault()
        },
        hideReportMenu: function(n) {
            $("#report-menu").hide()
        },
        openFeed: function(n) {
            $("#ical-menu").hide();
            window.open($(n.target).data().target, "_blank")
        },
        printCalendar: function(n) {
            p3.rV(new a.Vs.PrintCalendar({
                calendarEvents: this.options.events.toJSON()
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            n.preventDefault()
        },
        checkWidth: function() {
            var o = $(".assignment-calendar-menu-bar").is(":visible"),
                p = this,
                n = $("#calendar-container");
            if (o) {
                if (p3.Data.LMS.calendarView !== "basicDay") {
                    p3.Data.LMS.previousCalView = p3.Data.LMS.calendarView;
                    p3.Data.LMS.calendarView = "basicDay";
                    p.requestCalendarData(n.fullCalendar("getDate").toDate())
                }
            } else {
                if (!_.isUndefined(p3.Data.LMS.previousCalView) && p3.Data.LMS.previousCalView !== "basicDay") {
                    p3.Data.LMS.calendarView = p3.Data.LMS.previousCalView;
                    p3.Data.LMS.previousCalView = undefined;
                    p.requestCalendarData(n.fullCalendar("getDate").toDate())
                }
            }
        },
        addTask: function(n) {
            n.preventDefault();
            l.Us.UserTaskModal(new l.Ms.UserTask({
                UserId: this.options.studentId || p3.Data.Context.get("UserInfo").UserId
            }).on("save", function(p, q, o) {
                setTimeout(function() {
                    $("#calendar-main-view").trigger("updateAssignments")
                }, 500)
            }))
        }
    });
    a.Vs.HeaderView = Bb.View.extend({
        template: "assignmentcenter/assignmentcenter.header.template.html",
        events: {},
        initialize: function(n) {
            if (_.isUndefined(p3.Data.LMS) || !p3.Data.LMS.OptionsDefaulted) {
                d.Us.getAssignmentOptionDefaults()
            }
        },
        render: function(n) {
            var p = this,
                o = {};
            $(n).append(this.el);
            p.getRenderDataMissingAssignments(o)
        },
        getRenderDataMissingAssignments: function(o) {
            var p = this,
                n;
            o.persona = p3.Data.Context.getSelectedPersona().Id;
            o.missingAssignmentInd = false;
            if (o.persona < 3 && p.options.assignCenter) {
                n = new e.Ms.StudentMissingAssignmentCheck();
                n.fetch({
                    data: {
                        studentId: (p.options.studentId || p3.Data.Context.get("UserInfo").UserId)
                    },
                    success: function() {
                        o.missingAssignmentInd = n.hasMissingAssignments();
                        p.renderTemplate(o)
                    },
                    error: function() {
                        p3.displayError("Error loading missing assignment information");
                        o.missingAssignmentInd = true;
                        p.renderTemplate(o)
                    }
                })
            } else {
                p.renderTemplate(o)
            }
        },
        renderTemplate: function(u) {
            var y = this,
                x = (y.options.studentId || p3.Data.Context.get("UserInfo").UserId),
                t = p3.Data.Context.getSelectedPersona().Id,
                n, q = false,
                s = false,
                r = false,
                o, p, w, v, z;
            if (!y.options.assignCenter) {
                q = true;
                s = true;
                r = true
            }
            if (p3.Data.LMS.AssignmentCenterDate) {
                n = p3.Data.LMS.AssignmentCenterDate
            } else {
                n = f.localDateTime();
                p3.Data.LMS.AssignmentCenterDate = n
            }
            o = c.Us.GetDateRange(n);
            p = new h.Ms.iCalAssignmentsGet();
            p.fetch({
                async: false,
                data: {
                    personaId: p3.Data.Context.getSelectedPersona().Id,
                    userId: x,
                    sectionId: y.options.sectionId,
                    schoolYearLabel: p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel,
                    sdate: p3.Us.Tools.shortDateDisplay(o[0].getTime()),
                    edate: p3.Us.Tools.shortDateDisplay(o[1].getTime())
                }
            });
            e.Us.refreshLtiConfigSummary(0);
            w = new i.Cs.ReportList();
            if (!p3.Data.ReportList) {
                i.loadReportList({
                    success: function(A, B) {
                        w.remove(w.at(0));
                        if (y.options.assignCenter) {
                            if (i.hasAccessToReportId(261)) {
                                z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=261");
                                v = new i.Ms.ReportList({
                                    ReportName: "Assignment Counts - By Section",
                                    Link: z
                                });
                                w.add(v)
                            }
                            if (i.hasAccessToReportId(328)) {
                                z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=328");
                                v = new i.Ms.ReportList({
                                    ReportName: "Assignments - By Section",
                                    Link: z
                                });
                                w.add(v)
                            }
                            if (i.hasAccessToReportId(335)) {
                                z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=335");
                                v = new i.Ms.ReportList({
                                    ReportName: "Assignments Due - By Department or Grade",
                                    Link: z
                                });
                                w.add(v)
                            }
                            if (i.hasAccessToReportId(80)) {
                                z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=80");
                                v = new i.Ms.ReportList({
                                    ReportName: "Roster Assignments",
                                    Link: z
                                });
                                w.add(v)
                            }
                            if (i.hasAccessToReportId(215)) {
                                z = j.Us.getUrlById(1691, "pk=215&sid=" + x + "&vid=" + p3.Data.Context.get("UserInfo").UserId + "&ext=vw");
                                v = new i.Ms.ReportList({
                                    ReportName: "View Assignment Grades",
                                    Link: z
                                });
                                w.add(v)
                            }
                            if (i.hasAccessToReportId(247)) {
                                z = j.Us.getUrlById(1691, "pk=247&sid=" + x + "&vid=" + p3.Data.Context.get("UserInfo").UserId + "&ext=vw");
                                v = new i.Ms.ReportList({
                                    ReportName: "View Assignment Grades w/ comments",
                                    Link: z
                                });
                                w.add(v)
                            }
                            if (i.hasAccessToReportId(259)) {
                                z = j.Us.getUrlById(1691, "pk=259&ch=1&sid=" + x + "&vid=" + p3.Data.Context.get("UserInfo").UserId + "&ext=vw");
                                v = new i.Ms.ReportList({
                                    ReportName: "Cumulative Grades",
                                    Link: z
                                });
                                w.add(v)
                            }
                        } else {
                            if (i.hasAccessToReportId(324)) {
                                z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=324&ext=vw&o_pk=" + y.options.sectionId);
                                v = new i.Ms.ReportList({
                                    ReportName: "Roster Assignments Due - By Section",
                                    Link: z
                                });
                                w.add(v)
                            }
                            if (i.hasAccessToReportId(82)) {
                                z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=82&ext=vw&o_pk=" + y.options.sectionId);
                                v = new i.Ms.ReportList({
                                    ReportName: "Roster Major Assignments - By Section",
                                    Link: z
                                });
                                w.add(v)
                            }
                            if (i.hasAccessToReportId(444)) {
                                z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=444&ext=vw&sid=" + y.options.sectionId);
                                v = new i.Ms.ReportList({
                                    ReportName: "Submitted Assignments - By Student",
                                    Link: z
                                });
                                w.add(v)
                            }
                            if (i.hasAccessToReportId(412)) {
                                z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=412&ext=vw&sid=" + y.options.sectionId);
                                v = new i.Ms.ReportList({
                                    ReportName: "View Schedule",
                                    Link: z
                                });
                                w.add(v)
                            }
                        }
                        p3.fT(y.template, function(E) {
                            var C = w.length > 0 ? w.toJSON() : false,
                                D = y.options.studentId > 0 ? y.options.studentId : 0;
                            y.$el.html(E({
                                reports: C,
                                studentId: D,
                                filter: p3.Data.LMS.AssignmentCenterfilter,
                                isStudent: t === 2,
                                missingAssignmentInd: u.missingAssignmentInd,
                                showEdit: (t === 3 && x === p3.Data.Context.get("UserInfo").UserId),
                                showAssess: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSESSMENTS),
                                view: p3.Data.LMS.calendarView,
                                iCalFeed: p.get("iCalLink"),
                                protocol: location.protocol,
                                host: location.host,
                                hideRange: true,
                                gridView: true,
                                hideDay: q,
                                hideSettings: s,
                                hideSectionFilter: r,
                                sectionId: y.options.sectionId,
                                showDiscuss: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEDDISCUSSION),
                                lti: e.Data.LtiConfigSummary.toJSON()
                            }))
                        })
                    }
                })
            } else {
                w.remove(w.at(0));
                if (y.options.assignCenter) {
                    if (i.hasAccessToReportId(261)) {
                        z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=261");
                        v = new i.Ms.ReportList({
                            ReportName: "Assignment Counts - By Section",
                            Link: z
                        });
                        w.add(v)
                    }
                    if (i.hasAccessToReportId(328)) {
                        z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=328");
                        v = new i.Ms.ReportList({
                            ReportName: "Assignments - By Section",
                            Link: z
                        });
                        w.add(v)
                    }
                    if (i.hasAccessToReportId(335)) {
                        z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=335");
                        v = new i.Ms.ReportList({
                            ReportName: "Assignments Due - By Department or Grade",
                            Link: z
                        });
                        w.add(v)
                    }
                    if (i.hasAccessToReportId(80)) {
                        z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=80");
                        v = new i.Ms.ReportList({
                            ReportName: "Roster Assignments",
                            Link: z
                        });
                        w.add(v)
                    }
                    if (i.hasAccessToReportId(215)) {
                        z = j.Us.getUrlById(1691, "pk=215&sid=" + x + "&vid=" + p3.Data.Context.get("UserInfo").UserId + "&ext=vw");
                        v = new i.Ms.ReportList({
                            ReportName: "View Assignment Grades",
                            Link: z
                        });
                        w.add(v)
                    }
                    if (i.hasAccessToReportId(247)) {
                        z = j.Us.getUrlById(1691, "pk=247&sid=" + x + "&vid=" + p3.Data.Context.get("UserInfo").UserId + "&ext=vw");
                        v = new i.Ms.ReportList({
                            ReportName: "View Assignment Grades w/ comments",
                            Link: z
                        });
                        w.add(v)
                    }
                    if (i.hasAccessToReportId(259)) {
                        z = j.Us.getUrlById(1691, "pk=259&ch=1&sid=" + x + "&vid=" + p3.Data.Context.get("UserInfo").UserId + "&ext=vw");
                        v = new i.Ms.ReportList({
                            ReportName: "Cumulative Grades",
                            Link: z
                        });
                        w.add(v)
                    }
                } else {
                    if (i.hasAccessToReportId(324)) {
                        z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=324&ext=vw&o_pk=" + y.options.sectionId);
                        v = new i.Ms.ReportList({
                            ReportName: "Roster Assignments Due - By Section",
                            Link: z
                        });
                        w.add(v)
                    }
                    if (i.hasAccessToReportId(82)) {
                        z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=82&ext=vw&o_pk=" + y.options.sectionId);
                        v = new i.Ms.ReportList({
                            ReportName: "Roster Major Assignments - By Section",
                            Link: z
                        });
                        w.add(v)
                    }
                    if (i.hasAccessToReportId(444)) {
                        z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=444&ext=vw&sid=" + y.options.sectionId);
                        v = new i.Ms.ReportList({
                            ReportName: "Submitted Assignments - By Student",
                            Link: z
                        });
                        w.add(v)
                    }
                    if (i.hasAccessToReportId(412)) {
                        z = j.Us.getUrlById(1691, "__pd=gm_fv&pk=412&ext=vw&sid=" + y.options.sectionId);
                        v = new i.Ms.ReportList({
                            ReportName: "View Schedule",
                            Link: z
                        });
                        w.add(v)
                    }
                }
                p3.fT(y.template, function(C) {
                    var A = w.length > 0 ? w.toJSON() : false,
                        B = y.options.studentId > 0 ? y.options.studentId : 0;
                    y.$el.html(C({
                        reports: A,
                        studentId: B,
                        filter: p3.Data.LMS.AssignmentCenterfilter,
                        isStudent: t === 2,
                        missingAssignmentInd: u.missingAssignmentInd,
                        showEdit: (t === 3 && x === p3.Data.Context.get("UserInfo").UserId),
                        showAssess: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSESSMENTS),
                        view: p3.Data.LMS.calendarView,
                        iCalFeed: p.get("iCalLink"),
                        protocol: location.protocol,
                        host: location.host,
                        hideRange: true,
                        gridView: true,
                        hideDay: q,
                        hideSettings: s,
                        hideSectionFilter: r,
                        sectionId: y.options.sectionId,
                        showDiscuss: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEDDISCUSSION),
                        lti: e.Data.LtiConfigSummary.toJSON()
                    }))
                })
            }
        }
    });
    a.Vs.PrintCalendar = Bb.View.extend({
        template: "academiccalendar/print.modal.template.html",
        events: {
            "click #btn-print": "printCal",
            "click #print-portrait": "setPortrait",
            "click #print-landscape": "setLandscape",
            "click .print-colors": "toggleColors",
            "click .cal-print-font-size li": "setFontSize"
        },
        initialize: function() {
            var n = this;
            n.calView = $("#calendar-container").fullCalendar("getView")
        },
        render: function(n) {
            var o = this;
            $(n).append(o.el);
            o.renderTemplate()
        },
        renderTemplate: function() {
            var o = this,
                n;
            n = a.Data.fontStyle.substring(a.Data.fontStyle.lastIndexOf("-") + 1);
            p3.fT(o.template, function(p) {
                o.$el.html(p({
                    orientation: a.Data.orientation,
                    fontStyle: a.Data.fontStyle,
                    fontLabel: n
                }));
                o.loadPrintPreview()
            })
        },
        loadPrintPreview: function() {
            var p = this,
                n, o;
            $("#printArea").empty();
            p.frame = $('<iframe id="print-frame" scrolling="no" border="0" frameborder="0" name="print-frame" class="' + a.Data.orientation + '"><html></html></iframe>');
            n = "<title>" + document.title + '</title><link rel="stylesheet" type="text/css" href="/app/src/css/p3.system.css" media="all" title="calStyles"><link rel="stylesheet" type="text/css" href="/app/src/css/p3.onCampus.css" media="all" title="calStyles"><link type="text/css" rel="stylesheet" href="//libs-e1.myschoolapp.com/fullcalendar/2.4.0/fullcalendar.academic.css" media="all">';
            o = '<div id="cal-preview-holder" class="' + a.Data.fontStyle + '"><div id="cal-print-view" class="' + a.Data.orientation + ' bnw"></div></div>';
            p.frame.load(function() {
                var q = $(this);
                q.contents().find("head").append(n);
                q.contents().find("body").append(o);
                p.drawCal(this)
            }).appendTo("#printArea")
        },
        drawCal: function(o) {
            var p = this,
                n = $("#print-frame");
            p.printView = n.contents().find("#cal-print-view");
            p.printView.fullCalendar({
                editable: false,
                disableResizing: true,
                defaultDate: p.calView.calendar.getDate(),
                defaultView: p.calView.name,
                height: "auto",
                columnFormat: {
                    basicDay: "dddd"
                },
                events: p.options.calendarEvents,
                eventRender: function(r, q) {
                    var s = q.find(".fc-title").text(),
                        t, u, w, v;
                    if (s.indexOf("<button") > -1) {
                        s = s.substring(0, s.indexOf("<button"))
                    }
                    w = s.indexOf('<a class="assign-title-link"');
                    if (w > -1) {
                        v = s.indexOf("</a>");
                        u = s.substring(w, v + 4);
                        t = u.substring(u.indexOf(">") + 1, u.indexOf("</a>"));
                        s = s.replace(u, t)
                    }
                    if (s.indexOf("<a") > -1) {
                        s = s.substring(0, s.indexOf("<a"))
                    }
                    q.find(".fc-title").html(s);
                    q.find(".calendar-title-text").addClass(a.Data.fontStyle)
                },
                eventAfterAllRender: function() {
                    window.setTimeout(function() {
                        o.style.height = 0;
                        o.style.height = o.contentWindow.document.body.scrollHeight + 25 + "px"
                    }, 500);
                    n.contents().find(".fc-center").html("<h2>" + $("#date-display-label").text() + "</h2>")
                }
            })
        },
        setPortrait: function() {
            var n = this;
            a.Data.orientation = "portrait-calendar ";
            n.frame.removeClass().addClass(a.Data.orientation);
            n.printView.removeClass().addClass(a.Data.orientation + " bnw fc fc-ltr");
            n.printView.fullCalendar("rerenderEvents")
        },
        setLandscape: function() {
            var n = this;
            a.Data.orientation = "landscape-calendar ";
            n.frame.removeClass().addClass(a.Data.orientation);
            n.printView.removeClass().addClass(a.Data.orientation + " bnw fc fc-ltr");
            n.printView.fullCalendar("rerenderEvents")
        },
        setFontSize: function(p) {
            var s = this,
                n = $(p.target),
                r = n.attr("class"),
                o = $("#print-frame").contents().find("#cal-preview-holder"),
                q = o.attr("class");
            a.Data.fontStyle = r.substr(0, r.indexOf(" "));
            $("#cal-print-font-size").removeClass(q).addClass(a.Data.fontStyle).html(n.text() + '  <span class="caret"></span>');
            o.removeClass(q).addClass(a.Data.fontStyle);
            s.printView.fullCalendar("rerenderEvents")
        },
        printCal: function() {
            if ($(".ie").length > 0) {
                var n = document.getElementById("print-frame");
                n.contentWindow.document.execCommand("print", false, null)
            } else {
                window.frames["print-frame"].focus();
                window.frames["print-frame"].print()
            }
            return false
        }
    });
    a.Us.InitializeCalendar = function(o) {
        var n = {
            editable: o.canEdit,
            disableResizing: true,
            height: "auto",
            header: {
                left: "",
                center: "title",
                right: ""
            },
            columnFormat: {
                basicDay: "dddd"
            },
            events: (!_.isUndefined(o.events) ? o.events.toJSON() : undefined),
            eventRender: function(q, p) {
                p.find(".fc-title").html(p.find(".fc-title").text())
            },
            viewRender: function(q, p) {
                $(".fc-toolbar").remove();
                a.Us.updateHeaderDisplay(q)
            },
            dayClick: function(r, s, t) {
                if (t.calendar.options.editable) {
                    var p = true,
                        q = new Date();
                    if (t.lastAdd) {
                        if (q.getTime() - t.lastAdd.getTime() < 1000) {
                            p = false
                        }
                    }
                    if (p) {
                        t.lastAdd = q;
                        b.Us.FetchTeacherSections(a.Data.leadSectionId, a.Data.isOwner, a.Data.isManager);
                        b.Us.AddAssignmentView({
                            defaultDate: r.local().toDate()
                        }).on("saveAssignment", function() {
                            setTimeout(function() {
                                $("#calendar-main-view").trigger("updateAssignments")
                            }, 500)
                        })
                    }
                }
            },
            eventClick: function(q, s, t) {
                var r, p;
                if (!(s.target.nodeName === "a" || s.target.nodeName === "A" || s.target.nodeName === "BUTTON" || s.target.nodeName === "button") && q.canEdit) {
                    if (q.assessmentInd) {
                        p3.router().navigate("#assessmentedit/" + q.assignmentId + "/" + q.assignmentIndexId + "/" + (q.assessmentLocked ? "1" : "0"), true)
                    } else {
                        if (q.discussionInd) {
                            p = new b.Ms.Assignment();
                            p.set("AssignmentId", q.assignmentId);
                            p.fetch({
                                async: false,
                                error: function() {
                                    p3.displayError("Error loading assignment")
                                },
                                success: function(v, w) {
                                    var u = b.Us.AddDiscussionView(p, 0);
                                    u.on("saveDiscussion", function() {
                                        setTimeout(function() {
                                            $("#calendar-main-view").trigger("updateAssignments")
                                        }, 500)
                                    })
                                }
                            })
                        } else {
                            r = b.Us.EditAssignmentView(q.assignmentId);
                            if (r) {
                                r.on("saveAssignment", function() {
                                    setTimeout(function() {
                                        $("#calendar-main-view").trigger("updateAssignments")
                                    }, 500)
                                }).on("deleteAssignment", function() {
                                    setTimeout(function() {
                                        $("#calendar-main-view").trigger("updateAssignments")
                                    }, 500)
                                })
                            }
                        }
                    }
                    return false
                }
            },
            eventDragStart: function(p, q, r, s) {
                a.Data.StartDate = p.start.local().toDate()
            },
            eventDrop: function(u, s, y, v, z, A) {
                var x = u.start.local().toDate(),
                    w = u.end ? u.end.toDate() : null,
                    r = {
                        AssignmentId: u.assignmentId,
                        AssignmentIndexId: u.assignmentIndexId,
                        SectionId: u.sectionId,
                        AssignedDate: f.getDateString(x),
                        AssignedTime: u.assignedTime,
                        dayDelta: s.days(),
                        byAssigned: true
                    },
                    t, p, q;
                if (m.isEmptier(w)) {
                    r.DueDate = f.getDateString(x)
                } else {
                    r.DueDate = f.getDateString(w)
                }
                if (!_.isUndefined(u.due) && u.due instanceof Date) {
                    t = u.due;
                    t.setDate(t.getDate() + s.days());
                    r.DueDate = f.getDateString(t)
                } else {
                    if (!_.isUndefined(u.assigned) && u.assigned instanceof Date) {
                        p = u.assigned;
                        p.setDate(p.getDate() + s.days());
                        r.AssignedDate = f.getDateString(p);
                        r.byAssigned = false
                    }
                }
                p3.rV(new a.Vs.ConfirmMoveModal(r), p3.Layout.Containers.Modal, true);
                p3.showModal(p3.Layout.Containers.Modal);
                q = function() {
                    $("#calendar-main-view").trigger("updateAssignments");
                    p3.Layout.Containers.Modal.off("hidden.bs.modal", q)
                };
                p3.Layout.Containers.Modal.on("hidden.bs.modal", q);
                a.Data.StartDate = undefined
            }
        };
        if (_.isUndefined(p3.Data.LMS)) {
            p3.Data.LMS = {}
        }
        if (o.leadSectionId) {
            if (_.isUndefined(p3.Data.LMS.AssignmentCenterDate)) {
                p3.Data.LMS.AssignmentCenterDate = f.localDateTime()
            }
            n.month = p3.Data.LMS.AssignmentCenterDate.getMonth();
            n.year = p3.Data.LMS.AssignmentCenterDate.getFullYear();
            n.date = p3.Data.LMS.AssignmentCenterDate.getDate();
            n.defaultDate = p3.Data.LMS.AssignmentCenterDate
        } else {
            if (_.isUndefined(p3.Data.LMS.saCaldate) || typeof p3.Data.LMS.saCaldate.getMonth !== "function") {
                p3.Data.LMS.saCaldate = f.localDateTime()
            }
            n.month = p3.Data.LMS.saCaldate.getMonth();
            n.year = p3.Data.LMS.saCaldate.getFullYear();
            n.date = p3.Data.LMS.saCaldate.getDate();
            n.defaultDate = p3.Data.LMS.saCaldate
        }
        if (_.isUndefined(p3.Data.LMS.calendarView)) {
            p3.Data.LMS.calendarView = "month"
        }
        if (o.leadSectionId) {
            p3.Data.LMS.previousCalView = p3.Data.LMS.SectionCalendarView
        } else {
            p3.Data.LMS.previousCalView = p3.Data.LMS.calendarView
        }
        if ($(window).width() < 979) {
            p3.Data.LMS.calendarView = "basicDay";
            p3.Data.LMS.sectionCalendarView = "basicDay"
        }
        n.defaultView = p3.Data.LMS.calendarView;
        $("#calendar-container").fullCalendar(n)
    };
    a.Us.updateHeaderDisplay = function(t) {
        var p = t.start.local().toDate(),
            o = t.end.local().toDate(),
            n, q = "",
            s, r;
        switch (t.name) {
            case "basicDay":
                q = f.displayDate(f.getDateString(p), "fullDate");
                r = f.displayDate(f.getDateString(p), "shortMonthDayYear");
                break;
            case "basicWeek":
                n = new Date(o.getTime() - (24 * 60 * 60 * 1000));
                q = f.getDateRangeString(p, n);
                break;
            case "month":
                n = new Date(p.getTime() + (8 * 24 * 60 * 60 * 1000));
                q = f.displayDate(f.getDateString(n), "monthYear");
                break
        }
        $("#date-display-label").html(q);
        $("#small-date-display-label").html(q);
        $("#mobile-date-display-label").html(r);
        s = f.localDateTime();
        if (s > p && s < o) {
            $("#button-today").addClass("active")
        } else {
            $("#button-today").removeClass("active")
        }
        $("#view-buttons .btn-inverseCal").removeClass("active");
        switch (t.name) {
            case "basicWeek":
                $("#week-view").addClass("active");
                break;
            case "month":
                $("#month-view").addClass("active");
                break;
            case "basicDay":
                $("#day-view").addClass("active");
                break
        }
    };
    a.Us.GenerateEventCollection = function(F, H, v, q) {
        var u = new Bbc(),
            y = "#d6d6d6",
            B = "#f3f3f3",
            C = "#c6c4c4",
            o = "#d4f1fa",
            E = "#fbe5e4",
            x = "#dcf3dc",
            A = "#f9ecd9",
            n = "",
            p = "",
            r = "",
            s = "",
            K = "",
            D = p3.Data.Context.getSelectedPersona().Id,
            G = false,
            w, I, t, z = "",
            J = "";
        H.each(function(L) {
            r = "";
            G = false;
            switch (D) {
                case 1:
                    if (L.get("Major")) {
                        n = y
                    } else {
                        n = B
                    }
                    p = C;
                    break;
                case 2:
                    if (L.get("HasGrade") && !L.get("DropBoxInd") && !L.get("AssessmentInd")) {
                        n = x
                    } else {
                        switch (L.get("AssignmentStatus")) {
                            case -1:
                                n = o;
                                if (L.get("DropBoxInd")) {
                                    G = true
                                }
                                break;
                            case 3:
                                n = o;
                                break;
                            case 0:
                            case 6:
                                n = A;
                                if (L.get("drop_box_ind")) {
                                    G = true
                                }
                                break;
                            case 1:
                            case 4:
                                n = x;
                                break;
                            case 2:
                                n = E;
                                break
                        }
                    }
                    p = n;
                    break;
                case 3:
                case 5:
                    if (L.get("GradeBookInd")) {
                        J = '<br><span class="label ';
                        w = L.get("GradedCount");
                        if (w > 0) {
                            if (w == L.get("NumEnrolled")) {
                                n = x;
                                J += 'label-success">'
                            } else {
                                n = A;
                                J += 'label-warning">'
                            }
                        } else {
                            n = E;
                            J += 'label-important label-danger">'
                        }
                        J += w + " of " + L.get("NumEnrolled") + "</span><br />"
                    } else {
                        n = o;
                        J = "<br />"
                    }
                    p = n;
                    break
            }
            K = '<span class="calendar-title-text" style="font-weight:normal;">';
            z = "";
            s = "";
            if (L.get("Major")) {
                z = "Major:"
            }
            z += L.get("AssignmentDescription");
            if (L.get("AssessmentInd") && L.get("AssessmentId") > 0) {
                if (D == 3 || D == 5 || D == 20) {
                    r = '"#assessmentsectiondetail/' + L.get("AssignmentId") + "/" + L.get("AssignmentIndexId") + '/0"';
                    s = ' <a class="assign-title-link" href=' + r + ">" + z + "</a>"
                } else {
                    if ((L.get("HasGrade") || L.get("ShowReport")) && (L.get("AssignmentStatus") == 1 || L.get("AssignmentStatus") == 3 || L.get("AssignmentStatus") == 4) && !L.get("AssessmentLocked")) {
                        r = '"#assessmentdetail/' + L.get("AssignmentId") + "/" + L.get("AssignmentIndexId") + "/0/" + p3.Data.Context.get("UserInfo").UserId + '/0"';
                        s = ' <a class="assign-title-link" href=' + r + ">" + z + "</a>"
                    }
                }
            } else {
                if (L.get("DiscussionInd")) {
                    if (D == 3 || D == 5 || D == 20) {
                        r = '"#discussionsectiondetail/' + L.get("AssignmentId") + "/" + L.get("AssignmentIndexId") + '/0"';
                        s = ' <a class="assign-title-link" href=' + r + ">" + z + "</a>"
                    } else {
                        if (D == 2) {
                            r = '"#discussiondetail/' + L.get("AssignmentId") + "/" + L.get("AssignmentIndexId") + '"';
                            s = ' <a class="assign-title-link" href=' + r + ">" + z + "</a>"
                        }
                    }
                } else {
                    if (!L.get("AssessmentInd") && !G && ((L.get("AssignmentLongDescription") != "" && L.get("AssignmentLongDescription") != null) || L.get("GradeBookInd") || L.get("DropBoxInd") || L.get("HasDownloads") || L.get("HasLinks"))) {
                        r = '"' + e.Us.BuildAssignmentDetailLink(L.get("AssignmentId"), L.get("AssignmentIndexId"), null, 0) + '"';
                        s = ' <a class="assign-title-link" href=' + r + ">" + z + "</a>"
                    }
                }
            }
            if (s.length > 0) {
                K += s
            } else {
                K += z
            }
            if (L.get("AssessmentInd")) {
                K += '<br><span class="calendar-secondary-text" style="font-size:11px">Assessment</span>'
            }
            if (L.get("DropBoxInd")) {
                K += '<br><span class="calendar-secondary-text" style="font-size:11px">Online Submission</span>'
            }
            if (L.get("DiscussionInd")) {
                K += '<br><span class="calendar-secondary-text" style="font-size:11px">Discussion</span>'
            }
            if (L.get("RubricInd")) {
                K += '<br><span class="calendar-secondary-text" style="font-size:11px">Rubric</span>'
            }
            K += J + a.Us.ltiSecondaryText(L.get("LtiInd"), L.get("LtiProviderName"), L.get("LtiConfigInd"), r, q, D);
            switch (v) {
                case 0:
                case 1:
                    K += '<br><span class="calendar-date-text">Due: ' + f.displayDate(L.get("DateDue"), "shortDayMonthDate") + '</span><br><span class="calendar-secondary-text">Assigned: ' + f.displayDate(L.get("DateAssigned"), "shortDayMonthDate");
                    break
            }
            if (D == 2) {
                K += e.Us.AssignmentStatusLabel(L.toJSON(), false, true) + e.Us.AssignmentActionLink(L.toJSON(), false, true)
            }
            I = v == 1 ? f.getDate(L.get("DateDue")) : f.getDate(L.get("DateAssigned"));
            t = v == 2 ? new Date(new Date(f.getDate(L.get("DateDue"))).getTime() + 86400000) : "";
            u.add({
                assignmentId: L.get("AssignmentId"),
                assignmentIndexId: L.get("AssignmentIndexId"),
                title: K,
                due: v == 0 ? f.getDate(L.get("DateDue")) : "",
                assigned: v == 1 ? f.getDate(L.get("DateAssigned")) : "",
                assignedTime: L.get("AssignmentTime"),
                start: I,
                end: t,
                canEdit: q,
                backgroundColor: n,
                borderColor: p,
                assessmentInd: L.get("AssessmentInd"),
                assessmentId: L.get("AssessmentId"),
                assessmentLocked: L.get("AssessmentLocked"),
                sectionId: F,
                discussionInd: L.get("DiscussionInd"),
                allDay: true
            })
        });
        return u
    };
    a.Us.GenerateCenterEventCollection = function(I, w, r, L) {
        var v = new Bbc(),
            A = "#d6d6d6",
            D = "#f3f3f3",
            E = "#c6c4c4",
            o = "#d4f1fa",
            G = "#fbe5e4",
            y = "#dcf3dc",
            C = "#f9ecd9",
            n = "",
            p = "",
            s = "",
            t = "",
            M = "",
            K = "",
            F = p3.Data.Context.getSelectedPersona().Id,
            H = false,
            x, z, J, q = "",
            u, B = "";
        I.each(function(N) {
            s = "";
            t = "";
            K = "";
            H = false;
            switch (F) {
                case 1:
                    if (N.get("major")) {
                        n = A
                    } else {
                        n = D
                    }
                    p = E;
                    break;
                case 2:
                    if (N.get("has_grade") && !N.get("drop_box_ind") && !N.get("assessment_ind")) {
                        n = y
                    } else {
                        switch (N.get("assignment_status")) {
                            case -1:
                                n = o;
                                if (N.get("drop_box_ind")) {
                                    H = true
                                }
                                break;
                            case 3:
                                n = o;
                                break;
                            case 0:
                            case 6:
                                n = C;
                                if (N.get("drop_box_ind")) {
                                    H = true
                                }
                                break;
                            case 1:
                            case 4:
                                n = y;
                                break;
                            case 2:
                                n = G;
                                break;
                            case 5:
                                n = o;
                                break
                        }
                    }
                    p = n;
                    break;
                case 3:
                case 5:
                    if (N.get("inc_grade_book")) {
                        K = '<span style="padding:0px 4px;" class="label ';
                        x = N.get("graded_count");
                        if (x > 0) {
                            if (x == N.get("enroll_count")) {
                                n = y;
                                K += 'label-success">'
                            } else {
                                n = C;
                                K += 'label-warning">'
                            }
                        } else {
                            n = G;
                            K += 'label-important label-danger">'
                        }
                        K += x + " of " + N.get("enroll_count") + "</span>"
                    } else {
                        n = o
                    }
                    p = n;
                    break
            }
            M = '<span class="calendar-title-text" style="font-weight:normal;">';
            B = "";
            if (N.get("major")) {
                B = "Major:"
            }
            B += N.get("short_description") + '</span><br><span class="calendar-secondary-text">' + N.get("groupname") + "</span>";
            if (N.get("assessment_ind") && N.get("assessment_id") > 0) {
                if (F == 3 || F == 5 || F == 20) {
                    s = '"#assessmentsectiondetail/' + N.get("assignment_id") + "/" + N.get("assignment_index_id") + '/0"';
                    t = ' <a class="assign-title-link" href=' + s + ">" + B + "</a>"
                } else {
                    if (F == 1 && (N.get("has_grade") || N.get("show_report")) && (N.get("assignment_status") == 1 || N.get("assignment_status") == 3 || N.get("assignment_status") == 4) && !N.get("assessment_locked")) {
                        s = '"#assessmentdetail/' + N.get("assignment_id") + "/" + N.get("assignment_index_id") + "/0/" + L + '/0"';
                        t = ' <a class="assign-title-link" href=' + s + ">" + B + "</a>"
                    } else {
                        if ((N.get("has_grade") || N.get("show_report")) && (N.get("assignment_status") == 1 || N.get("assignment_status") == 3 || N.get("assignment_status") == 4) && !N.get("assessment_locked")) {
                            s = '"#assessmentdetail/' + N.get("assignment_id") + "/" + N.get("assignment_index_id") + "/0/" + p3.Data.Context.get("UserInfo").UserId + '/0"';
                            t = ' <a class="assign-title-link" href=' + s + ">" + B + "</a>"
                        }
                    }
                }
            } else {
                if (N.get("discussion_ind")) {
                    if (F == 3 || F == 5 || F == 20) {
                        s = '"#discussionsectiondetail/' + N.get("assignment_id") + "/" + N.get("assignment_index_id") + '/0"';
                        t = ' <a class="assign-title-link" href=' + s + ">" + B + "</a>"
                    } else {
                        if (F == 2) {
                            s = '"#discussiondetail/' + N.get("assignment_id") + "/" + N.get("assignment_index_id") + '"';
                            t = ' <a class="assign-title-link" href=' + s + ">" + B + "</a>"
                        } else {
                            if (F == 1) {
                                s = '"' + e.Us.BuildAssignmentDetailLink(N.get("assignment_id"), N.get("assignment_index_id"), null, 0) + '"';
                                t = ' <a class="assign-title-link" href=' + s + ">" + B + "</a>"
                            }
                        }
                    }
                } else {
                    if (!N.get("assessment_ind") && !H && ((N.get("long_description") !== "" && N.get("long_description") !== null) || N.get("inc_grade_book") || N.get("drop_box_ind") || N.get("has_download") || N.get("has_link"))) {
                        var O;
                        if (L) {
                            O = L
                        } else {
                            O = null
                        }
                        s = '"' + e.Us.BuildAssignmentDetailLink(N.get("assignment_id"), N.get("assignment_index_id"), O, 0) + '"';
                        t = ' <a class="assign-title-link" href=' + s + ">" + B + "</a>"
                    }
                }
            }
            if (t.length > 0) {
                M += t
            } else {
                M += B
            }
            if (N.get("assessment_ind")) {
                M += '<div class="calendar-secondary-text" style="font-size:11px">Assessment</div>'
            }
            if (N.get("drop_box_ind")) {
                M += '<div class="calendar-secondary-text" style="font-size:11px">Online Submission</div>'
            }
            if (N.get("discussion_ind")) {
                M += '<div class="calendar-secondary-text" style="font-size:11px">Discussion</div>'
            }
            if (N.get("rubric_ind")) {
                M += '<div class="calendar-secondary-text" style="font-size:11px">Rubric</div>'
            }
            M += a.Us.ltiSecondaryText(N.get("lti_ind"), N.get("lti_provider_name"), N.get("lti_config_ind"), s, r, F);
            switch (w) {
                case 0:
                case 1:
                    M += '<div class="calendar-date-text">Due: ' + f.displayDate(N.get("date_due"), "shortDayMonthDate") + '</div><div class="calendar-secondary-text">Assigned: ' + f.displayDate(N.get("date_assigned"), "shortDayMonthDate") + "</div>";
                    break
            }
            q = "<div>" + M + "</div>";
            if (K.length > 0) {
                q += '<div class="clearfix mt-10 mb-10">' + K + "</div>"
            }
            if (F == 2) {
                q += e.Us.AssignmentStatusLabel(N.toJSON(), true, true) + "<br>" + e.Us.AssignmentActionLink(N.toJSON(), true, true)
            }
            J = w == 1 ? f.getDate(N.get("date_due")) : f.getDate(N.get("date_assigned"));
            u = w == 2 ? new Date(f.getDate(N.get("date_due")).getTime() + 86400000) : "";
            z = {
                assignmentId: N.get("assignment_id"),
                assignmentIndexId: N.get("assignment_index_id"),
                sectionId: N.get("section_id"),
                title: q,
                sectionName: N.get("groupname"),
                due: w == 0 ? f.getDate(N.get("date_due")) : "",
                assigned: w == 1 ? f.getDate(N.get("date_assigned")) : "",
                assignedTime: N.get("AssignmentTime"),
                start: J,
                end: u,
                canEdit: r,
                backgroundColor: n,
                borderColor: p,
                assessmentInd: N.get("assessment_ind"),
                assessmentId: N.get("assessment_id"),
                assessmentLocked: N.get("assessment_locked"),
                discussionInd: N.get("discussion_ind"),
                allDay: true
            };
            v.add(z)
        });
        return v
    };
    a.Us.getSectionStatusFilterList = function() {
        var o = "",
            p = false,
            n;
        if (p3.Data.LMS && p3.Data.LMS.sectionFilterStatus) {
            for (n = 0; n < p3.Data.LMS.sectionFilterStatus.length; n++) {
                if (p3.Data.LMS.sectionFilterStatus[n].Selected) {
                    if (o.length > 0) {
                        o += ","
                    }
                    o += p3.Data.LMS.sectionFilterStatus[n].Status
                } else {
                    p = true
                }
            }
            if (!p) {
                o = ""
            }
        }
        return o
    };
    a.Us.ltiSecondaryText = function(q, r, p, o, n, s) {
        var t = "";
        if (q || false) {
            if (!(p || false) && (n || false) && (s || 0) === 3) {
                if (o !== null && o.length > 0) {
                    t = '<br><span class="calendar-secondary-text"><i class="p3icon-warning"></i>&nbsp;' + r + "<a href=" + o + "> Setup</a></span>"
                } else {
                    t = '<br><span class="calendar-secondary-text"><i class="p3icon-warning"></i>&nbsp;' + r + "</span>"
                }
            } else {
                t = '<br><span class="calendar-secondary-text">' + r + "</span>"
            }
        }
        return t
    }
}(p3.module("LMS/shared/academiccalendar")));
(function(b) {
    var h = p3.module("shared/task"),
        c = p3.module("LMS/advisorybulletinboard"),
        f = p3.module("LMS/roster"),
        e = p3.module("LMS/groupPageEdit"),
        d = p3.module("grading"),
        g = p3.module("schedule"),
        a = p3.module("courserequestadvisorworklist"),
        i = p3.module("LMS/topic");
    b.Cs.Section = Bbc.extend({
        initialize: function(j, k) {
            this.sectionId = k.sectionId || 0
        },
        url: function() {
            return aP + "datadirect/SectionInfoView/?format=json&sectionId=" + this.sectionId + "&associationId=1"
        }
    });
    b.Pages = [{
        Id: 1,
        ContentId: 433,
        Label: "Bulletin Board",
        RoutePage: "bulletinboard",
        IconClass: "p3icon-page",
        Display: function(j) {
            var k = new e.Vs.LayoutView({
                sectionId: b.Data.sectionId,
                leadSectionId: b.Data.leadSectionId,
                content: b.Data.contentTypes,
                userHasFullAccess: b.Data.userHasFullAccess,
                isOwner: b.Data.IsOwner,
                isManager: b.Data.isManager,
                associationId: 9,
                contextLabelId: 22,
                preview: false,
                layoutId: b.Data.layoutId,
                pendingInd: false
            });
            p3.rV(k, j, true)
        },
        Active: true
    }, {
        Id: 2,
        ContentId: 386,
        Label: "Topics",
        RoutePage: "topics",
        IconClass: "p3icon-topics",
        HTMLID: "topics-btn",
        LinkId: "topics-link",
        Display: function(j) {
            p3.rV(new i.Vs.TopicManageView({
                sectionId: b.Data.sectionId,
                leadSectionId: b.Data.leadSectionId,
                active: true,
                future: false,
                expired: false,
                userHasFullAccess: b.Data.userHasFullAccess,
                isOwner: b.Data.IsOwner,
                isManager: b.Data.isManager,
                content: b.Data.contentTypes,
                levelNum: b.Data.levelNum || -1,
                durationId: b.Data.durationId,
                schoolYearLabel: b.Data.schoolYear,
                contextLabelId: 22
            }), j, true)
        },
        Active: false
    }, {
        Id: 5,
        ContentId: 87,
        Label: "Schedule",
        RoutePage: "schedule",
        IconClass: "p3icon-schedule",
        Display: function(j) {
            p3.rV(new g.Vs.MySchedule({
                data: aP + "DataDirect/ScheduleListSection/?format=json&sectionId=" + b.Data.sectionId + "&viewerPersonaId=" + p3.Data.Context.getSelectedPersona().Id,
                scheduleSectionId: b.Data.sectionId
            }), j, false)
        },
        Active: false
    }, {
        Id: 6,
        ContentId: 120,
        Label: "Grading",
        RoutePage: "grading",
        IconClass: "p3icon-grading",
        Display: function(j) {
            p3.rV(new d.Vs.LayoutView({
                sectionId: b.Data.leadSectionId,
                nonLeadsectionId: b.Data.sectionId
            }), j, true)
        },
        Active: false
    }, {
        Id: 7,
        ContentId: 111,
        Label: "Course Requests",
        RoutePage: "courserequests",
        IconClass: "p3icon-courseRequest",
        Display: function(j) {
            p3.rV(new a.Vs.LayoutView({
                sectionId: b.Data.leadSectionId
            }), j, true)
        },
        Active: false
    }, {
        Id: 8,
        ContentId: 434,
        Label: "Advisees",
        RoutePage: "advisees",
        IconClass: "p3icon-roster",
        Display: function(j) {
            p3.rV(new f.Vs.RosterView({
                sectionId: b.Data.sectionId,
                leadSectionId: b.Data.leadSectionId,
                durationId: b.Data.durationId,
                associationId: 9,
                enableSearch: true,
                isOwner: b.Data.IsOwner
            }), j, true)
        },
        Active: false
    }];
    b.Data = {};
    b.Ms.Section = Bbm.extend({
        url: function() {
            return ""
        }
    });
    b.Cs.Section = Bbc.extend({
        model: b.Ms.Section,
        initialize: function(j, k) {
            this.sectionId = k.sectionId || 0
        },
        url: function() {
            return aP + "datadirect/SectionInfoView/?format=json&sectionId=" + this.sectionId + "&associationId=9"
        }
    });
    b.Ms.Content = Bbm.extend({
        idAttribute: "ContentId",
        url: function() {
            return ""
        }
    });
    b.Cs.Content = Bbc.extend({
        model: b.Ms.Content,
        initialize: function(j, k) {
            this.sectionId = k.sectionId || 0;
            this.leadSectionId = k.leadSectionId || 0
        },
        url: function() {
            return aP + "datadirect/GroupPossibleContentGet/?format=json&leadSectionId=" + this.leadSectionId
        }
    });
    b.Data = {};
    b.Data.leadSectionId = 0;
    b.Data.durationId = 0;
    b.Data.sectionId = 0;
    b.Data.contentTypes = null;
    b.Data.MainViewRendered = false;
    b.Data.RenderedSectionId = 0;
    b.Data.teacherId = 0;
    b.Vs.MainClassView = Bb.View.extend({
        template: "GroupPage/grouppage.mainview.template.html",
        initialize: function(j) {
            this.Containers = {};
            if (j) {
                b.Data.sectionId = b.Data.RenderedSectionId = this.SectionId = j.SectionId
            } else {
                b.Data.sectionId = b.Data.RenderedSectionId = this.SectionId = 0
            }
            b.Data.MainViewRendered = true
        },
        dispose: function() {
            b.Data.MainViewRendered = false
        },
        render: function(j) {
            var k = this;
            p3.fT(k.template, function(m) {
                k.$el.html(m({}));
                $(j).html(k.el);
                k.Containers.Navigation = $("#grouppagenavmenu");
                k.Containers.MainContent = $("#grouppagemaincontainer");
                var l = new b.Cs.Section({}, {
                    sectionId: k.SectionId
                });
                p3.rV(new b.Vs.NavigationView({
                    ParentView: k,
                    collection: l
                }), k.Containers.Navigation, false);
                l.fetch({
                    error: function() {
                        p3.displayError("Error loading section information")
                    }
                })
            })
        }
    });
    b.Vs.NavigationView = Bb.View.extend({
        template: "Advisory/navigationmenu.template.html",
        initialize: function(j) {
            this.collection.bind("reset change", this.renderTemplate, this);
            this.Containers = {};
            if (j) {
                this.ParentView = j.ParentView
            }
            this.enableScrollNav()
        },
        dispose: function() {
            this.disableScrollNav()
        },
        renderTemplate: function() {
            var D = this,
                B, q, r, j, A, o, x, w, v, p, C, t, n, s, u, m, z, l = false,
                k, y = [];
            m = new Bbc(D.collection.filter(function(E) {
                return E.get("Current") === 1
            }));
            D.collection.each(function(E) {
                if ((E.get("Current") === 1) || ((m.length < 1) && (E.get("LeadSectionId") === E.get("Id")))) {
                    B = E.get("Teacher");
                    q = E.get("GroupName");
                    r = E.get("Identifier");
                    j = E.get("Block");
                    A = E.get("Room");
                    o = E.get("Duration");
                    p = E.get("DurationId");
                    n = E.get("Description");
                    x = E.get("Level");
                    if (E.get("Length") === 1) {
                        w = "1 Term"
                    } else {
                        w = E.get("Length") + " Terms"
                    }
                    B = E.get("Teacher");
                    v = E.get("LeadSectionId");
                    t = E.get("IsOwner");
                    s = E.get("IsManager");
                    C = E.get("TeacherId");
                    u = E.get("LayoutId")
                }
            });
            b.Data.IsOwner = t;
            b.Data.isManager = s;
            b.Data.leadSectionId = v;
            b.Data.durationId = p;
            b.Data.teacherId = C;
            z = p3.Data.Context.getSelectedPersona().Id;
            b.Data.userHasFullAccess = (z === 3 && b.Data.IsOwner) || b.Data.isManager;
            b.Data.layoutId = u;
            if (B !== "" || r || j || A || o || p || n || x || w) {
                l = true
            }
            k = new b.Cs.Content({}, {
                sectionId: b.Data.sectionId,
                leadSectionId: b.Data.leadSectionId
            });
            k.fetch({
                error: function() {
                    p3.displayError("Error loading available content")
                },
                success: function() {
                    b.Data.contentTypes = k;
                    k.each(function(G) {
                        var F = G.get("ContentId"),
                            I, H = true,
                            J;
                        I = _.find(b.Pages, function(K) {
                            return K.ContentId === F
                        });
                        H = G.get("ShowContentType");
                        if (H & F === 386) {
                            H = b.Data.userHasFullAccess || G.get("EditorAccess");
                            if (!H) {
                                J = new i.Cs.Topic({}, {
                                    sectionId: 0,
                                    leadSectionId: b.Data.leadSectionId,
                                    active: true,
                                    future: false,
                                    expired: false
                                });
                                J.fetch({
                                    async: false,
                                    success: function() {
                                        if (J.length > 0) {
                                            H = true
                                        }
                                    },
                                    error: function() {
                                        p3.displayError("Error loading topics")
                                    }
                                })
                            }
                        }
                        if (I && H) {
                            y.push({
                                sort: I.Id,
                                title: I.Label,
                                iconClass: I.IconClass,
                                status: I.Active ? "active" : "inactive",
                                link: h.Us.getUrlById(53063, b.Data.sectionId + "/" + I.RoutePage),
                                pId: I.Id
                            });
                            I.Enabled = true
                        } else {
                            if (I) {
                                I.Enabled = false
                            }
                        }
                    });
                    y = _.sortBy(y, "sort");
                    p3.fT(D.template, function(F) {
                        D.$el.html(F({
                            Info: l,
                            Teacher: B,
                            GroupName: q,
                            Identifier: r,
                            Block: j,
                            Room: A,
                            Duration: o,
                            Level: x,
                            Length: w,
                            Description: n,
                            navigationItems: y
                        }))
                    });
                    var E = _.find(b.Pages, function(F) {
                        return F.Active
                    });
                    if (E && E.Enabled) {
                        E.Display($("#grouppagemaincontainer"))
                    } else {
                        p3.rV(new c.Vs.ClassPageLayoutView({
                            sectionId: 0,
                            leadSectionId: k.leadSectionId,
                            content: k,
                            teacherId: C
                        }), $("#grouppagemaincontainer"), false)
                    }
                }
            });
            return this
        },
        events: {
            "click #section-description-toggle": "toggleDescription",
            "click [data-pid]": "switchTab"
        },
        render: function(j) {
            $(j).append(this.el);
            return this
        },
        toggleDescription: function(k) {
            var j = $("#section-description-content");
            if (j && j.filter(":visible").length) {
                j.hide(400)
            } else {
                j.show(400)
            }
            return false
        },
        switchTab: function(j) {
            if ($(j.currentTarget).attr("data-pid") === "4") {
                _.find(b.Pages, function(k) {
                    return k.Id === 4
                }).Display();
                return false
            }
        },
        enableScrollNav: function(l) {
            var k = $(document),
                j = $(".subnavbar"),
                m = j.length && j.offset().top - 120;

            function n() {
                if (j.length === 0) {
                    j = $(".subnavbar");
                    m = j.length && j.offset().top - 120
                }
                var p = k.scrollTop(),
                    o = j.hasClass("subnavbar-fixed");
                if (p >= m && !o) {
                    j.addClass("subnavbar-fixed")
                } else {
                    if (p <= m && o) {
                        j.removeClass("subnavbar-fixed")
                    }
                }
            }
            k.on("scroll", n)
        },
        disableScrollNav: function(k) {
            var j = $(document);
            j.off("scroll")
        }
    });
    b.Us.LoadPage = function(j, l) {
        b.Data.studentId = undefined;
        p3.loadingIcon("#grouppagemaincontainer");
        var k;
        _.each(b.Pages, function(m) {
            if (m.RoutePage.toLowerCase() === l.toLowerCase()) {
                m.Active = true;
                k = m
            } else {
                m.Active = false
            }
        });
        if (!b.Data.MainViewRendered || b.Data.RenderedSectionId !== j) {
            p3.renderMainPage(new b.Vs.MainClassView({
                SectionId: j
            }))
        } else {
            if (k && k.Enabled) {
                k.Display($("#grouppagemaincontainer"));
                b.Us.SwitchTabs(k)
            }
        }
    };
    b.Us.SwitchTabs = function(k) {
        var j = $(".nav-tabs").children();
        $.each(j, function() {
            var l = $(this);
            if (l.data("pid") === k.Id) {
                l.removeClass("inactive");
                l.addClass("active")
            } else {
                if (l.hasClass("active")) {
                    l.removeClass("active");
                    l.addClass("inactive")
                }
            }
        })
    };
    p3.router().route("advisorypage/:id/:page", "advisorypage", b.Us.LoadPage)
}(p3.module("advisorypage")));
(function(c) {
    var l = p3.module("shared/task"),
        i = p3.Us.Enum,
        k = p3.module("report"),
        b = p3.module("LMS/assignment"),
        h = p3.Us.DateTime,
        j = p3.module("shared/feeds"),
        a = p3.module("LMS/shared/academiccalendar"),
        f = p3.Us.Culture,
        g = p3.module("shared/datepicker"),
        e = p3.module("LMS/Shared/AssignmentTools"),
        d = p3.module("lms/assignmentoptions"),
        m = p3.module("LMS/userTask");
    c.Ms.AssignmentStatusUpdate = Bbm.extend({
        url: function() {
            return aP + "assignment2/assignmentstatusupdate/?format=json&assignmentIndexId=" + this.get("assignmentIndexId") + "&assignmentStatus=" + this.get("assignmentStatus")
        }
    });
    c.Ms.SaveSettings = Bbm.extend({
        urlRoot: "assignment2/AssignmentSettingsSave"
    });
    c.Cs.Assignments = Bbc.extend({
        url: function() {
            return aP + "DataDirect/AssignmentCenterAssignments/?format=json"
        },
        filters: undefined,
        comparator: function(n) {
            return n.get("groupname")
        },
        changeSort: function(n) {
            if (!_.isUndefined(this.filters)) {
                this.comparator = this.filters[n]
            }
        }
    });
    c.Data = {};
    c.Data.Assignments = new c.Cs.Assignments();
    c.Data.Assignments.filters = {
        _statusPrepHelper: function(n, o) {
            var t = {
                    red: 0,
                    blue: 1,
                    orange: 2,
                    green: 3
                },
                u = n.get("assignment_status"),
                v = o.get("assignment_status"),
                p = "",
                q = "",
                r = -1,
                s = -1;
            switch (u) {
                case -1:
                    if (n.get("assessment_ind")) {
                        p = "Take";
                        r = t.blue
                    } else {
                        p = n.get("drop_box_ind") ? "Submit" : "To Do";
                        r = t.blue
                    }
                    break;
                case 0:
                    p = "In&nbsp;Progress";
                    r = t.orange;
                    break;
                case 1:
                    p = n.get("has_grade") ? "Graded" : "Completed";
                    r = t.green;
                    break;
                case 2:
                    p = "Overdue";
                    r = t.red;
                    break;
                case 3:
                    p = "Retake";
                    r = t.blue;
                    break;
                case 4:
                    p = "Graded";
                    r = t.green;
                    break
            }
            switch (v) {
                case -1:
                    if (o.get("assessment_ind")) {
                        q = "Take";
                        s = t.blue
                    } else {
                        q = o.get("drop_box_ind") ? "Submit" : "To Do";
                        s = t.blue
                    }
                    break;
                case 0:
                    q = "In&nbsp;Progress";
                    s = t.orange;
                    break;
                case 1:
                    q = o.get("has_grade") ? "Graded" : "Completed";
                    s = t.green;
                    break;
                case 2:
                    q = "Overdue";
                    s = t.red;
                    break;
                case 3:
                    q = "Retake";
                    s = t.blue;
                    break;
                case 4:
                    q = "Graded";
                    s = t.green;
                    break
            }
            return {
                n1: p,
                n2: q,
                p1: r,
                p2: s
            }
        },
        groupname: function(p, q) {
            var n = p.get("groupname") || "",
                o = q.get("groupname") || "";
            return n < o ? -1 : n > o ? 1 : 0
        },
        assignment_id: function(n) {
            return n.get("assignment_id")
        },
        short_description: function(p, q) {
            var n = p.get("short_description") || "",
                o = q.get("short_description") || "";
            return n < o ? -1 : n > o ? 1 : 0
        },
        date_assigned: function(n) {
            return f.getDate(n.get("date_assigned")).getTime()
        },
        date_due: function(n) {
            return f.getDate(n.get("date_due")).getTime()
        },
        assignment_index_id: function(n) {
            return n.get("assignment_index_id")
        },
        assignment_type: function(p, q) {
            var n = p.get("assignment_type") || "",
                o = q.get("assignment_type") || "";
            return n < o ? -1 : n > o ? 1 : 0
        },
        graded_count: function(n) {
            if (!n.get("inc_grade_book") || n.get("enroll_count") == 0) {
                return -1
            }
            return (n.get("graded_count") / n.get("enroll_count")) * 100
        },
        assignment_status: function(n, o) {
            var p = this.filters._statusPrepHelper(n, o),
                q;
            if (p.p1 === p.p2) {
                q = p.n1 < p.n2 ? -1 : p.n1 > p.n2 ? 1 : 0
            } else {
                q = p.p1 < p.p2 ? -1 : p.p1 > p.p2 ? 1 : 0
            }
            return q
        },
        groupname_invert: function(p, q) {
            var n = p.get("groupname") || "",
                o = q.get("groupname") || "";
            return n < o ? 1 : n > o ? -1 : 0
        },
        assignment_id_invert: function(n) {
            return -n.get("assignment_id")
        },
        short_description_invert: function(p, q) {
            var n = p.get("short_description") || "",
                o = q.get("short_description") || "";
            return n < o ? 1 : n > o ? -1 : 0
        },
        date_assigned_invert: function(n) {
            return -f.getDate(n.get("date_assigned")).getTime()
        },
        date_due_invert: function(n) {
            return -f.getDate(n.get("date_due")).getTime()
        },
        assignment_index_id_invert: function(n) {
            return -n.get("assignment_index_id")
        },
        assignment_type_invert: function(p, q) {
            var n = p.get("assignment_type") || "",
                o = q.get("assignment_type") || "";
            return n < o ? 1 : n > o ? -1 : 0
        },
        graded_count_invert: function(n) {
            if (!n.get("inc_grade_book") || n.get("enroll_count") == 0) {
                return 1
            }
            return -((n.get("graded_count") / n.get("enroll_count")) * 100)
        },
        assignment_status_invert: function(n, o) {
            var p = this.filters._statusPrepHelper(n, o),
                q;
            if (p.p1 === p.p2) {
                q = p.n1 < p.n2 ? 1 : p.n1 > p.n2 ? -1 : 0
            } else {
                q = p.p1 < p.p2 ? 1 : p.p1 > p.p2 ? -1 : 0
            }
            return q
        }
    };
    c.Vs.LayoutView = Bb.View.extend({
        template: "assignmentcenter/assignmentcenter.layout.template.html",
        id: "assignment-center",
        className: "pill-pane",
        events: {},
        initialize: function(n) {
            this.containerName = n.containerName && n.containerName.length > 0 ? n.containerName : "Assignments"
        },
        render: function(n) {
            $(n).append(this.el);
            var o = this;
            p3.fT(o.template, function(r) {
                o.$el.html(r({
                    printMode: o.options.print,
                    containerName: o.containerName && o.containerName.length > 0 ? o.containerName : "Assignments"
                }));
                if (o.options.print && p3.Data.LMS.AssignmentCenterSort && p3.Data.LMS.AssignmentCenterSort.length > 0) {
                    c.Data.Assignments.changeSort(p3.Data.LMS.AssignmentCenterSort)
                }
                if (o.options.showGrid) {
                    c.Data.showGrid = o.options.showGrid;
                    p3.Data.LMS.calendarView = "month"
                }
                var p = new c.Vs.ContentView({
                        studentId: o.options.studentId,
                        print: o.options.print
                    }),
                    q = new c.Vs.HeaderView({
                        studentId: o.options.studentId,
                        print: o.options.print
                    });
                p3.rV(p, $("#assignment-center-content-view"), false);
                p3.rV(q, $("#assignment-center-header-view"), false)
            })
        }
    });
    c.Vs.ContentView = Bb.View.extend({
        template: "assignmentcenter/assignmentcenter.content.template.html",
        events: {},
        render: function(n) {
            $(n).append(this.el);
            var o = this;
            p3.fT(o.template, function(q) {
                o.$el.html(q({}));
                var p = new c.Vs.AssignmentListView({
                    studentId: o.options.studentId,
                    print: o.options.print
                });
                p3.rV(p, $("#assignment-center-list-view"), false)
            })
        },
        listRefresh: function(n) {
            var o = jQuery.Event("listRefresh");
            o.date = n;
            $("#assignment-center-assignment-items").trigger(o)
        }
    });
    c.Vs.HeaderView = Bb.View.extend({
        template: "assignmentcenter/assignmentcenter.header.template.html",
        events: {
            "click .assignment-calendar-view": "showCalendar",
            "click .assignmentDisplayTypeFilter": "updateFilter",
            "click #lti-config-menu": "showLtiConfigList",
            "click #lti-config-btn": "showLtiConfigList",
            "click #add-assignment-btn": "addAssignment",
            "click #add-assignment-menu": "addAssignment",
            "click #add-assessment-btn": "addAssessment",
            "click #add-assessment-menu": "addAssessment",
            "click #add-discuss-btn": "addDiscussion",
            "click #add-discuss-menu": "addDiscussion",
            "click #settingsButton": "editSettings",
            "click #settings-menu": "editSettings",
            "click #filter-teacher-sections": "showSectionFilter",
            "click #filter-student-sections": "showSectionFilter",
            "click #filter-menu": "showSectionFilter",
            "click #filter-status": "showStatusFilter",
            "click #missing-assignment": "showMissingAssignmentList",
            "click #missing-assignment-menu": "showMissingAssignmentList",
            "click #filter-status-menu": "showStatusFilter",
            "click #previous-button": "movePrevious",
            "click #mobile-previous-button": "movePrevious",
            "click #next-button": "moveNext",
            "click #mobile-next-button": "moveNext",
            "click #button-today": "goToToday",
            "click #today-menu": "goToToday",
            "click #day-view": "setDayView",
            "click #week-view": "setWeekView",
            "click #month-view": "setMonthView",
            "click #ical-dropdown": "showICalMenu",
            "click #report-dropdown": "showReportMenu",
            "click button[data-target]": "openFeed",
            "click .report-link": "hideReportMenu",
            "click #print-button": "setPrintUrl",
            "click .dropdown-menu.range-dropdown": "rangeClick",
            "change #range-start-date": "setDateRange",
            "change #range-end-date": "setDateRange",
            "click #custom-view": "showDateRange",
            "click #add-task": "addTask"
        },
        initialize: function(n) {
            if (_.isUndefined(p3.Data.LMS) || !p3.Data.LMS.OptionsDefaulted) {
                d.Us.getAssignmentOptionDefaults()
            }
            if (n.print) {
                this.template = "assignmentcenter/assignmentcenter.printheader.template.html"
            }
        },
        render: function(n) {
            var p = this,
                o = {};
            $(n).append(this.el);
            p.getRenderDataMissingAssignments(o)
        },
        getRenderDataMissingAssignments: function(o) {
            var p = this,
                n;
            o.persona = p3.Data.Context.getSelectedPersona().Id;
            o.missingAssignmentInd = false;
            if (o.persona < 3) {
                n = new e.Ms.StudentMissingAssignmentCheck();
                n.fetch({
                    data: {
                        studentId: (p.options.studentId || p3.Data.Context.get("UserInfo").UserId)
                    },
                    success: function() {
                        o.missingAssignmentInd = n.hasMissingAssignments();
                        p.renderTemplate(o)
                    },
                    error: function() {
                        p3.displayError("Error loading missing assignment information");
                        o.missingAssignmentInd = true;
                        p.renderTemplate(o)
                    }
                })
            } else {
                p.renderTemplate(o)
            }
        },
        renderTemplate: function(s) {
            var x = this,
                v = (x.options.studentId || p3.Data.Context.get("UserInfo").UserId),
                r = p3.Data.Context.getSelectedPersona().Id,
                n, w = "",
                p = "",
                o, q, u, t, y;
            if (p3.Data.LMS.startRange) {
                w = f.getDateString(p3.Data.LMS.startRange)
            }
            if (p3.Data.LMS.endRange) {
                p = f.getDateString(p3.Data.LMS.endRange)
            }
            if (p3.Data.LMS.AssignmentCenterDate) {
                n = p3.Data.LMS.AssignmentCenterDate
            } else {
                n = f.localDateTime();
                p3.Data.LMS.AssignmentCenterDate = n
            }
            o = c.Us.GetDateRange(n);
            q = new j.Ms.iCalAssignmentsGet();
            q.fetch({
                async: false,
                data: {
                    personaId: p3.Data.Context.getSelectedPersona().Id,
                    userId: v,
                    sectionId: 0,
                    schoolYearLabel: p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel,
                    sdate: f.getDateString(o[0]).ApiFormat(),
                    edate: f.getDateString(o[2]).ApiFormat()
                }
            });
            e.Us.refreshLtiConfigSummary(0);
            u = new k.Cs.ReportList();
            if (!p3.Data.ReportList) {
                k.loadReportList({
                    success: function(z, A) {
                        u.remove(u.at(0));
                        if (k.hasAccessToReportId(261)) {
                            y = l.Us.getUrlById(1691, "__pd=gm_fv&pk=261");
                            t = new k.Ms.ReportList({
                                ReportName: "Assignment Counts - By Section",
                                Link: y
                            });
                            u.add(t)
                        }
                        if (k.hasAccessToReportId(328)) {
                            y = l.Us.getUrlById(1691, "__pd=gm_fv&pk=328");
                            t = new k.Ms.ReportList({
                                ReportName: "Assignments - By Section",
                                Link: y
                            });
                            u.add(t)
                        }
                        if (k.hasAccessToReportId(335)) {
                            y = l.Us.getUrlById(1691, "__pd=gm_fv&pk=335");
                            t = new k.Ms.ReportList({
                                ReportName: "Assignments Due - By Department or Grade",
                                Link: y
                            });
                            u.add(t)
                        }
                        if (k.hasAccessToReportId(80)) {
                            y = l.Us.getUrlById(1691, "__pd=gm_fv&pk=80");
                            t = new k.Ms.ReportList({
                                ReportName: "Roster Assignments",
                                Link: y
                            });
                            u.add(t)
                        }
                        if (k.hasAccessToReportId(215)) {
                            y = l.Us.getUrlById(1691, "pk=215&sid=" + v + "&vid=" + p3.Data.Context.get("UserInfo").UserId + "&ext=vw");
                            t = new k.Ms.ReportList({
                                ReportName: "View Assignment Grades",
                                Link: y
                            });
                            u.add(t)
                        }
                        if (k.hasAccessToReportId(247)) {
                            y = l.Us.getUrlById(1691, "pk=247&sid=" + v + "&vid=" + p3.Data.Context.get("UserInfo").UserId + "&ext=vw");
                            t = new k.Ms.ReportList({
                                ReportName: "View Assignment Grades w/ comments",
                                Link: y
                            });
                            u.add(t)
                        }
                        if (k.hasAccessToReportId(259)) {
                            y = l.Us.getUrlById(1691, "pk=259&ch=1&sid=" + v + "&vid=" + p3.Data.Context.get("UserInfo").UserId + "&ext=vw");
                            t = new k.Ms.ReportList({
                                ReportName: "Cumulative Grades",
                                Link: y
                            });
                            u.add(t)
                        }
                        p3.fT(x.template, function(D) {
                            var B = u.length > 0 ? u.toJSON() : false,
                                C = x.options.studentId > 0 ? x.options.studentId : 0;
                            x.$el.html(D({
                                reports: B,
                                studentId: C,
                                filter: p3.Data.LMS.AssignmentCenterfilter,
                                isStudent: r === 2,
                                missingAssignmentInd: s.missingAssignmentInd,
                                showEdit: (r === 3 && v === p3.Data.Context.get("UserInfo").UserId),
                                showAssess: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSESSMENTS),
                                view: p3.Data.LMS.calendarView,
                                iCalFeed: q.get("iCalLink"),
                                protocol: location.protocol,
                                host: location.host,
                                start: w,
                                end: p,
                                showDiscuss: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEDDISCUSSION),
                                lti: e.Data.LtiConfigSummary.toJSON(),
                                gridView: c.Data.showGrid
                            }));
                            if (c.Data.showGrid) {
                                x.showCalendar({});
                                c.Data.showGrid = false
                            }
                        })
                    }
                })
            } else {
                u.remove(u.at(0));
                if (k.hasAccessToReportId(261)) {
                    y = l.Us.getUrlById(1691, "__pd=gm_fv&pk=261");
                    t = new k.Ms.ReportList({
                        ReportName: "Assignment Counts - By Section",
                        Link: y
                    });
                    u.add(t)
                }
                if (k.hasAccessToReportId(328)) {
                    y = l.Us.getUrlById(1691, "__pd=gm_fv&pk=328");
                    t = new k.Ms.ReportList({
                        ReportName: "Assignments - By Section",
                        Link: y
                    });
                    u.add(t)
                }
                if (k.hasAccessToReportId(335)) {
                    y = l.Us.getUrlById(1691, "__pd=gm_fv&pk=335");
                    t = new k.Ms.ReportList({
                        ReportName: "Assignments Due - By Department or Grade",
                        Link: y
                    });
                    u.add(t)
                }
                if (k.hasAccessToReportId(80)) {
                    y = l.Us.getUrlById(1691, "__pd=gm_fv&pk=80");
                    t = new k.Ms.ReportList({
                        ReportName: "Roster Assignments",
                        Link: y
                    });
                    u.add(t)
                }
                if (k.hasAccessToReportId(215)) {
                    y = l.Us.getUrlById(1691, "pk=215&sid=" + v + "&vid=" + p3.Data.Context.get("UserInfo").UserId + "&ext=vw");
                    t = new k.Ms.ReportList({
                        ReportName: "View Assignment Grades",
                        Link: y
                    });
                    u.add(t)
                }
                if (k.hasAccessToReportId(247)) {
                    y = l.Us.getUrlById(1691, "pk=247&sid=" + v + "&vid=" + p3.Data.Context.get("UserInfo").UserId + "&ext=vw");
                    t = new k.Ms.ReportList({
                        ReportName: "View Assignment Grades w/ comments",
                        Link: y
                    });
                    u.add(t)
                }
                if (k.hasAccessToReportId(259)) {
                    y = l.Us.getUrlById(1691, "pk=259&ch=1&sid=" + v + "&vid=" + p3.Data.Context.get("UserInfo").UserId + "&ext=vw");
                    t = new k.Ms.ReportList({
                        ReportName: "Cumulative Grades",
                        Link: y
                    });
                    u.add(t)
                }
                p3.fT(x.template, function(B) {
                    var z = u.length > 0 ? u.toJSON() : false,
                        A = x.options.studentId > 0 ? x.options.studentId : 0;
                    x.$el.html(B({
                        reports: z,
                        studentId: A,
                        filter: p3.Data.LMS.AssignmentCenterfilter,
                        isStudent: r === 2,
                        missingAssignmentInd: s.missingAssignmentInd,
                        showEdit: (r === 3 && v === p3.Data.Context.get("UserInfo").UserId),
                        showAssess: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSESSMENTS),
                        view: p3.Data.LMS.calendarView,
                        iCalFeed: q.get("iCalLink"),
                        protocol: location.protocol,
                        host: location.host,
                        start: w,
                        end: p,
                        showDiscuss: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEDDISCUSSION),
                        lti: e.Data.LtiConfigSummary.toJSON(),
                        gridView: c.Data.showGrid
                    }));
                    if (c.Data.showGrid) {
                        x.showCalendar({});
                        c.Data.showGrid = false
                    }
                })
            }
            window.setTimeout(function() {
                g.Us.initialize(".date-input")
            }, 400)
        },
        showLtiConfigList: function(n) {
            e.Us.showLtiConfigList(0, n)
        },
        showMissingAssignmentList: function(n) {
            var p = this,
                o = p3.Data.Context.getSelectedPersona().Id;
            n.preventDefault();
            if (o < 3) {
                e.Us.showStudentMissingAssignmentList((p.options.studentId || p3.Data.Context.get("UserInfo").UserId))
            }
        },
        showCalendar: function(p) {
            p3.Data.LMS.DisplayCalendar = true;
            var o = "#assignment-center",
                n;
            if (this.options.studentId && this.options.studentId > 0) {
                o = "#child-main"
            }
            if (!p3.Data.LMS.calendarView) {
                p3.Data.LMS.calendarView = "month"
            } else {
                if (p3.Data.LMS.calendarView == "custom") {
                    p3.Data.LMS.calendarView = "month";
                    p3.Data.LMS.AssignmentCenterDate = f.localDateTime()
                }
            }
            n = new a.Vs.AssignmentCalendar({
                studentId: this.options.studentId,
                containerName: "Assignments"
            });
            p3.rV(n, $(o), true);
            return false
        },
        updateFilter: function(o) {
            var p = jQuery.Event("listRefresh"),
                n;
            $(".btn-group.open").removeClass("open");
            o.stopPropagation();
            o.preventDefault();
            p3.Data.LMS.AssignmentCenterfilter = parseInt($(o.currentTarget).data("filter"), 10);
            $(".assignmentDisplayTypeFilter").each(function(q) {
                $(this).find("i").removeClass("p3icon-radioOn").addClass("p3icon-radioOff");
                $(this).removeClass("active cal-filter-on").addClass("cal-filter-off")
            });
            if ($(o.currentTarget).hasClass("sec-75-bgc-hover")) {
                n = $(".assignmentDisplayTypeFilter[data-filter='" + p3.Data.LMS.AssignmentCenterfilter.toString() + "']")
            } else {
                n = $(o.currentTarget)
            }
            n.find("i").removeClass("p3icon-radioOff").addClass("p3icon-radioOn");
            n.addClass("active cal-filter-on").removeClass("cal-filter-off");
            p.filter = p3.Data.LMS.AssignmentCenterfilter.toString();
            $("#assignment-center-assignment-items").trigger(p)
        },
        addAssessment: function(n) {
            $(".btn-group.open").removeClass("open");
            b.Us.AddAssessmentView().on("saveAssessment", function(p, q) {
                var o = new b.Ms.Assignment();
                o.set("AssignmentId", p);
                o.fetch({
                    error: function() {
                        p3.displayError("Error loading assignment")
                    },
                    success: function(r, s) {
                        p3.router().navigate("#assessmentedit/" + p + "/" + o.get("SectionLinks")[0].AssignmentIndexId + "/0", true)
                    }
                })
            });
            return false
        },
        addDiscussion: function(o) {
            var p = this,
                n = b.Us.AddDiscussionView();
            $(".btn-group.open").removeClass("open");
            n.on("saveDiscussion", function(q, r) {
                setTimeout(function() {
                    $("#assignment-center-assignment-items").trigger($.Event("listRefresh"))
                }, 500)
            });
            n.on("saveAddDiscussion", function(q, r) {
                setTimeout(function() {
                    $("#assignment-center-assignment-items").trigger($.Event("listRefresh"))
                }, 500);
                p.addDiscussion()
            });
            return false
        },
        editSettings: function(n) {
            $(".btn-group.open").removeClass("open");
            p3.rV(new c.Vs.AssignmentSettings(), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        },
        addAssignment: function() {
            $(".btn-group.open").removeClass("open");
            b.Us.AddAssignmentView().on("saveAssignment", function() {
                setTimeout(function() {
                    $("#assignment-center-assignment-items").trigger($.Event("listRefresh"))
                }, 500)
            });
            return false
        },
        addTask: function(n) {
            n.preventDefault();
            $(".btn-group.open").removeClass("open");
            m.Us.UserTaskModal(new m.Ms.UserTask({
                UserId: this.options.studentId || p3.Data.Context.get("UserInfo").UserId
            }).on("save", function(p, q, o) {
                setTimeout(function() {
                    $("#assignment-center-assignment-items").trigger($.Event("listRefresh"))
                }, 500)
            }))
        },
        showSectionFilter: function(n) {
            var q, p, o;
            $(".btn-group.open").removeClass("open");
            n.preventDefault();
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
            if (!p3.Data.LMS.assignmentFilterSections) {
                p3.Data.LMS.assignmentFilterSections = new b.Cs.ExistingSections();
                p = p3.Data.Context.get("Groups");
                for (q = 0; q < p.length; q++) {
                    if (p[q].Association == 1 && p[q].CurrentEnrollment) {
                        if (p3.Data.LMS.assignmentFilterSections.pluck("SectionId").indexOf(p[q].SectionId) == -1) {
                            p3.Data.LMS.assignmentFilterSections.add({
                                SectionId: p[q].SectionId,
                                Selected: true,
                                Name: p[q].GroupName
                            })
                        }
                    }
                }
            }
            o = new a.Vs.SectionFilter();
            p3.rV(o, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            o.on("sectionsFiltered", function() {
                var r = jQuery.Event("listRefresh");
                r.filter = p3.Data.LMS.AssignmentCenterfilter.toString();
                $("#assignment-center-assignment-items").trigger(r)
            })
        },
        showStatusFilter: function(n) {
            if (_.isUndefined(p3.Data.LMS)) {
                p3.Data.LMS = {}
            }
            if (!p3.Data.LMS.assignmentFilterStatus) {
                p3.Data.LMS.assignmentFilterStatus = [];
                p3.Data.LMS.assignmentFilterStatus.push({
                    Status: -1,
                    Name: "Need Action",
                    LabelClass: "label-info",
                    Selected: true
                });
                p3.Data.LMS.assignmentFilterStatus.push({
                    Status: 0,
                    Name: "In Progress",
                    LabelClass: "label-warning",
                    Selected: true
                });
                if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSESSMENTS)) {
                    p3.Data.LMS.assignmentFilterStatus.push({
                        Status: 6,
                        Name: "Paused",
                        LabelClass: "label-warning",
                        Selected: true
                    })
                }
                p3.Data.LMS.assignmentFilterStatus.push({
                    Status: 2,
                    Name: "Overdue",
                    LabelClass: "label-danger",
                    Selected: true
                });
                p3.Data.LMS.assignmentFilterStatus.push({
                    Status: 1,
                    Name: "Completed",
                    LabelClass: "label-success",
                    Selected: true
                });
                if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK)) {
                    p3.Data.LMS.assignmentFilterStatus.push({
                        Status: 4,
                        Name: "Graded",
                        LabelClass: "label-success",
                        Selected: true
                    })
                }
            }
            var o = new a.Vs.StatusFilter({
                assignmentFilterStatus: p3.Data.LMS.assignmentFilterStatus
            });
            p3.rV(o, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            o.on("statusFiltered", function() {
                $("#assignment-center-assignment-items").trigger($.Event("listRefresh"))
            });
            n.preventDefault()
        },
        movePrevious: function(n) {
            var p, q, o;
            switch (p3.Data.LMS.calendarView) {
                case "basicDay":
                    p = new Date(p3.Data.LMS.AssignmentCenterDate.setDate(p3.Data.LMS.AssignmentCenterDate.getDate() - 1));
                    break;
                case "basicWeek":
                    p = new Date(p3.Data.LMS.AssignmentCenterDate.setDate(p3.Data.LMS.AssignmentCenterDate.getDate() - 7));
                    break;
                case "month":
                    q = p3.Data.LMS.AssignmentCenterDate.getFullYear();
                    o = p3.Data.LMS.AssignmentCenterDate.getMonth();
                    if (o == 0) {
                        o = 11;
                        q -= 1
                    } else {
                        o -= 1
                    }
                    p = new Date(q, o, 1);
                    break;
                case "custom":
                    break
            }
            if (p) {
                p3.Data.LMS.AssignmentCenterDate = p;
                $("#assignment-center-assignment-items").trigger(jQuery.Event("listRefresh"))
            }
        },
        moveNext: function(n) {
            var p, q, o;
            switch (p3.Data.LMS.calendarView) {
                case "basicDay":
                    p = new Date(p3.Data.LMS.AssignmentCenterDate.setDate(p3.Data.LMS.AssignmentCenterDate.getDate() + 1));
                    break;
                case "basicWeek":
                    p = new Date(p3.Data.LMS.AssignmentCenterDate.setDate(p3.Data.LMS.AssignmentCenterDate.getDate() + 7));
                    break;
                case "month":
                    q = p3.Data.LMS.AssignmentCenterDate.getFullYear();
                    o = p3.Data.LMS.AssignmentCenterDate.getMonth();
                    if (o == 11) {
                        o = 0;
                        q += 1
                    } else {
                        o += 1
                    }
                    p = new Date(q, o, 1);
                    break;
                case "custom":
                    break
            }
            if (p) {
                p3.Data.LMS.AssignmentCenterDate = p;
                $("#assignment-center-assignment-items").trigger(jQuery.Event("listRefresh"))
            }
        },
        goToToday: function(n) {
            switch (p3.Data.LMS.calendarView) {
                case "basicDay":
                case "basicWeek":
                case "month":
                    if (!$("#button-today").hasClass("active")) {
                        $("#button-today").addClass("active");
                        p3.Data.LMS.AssignmentCenterDate = f.localDateTime();
                        $("#assignment-center-assignment-items").trigger(jQuery.Event("listRefresh"))
                    }
                    break;
                case "custom":
                    break
            }
            n.preventDefault()
        },
        setDayView: function(n) {
            $("#view-buttons .btn-inverseCal").removeClass("active");
            $("#day-view").addClass("active");
            p3.Data.LMS.calendarView = "basicDay";
            $("#assignment-center-assignment-items").trigger(jQuery.Event("listRefresh"))
        },
        setWeekView: function(n) {
            $("#view-buttons .btn-inverseCal").removeClass("active");
            $("#week-view").addClass("active");
            p3.Data.LMS.calendarView = "basicWeek";
            $("#assignment-center-assignment-items").trigger(jQuery.Event("listRefresh"))
        },
        setMonthView: function(n) {
            $("#view-buttons .btn-inverseCal").removeClass("active");
            $("#month-view").addClass("active");
            p3.Data.LMS.calendarView = "month";
            $("#assignment-center-assignment-items").trigger(jQuery.Event("listRefresh"))
        },
        showICalMenu: function(n) {
            $("#report-menu").hide();
            $(".range-dropdown").hide();
            $("#ical-menu").toggle();
            return false
        },
        showReportMenu: function(n) {
            $("#ical-menu").hide();
            $(".range-dropdown").hide();
            $("#report-menu").toggle();
            return false
        },
        showDateRange: function(n) {
            if (!$("#custom-view").hasClass("active") && !_.isUndefined(p3.Data.LMS.startRange) && !_.isUndefined(p3.Data.LMS.endRange)) {
                $("#view-buttons .btn-inverseCal").removeClass("active");
                $("#custom-view").addClass("active");
                p3.Data.LMS.calendarView = "custom";
                $("#assignment-center-assignment-items").trigger(jQuery.Event("listRefresh"))
            }
            $("#ical-menu").hide();
            $("#report-menu").hide();
            $(".range-dropdown").toggle();
            return false
        },
        hideReportMenu: function(n) {
            $("#report-menu").hide()
        },
        openFeed: function(n) {
            $("#ical-menu").hide();
            window.open($(n.target).data().target, "_blank")
        },
        setPrintUrl: function(p) {
            var o = "",
                n, r, q;
            o = "&acf=" + p3.Data.LMS.AssignmentCenterfilter;
            o += "&cv=";
            if (_.isUndefined(p3.Data.LMS.calendarView)) {
                o += "month"
            } else {
                o += p3.Data.LMS.calendarView
            }
            if (!_.isUndefined(p3.Data.LMS.AssignmentCenterDate) && p3.Data.LMS.calendarView != "custom") {
                o += "&acd=" + p3.Data.LMS.AssignmentCenterDate.toJSON()
            } else {
                if (p3.Data.LMS.calendarView == "custom") {
                    o += "&rs=" + p3.Data.LMS.startRange.toJSON();
                    o += "&re=" + p3.Data.LMS.endRange.toJSON()
                }
            }
            if (!_.isUndefined(p3.Data.LMS.assignmentFilterSections)) {
                n = false;
                r = "";
                p3.Data.LMS.assignmentFilterSections.each(function(s) {
                    if (s.get("Selected")) {
                        if (r.length) {
                            r += ","
                        }
                        r += s.get("SectionId")
                    } else {
                        n = true
                    }
                });
                if (n) {
                    o += "&sf=" + r
                }
            }
            if (!_.isUndefined(p3.Data.LMS.assignmentFilterStatus)) {
                n = false;
                r = "";
                for (q = 0; q < p3.Data.LMS.assignmentFilterStatus.length; q++) {
                    if (p3.Data.LMS.assignmentFilterStatus[q].Selected) {
                        if (r.length) {
                            r += ","
                        }
                        r += p3.Data.LMS.assignmentFilterStatus[q].Status
                    } else {
                        n = true
                    }
                }
                if (n) {
                    o += "&fs=" + r
                }
            }
            if (this.options.studentId) {
                o += "&sid=" + this.options.studentId
            }
            if (p3.Data.LMS.AssignmentCenterSort && p3.Data.LMS.AssignmentCenterSort.length > 0) {
                o += "&acs=" + p3.Data.LMS.AssignmentCenterSort
            }
            $(p.currentTarget).attr("href", location.href.replace("#", "?pl=1" + o + "#"))
        },
        setDateRange: function(n) {
            var q = true,
                p, o;
            if ($("#range-start-date").val() == "") {
                q = false
            } else {
                p = f.getDate($("#range-start-date").val())
            }
            if ($("#range-end-date").val() == "") {
                q = false
            } else {
                o = f.getDate($("#range-end-date").val())
            }
            if (q) {
                $("#view-buttons .btn-inverseCal").removeClass("active");
                $("#custom-view").addClass("active");
                p3.Data.LMS.calendarView = "custom";
                p3.Data.LMS.startRange = p;
                p3.Data.LMS.endRange = o;
                $("#assignment-center-assignment-items").trigger(jQuery.Event("listRefresh"));
                $(".range-dropdown").hide()
            }
        },
        rangeClick: function(n) {
            n.preventDefault();
            n.stopPropagation()
        }
    });
    c.Vs.AssignmentListView = Bb.View.extend({
        template: "assignmentcenter/assignmentcenter.listview.template.html",
        itemTemplate: "assignmentcenter/assignmentcenter.listitem.template.html",
        events: {
            "click .assignment-table-sort": "updateFilter",
            "click .assignment-list-edit-button": "doAssignmentEdit",
            "click .assignment-list-delete-button": "doAssignmentDelete",
            "listRefresh #assignment-center-assignment-items": "updateList",
            "click .assignment-status-link": "doStatusChange",
            "click .assignment-list-copy-button": "doAssignmentCopy",
            "click .assignment-status-update": "showStatusUpdate"
        },
        initialize: function(n) {
            var o = p3.Data.Context.getSelectedPersona().Id;
            if (o === 3 || o === 5 || o === 20) {
                b.Us.FetchAssignmentTypes()
            }
        },
        render: function(n) {
            var o = this;
            $(n).append(this.el);
            p3.fT(o.template, function(v) {
                var s = p3.Data.Context.getSelectedPersona().Id,
                    w = o.options.studentId || p3.Data.Context.get("UserInfo").UserId,
                    t = "groupname",
                    u = false,
                    q, p, r;
                if (p3.Data.LMS.AssignmentCenterSort && p3.Data.LMS.AssignmentCenterSort.length > 0) {
                    if (p3.Data.LMS.AssignmentCenterSort.indexOf("invert") > -1) {
                        t = p3.Data.LMS.AssignmentCenterSort.substring(0, p3.Data.LMS.AssignmentCenterSort.indexOf("invert") - 1);
                        u = true
                    } else {
                        t = p3.Data.LMS.AssignmentCenterSort
                    }
                }
                o.$el.html(v({
                    showGraded: (s == 3 && p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK)),
                    showStatus: s == 2,
                    showEdit: (s === 3 && w === p3.Data.Context.get("UserInfo").UserId),
                    sort: t,
                    sortInvert: u
                }));
                if (!p3.Data.LMS.calendarView) {
                    p3.Data.LMS.calendarView = "basicDay"
                }
                q = p3.Data.LMS.AssignmentCenterDate || h.localDateTime();
                r = c.Us.GetDateRange(q);
                p = {
                    filter: p3.Data.LMS.AssignmentCenterfilter,
                    dateStart: (r[0].getMonth() + 1) + "/" + r[0].getDate() + "/" + r[0].getFullYear(),
                    dateEnd: (r[1].getMonth() + 1) + "/" + r[1].getDate() + "/" + r[1].getFullYear(),
                    persona: s,
                    statusList: c.Us.getStatusFilterList(),
                    sectionList: c.Us.getSectionFilterList()
                };
                p.filter = d.Us.verifyAssignmentCenterFilter(p.filter, b.Enum.viewByFilters.ACTIVE);
                if (o.options.studentId) {
                    p.userId = o.options.studentId
                }
                c.Data.Assignments.fetch({
                    data: p,
                    success: function(x, y) {
                        x.each(function(B) {
                            var z = B.get("date_due"),
                                A = B.get("date_assigned");
                            if (z && typeof z.substring === "function" && z.indexOf(" ") > 0) {
                                B.set("date_due", z.substring(0, z.indexOf(" ")))
                            }
                            if (A && typeof A.substring === "function" && A.indexOf(" ") > 0) {
                                B.set("date_assigned", A.substring(0, A.indexOf(" ")))
                            }
                            B.set("assess_assigned", A)
                        });
                        o.renderItems(x.toJSON());
                        o.updateToday(r[0], r[1]);
                        o.setDateLabel(r[0], r[1])
                    }
                })
            })
        },
        renderItems: function(n) {
            var q = this,
                o = p3.Data.Context.getSelectedPersona().Id,
                p = q.options.studentId || p3.Data.Context.get("UserInfo").UserId;
            p3.fT(q.itemTemplate, function(v) {
                var r = $("#assignment-center-assignment-items"),
                    s, t, u;
                if (n && n.length > 0) {
                    _.each(n, function(w) {
                        if (w.graded_count === 0) {
                            w.btnStyle = "danger"
                        } else {
                            if (w.graded_count < w.enroll_count) {
                                w.btnStyle = "warning"
                            } else {
                                w.btnStyle = "success"
                            }
                        }
                        if (w.assessment_ind) {
                            if (w.assessment_id > 0) {
                                if (o == 3 || o == 5 || o === 20) {
                                    w.showDetail = true
                                } else {
                                    if (o < 3) {
                                        if ((w.has_grade || w.show_report) && (w.assignment_status == 1 || w.assignment_status == 3 || w.assignment_status == 4) && !w.assessment_locked) {
                                            w.showDetail = true;
                                            w.studentId = p3.Data.Context.get("UserInfo").UserId
                                        }
                                    }
                                }
                            }
                        } else {
                            if (w.discussion_ind) {
                                w.showDetail = true
                            } else {
                                if ((w.hasOwnProperty("long_description") && w.long_description !== null && w.long_description && w.long_description.length > 0) || w.has_link || w.has_download || w.drop_box_ind || (w.lti_ind && (o == 2 || o == 3)) || (w.inc_grade_book && (o == 3 || o == 5 || o == 20)) || (w.inc_grade_book && w.publish_grade && o < 3)) {
                                    w.showDetail = true
                                }
                            }
                        }
                        if (q.options.studentId) {
                            w.studentId = q.options.studentId
                        }
                    });
                    r.html(v({
                        assignments: n,
                        showGraded: (o === 3 && p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK)),
                        showStatus: o === 2,
                        showEdit: (o === 3 && p === p3.Data.Context.get("UserInfo").UserId),
                        parent: o === 1,
                        faculty: o === i.AppPersona.FACULTY.Value,
                        printMode: q.options.print
                    }))
                } else {
                    s = $(".add-existing-items-header").children().length || 6;
                    t = "<tr>";
                    for (u = 0; u < s; u++) {
                        if (u === 2) {
                            t += "<td>There are no assignments to display.</td>"
                        } else {
                            t += "<td></td>"
                        }
                    }
                    t += "</tr>";
                    r.html(t)
                }
            })
        },
        updateFilter: function(o) {
            var r = this,
                n = $(o.currentTarget),
                q = n.data("sort"),
                p;
            $(".sort-icon").removeClass("p3icon-sortDown p3icon-sortUp p3icon-sortOff").addClass("p3icon-sortOff");
            $(".assignment-table-sort").removeClass("sort-active").addClass("muted");
            if (q) {
                if (r.CurrentSort === q) {
                    q = q + "_invert";
                    n.removeClass("muted").addClass("sort-active");
                    n.children("i").removeClass("p3icon-sortOff").addClass("p3icon-sortUp")
                } else {
                    n.removeClass("muted").addClass("sort-active");
                    n.children("i").removeClass("p3icon-sortOff").addClass("p3icon-sortDown")
                }
                r.CurrentSort = q;
                c.Data.Assignments.changeSort(q);
                c.Data.Assignments.sort();
                p3.Data.LMS.AssignmentCenterSort = q;
                p = c.Data.Assignments.toJSON();
                r.renderItems(p)
            }
            return false
        },
        doAssignmentEdit: function(p) {
            var q = $(p.currentTarget).data("assignmentId"),
                r = ($(p.currentTarget).data("assessment") == 1),
                s = ($(p.currentTarget).data("discussion") == 1),
                t = this,
                n, o;
            if (r) {
                p3.router().navigate("#assessmentedit/" + q + "/" + $(p.currentTarget).data("index") + "/" + $(p.currentTarget).data("locked"), true)
            } else {
                if (s) {
                    n = new b.Ms.Assignment();
                    n.set("AssignmentId", q);
                    n.fetch({
                        async: false,
                        error: function() {
                            p3.displayError("Error loading assignment")
                        },
                        success: function(v, w) {
                            var u = b.Us.AddDiscussionView(n, 0);
                            u.on("saveDiscussion", function() {
                                setTimeout(function() {
                                    $("#assignment-center-assignment-items").trigger($.Event("listRefresh"))
                                }, 500)
                            })
                        }
                    })
                } else {
                    o = b.Us.EditAssignmentView(q);
                    if (o) {
                        o.on("saveAssignment", function() {
                            setTimeout(function() {
                                t.updateList(p)
                            }, 500)
                        }).on("deleteAssignment", function() {
                            setTimeout(function() {
                                $("#assignment-center-assignment-items").trigger($.Event("listRefresh"))
                            }, 500)
                        })
                    }
                }
            }
            return false
        },
        doAssignmentCopy: function(p) {
            var n = $(p.currentTarget).data("assignmentId"),
                q = this,
                o = b.Us.AddAssessmentView(undefined, n);
            if (o) {
                o.on("saveAssessment", function(r, s) {
                    setTimeout(function() {
                        q.updateList(p)
                    }, 500)
                });
                o.on("saveEditAssessment", function(s, t) {
                    var r = new b.Ms.Assignment();
                    r.set("AssignmentId", s);
                    r.fetch({
                        error: function() {
                            p3.displayError("Error loading assignment")
                        },
                        success: function(u, v) {
                            p3.router().navigate("#assessmentedit/" + s + "/" + r.get("SectionLinks")[0].AssignmentIndexId + "/0", true)
                        }
                    })
                })
            }
            return false
        },
        doAssignmentDelete: function(o) {
            var p = $(o.currentTarget).data("assignmentId"),
                q = ($(o.currentTarget).data("assessment") == 1),
                s = this,
                r = new b.Cs.SectionForAssignments({}, {
                    assignmentId: p
                }),
                n = new b.Vs.DeleteAssignmentModalView({
                    collection: r,
                    assignmentId: p,
                    isAssessment: q
                });
            p3.rV(n, p3.Layout.Containers.Modal, true);
            n.on("assignmentDeleted", function() {
                s.updateList()
            });
            p3.showModal(p3.Layout.Containers.Modal);
            r.fetch({
                error: function() {
                    p3.displayError("Error loading Sections associated with the assignment")
                }
            });
            return false
        },
        updateList: function(q) {
            var s = this,
                r, o, p, n;
            if (!_.isUndefined(q) && !_.isUndefined(q.filter)) {
                r = q.filter
            } else {
                if (!_.isUndefined(p3.Data.LMS.AssignmentCenterfilter)) {
                    r = p3.Data.LMS.AssignmentCenterfilter
                }
            }
            if (r === null) {
                r = b.Enum.viewByFilters.ACTIVE
            }
            if (!_.isUndefined(q) && !_.isUndefined(q.date)) {
                o = new Date(q.date)
            } else {
                if (p3.Data.LMS.AssignmentCenterDate) {
                    o = p3.Data.LMS.AssignmentCenterDate
                } else {
                    o = h.localDateTime()
                }
            }
            p = c.Us.GetDateRange(o);
            n = {
                filter: r,
                dateStart: (p[0].getMonth() + 1) + "/" + p[0].getDate() + "/" + p[0].getFullYear(),
                dateEnd: (p[1].getMonth() + 1) + "/" + p[1].getDate() + "/" + p[1].getFullYear(),
                persona: p3.Data.Context.getSelectedPersona().Id,
                statusList: c.Us.getStatusFilterList(),
                sectionList: c.Us.getSectionFilterList()
            };
            n.filter = d.Us.verifyAssignmentCenterFilter(n.filter, b.Enum.viewByFilters.ACTIVE);
            if (s.options.studentId) {
                n.userId = s.options.studentId
            }
            c.Data.Assignments.fetch({
                data: n,
                success: function(t, u) {
                    t.each(function(x) {
                        var v = x.get("date_due"),
                            w = x.get("date_assigned");
                        if (v && typeof v.substring === "function" && v.indexOf(" ") > 0) {
                            x.set("date_due", v.substring(0, v.indexOf(" ")))
                        }
                        if (w && typeof w.substring === "function" && w.indexOf(" ") > 0) {
                            x.set("date_assigned", w.substring(0, w.indexOf(" ")))
                        }
                        x.set("assess_assigned", w)
                    });
                    s.renderItems(t.toJSON());
                    s.updateToday(p[0], p[1]);
                    s.setDateLabel(p[0], p[1])
                }
            });
            return false
        },
        showStatusUpdate: function(o) {
            var s = $(o.currentTarget),
                n = s.data("id"),
                p = s.data("index"),
                q = s.data("overdue"),
                r = s.data("status"),
                t = s.data("user-task-ind");
            e.Us.ShowStatusChange(s, n, p, q, r, t)
        },
        updateToday: function(o, n) {
            var q = f.localDateTime(),
                s = new Date(q.getFullYear(), q.getMonth(), q.getDate()),
                r = new Date(o.getFullYear(), o.getMonth(), o.getDate()),
                p = new Date(n.getFullYear(), n.getMonth(), n.getDate());
            p = new Date(p.setHours(23));
            p = new Date(p.setMinutes(59));
            p = new Date(p.setSeconds(59));
            if (s.getTime() >= r.getTime() && s.getTime() <= p.getTime()) {
                $("#button-today").addClass("active")
            } else {
                $("#button-today").removeClass("active")
            }
        },
        setDateLabel: function(o, n) {
            var p = "";
            switch (p3.Data.LMS.calendarView) {
                case "basicDay":
                    p = f.displayDate(f.getDateString(o), "fullDate");
                    break;
                case "basicWeek":
                case "custom":
                    p = f.getDateRangeString(o, n);
                    break;
                case "month":
                    p = f.displayDate(f.getDateString(o), "monthYear");
                    break
            }
            $("#date-display-label").html(p);
            $("#small-date-display-label").html(p);
            $("#mobile-date-display-label").html(p)
        }
    });
    c.Vs.AssignmentSettings = Bb.View.extend({
        template: "assignmentcenter/assignmentsettings.template.html",
        events: {
            "click #btnSave": "saveSettings"
        },
        render: function(n) {
            $(n).append(this.el);
            var o = this;
            p3.fT(o.template, function(p) {
                o.$el.html(p({
                    gradeBookDefault: p3.Data.Context.get("UserInfo").GradebookDefaultInd
                }))
            })
        },
        saveSettings: function(n) {
            var o = $("#gb-on-radio").hasClass("active"),
                p = new c.Ms.SaveSettings();
            p.save({
                gradebookInd: o
            }, {
                success: function() {
                    p3.Data.Context.forceRefresh()
                },
                error: function() {
                    p3.displayError("Error saving assignment settings")
                }
            });
            p3.Layout.Containers.Modal.modal("hide");
            return false
        }
    });
    c.Us.GetNextWeek = function(q) {
        var n = q.day + 7,
            p = q.month,
            r = q.year,
            o = c.Us.DaysInMonth(p - 1, r);
        if (n > o) {
            p = p === 12 ? 1 : p + 1;
            if (p === 1) {
                r += 1
            }
            n = n - o
        }
        return {
            dayName: p3.Us.DataLibrary.DayNames[1],
            month: p,
            day: n,
            year: r,
            date: p + "/" + n + "/" + r,
            active: true
        }
    };
    c.Us.GetPrevWeek = function(p) {
        var n = p.day - 7,
            o = p.month,
            r = p.year,
            q = c.Us.DaysInMonth(p.month - 2, r);
        if (o === 1) {
            q = c.Us.DaysInMonth(11, r - 1)
        }
        if (n < 1) {
            o = o === 1 ? 12 : o - 1;
            if (o === 12) {
                r -= 1
            }
            n = q + n
        }
        return {
            dayName: p3.Us.DataLibrary.DayNames[1],
            month: o,
            day: n,
            year: r,
            date: o + "/" + n + "/" + r,
            active: true
        }
    };
    c.Us.DaysInMonth = function(n, q) {
        switch (n) {
            case 0:
            case 2:
            case 4:
            case 6:
            case 7:
            case 9:
            case 11:
                return 31;
            case 3:
            case 5:
            case 8:
            case 10:
                return 30;
            case 1:
                var p = q || h.localDateTime().GetFullYear(),
                    o;
                if (new Date("2/29/" + p.toString()).getMonth() === 1) {
                    o = 29
                } else {
                    o = 28
                }
                return o;
            default:
                return -1
        }
    };
    c.Us.GetDateRange = function(n) {
        var r = [],
            p, o, q;
        if (p3.Data.LMS.calendarView) {
            switch (p3.Data.LMS.calendarView) {
                case "basicDay":
                    p = n;
                    o = n;
                    break;
                case "basicWeek":
                    q = n.getDay();
                    if (q == 0) {
                        p = n
                    } else {
                        p = new Date(n.getTime());
                        p = new Date(p.setDate(p.getDate() - q))
                    }
                    if (q == 6) {
                        o = n
                    } else {
                        o = new Date(n.getTime());
                        o = new Date(o.setDate(o.getDate() + (6 - q)))
                    }
                    break;
                case "month":
                    p = new Date(n.getFullYear(), n.getMonth(), 1);
                    o = new Date(n.getFullYear(), n.getMonth(), c.Us.DaysInMonth(n.getMonth(), n.getYear()));
                    break;
                case "custom":
                    p = p3.Data.LMS.startRange;
                    o = p3.Data.LMS.endRange;
                    break
            }
        } else {
            p = n;
            o = n
        }
        r.push(p);
        r.push(o);
        return r
    };
    c.Us.printList = function(p) {
        var o = p.split("&"),
            n, u, r, t, s, q;
        p3.Data.LMS = {};
        p3.Data.LMS.OptionsDefaulted = true;
        for (r = 0; r < o.length; r++) {
            n = o[r].split("=");
            switch (n[0]) {
                case "acf":
                    p3.Data.LMS.AssignmentCenterfilter = parseInt(n[1], 10);
                    break;
                case "cv":
                    p3.Data.LMS.calendarView = n[1];
                    break;
                case "acd":
                    p3.Data.LMS.AssignmentCenterDate = new Date(n[1]);
                    break;
                case "rs":
                    p3.Data.LMS.startRange = new Date(n[1]);
                    break;
                case "re":
                    p3.Data.LMS.endRange = new Date(n[1]);
                    break;
                case "fs":
                    t = n[1].split(",");
                    p3.Data.LMS.assignmentFilterStatus = [];
                    p3.Data.LMS.assignmentFilterStatus.push({
                        Status: -1,
                        Name: "Need Action",
                        LabelClass: "label-info",
                        Selected: t.indexOf("-1") > -1
                    });
                    p3.Data.LMS.assignmentFilterStatus.push({
                        Status: 0,
                        Name: "In Progress",
                        LabelClass: "label-warning",
                        Selected: t.indexOf("0") > -1
                    });
                    p3.Data.LMS.assignmentFilterStatus.push({
                        Status: 2,
                        Name: "Overdue",
                        LabelClass: "label-danger",
                        Selected: t.indexOf("2") > -1
                    });
                    p3.Data.LMS.assignmentFilterStatus.push({
                        Status: 1,
                        Name: "Completed",
                        LabelClass: "label-success",
                        Selected: t.indexOf("1") > -1
                    });
                    if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK)) {
                        p3.Data.LMS.assignmentFilterStatus.push({
                            Status: 4,
                            Name: "Graded",
                            LabelClass: "label-success",
                            Selected: t.indexOf("4") > -1
                        })
                    }
                    break;
                case "sf":
                    t = n[1].split(",");
                    p3.Data.LMS.assignmentFilterSections = new b.Cs.ExistingSections();
                    q = p3.Data.Context.get("Groups");
                    for (s = 0; s < q.length; s++) {
                        if (q[s].Association == 1 && q[s].CurrentEnrollment) {
                            if (p3.Data.LMS.assignmentFilterSections.pluck("SectionId").indexOf(q[s].SectionId) == -1) {
                                p3.Data.LMS.assignmentFilterSections.add({
                                    SectionId: q[s].SectionId,
                                    Selected: t.indexOf(q[s].SectionId.toString()) > -1,
                                    Name: q[s].GroupName
                                })
                            }
                        }
                    }
                    break;
                case "acs":
                    p3.Data.LMS.AssignmentCenterSort = n[1];
                    break;
                case "sid":
                    u = n[1];
                    break
            }
        }
        p3.Data.LMS.DisplayCalendar = false;
        p3.rV(new c.Vs.LayoutView({
            studentId: u,
            print: true,
            containerName: "Assignments"
        }), "#app", true)
    };
    c.Us.getStatusFilterList = function() {
        var o = "",
            p = false,
            n;
        if (p3.Data.LMS.assignmentFilterStatus) {
            for (n = 0; n < p3.Data.LMS.assignmentFilterStatus.length; n++) {
                if (p3.Data.LMS.assignmentFilterStatus[n].Selected) {
                    if (o.length > 0) {
                        o += ","
                    }
                    o += p3.Data.LMS.assignmentFilterStatus[n].Status
                } else {
                    p = true
                }
            }
            if (!p) {
                o = ""
            }
        }
        return o
    };
    c.Us.getSectionFilterList = function() {
        var n = "",
            o = false;
        if (p3.Data.LMS.assignmentFilterSections) {
            p3.Data.LMS.assignmentFilterSections.each(function(p) {
                if (p.get("Selected")) {
                    if (n.length > 0) {
                        n += ","
                    }
                    n += p.get("SectionId")
                } else {
                    o = true
                }
            });
            if (!o) {
                n = ""
            }
        }
        return n
    }
}(p3.module("LMS/Shared/assignmentcenter")));
(function(a) {
    var h = p3.module("gradebook"),
        d = p3.module("LMS/classpage"),
        g = p3.module("shared/fileselection"),
        i = p3.module("shared/ltitool"),
        c = p3.module("LMS/Shared/AssignmentTools"),
        b = p3.module("lms/rubrics/assignmentrubric"),
        k = p3.module("utilities/smodal"),
        j = p3.module("utilities/multifetch"),
        e = p3.Us.Culture,
        f = p3.Us.Enum;
    a.Ms.Assignment = Bbm.extend({
        idAttribute: "AssignmentId",
        url: function() {
            return aP + "assignment2/read/" + this.get("AssignmentId") + "/?format=json"
        }
    });
    a.Ms.DropBoxSave = Bbm.extend({
        idAttribute: "",
        url: "assignment2/DropBoxSave/?format=json"
    });
    a.Ms.FileRemove = Bbm.extend({
        idAttribute: "",
        url: "assignment2/DropBoxFileRemove/?format=json"
    });
    a.Ms.UserFolder = Bbm.extend({
        url: "datadirect/getuserfolder/",
        idAttribute: "user_id"
    });
    a.Ms.AssignmentStatusUpdate = Bbm.extend({
        url: "assignment2/assignmentstatusupdate/?format=json"
    });
    a.Ms.AssignmentRoster = Bbm.extend({
        idAttribute: "user_id"
    });
    a.Ms.DropBoxAnnotate = Bbm.extend({
        url: function() {
            return aP + "assignment2/dropboxfileannotate/?format=json"
        }
    });
    a.Ms.DropBoxView = Bbm.extend({
        url: function() {
            return aP + "assignment2/dropboxfileview/?format=json"
        }
    });
    a.Ms.Skill = Bbm.extend({});
    a.Ms.SkillsSave = Bbm.extend({
        url: function() {
            return aP + "GradeBook/SkillGradeSave/?format=json"
        }
    });
    a.Cs.Attachments = Bbc.extend({
        url: "datadirect/AssignmentAttachments/?format=json"
    });
    a.Cs.AssignmentRoster = Bbc.extend({
        url: "assignment2/graderefresh/?format=json",
        model: a.Ms.AssignmentRoster
    });
    a.Cs.AssignmentDropboxItems = Bbc.extend({
        url: "datadirect/AssignmentDropboxItems/?format=json"
    });
    a.Cs.MarkingPeriods = Bbc.extend({
        url: function() {
            return aP + "datadirect/AssignmentMarkingPeriods/?format=json"
        }
    });
    a.Cs.StudentAssignmentDetail = Bbc.extend({
        url: "datadirect/AssignmentStudentDetail/?format=json"
    });
    a.Cs.LtiTools = Bbc.extend({
        url: "assignment2/LtiTools/?format=json"
    });
    a.Cs.UserFolder = Bbc.extend({
        url: "datadirect/getuserfolder/?format=json",
        model: a.Ms.UserFolder
    });
    a.Cs.Skills = Bbc.extend({
        url: "GradeBook/AssignmentSkillsGet/",
        model: a.Ms.Skill
    });
    a.Cs.RatingScales = Bbc.extend({
        url: "Competency/RatingScaleGet/"
    });
    a.Data = {};
    a.Vs.LayoutView = Bb.View.extend({
        template: "assignmentdetails/layoutview.template.html",
        events: {
            "click #BackButton": "doBack",
            "click #assignment-resubmit-button": "doResubmit"
        },
        initialize: function(l) {
            var m = this;
            m.gradebookInd = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.GRADEBOOK);
            m.dropboxInd = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSIGNMENTDROPBOX);
            m.rubricInd = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ASSIGNMENTRUBRIC);
            m.competencyInd = p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.COMPETENCYBASEDEDUCATION);
            if (l !== undefined) {
                a.Data.DropBoxItems = new a.Cs.AssignmentDropboxItems();
                a.Data.Assignment = new a.Ms.Assignment();
                a.Data.Assignment.set("AssignmentId", l.aid);
                a.Data.Aiid = l.aiid;
                a.Data.Aid = l.aid;
                a.Data.SchoolYear = p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel;
                a.Data.MarkingPeriods = new a.Cs.MarkingPeriods();
                a.Data.Gradebook = new h.Cs.Gradebook();
                a.Data.UserFolders = new a.Cs.UserFolder();
                a.Data.DropBoxItems.fetch({
                    data: {
                        schoolYear: a.Data.SchoolYear,
                        assignmentId: l.aid
                    },
                    success: function(o, p) {
                        var n = $("#assignment-detail-extras div:first");
                        if (n !== undefined && n.length > 0) {
                            n.trigger("updateRosterFiles")
                        }
                    },
                    error: function(n, o) {
                        p3.displayError("Error loading Drop box items.")
                    }
                });
                if (Hb.helpers.DetailLinksList == undefined && Hb.helpers.DetailDownloadsList === undefined) {
                    a.Us.RegisterHelpers()
                }
            }
        },
        dispose: function() {
            delete a.Data.CurrentField;
            delete a.Data.GradedCount;
            $("#site-main").addClass("container")
        },
        render: function(l) {
            $(l).append(this.el);
            var m = this;
            p3.fT(m.template, function(n) {
                a.Data.Assignment.fetch({
                    success: function(y, B) {
                        m.$el.html(n({
                            print: a.Data.Print,
                            BackButtonText: "< Back",
                            imagePath: p3.Config.CssImagePath,
                            resub: B.DropboxResub
                        }));
                        var t = y.get("DropboxInd"),
                            v = y.get("IncGradeBook"),
                            A = y.get("PublishGrade"),
                            u = y.get("EvaluationMethod"),
                            s = new a.Vs.AssignmentDetailView(),
                            C, w, K, G, z = p3.Data.Context.getSelectedPersona().Id,
                            o = false,
                            q = "#assignment-detail-assignment",
                            D = "#assignment-detail-extras",
                            E = $("#rubric-tile"),
                            J = $("#assignment-status-tile"),
                            p, x;
                        a.Data.GradeBookIndicator = v;
                        a.Data.DropBoxIndicator = t;
                        a.Data.PublishGradeInd = A;
                        a.Data.EvaluationInd = u;
                        a.Data.HasCompetencyGrades = y.get("HasCompetencyGrades");
                        G = _.find(y.get("SectionLinks"), function(r) {
                            return r.AssignmentIndexId == a.Data.Aiid
                        });
                        if (G.SectionId !== undefined && G.SectionId > 0) {
                            a.Data.SectionId = G.SectionId;
                            a.Data.DurationId = G.Section.Duration.Id
                        }
                        a.Data.RubricId = m.rubricInd ? y.get("RubricId") : 0;
                        a.Data.ParentRubricId = y.get("ParentRubricId");
                        a.Data.GradeWithRubric = false;
                        a.Data.RubricLocked = a.Data.RubricId !== a.Data.ParentRubricId;
                        J.show();
                        if (z === f.AppPersona.FACULTY.Value) {
                            var F;
                            var H = a.Data.Assignment.get("SectionLinks");
                            for (x = 0; x < H.length; x++) {
                                if (H[x].AssignmentIndexId == a.Data.Aiid) {
                                    F = H[x].SectionId;
                                    if (H[x].Section !== undefined && H[x].Section.Duration !== undefined) {
                                        a.Data.SchoolYear = H[x].Section.Duration.SchoolYearLabel;
                                        m.getDropboxItems(y)
                                    }
                                    break
                                }
                            }
                            var I = new d.Cs.Sections({}, {
                                sectionId: F
                            });
                            o = m.getTeacherEdit(I, F);
                            if (o) {
                                if (a.Data.RubricId > 0) {
                                    a.Data.AssignmentRubric = new b.Ms.Rubric({
                                        Id: a.Data.RubricId
                                    });
                                    a.Data.AssignmentRubric.fetch({
                                        async: false,
                                        success: function() {
                                            a.Data.GradeWithRubric = (a.Data.AssignmentRubric.get("EvaluationType") !== p3.Us.Enum.RubricEvaluationTypes.Comment.Value)
                                        },
                                        error: function() {
                                            p3.displayError("Error loading rubric")
                                        }
                                    })
                                }
                                C = new a.Cs.AssignmentRoster();
                                if ((m.gradebookInd !== false && v !== false) || (m.dropboxInd !== false && t !== false) || (m.competencyInd !== false && u !== false)) {
                                    $("#original-layout-container").remove();
                                    $("#new-layout-container").show();
                                    $("#BackButton").remove();
                                    q = "#new-detail-container";
                                    D = "#roster-sidebar";
                                    s = new a.Vs.AssignmentDetailViewNew({
                                        collection: C
                                    });
                                    $("#site-main").removeClass("container");
                                    a.Data.UserFolders.fetch({
                                        data: {
                                            sectionId: F
                                        },
                                        error: function(L, M) {
                                            p3.displayError("Error loading user folders.")
                                        }
                                    })
                                }
                                w = new a.Vs.AssignmentGradesViewNew({
                                    collection: C,
                                    gradebookInd: (m.gradebookInd && v),
                                    dropboxInd: t
                                });
                                C.comparator = function(M, N) {
                                    var r = M.get("lastname"),
                                        L = N.get("lastname");
                                    if (r === undefined) {
                                        return 1
                                    }
                                    if (r !== undefined) {
                                        r = r.toUpperCase()
                                    }
                                    if (L === undefined) {
                                        return -1
                                    }
                                    if (L !== undefined) {
                                        L = L.toUpperCase()
                                    }
                                    if (r === L) {
                                        r = M.get("firstname");
                                        L = N.get("firstname")
                                    }
                                    return r < L ? -1 : r > L ? 1 : 0
                                }
                            }
                        } else {
                            if (z === f.AppPersona.PARENT.Value) {
                                $("#assignment-resubmit-button").remove();
                                p = new a.Cs.StudentAssignmentDetail();
                                p.fetch({
                                    data: {
                                        studentId: a.Data.CurrentStudent || p3.Data.Context.get("UserInfo").UserId,
                                        AssignmentIndexId: a.Data.Aiid,
                                        personaId: z
                                    },
                                    success: function(L, M) {
                                        if (L.length > 0) {
                                            var N = true;
                                            if (L.at(0).get("readyInd") === true || z === f.AppPersona.PARENT.Value || (z === f.AppPersona.PARENT.Value && m.gradebookInd !== false && v !== false) || (z === f.AppPersona.STUDENT.Value && t === false && v === true)) {
                                                K = new a.Vs.StudentSubmittedDropBox({
                                                    collection: L,
                                                    onlyGraded: (v && !t),
                                                    gradebook: (v && a.Data.RubricId === 0),
                                                    gradesPublished: a.Data.PublishGradeInd
                                                });
                                                if (!a.Data.PublishGradeInd || a.Data.RubricId > 0) {
                                                    N = false
                                                }
                                            } else {
                                                K = new a.Vs.StudentDropBox({
                                                    dropboxInd: t,
                                                    collection: L
                                                })
                                            }
                                            if (N || a.Data.RubricId > 0) {
                                                $("#assignment-detail-assignment").removeClass("span12 col-md-12").addClass("span6 col-md-6");
                                                $("#assignment-detail-extras").addClass("span6")
                                            } else {
                                                $("#assignment-detail-assignment").removeClass("span6 col-md-6").addClass("span12 col-md-12");
                                                $("#assignment-detail-extras").removeClass("span6")
                                            }
                                        }
                                        if (((m.dropboxInd !== false && t !== false) || (m.gradebookInd !== false && v !== false && a.Data.RubricId === 0)) && K !== undefined) {
                                            p3.rV(K, $("#assignment-detail-extras"), false)
                                        } else {
                                            J.hide()
                                        }
                                        if (a.Data.RubricId > 0) {
                                            E.show();
                                            p3.rV(new b.Vs.RubricDetailTile({
                                                model: L.at(0),
                                                assignment: y,
                                                userId: a.Data.CurrentStudent || p3.Data.Context.get("UserInfo").UserId,
                                                assignmentIndexId: a.Data.Aiid
                                            }), $("#rubric-detail"), true)
                                        } else {
                                            E.hide()
                                        }
                                        if (a.Data.EvaluationInd > 0) {
                                            p3.rV(new a.Vs.Skills({
                                                studentUserId: a.Data.CurrentStudent || p3.Data.Context.get("UserInfo").UserId
                                            }), m.$("#evaluation-tile"), true)
                                        }
                                    }
                                });
                                if (K === undefined) {
                                    K = new a.Vs.StudentDropBox({
                                        dropboxInd: t
                                    })
                                }
                            } else {
                                if (z === f.AppPersona.STUDENT.Value) {
                                    p = new a.Cs.StudentAssignmentDetail();
                                    p.fetch({
                                        data: {
                                            studentId: a.Data.CurrentStudent || p3.Data.Context.get("UserInfo").UserId,
                                            AssignmentIndexId: a.Data.Aiid
                                        },
                                        success: function(r) {
                                            if (r.length > 0) {
                                                var M = $("#assignment-detail-extras").html(),
                                                    L = false;
                                                if (M.length > 1) {
                                                    L = true
                                                }
                                                if (a.Data.DropBoxIndicator || a.Data.RubricId === 0) {
                                                    J.show();
                                                    p3.rV(new a.Vs.StudentAssignmentInformation({
                                                        model: r.at(0),
                                                        assignment: y,
                                                        files: r,
                                                        gradebook: v,
                                                        onlineSubmit: t,
                                                        gradesPublished: a.Data.PublishGradeInd
                                                    }), $("#assignment-detail-extras"), L);
                                                    if (m.isLateSubmission(r.at(0).get("ddate")) || !r.at(0).get("readyInd")) {
                                                        $("#assignment-resubmit-button").hide()
                                                    } else {
                                                        $("#assignment-resubmit-button").show()
                                                    }
                                                    if (L) {
                                                        $("#assignment-detail-extras").append(M);
                                                        $("#assignment-detail-linked-content").addClass("mt-10")
                                                    }
                                                } else {
                                                    J.hide()
                                                }
                                                if (a.Data.RubricId > 0) {
                                                    E.show();
                                                    p3.rV(new b.Vs.RubricDetailTile({
                                                        model: r.at(0),
                                                        assignment: y,
                                                        userId: a.Data.CurrentStudent || p3.Data.Context.get("UserInfo").UserId,
                                                        assignmentIndexId: a.Data.Aiid
                                                    }), $("#rubric-detail"), true)
                                                } else {
                                                    E.hide()
                                                }
                                                if (a.Data.EvaluationInd > 0) {
                                                    p3.rV(new a.Vs.Skills({
                                                        studentUserId: a.Data.CurrentStudent || p3.Data.Context.get("UserInfo").UserId
                                                    }), m.$("#evaluation-tile"), true)
                                                }
                                            }
                                        }
                                    })
                                }
                            }
                        }
                        if (o) {
                            a.Us.RenderLtiRegion(true)
                        }
                        p3.rV(s, $(q), false);
                        if (o && ((m.gradebookInd !== false && v !== false) || (m.dropboxInd !== false && t !== false) || (m.competencyInd !== false && u !== false))) {
                            m.Containers = {
                                rosterContainer: $(D)
                            };
                            p3.rV(w, m.Containers.rosterContainer, false)
                        } else {
                            if (z === f.AppPersona.STUDENT.Value && m.dropboxInd !== false && t !== false && K !== undefined) {
                                p3.rV(K, $("#assignment-detail-extras"), false)
                            }
                        }
                        $("#BackButton").show();
                        $("#assignment-detail-extras div").trigger("assignmentload");
                        if (o) {
                            C.fetch({
                                data: {
                                    aiid: a.Data.Aiid,
                                    viewerId: p3.Data.Context.get("UserInfo").UserId
                                },
                                error: function(L, M) {
                                    p3.displayError("Error loading Roster.")
                                }
                            })
                        }
                    },
                    error: function(o, p) {
                        m.$el.html("<strong>Error getting assignment details</strong>")
                    }
                })
            })
        },
        doBack: function(l) {
            l.preventDefault();
            if (a.Data.Back != null && a.Data.Back.length > 0 && a.Data.Back !== "X" && a.Data.Back !== "x") {
                window.location.href = "#" + a.Data.Back.split("--").join("/")
            } else {
                window.history.back()
            }
        },
        isLateSubmission: function(n) {
            var o, m, l;
            o = new Date();
            m = new Date(n);
            l = m.getTime() - o.getTime();
            if (l > 0) {
                return false
            }
            return true
        },
        doResubmit: function(m) {
            var n = this,
                l = new a.Cs.StudentAssignmentDetail();
            l.fetch({
                data: {
                    studentId: p3.Data.Context.get("UserInfo").UserId,
                    AssignmentIndexId: a.Data.Aiid
                },
                success: function(o, q) {
                    var p = new a.Vs.ResubmitConfirmation({
                        dbid: q[0].dbid,
                        sid: p3.Data.Context.get("UserInfo").UserId,
                        aiid: a.Data.Aiid,
                        collection: n.collection
                    });
                    p3.rV(p, p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal)
                }
            });
            return false
        },
        getDropboxItems: function(l) {
            a.Data.DropBoxItems.fetch({
                data: {
                    schoolYear: a.Data.SchoolYear,
                    assignmentId: l.get("AssignmentId")
                },
                success: function(n, o) {
                    var m = $("#assignment-detail-extras div:first");
                    if (m !== undefined && m.length > 0) {
                        m.trigger("updateRosterFiles")
                    }
                },
                error: function(m, n) {
                    p3.displayError("Error loading Drop box items.")
                }
            })
        },
        getTeacherEdit: function(n, m) {
            var l = false;
            n.fetch({
                async: false,
                data: {
                    sectionId: n.sectionId,
                    associationId: 1,
                    teacherId: 0
                },
                error: function() {
                    p3.displayError("Error loading teacher sections")
                },
                success: function() {
                    if (n.length > 0) {
                        n.each(function(o) {
                            if (o.get("SectionId") == m) {
                                l = o.get("AssignmentEdit")
                            }
                        })
                    }
                }
            });
            return l
        }
    });
    a.Vs.AssignmentDetailView = Bb.View.extend({
        template: "assignmentdetails/detailview.template.html",
        render: function(l) {
            $(l).append(this.el);
            var m = this;
            p3.fT(m.template, function(u) {
                var s = a.Data.Assignment,
                    t = _.find(s.get("SectionLinks"), function(v) {
                        return v.AssignmentIndexId == a.Data.Aiid
                    }),
                    r = s.get("LinkItems"),
                    q = s.get("DownloadItems"),
                    p, n = $("#assignment-detail-assignment");
                a.Data.DueDate = e.getDate(t.DueDate);
                if (t.SectionId !== undefined && t.SectionId > 0) {
                    a.Data.SectionId = t.SectionId;
                    a.Data.DurationId = t.Section.Duration.Id;
                    if (a.Data.MarkingPeriods === undefined) {
                        a.Data.MarkingPeriods = new a.Cs.MarkingPeriods()
                    }
                    if (a.Data.MarkingPeriods.length <= 0) {
                        a.Data.MarkingPeriods.fetch({
                            data: {
                                sectionList: a.Data.SectionId
                            },
                            error: function(v, w) {
                                p3.displayError("Error retreiving Marking Period Information.")
                            }
                        })
                    }
                }
                if (s.get("DropboxInd") === true && s.get("FormativeInd") === true) {
                    p = "Online Submission, Formative"
                } else {
                    if (s.get("DropboxInd") === true && s.get("FormativeInd") === false) {
                        p = "Online Submission"
                    } else {
                        if (s.get("DropboxInd") === false && s.get("FormativeInd") === true) {
                            p = "Formative"
                        }
                    }
                }
                m.$el.html(u({
                    print: a.Data.Print,
                    rootUrl: p3.Config.RootPath,
                    aid: s.get("AssignmentId"),
                    aiid: a.Data.Aiid,
                    title: s.get("ShortDescription"),
                    adate: t.AssignmentDate,
                    ddate: t.DueDate,
                    assignmentStatuses: p,
                    sectionName: t.Section.Name || "",
                    description: s.get("LongDescription"),
                    links: r,
                    downloads: q,
                    linkedContentTotal: (r.length + q.length)
                }));
                if (((s.get("IncGradeBook") === false || s.get("PublishGrade")) === false && p3.Data.Context.getSelectedPersona().Id < 3) && s.get("DropboxInd") === false) {
                    var o = $("#assignment-detail-linked-content");
                    o.remove();
                    $("#assignment-detail-extras").append(o);
                    if (n.hasClass("span12") || n.hasClass("col-md-12")) {
                        $("#assignment-detail-assignment").removeClass("span12 col-md-12").addClass("span6 col-md-6");
                        $("#assignment-detail-extras").addClass("span6 col-md-6")
                    }
                }
                a.Us.RenderLtiRegion(false)
            })
        }
    });
    a.Vs.AssignmentDetailViewNew = Bb.View.extend({
        template: "assignmentdetails/detailview.new.template.html",
        initialize: function(l) {
            this.collection.on("reset", this.renderTemplate, this)
        },
        events: {
            "click #ltiConfigButton": "showLtiConfigList"
        },
        showLtiConfigList: function(l) {
            c.Us.showLtiConfigList(a.Data.Aiid, l, a.Data.Back)
        },
        render: function(l) {
            $(l).append(this.el)
        },
        renderTemplate: function() {
            var l = this;
            p3.fT(l.template, function(t) {
                var r = a.Data.Assignment,
                    s = _.find(r.get("SectionLinks"), function(m) {
                        return m.AssignmentIndexId == a.Data.Aiid
                    }),
                    q = r.get("LinkItems"),
                    p = r.get("DownloadItems"),
                    n = $("#assignment-detail-assignment");
                a.Data.DueDate = e.getDate(s.DueDate);
                if (s.SectionId !== undefined && s.SectionId > 0) {
                    a.Data.SectionId = s.SectionId;
                    a.Data.DurationId = s.Section.Duration.Id;
                    if (a.Data.MarkingPeriods === undefined) {
                        a.Data.MarkingPeriods = new a.Cs.MarkingPeriods()
                    }
                    if (a.Data.MarkingPeriods.length <= 0) {
                        a.Data.MarkingPeriods.fetch({
                            data: {
                                sectionList: a.Data.SectionId
                            },
                            error: function(m, u) {
                                p3.displayError("Error retreiving Marking Period Information.")
                            }
                        })
                    }
                }
                c.Us.refreshLtiConfigSummary(a.Data.Aiid);
                l.$el.html(t({
                    print: a.Data.Print,
                    rootUrl: p3.Config.RootPath,
                    aid: r.get("AssignmentId"),
                    aiid: a.Data.Aiid,
                    title: r.get("ShortDescription"),
                    adate: s.AssignmentDate,
                    ddate: s.DueDate,
                    sectionName: s.Section.Name || "",
                    description: r.get("LongDescription"),
                    links: q,
                    downloads: p,
                    linkedContentTotal: (q.length + p.length),
                    graded: ((l.collection.length > 0) ? (l.collection.at(0).get("graded_count")) : null),
                    enrolled: ((l.collection.length > 0) ? (l.collection.at(0).get("enrollment_count")) : null),
                    average: a.Us.getAverageGrade(r.get("MaxPoints"), l.collection),
                    gradebookInd: r.get("IncGradeBook"),
                    lti: c.Data.LtiConfigSummary.toJSON(),
                    GradeWithRubric: a.Data.GradeWithRubric,
                    EvaluationInd: a.Data.EvaluationInd
                }));
                if (((r.get("IncGradeBook") === false || r.get("PublishGrade") === false) && p3.Data.Context.getSelectedPersona().Id < 3) && r.get("DropboxInd") === false) {
                    var o = $("#assignment-detail-linked-content");
                    o.remove();
                    $("#assignment-detail-extras").append(o);
                    if (n.hasClass("span12") || n.hasClass("col-md-12")) {
                        $("#assignment-detail-assignment").removeClass("span12 col-md-12").addClass("span6 col-md-6");
                        $("#assignment-detail-extras").addClass("span6 col-md-6")
                    }
                }
            })
        }
    });
    a.Vs.AssignmentDetailLtiView = Bb.View.extend({
        areaTemplate: "assignmentdetails/detailview.lti.area.template.html",
        frameTemplate: "assignmentdetails/detailview.lti.frame.template.html",
        events: {
            "click #lti-launch": "ltiLaunch",
            "click #lti-msg-toggle": "toggleMessage"
        },
        initialize: function(l) {
            var m = this;
            m.lti = m.options.lti;
            m.settings = m.options.persona === f.AppPersona.FACULTY.Value && !(m.lti.LaunchTypeId === 1);
            if (m.lti.AllowLaunchInd) {
                if ((m.options.persona === f.AppPersona.FACULTY.Value) || (m.options.persona !== f.AppPersona.FACULTY.Value && m.lti.LtiConfigInd)) {
                    m.launchable = true;
                    m.launchableMsg = ""
                } else {
                    m.launchable = true;
                    m.launchableMsg = "This learning tool has not been configured yet"
                }
            } else {
                m.launchable = false;
                m.launchableMsg = m.lti.AllowLaunchMsg
            }
            m.noconfig = (m.options.persona === f.AppPersona.FACULTY.Value && !(m.lti.LtiConfigInd));
            m.autoLaunch = m.launchable && (m.lti.LaunchTypeId === 1);
            m.assignmentId = m.options.assignmentId;
            m.assignmentIndexId = m.options.assignmentIndexId;
            m.logMessages = false
        },
        dispose: function() {
            var l = this;
            l.removeWindowMessageListener(l.ltiHandleMessage)
        },
        render: function(l) {
            var m = this;
            $(l).append(m.el);
            m.renderTemplate()
        },
        renderTemplate: function() {
            var l = this;
            p3.fT(l.areaTemplate, function(m) {
                l.$el.html(m({
                    lti: l.lti,
                    settings: l.settings,
                    autoLaunch: l.autoLaunch,
                    launchable: l.launchable,
                    launchableMsg: l.launchableMsg,
                    imagePath: p3.Config.CssImagePath,
                    noconfig: l.noconfig
                }));
                l.ltiButtons("initial");
                if (l.autoLaunch) {
                    l.ltiLaunch()
                }
            })
        },
        listenForWindowMessage: function(o, l) {
            var n = window.addEventListener ? "addEventListener" : "attachEvent",
                m = window[n],
                p = (n === "attachEvent") ? "onmessage" : "message";
            m(p, function(q) {
                o.call(l || this, q)
            }, false)
        },
        removeWindowMessageListener: function(n) {
            var m = window.removeEventListener ? "removeEventListener" : "detachEvent",
                l = window[m],
                o = (m === "detachEvent") ? "onmessage" : "message";
            l(o, n)
        },
        ltiLaunch: function(p) {
            var r = this,
                n = 5,
                o = r.assignmentIndexId,
                q, l, m, t = "",
                s = "";
            if (p) {
                p.preventDefault()
            }
            r.removeWindowMessageListener(r.ltiHandleMessage);
            if (r.lti.ToolIndexId && n && o) {
                q = i.Us.BuildLaunchUrl(r.lti.ToolIndexId, r.lti.PresentationTarget, n, o);
                if (r.lti.PresentationTarget === f.LtiPresentationTargets.Embed.id) {
                    p3.fT(r.frameTemplate, function(u) {
                        l = $("#lti-frame-area");
                        l.empty();
                        l.html(u({
                            lti: r.lti
                        }));
                        r.ltiButtons("launching");
                        m = $("#lti-frame")[0];
                        m.onload = function() {
                            r.ltiFrameLoaded(this)
                        };
                        r.listenForWindowMessage(r.ltiHandleMessage, r);
                        m.contentWindow.location.replace(q);
                        l.show()
                    })
                } else {
                    if (r.lti.PresentationTarget === f.LtiPresentationTargets.New.id) {
                        t = r.lti.ToolTitle;
                        window.open(q, t, s)
                    } else {
                        p3.displayError("The third party tool must open in place or in a new window.")
                    }
                }
            } else {
                p3.displayError("Error loading third party tool.")
            }
        },
        ltiClose: function(l) {
            var m = this;
            m.removeWindowMessageListener(m.ltiHandleMessage);
            $("#lti-frame-area").hide();
            $("#lti-frame").remove();
            m.ltiButtons("closed")
        },
        ltiHandleMessage: function(m) {
            var o = this,
                n;
            if (m && m.data) {
                if (o.logMessages) {
                    $("#lti-log-area").append(m.data.toString() + "<br />")
                }
                if (m.data === "ltiClose") {
                    o.ltiClose()
                } else {
                    try {
                        n = JSON.parse(m.data)
                    } catch (l) {
                        return false
                    }
                    if (n.hasOwnProperty("id") && n.id === "ltiMessage") {
                        $("#lti-msg-text").text(n.text + " ");
                        if (n.type === "error") {
                            $("#lti-msg-area").removeClass("alert-info");
                            $("#lti-msg-area").addClass("alert-danger")
                        } else {
                            $("#lti-msg-area").removeClass("alert-danger");
                            $("#lti-msg-area").addClass("alert-info")
                        }
                        $("#lti-msg-area").show(100);
                        o.ltiButtons("openmessage")
                    }
                }
            }
        },
        ltiFrameLoaded: function(l) {
            var m = this;
            m.ltiButtons("launched");
            m.updateLtiConfig()
        },
        updateLtiConfig: function() {
            var l;
            c.Us.refreshLtiConfigSummary(a.Data.Aiid, function(m) {
                if (m.get("IsFaculty") && m.get("IsLtiInstalled")) {
                    l = $("#ltiConfigButton");
                    if (l) {
                        if (m.get("NeedsConfigCount") > 0) {
                            l.show()
                        } else {
                            l.hide()
                        }
                    }
                    $("#lti-noconfig").remove()
                }
            })
        },
        ltiButtons: function(o) {
            var p = this,
                l = $("#lti-launch"),
                m = $("#lti-processing"),
                n = ($("#lti-msg-area").filter(":visible").length > 0);
            if (o === "initial" || (o === "closemessage")) {
                if (p.autoLaunch) {
                    p.showButton(m, false);
                    p.showButton(l, false)
                } else {
                    p.showButton(m, false);
                    p.showButton(l, p.launchable)
                }
            } else {
                if (o === "launching") {
                    p.showButton(l, false);
                    p.showButton(m, true)
                } else {
                    if (o === "launched") {
                        p.showButton(l, false);
                        p.showButton(m, false)
                    } else {
                        if (o === "openmessage") {
                            p.showButton(l, false);
                            p.showButton(m, false)
                        } else {
                            if (o === "closed") {
                                if (p.autoLaunch) {
                                    p.showButton(m, false);
                                    p.showButton(l, false)
                                } else {
                                    p.showButton(m, false);
                                    p.showButton(l, p.launchable && !n)
                                }
                            }
                        }
                    }
                }
            }
        },
        showButton: function(l, m) {
            if (l !== undefined && l !== null && l) {
                if (m) {
                    l.show()
                } else {
                    l.hide()
                }
            }
        },
        toggleMessage: function(m) {
            var l = $("#lti-msg-area");
            if (l) {
                if (l.filter(":visible").length > 0) {
                    l.hide();
                    this.ltiButtons("closemessage")
                }
            }
        }
    });
    a.Vs.AssignmentGradesViewNew = Bb.View.extend({
        template: "assignmentdetails/gradeview.new.template.html",
        events: {
            assignmentload: "getSettings",
            updateRosterFiles: "renderTemplate",
            "click .dropdown-menu": "setMaxPoint",
            "click .select-student": "showStudentDetail",
            "click #details-link": "showDetails",
            "click #post-rubrics-btn": "postRubrics",
            "click .download-all-assignment": "downloadAllByAssignment"
        },
        initialize: function(l) {
            p3.Layout.Containers.MainBulletin.addClass("left-nav-spacing");
            p3.Layout.Containers.EmergencyBulletin.addClass("left-nav-spacing");
            a.Data.Scale = new h.Cs.Scale();
            this.collection.on("reset", this.renderTemplate, this);
            a.Data.SaveCollection = new h.Cs.Gradebook()
        },
        getSettings: function() {
            if (a.Data.Assignment !== undefined) {
                var l = _.find(a.Data.Assignment.get("SectionLinks"), function(m) {
                    return m.AssignmentIndexId == a.Data.Aiid
                });
                if (l.SectionId !== undefined && l.SectionId > 0) {
                    a.Data.SectionId = l.SectionId
                }
            } else {
                p3.displayError("ERROR: the Assignment hasn't been loaded yet.")
            }
            this.settings = new h.Ms.GradebookOptions({
                sectionId: a.Data.SectionId,
                markingPeriodId: 1177
            });
            this.settings.on("reset change", this.renderTemplate, this)
        },
        render: function(l) {
            var m = this;
            $(l).html(this.el);
            this.collection.fetch({
                data: {
                    aiid: a.Data.Aiid,
                    viewerId: p3.Data.Context.get("UserInfo").UserId
                },
                success: function(n, o) {
                    m.renderTemplate()
                },
                error: function(n, o) {
                    p3.displayError("Error loading Roster.")
                }
            })
        },
        renderTemplate: function() {
            var m = this,
                l = m.collection.at(0);
            if (m.collection.length <= 0 || l === undefined) {
                return
            }
            if (a.Data.GradeBookIndicator) {
                a.Data.Scale.fetch({
                    success: function(n, s) {
                        var q = false,
                            o = false,
                            u = false,
                            t = false,
                            r = $("#commit-rubric-message");
                        if (a.Data.Assignment !== undefined) {
                            q = a.Data.Assignment.get("MaxPoints");
                            o = a.Data.Assignment.get("DropboxInd")
                        }
                        u = n.toJSON();
                        u = _.filter(u, function(w) {
                            return w.ScaleId == l.get("scale_id")
                        });
                        if (m.options.discussionInd) {
                            var v = _.find(a.Data.Assignment.get("SectionLinks"), function(w) {
                                return w.AssignmentIndexId == a.Data.Aiid
                            });
                            var p = e.getDate(v.DueDate);
                            m.collection.each(function(x) {
                                if (x.get("message_count") > 0) {
                                    var w = e.getDate(x.get("first_post"));
                                    w = new Date(w.getFullYear(), w.getMonth(), w.getDate());
                                    if (w > p) {
                                        x.set("isLate", true)
                                    }
                                }
                            })
                        } else {
                            if (m.options.dropboxInd) {
                                m.dropBoxAssignmentSize = 0;
                                m.dropBoxAssignmentMaxSize = 262144000;
                                m.collection.each(function(w) {
                                    a.Us.buildFilesList(w);
                                    if (w.get("files")) {
                                        m.dropBoxAssignmentSize += _.chain(w.get("files")).pluck("fileSizeKb").reduce(function(x, y) {
                                            return x + y
                                        }, 0).value()
                                    }
                                })
                            }
                        }
                        if (a.Data.GradeWithRubric) {
                            t = _.filter(m.collection.toJSON(), function(w) {
                                return w.show_rubric === false
                            }).length > 0;
                            if (t) {
                                r.show()
                            } else {
                                r.hide()
                            }
                        }
                        a.Data.ScaleId = l.get("scale_id");
                        if (a.Data.GradedCount === undefined || a.Data.GradedCount < 0) {
                            a.Data.GradedCount = l.get("graded_count")
                        }
                        p3.fT(m.template, function(w) {
                            m.$el.html(w({
                                graded: a.Data.GradedCount,
                                enrolled: l.get("enrollment_count"),
                                assignmentId: a.Data.Aid,
                                schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                                sectionId: a.Data.SectionId,
                                MaxPoints: (q == -2 || a.Data.GradeWithRubric) ? false : q,
                                ScaleId: l.get("scale_id") == -1 ? false : l.get("scale_id"),
                                Scale: u,
                                DropBoxInd: o,
                                GradeBookInd: a.Data.GradeBookIndicator,
                                roster: m.collection.toJSON(),
                                DiscussionInd: m.options.discussionInd,
                                GradeWithRubric: a.Data.GradeWithRubric,
                                RubricsUnposted: t,
                                EvaluationInd: a.Data.EvaluationInd
                            }));
                            m.outputGradeCells()
                        })
                    },
                    error: function() {
                        p3.displayError("Error grade scale")
                    }
                })
            } else {
                if (m.options.dropboxInd) {
                    m.collection.each(function(n) {
                        a.Us.buildFilesList(n)
                    })
                }
                p3.fT(m.template, function(n) {
                    m.$el.html(n({
                        graded: l.get("graded_count"),
                        enrolled: l.get("enrollment_count"),
                        assignmentId: a.Data.Aid,
                        schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                        sectionId: a.Data.SectionId,
                        MaxPoints: false,
                        ScaleId: false,
                        Scale: -1,
                        DropBoxInd: a.Data.DropBoxIndicator,
                        GradeBookInd: a.Data.GradeBookIndicator,
                        roster: m.collection.toJSON()
                    }))
                })
            }
        },
        outputGradeCells: function() {
            var m = this,
                l;
            if (!a.Data.GradeWithRubric) {
                m.collection.each(function(n) {
                    if (n.get("scale_id") > 0) {
                        l = new a.Vs.GradeSelectView({
                            model: n,
                            collection: a.Data.Scale
                        })
                    } else {
                        l = new a.Vs.GradeInputView({
                            model: n
                        })
                    }
                    p3.rV(l, "#grade-container-" + n.get("user_id"), false);
                    l.on("gradeChange", function() {
                        var o = this;
                        m.collection.fetch({
                            silent: true,
                            data: {
                                aiid: a.Data.Aiid,
                                viewerId: p3.Data.Context.get("UserInfo").UserId
                            },
                            success: function(p, s) {
                                $("#grade-average").text(a.Us.getAverageGrade(a.Data.Assignment.get("MaxPoints"), m.collection));
                                $("#current-graded-total").text(m.collection.at(0).get("graded_count"));
                                $("#current-graded-count").text(m.collection.at(0).get("graded_count"));
                                if ($("#student-detail-region").is(":visible") && m.selectedUser && m.selectedUser == n.get("user_id")) {
                                    m.outputStudent()
                                }
                                var q = m.collection.get(o.model.id);
                                o.model.set({
                                    points_earned: q.get("points_earned"),
                                    value_id: q.get("value_id")
                                })
                            },
                            error: function(p, q) {
                                p3.displayError("Error loading Roster.")
                            }
                        })
                    })
                })
            }
        },
        setMaxPoint: function(m) {
            var u = this,
                l = $(m.target),
                r = 0,
                n, s, p;
            r = _.find(a.Data.Assignment.get("SectionLinks"), function(v) {
                return v.SectionId == a.Data.SectionId
            });
            if (l.html() !== "Add") {
                return false
            }
            var t = l.siblings("select").val() || "-1",
                q = l.siblings('input[type="text"]').val() || "-2";
            var o = new h.Ms.Gradebook({
                status: "save",
                DaysLate: 0,
                ScaleId: -1,
                AssignmentId: a.Data.Aid,
                ValueId: t,
                PointsEarned: q
            });
            if (o.isValid()) {
                for (n = 0; n < u.collection.length; n++) {
                    s = u.collection.at(n).get("user_id");
                    p = new h.Ms.GradebookSave({
                        AssignmentId: a.Data.Aid,
                        StudentUserId: s,
                        PointsEarned: q,
                        ValueId: t,
                        Exempt: false,
                        Incomplete: false,
                        Late: false,
                        DaysLate: 0,
                        Comment: "",
                        status: "save"
                    });
                    l.closest(".control-group").removeClass("error");
                    l.closest(".controls").removeAttr("data-original-title");
                    a.Data.SaveCollection.add(p, {
                        silent: true
                    })
                }
                if (a.Data.SaveCollection.length > 0) {
                    new h.Ms.GradebookSave().save({
                        sectionId: a.Data.SectionId,
                        markingPeriodId: r.MarkingPeriodId,
                        xmlData: JSON.stringify(a.Data.SaveCollection),
                        gradesOnly: true
                    }, {
                        success: function(x, y) {
                            a.Data.SaveCollection.reset(null, {
                                silent: true
                            });
                            $(".grade-input").each(function(B) {
                                var A = $(this);
                                if (q === "-2") {
                                    q = ""
                                }
                                if (A.is("input")) {
                                    A.val(q)
                                } else {
                                    if (A.is("select")) {
                                        A.val(t)
                                    }
                                }
                            });
                            a.Data.GradedCount = u.collection.length;
                            $("#current-graded-count").html(a.Data.GradedCount);
                            $("#current-graded-total").html(a.Data.GradedCount);
                            var v = "";
                            if (a.Data.Assignment.get("MaxPoints") > 0) {
                                if (t > 0) {
                                    var z = a.Data.Scale.toJSON(),
                                        w;
                                    for (w = 0; w < z.length; w++) {
                                        if (z[w].ValueId == t) {
                                            q = z[w].ScaleValue;
                                            break
                                        }
                                    }
                                }
                                if (q > 0) {
                                    v = Math.round((q / a.Data.Assignment.get("MaxPoints")) * 100);
                                    v = v.toString() + "%"
                                } else {
                                    v = "0%"
                                }
                                $("#grade-average").html(v)
                            }
                        },
                        error: function(v, w) {
                            p3.displayError("Error on Gradebook save");
                            a.Data.SaveCollection.reset(null, {
                                silent: true
                            })
                        }
                    })
                }
            }
        },
        showStudentDetail: function(m) {
            var o = this,
                l = $(m.currentTarget),
                n = l.data("id");
            o.updateSelectedItem(l);
            o.selectedUser = n;
            if (o.options.discussionInd) {
                o.trigger("studentSelected", n)
            }
            o.outputStudent();
            m.preventDefault()
        },
        updateSelectedItem: function(l) {
            $("#details-region").hide();
            $("#student-detail-region").show();
            $("ul.roster-list li").removeClass("selected").css("background-color", "");
            l.parents("li").addClass("selected")
        },
        outputStudent: function() {
            var m = this,
                l = new a.Vs.GradeEdit({
                    model: m.collection.get(m.selectedUser),
                    discussionInd: m.options.discussionInd,
                    collection: m.collection,
                    parentView: m
                });
            if (m.options.dropboxInd) {
                m.collection.each(function(n) {
                    a.Us.buildFilesList(n)
                })
            }
            p3.rV(l, "#student-detail-region", true);
            l.on("detailEdited", function() {
                m.collection.fetch({
                    silent: true,
                    data: {
                        aiid: a.Data.Aiid,
                        viewerId: p3.Data.Context.get("UserInfo").UserId
                    },
                    success: function(n, o) {
                        $("#grade-average").html(a.Us.getAverageGrade(a.Data.Assignment.get("MaxPoints"), m.collection));
                        $("#current-graded-total").html(m.collection.at(0).get("graded_count"));
                        m.outputGradeCells()
                    },
                    error: function(n, o) {
                        p3.displayError("Error loading Roster.")
                    }
                })
            })
        },
        showDetails: function(m) {
            var n = this,
                l = $(m.currentTarget);
            $("#details-region").show();
            $("#student-detail-region").hide();
            $("ul.roster-list li").removeClass("selected").css("background-color", "");
            l.parents("li").addClass("selected").css("background-color", ":#f3f3f4");
            if (n.options.discussionInd) {
                n.trigger("detailsSelected")
            }
            m.preventDefault()
        },
        changeUser: function(m) {
            var n = this,
                l = $('.select-student[data-id="' + m + '"]');
            n.updateSelectedItem(l);
            n.selectedUser = m;
            n.outputStudent()
        },
        dispose: function() {
            p3.Layout.Containers.MainBulletin.removeClass("left-nav-spacing");
            p3.Layout.Containers.EmergencyBulletin.removeClass("left-nav-spacing")
        },
        postRubrics: function(l) {
            var m;
            p3.showConfirm("Post completed rubrics", "Are you sure you want to commit available grades and post completed rubrics for this assignment?", null, function() {
                m = new b.Ms.RubricResultsPost();
                m.fetch({
                    data: {
                        assignmentIndexid: a.Data.Aiid
                    },
                    success: function() {
                        p3.renderMainPage(new a.Vs.LayoutView({
                            aid: a.Data.Aid,
                            aiid: a.Data.Aiid
                        }))
                    },
                    error: function() {
                        p3.displayError("Error posting rubric results")
                    }
                })
            })
        },
        downloadAllByAssignment: function() {
            var m = this,
                l;
            if (m.dropBoxAssignmentSize > m.dropBoxAssignmentMaxSize) {
                l = k.Vs.Modal2.extend({
                    template: "assignmentdetails/downloadall.warning.template.html",
                    size: "md",
                    variables: {
                        fileSize: a.Us.FileSizeDisplay(m.dropBoxAssignmentSize, "MB"),
                        maxFileSize: a.Us.FileSizeDisplay(m.dropBoxAssignmentMaxSize, "MB")
                    }
                });
                k.Us.renderModal(new l({}))
            } else {
                window.location = "/podium/DropBox/DBDownload.aspx?aid=" + a.Data.Aid + "&s=" + p3.Data.SchoolContext.get("SchoolInfo").SchoolId + "&sid=" + a.Data.SectionId
            }
        }
    });
    a.Vs.RosterCellView = Bb.View.extend({
        template: "assignmentdetails/rostercell.template.html",
        tagName: "td",
        events: {
            "click .detail-expand-button": "doDetailToggle",
            "click .drop-box-remove-file": "doRemoveFile",
            "click .resubmit-link": "doResubmit",
            keydown: "doKeyFilter",
            refreshfiles: "buildFilesList"
        },
        render: function(l) {
            $(l).html(this.el)
        },
        renderTemplate: function() {
            var l = this;
            p3.fT(l.template, function(m) {
                l.$el.html(m({
                    dropbox: l.options.dropbox,
                    grades: l.options.gradebook,
                    student: l.model.toJSON(),
                    aiid: a.Data.Aiid
                }));
                if (l.model.get("scale_id") > 0) {
                    p3.rV(new a.Vs.GradeSelectView({
                        model: l.model,
                        collection: a.Data.Scale
                    }), l.$el.find(".controls"), false)
                } else {
                    p3.rV(new a.Vs.GradeInputView({
                        model: l.model
                    }), l.$el.find(".controls"), false)
                }
            })
        },
        doDetailToggle: function(l) {
            $(l.currentTarget).siblings(".assignment-details-student-files-detail").toggle()
        },
        doResubmit: function(o) {
            var l = $(o.currentTarget),
                p = l.data("sid"),
                n = l.data("dbid"),
                m = new a.Vs.ResubmitConfirmation({
                    dbid: n,
                    sid: p,
                    aiid: a.Data.Aiid,
                    collection: this.collection
                });
            p3.rV(m, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        },
        doRemoveFile: function(o) {
            var l = $(o.currentTarget),
                p = l.data("fileId"),
                q = l.data("sid"),
                n = l.data("dbid"),
                m = new a.Vs.RemoveConfirmation({
                    fileId: p,
                    dbid: n,
                    sid: q,
                    aiid: a.Data.Aiid,
                    target: l.closest(".attached-file-container")
                });
            p3.rV(m, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        },
        buildFilesList: function() {
            var m = this,
                l = this.model;
            a.Us.buildFilesList(l, m)
        },
        doKeyFilter: function(n) {
            var m = $(n.target),
                l = m.closest("tr");
            switch (n.keyCode) {
                case 9:
                case 13:
                case 40:
                    l = l.next();
                    if (l !== undefined && l.length > 0) {
                        l.find(".grade-input").focus();
                        n.preventDefault()
                    } else {
                        m.blur().focus()
                    }
                    break;
                case 38:
                    l = l.prev();
                    if (l !== undefined && l.length > 0) {
                        l.find(".grade-input").focus();
                        n.preventDefault()
                    } else {
                        m.blur().focus()
                    }
                    break;
                case 32:
                    m.dblclick();
                    return false;
                default:
                    break
            }
        }
    });
    a.Vs.GradeInputView = Bb.View.extend({
        events: {
            mouseenter: "inputEnter",
            mouseleave: "inputLeave",
            dblclick: "doGradeDetail",
            change: "doSave"
        },
        initialize: function() {
            this.listenTo(this.model, "change:points_earned", this.changePoints)
        },
        render: function(l) {
            $(l).html(this.el);
            this.changePoints()
        },
        inputEnter: function() {
            this.$el.tooltip("show")
        },
        inputLeave: function() {
            this.$el.tooltip("hide")
        },
        changePoints: function() {
            var l, m = "width:55px;";
            if (!this.$el.children().is("input")) {
                l = $("<input>", {
                    type: "text",
                    "class": "pull-right grade-input form-control",
                    style: m,
                    placeholder: "Grade",
                    maxlength: "6"
                }).appendTo(this.$el.empty())
            } else {
                l = this.$("input")
            }
            l.val((this.model.get("points_earned") > -1) ? this.model.get("points_earned") : "")
        },
        doSave: function(n) {
            var t = this,
                m = $(n.currentTarget).find("input"),
                l = m.parent(),
                q = t.model.get("user_id"),
                r = m.val(),
                p = 0;
            p = _.find(a.Data.Assignment.get("SectionLinks"), function(u) {
                return u.SectionId == a.Data.SectionId
            });
            if ((r || r === "")) {
                if (parseFloat(t.model.get("points_earned"), 10) !== parseFloat(r, 10)) {
                    var o = new h.Ms.GradebookSave();
                    var s = new h.Ms.Gradebook();
                    o.set({
                        AssignmentId: a.Data.Aid,
                        StudentUserId: q,
                        PointsEarned: r || -2,
                        ValueId: -1,
                        Exempt: false,
                        Incomplete: false,
                        Late: false,
                        DaysLate: 0,
                        Comment: t.model.get("comment"),
                        status: "save"
                    });
                    s.on("error", t.itemError, t);
                    s.set({
                        ScaleId: -1,
                        DaysLate: 0,
                        AssignmentId: a.Data.Aid,
                        StudentUserId: q
                    });
                    if (!s.set({
                            status: "save",
                            PointsEarned: r
                        })) {
                        return false
                    }
                    m.closest(".control-group").removeClass("error");
                    m.closest(".controls").removeAttr("data-original-title");
                    p3.loadingIcon(l, "", "30", "30");
                    a.Data.SaveCollection.add(o);
                    new h.Ms.GradebookSave().save({
                        sectionId: a.Data.SectionId,
                        markingPeriodId: p.MarkingPeriodId,
                        xmlData: JSON.stringify(a.Data.SaveCollection),
                        gradesOnly: true
                    }, {
                        success: function(u, v) {
                            l.children().replaceWith(m);
                            a.Data.SaveCollection.reset(null, {
                                silent: true
                            });
                            if (o.get("PointsEarned") !== -2) {
                                a.Data.GradedCount += 1
                            }
                            $("#current-graded-count").html(a.Data.GradedCount);
                            $(".resubmit-link[data-sid='" + q + "']").remove();
                            _.delay(function() {
                                t.trigger("gradeChange")
                            }, 1000)
                        },
                        error: function(u, v) {
                            p3.displayError("Error on Gradebook save");
                            a.Data.SaveCollection.reset(null, {
                                silent: true
                            });
                            l.children().replaceWith(m)
                        }
                    })
                }
            }
        },
        itemError: function(n, m) {
            var l = this.find("input").closest(".control-group");
            if (l !== undefined) {
                m.each(function(o) {
                    if (o.get("item") === "PointsEarned") {
                        l.addClass("error").find(".controls").attr("data-original-title", o.get("message"))
                    }
                })
            }
        },
        doGradeDetail: function(l) {
            var n = this,
                m = n.model.get("user_id");
            if (a.Data.MarkingPeriods === undefined) {
                a.Data.MarkingPeriods = new a.Cs.MarkingPeriods()
            }
            if (a.Data.MarkingPeriods.length <= 0) {
                a.Data.MarkingPeriods.fetch({
                    data: {
                        sectionList: a.Data.SectionId
                    },
                    success: function(o, p) {
                        n.launchGradeDetail(m)
                    },
                    error: function(o, p) {
                        p3.displayError("Error retreiving Marking Period Information.")
                    }
                })
            } else {
                n.launchGradeDetail(m, l)
            }
        },
        launchGradeDetail: function(o, l) {
            var q = this,
                n = _.find(a.Data.Assignment.get("SectionLinks"), function(r) {
                    return r.SectionId == a.Data.SectionId
                });
            var m = new h.Ms.Gradebook({
                    AssignmentId: a.Data.Aid,
                    StudentUserId: o
                }).on("change", function() {
                    if (m.get("status") === "save") {
                        a.Data.SaveCollection.add(m);
                        new h.Ms.GradebookSave().save({
                            sectionId: a.Data.SectionId,
                            markingPeriodId: n.MarkingPeriodId,
                            xmlData: JSON.stringify(a.Data.SaveCollection)
                        }, {
                            success: function(s, t) {
                                $(l.currentTarget).find("input").val(m.get("PointsEarned") == -2 ? "" : m.get("PointsEarned"));
                                a.Data.SaveCollection.reset(null, {
                                    silent: true
                                });
                                p3.showModal(p3.Layout.Containers.Modal, "hide");
                                if (m.get("ValueId") !== -1) {
                                    a.Data.GradedCount += 1
                                }
                                $("#current-graded-count").html(a.Data.GradedCount);
                                $(".resubmit-link[data-sid='" + o + "']").remove();
                                q.trigger("gradeChange")
                            },
                            error: function(s, t) {
                                p3.displayError("Error on Gradebook save");
                                a.Data.SaveCollection.reset(null, {
                                    silent: true
                                })
                            }
                        })
                    }
                }, this),
                p = new Bbm({
                    sectionId: a.Data.SectionId,
                    markingPeriodId: n.MarkingPeriodId
                });
            p3.rV(new h.Vs.Detail({
                model: m,
                values: p
            }), p3.Layout.Containers.Modal, true);
            p3.Layout.Containers.Modal.on("hide  hide.bs.modal", function() {
                $(l.currentTarget).find("input").focus();
                $(this).off("hide hide.bs.modal")
            })
        }
    });
    a.Vs.GradeSelectView = Bb.View.extend({
        events: {
            dblclick: "doGradeDetail",
            "change select": "doSave"
        },
        initialize: function(l) {
            a.Data.Scale.on("reset", this.renderTemplate, this);
            this.listenTo(this.model, "change:value_id", this.changeValue)
        },
        render: function(l) {
            $(l).html(this.el);
            this.changeValue()
        },
        changeValue: function() {
            if (!this.$el.children().is("select")) {
                $("<SELECT>", {
                    "class": "input-mini grade-input form-control",
                    "data-model-member": "ValueId"
                }).append($("<option>", {
                    value: "-1"
                })).appendTo(this.$el.empty())
            }
            this.renderTemplate()
        },
        renderTemplate: function() {
            var m = this,
                l = this.$("select");
            if (l[0].children.length === 1) {
                a.Data.Scale.each(function(n) {
                    if (n.get("ScaleId") === m.model.get("scale_id")) {
                        l.append($("<option>", {
                            value: n.get("ValueId")
                        }).append(n.get("ScaleLetter")))
                    }
                })
            }
            l.val(this.model.get("value_id"))
        },
        doSave: function(n) {
            var t = this,
                m = $(n.currentTarget),
                l = m.parent(),
                q = t.model.get("user_id"),
                r = m.val(),
                p = 0;
            p = _.find(a.Data.Assignment.get("SectionLinks"), function(u) {
                return u.SectionId == a.Data.SectionId
            });
            if ((r || r === "")) {
                if (t.model.get("points_earned") != r) {
                    var o = new h.Ms.GradebookSave();
                    var s = new h.Ms.Gradebook();
                    o.set({
                        AssignmentId: a.Data.Aid,
                        StudentUserId: q,
                        PointsEarned: -2,
                        ValueId: r || -1,
                        ScaleId: t.model.get("scale_id"),
                        Exempt: false,
                        Incomplete: false,
                        Late: false,
                        DaysLate: 0,
                        Comment: t.model.get("comment"),
                        status: "save"
                    });
                    s.on("error", t.itemError, t);
                    s.set({
                        ScaleId: t.model.get("scale_id"),
                        DaysLate: 0,
                        AssignmentId: a.Data.Aid,
                        StudentUserId: q
                    });
                    if (!s.set({
                            status: "save",
                            PointsEarned: 2,
                            ValueId: r
                        })) {
                        return false
                    }
                    m.closest(".control-group").removeClass("error");
                    m.closest(".controls").removeAttr("data-original-title");
                    p3.loadingIcon(l, "", "30", "30");
                    a.Data.SaveCollection.add(o);
                    new h.Ms.GradebookSave().save({
                        sectionId: a.Data.SectionId,
                        markingPeriodId: p.MarkingPeriodId,
                        xmlData: JSON.stringify(a.Data.SaveCollection),
                        gradesOnly: true
                    }, {
                        success: function(u, v) {
                            $(l.children()[0]).replaceWith(m);
                            a.Data.SaveCollection.reset(null, {
                                silent: true
                            });
                            a.Data.GradedCount += 1;
                            $("#current-graded-count").html(a.Data.GradedCount);
                            $(".resubmit-link[data-sid='" + q + "']").remove();
                            t.trigger("gradeChange")
                        },
                        error: function(u, v) {
                            p3.displayError("Error on Gradebook save");
                            a.Data.SaveCollection.reset(null, {
                                silent: true
                            });
                            l.children(".textcenter").replaceWith(m)
                        }
                    })
                }
            }
        },
        doGradeDetail: function(l) {
            var n = this,
                m = n.model.get("user_id");
            if (a.Data.MarkingPeriods === undefined) {
                a.Data.MarkingPeriods = new a.Cs.MarkingPeriods()
            }
            if (a.Data.MarkingPeriods.length <= 0) {
                a.Data.MarkingPeriods.fetch({
                    data: {
                        sectionList: a.Data.SectionId
                    },
                    success: function(o, p) {
                        n.launchGradeDetail(m)
                    },
                    error: function(o, p) {
                        p3.displayError("Error retreiving Marking Period Information.")
                    }
                })
            } else {
                n.launchGradeDetail(m, l)
            }
        },
        launchGradeDetail: function(q, m) {
            var s = this,
                l = $(m.currentTarget),
                p = _.find(a.Data.Assignment.get("SectionLinks"), function(t) {
                    return t.SectionId == a.Data.SectionId
                }),
                o = new Bbc();
            a.Data.Scale.each(function(t) {
                if (t.get("ScaleId") === a.Data.ScaleId) {
                    o.add(t)
                }
            });
            var n = new h.Ms.Gradebook({
                    AssignmentId: a.Data.Aid,
                    StudentUserId: q,
                    ScaleId: a.Data.ScaleId
                }).on("change", function() {
                    if (n.get("status") === "save") {
                        a.Data.SaveCollection.add(n);
                        new h.Ms.GradebookSave().save({
                            sectionId: a.Data.SectionId,
                            markingPeriodId: p.MarkingPeriodId,
                            xmlData: JSON.stringify(a.Data.SaveCollection),
                            gradesOnly: true
                        }, {
                            success: function(t, u) {
                                l.find("option").removeAttr("selected");
                                var v = "option[value=" + n.get("ValueId") + "]";
                                l.find(v).attr("selected", true);
                                a.Data.SaveCollection.reset(null, {
                                    silent: true
                                });
                                p3.showModal(p3.Layout.Containers.Modal, "hide");
                                a.Data.GradedCount += 1;
                                $("#current-graded-count").html(a.Data.GradedCount);
                                s.trigger("gradeChange")
                            },
                            error: function(t, u) {
                                p3.displayError("Error on Gradebook save");
                                a.Data.SaveCollection.reset(null, {
                                    silent: true
                                })
                            }
                        })
                    }
                }, this),
                r = new Bbm({
                    sectionId: a.Data.SectionId,
                    markingPeriodId: p.MarkingPeriodId,
                    scale: o
                });
            p3.rV(new h.Vs.Detail({
                model: n,
                values: r
            }), p3.Layout.Containers.Modal, true);
            p3.Layout.Containers.Modal.on("hide hide.bs.modal", function() {
                $(m.currentTarget).focus();
                $(this).off("hide hide.bs.modal")
            })
        }
    });
    a.Vs.StudentSubmittedDropBox = Bb.View.extend({
        template: "assignmentdetails/submitted.template.html",
        events: {
            "click .file-annotate-btn": "showFile"
        },
        render: function(l) {
            var m = this;
            $(l).append(this.el);
            p3.fT(m.template, function(r) {
                if (m.collection !== undefined && m.collection.length > 0) {
                    var o = m.collection.at(0),
                        q = " Completed",
                        p = m.collection.length;
                    if (o.get("readyInd") === true) {
                        q = " Completed"
                    } else {
                        if (o.get("readyInd") === false && o.get("dbid") !== null) {
                            q = " In Progress"
                        } else {
                            q = " To Do"
                        }
                    }
                    if (!m.options.onlyGraded || (m.options.onlyGraded && m.options.gradesPublished)) {
                        m.$el.html(r({
                            points: o.get("pointsEarned") || false,
                            maxPoints: o.get("maxPoints") || false,
                            letterGrade: o.get("Letter") || false,
                            parent: p3.Data.Context.getSelectedPersona().Id === f.AppPersona.PARENT.Value,
                            status: q,
                            todo: q === " To Do",
                            inProgress: q === " In Progress",
                            submittedTime: a.Us.DateParse(o.get("lastSubmitDate")),
                            details: o.get("dbDetail"),
                            hasFiles: o.get("dbFileId") || false,
                            gradebook: m.options.gradebook || false,
                            onlyGraded: m.options.onlyGraded || false,
                            gradesPublished: m.options.gradesPublished || false
                        }))
                    }
                    var n = $("#drop-box-attached-files");
                    var s = new a.Ms.UserFolder();
                    s.fetch({
                        data: {
                            uid: a.Data.CurrentStudent || p3.Data.Context.get("UserInfo").UserId
                        },
                        success: function() {
                            var u, t, y, w, v, x;
                            y = '<table class="table table-striped table-condensed"><tbody>';
                            for (w = 0; w < p; w++) {
                                v = m.collection.at(w);
                                x = "/app/file/DropBoxFile?aiid=" + a.Data.Aiid + "&uTolken=" + v.get("uuid") + "&tolken=" + v.get("tolken");
                                t = "";
                                u = a.Us.canAnnotate(v.get("dbFileName"));
                                if (u) {
                                    t = '<a href="#" class="btn btn-default btn-mini file-annotate-btn pull-right" data-id="' + v.get("dbFileId") + '" style="margin-right:5px;"><h5><i class="p3icon-reviewReady p3Blue"></i> View</h5></a>'
                                }
                                y += '<tr><td data-name="' + v.get("dbFileName") + '" data-orig-name="' + v.get("dbFileName") + '" data-size="' + v.get("fileSize") + '" data-file-id="' + v.get("dbFileId") + '">' + v.get("dbFileName") + "</td>";
                                y += '<td align="right"><a target="_blank" href="' + x + '" class="attachment-view-link btn btn-default btn-mini pull-right"><i class="p3icon-topicDownload"></i></a>' + t + "</td></tr>"
                            }
                            y += "</tbody></table>";
                            n.html(y)
                        }
                    })
                }
            })
        },
        showFile: function(l) {
            a.Us.showStudentFile(l, this.collection)
        }
    });
    a.Vs.StudentDropBox = Bb.View.extend({
        template: "assignmentdetails/dropbox.template.html",
        events: {
            "click #assignment-dropbox-save": "doSave",
            "click #assignment-dropbox-submit": "doSubmit",
            "click .attachment-remove-link": "doRemove",
            "fileuploaddone .dragRegion": "handleFileDone",
            "fileuploadprogressall .dragRegion": "handleFileProgress",
            "fileuploadfail .dragRegion": "handleFileFail"
        },
        initialize: function(l) {
            this.dropboxInd = l.dropboxInd;
            this.dbid = l.dbid;
            this.fileCount = 0;
            this.uploadedFileCount = 0
        },
        dispose: function() {
            var l = tinyMCE.get("drop-box-text-edit");
            if (l) {
                l.remove();
                l = null
            }
        },
        render: function(l) {
            $(l).append(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var l = this;
            p3.fT(l.template, function(n) {
                var m = a.Data.Assignment.get("DropboxNumFiles");
                l.$el.html(n({
                    maxFiles: m,
                    multiple: m > 1,
                    allowFiles: m !== 0
                }));
                p3.showHtmlEditor("drop-box-text-edit", p3.Us.Enum.HtmlEditorCategories.LIMITED2LINE, false, undefined, p3.Us.Enum.HtmlEditorEncoding.NUMERIC);
                if (l.collection !== undefined) {
                    l.doLoad()
                } else {
                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, l.initFileUpload, l)
                    })
                }
            })
        },
        doLoad: function() {
            var v = this,
                o = v.collection,
                u = a.Data.Assignment.get("DropboxNumFiles"),
                s, r, t;
            if (o.length > 0 && o.at(0).get("dbid") !== null) {
                var n = o.at(0),
                    m = $("#drop-box-text-edit"),
                    l = $("#attached-files tbody"),
                    p = o.length;
                if (n.get("dbid")) {
                    v.dbid = n.get("dbid")
                } else {
                    v.dbid = undefined
                }
                if (!n.get("readyInd")) {
                    if (n.get("lastSubmitDate")) {
                        $("#submission-status-label").html("Saved: " + a.Us.DateParse(n.get("lastSubmitDate")));
                        $("#status-indicator-label").html("In Progress");
                        $("#status-indicator-button").addClass("btn-warning")
                    }
                    var q = tinyMCE.get("drop-box-text-edit");
                    if (q !== undefined) {
                        q.setContent(n.get("dbDetail") || "")
                    }
                    m.val(n.get("dbDetail"))
                }
                for (s = 0; s < p; s++) {
                    r = o.at(s);
                    t = "/app/file/DropBoxFile?aiid=" + a.Data.Aiid + "&uTolken=" + r.get("uuid") + "&tolken=" + r.get("tolken");
                    if (r !== undefined && r.get("dbFileId") !== null) {
                        l.append('<tr data-name="' + r.get("dbFileName") + '" data-orig-name="' + r.get("dbFileName") + '" data-size="' + r.get("fileSize") + '" data-file-id="' + r.get("dbFileId") + '" data-dbid="' + r.get("dbid") + '"><td><a href ="' + t + '" target="__new">' + r.get("dbFileName") + '</a></td><td class="pull-right"><a href="#" class="attachment-remove-link pull-right btn btn-default btn-small" data-toggle="tooltip" title="Remove/Replace"><i class="p3icon-remove"></i></a></td></tr>');
                        v.fileCount += 1
                    }
                }
                if (v.fileCount >= u) {
                    $(".dragRegion").hide()
                } else {
                    $(".dragRegion").show()
                }
            }
            p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.FileUpload, v.initFileUpload, v)
            })
        },
        doSave: function(m) {
            var q = $("#assignment-dropbox-submit"),
                o = $("#assignment-dropbox-save"),
                r = tinyMCE.get("drop-box-text-edit"),
                s = this;
            o.attr("disabled", "disabled");
            q.attr("disabled", "disabled");
            if (r) {
                r.save()
            }
            var l = $("#drop-box-text-edit").val(),
                n = [],
                p = new a.Ms.DropBoxSave({});
            _.each($("#attached-files tbody").children("tr"), function(t) {
                n.push({
                    Id: $(t).data("fileId") || 0,
                    Type: 0,
                    Name: $(t).data("name"),
                    FullPath: $(t).data("origName"),
                    Size: $(t).data("size")
                })
            });
            p.save({
                DropBoxId: s.dbid !== undefined ? s.dbid : null,
                StudentUserId: a.Data.CurrentStudent || p3.Data.Context.get("UserInfo").UserId,
                AssignmentIndexId: a.Data.Aiid,
                ReadyInd: 0,
                Detail: l,
                Files: n
            }, {
                error: function() {
                    p3.displayError("Error saving Assignment");
                    o.removeAttr("disabled");
                    q.removeAttr("disabled")
                },
                success: function(u, v) {
                    s.dbid = v;
                    var t = new a.Cs.StudentAssignmentDetail();
                    t.fetch({
                        data: {
                            studentId: a.Data.CurrentStudent || p3.Data.Context.get("UserInfo").UserId,
                            AssignmentIndexId: a.Data.Aiid
                        },
                        error: function() {
                            o.removeAttr("disabled");
                            q.removeAttr("disabled")
                        },
                        success: function(x, y) {
                            var z, w = $("#assignment-detail-assignment");
                            if (x.length > 0) {
                                if (x.at(0).get("readyInd") === true) {
                                    z = new a.Vs.StudentSubmittedDropBox({
                                        collection: x
                                    })
                                } else {
                                    z = new a.Vs.StudentDropBox({
                                        dropboxInd: s.options.dropBoxInd,
                                        collection: x
                                    })
                                }
                                if (w.hasClass("span12") || w.hasClass("col-md-12")) {
                                    $("#assignment-detail-assignment").removeClass("span12 col-md-12").addClass("span6 col-md-6");
                                    $("#assignment-detail-extras").addClass("span6 col-md-6")
                                }
                                $(".dragRegion").off("fileuploaddone").off("fileuploadadd")
                            }
                            p3.rV(z, $("#assignment-detail-extras"), true);
                            o.removeAttr("disabled");
                            q.removeAttr("disabled")
                        }
                    })
                }
            })
        },
        doSubmit: function(m) {
            var n = this;
            var l = new a.Vs.SubmitConfirmation({
                dbid: n.dbid,
                form: n
            });
            p3.rV(l, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        },
        doRemove: function(o) {
            var q = this,
                l = $(o.currentTarget),
                p = l.closest("tr").data("fileId"),
                n = l.closest("tr").data("dbid");
            if (p !== undefined && p > 0) {
                var m = new a.Vs.RemoveConfirmation({
                    fileId: p,
                    target: l.closest("tr"),
                    view: q,
                    dbid: n,
                    sid: p3.Data.Context.get("UserInfo").UserId,
                    aiid: a.Data.Aiid
                });
                p3.rV(m, p3.Layout.Containers.Modal, true);
                p3.showModal(p3.Layout.Containers.Modal)
            } else {
                l.closest("tr").remove();
                q.fileCount -= 1;
                $(".dragRegion").show()
            }
            return false
        },
        initFileUpload: function(l) {
            $(".dragRegion").fileupload({
                url: p3.Config.RootPath + "utilities/FileTransferHandler.ashx",
                autoUpload: true,
                dropZone: ".dragRegion"
            })
        },
        handleFileDone: function(m, l) {
            var q = this,
                o = a.Data.Assignment.get("DropboxNumFiles");
            if (q.fileCount < o) {
                var n = l.result[0];
                var p = '<tr data-name="' + n.name + '" data-orig-name="' + n.original_name + '" data-size="' + n.size + '"><td>' + n.original_name + '</td><td class="pull-right"><a href="#" class="attachment-remove-link pull-right btn btn-default btn-small"><i class="p3icon-remove"></i></a></td></tr>';
                $("#attached-files tbody:last").append(p);
                q.fileCount += 1
            }
            if (q.fileCount == o) {
                $(".dragRegion").hide()
            }
            if (l.originalFiles.length == ++q.uploadedFileCount) {
                $("#progress_container").hide();
                $("#assignment-dropbox-save").removeAttr("disabled");
                $("#assignment-dropbox-submit").removeAttr("disabled");
                q.uploadedFileCount = 0
            }
        },
        handleFileFail: function(m, l) {
            var o = this,
                n = document.createElement("a").appendChild(document.createTextNode(l.files[0].name)).parentNode.innerHTML;
            if ($("#Failed_file_upload_msg").length === 0) {
                $("#progress_container").after($("<div>").addClass("alert alert-error").attr("id", "Failed_file_upload_msg").html('<button type="button" class="close" data-dismiss="alert">&times;</button>The file ' + n + " failed to upload. Please make sure the file name does not include special characters"))
            } else {
                $("#Failed_file_upload_msg").append("<br>The file " + n + " failed to upload. Please make sure the file name does not include special characters")
            }
            $("#progress_container").hide();
            $("#assignment-dropbox-save").removeAttr("disabled");
            $("#assignment-dropbox-submit").removeAttr("disabled");
            o.uploadedFileCount = 0
        },
        handleFileAdd: function(m, l) {
            var o = this,
                n = a.Data.Assignment.get("DropboxNumFiles");
            l.files[0].isValidUpload = p3.Us.FileTools.isValidFile(p3.Us.Enum.UploadType.All, l.files[0].name);
            if (o.fileCount == n) {
                return false
            }
            if (l.files[0].isValidUpload) {
                $("#progress_bar").attr("style", "width: 0%");
                $("#progress_container").show();
                $("#assignment-dropbox-save").attr("disabled", "disabled");
                $("#assignment-dropbox-submit").attr("disabled", "disabled");
                l.submit()
            } else {
                $(".drop-box-area > div > .dragRegion").before(p3.Us.FileTools.validateFiles(p3.Us.Enum.UploadType.All, l))
            }
            o.uploadedFileCount = 0
        },
        handleFileProgress: function(m, l) {
            var n = parseInt(l.loaded / l.total * 100, 10);
            $("#progress_bar").attr("style", "width: " + n + "%")
        }
    });
    a.Vs.SubmitConfirmation = Bb.View.extend({
        template: "assignmentdetails/confirm.template.html",
        events: {
            "click #resubmit-cancel-button": "doCancel",
            "click #resubmit-confirm-button": "doSubmit"
        },
        renderTemplate: function() {
            var l = this;
            p3.fT(l.template, function(m) {
                l.$el.html(m({
                    title: "Submit Assignment"
                }));
                p3.Us.InfoMessage.ErrorBox(p3.Us.InfoMessageLibrary.Assignment.AssignmentDetailDropBoxSubmit, ".modal-body", false)
            })
        },
        render: function(l) {
            var m = this;
            $(l).append(this.el);
            m.renderTemplate()
        },
        doSubmit: function(m) {
            if (typeof this.options.submitCallback === "function") {
                p3.showModal(p3.Layout.Containers.Modal, "hide");
                this.options.submitCallback.call(this.options.form, m, true)
            } else {
                $("#resubmit-confirm-button").attr("disabled", "disabled");
                var p = tinyMCE.get("drop-box-text-edit");
                if (p) {
                    p.save()
                }
                var q = this,
                    l = $("#drop-box-text-edit").val(),
                    n = [],
                    o = new a.Ms.DropBoxSave();
                _.each($("#attached-files tbody").children("tr"), function(r) {
                    n.push({
                        Id: $(r).data("fileId") || 0,
                        Type: 0,
                        Name: $(r).data("name"),
                        FullPath: $(r).data("origName"),
                        Size: $(r).data("size")
                    })
                });
                o.save({
                    DropBoxId: q.options.dbid !== undefined ? q.options.dbid : null,
                    StudentUserId: p3.Data.Context.get("UserInfo").UserId,
                    AssignmentIndexId: a.Data.Aiid,
                    ReadyInd: 1,
                    Detail: l,
                    Files: n
                }, {
                    error: function() {
                        p3.displayError("Error saving Assignment");
                        $("#resubmit-confirm-button").removeAttr("disabled")
                    },
                    success: function(t, u) {
                        if (q.options !== undefined) {
                            q.options.form.dbid = u
                        }
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        var s = new a.Cs.StudentAssignmentDetail();
                        s.fetch({
                            data: {
                                studentId: p3.Data.Context.get("UserInfo").UserId,
                                AssignmentIndexId: a.Data.Aiid
                            },
                            success: function(v) {
                                var w, r = $("#assignment-detail-assignment");
                                if (v.length > 0) {
                                    if (v.at(0).get("readyInd") === true) {
                                        w = new a.Vs.StudentSubmittedDropBox({
                                            collection: v
                                        })
                                    } else {
                                        w = new a.Vs.StudentDropBox({
                                            dropboxInd: q.options.dropBoxInd,
                                            collection: v
                                        })
                                    }
                                    if (r.hasClass("span12") || r.hasClass("col-md-12")) {
                                        $("#assignment-detail-assignment").removeClass("span12 col-md-12").addClass("span6 col-md-6");
                                        $("#assignment-detail-extras").addClass("span6 col-md-6")
                                    }
                                }
                                p3.rV(w, $("#assignment-detail-extras"), true)
                            }
                        })
                    }
                });
                return false
            }
            m.preventDefault()
        },
        doCancel: function() {
            $("#site-modal").modal("hide");
            return false
        }
    });
    a.Vs.RemoveConfirmation = Bb.View.extend({
        template: "assignmentdetails/confirm.template.html",
        events: {
            "click #resubmit-cancel-button": "doCancel",
            "click #resubmit-confirm-button": "doRemove"
        },
        renderTemplate: function() {
            var l = this;
            p3.fT(l.template, function(m) {
                l.$el.html(m({
                    title: "Remove File"
                }));
                p3.Us.InfoMessage.ErrorBox(p3.Us.InfoMessageLibrary.Assignment.AssignmentDetailRemoveConfirm, ".modal-body", false)
            })
        },
        render: function(l) {
            var m = this;
            $(l).append(this.el);
            m.renderTemplate()
        },
        doRemove: function(l) {
            var n = this;
            var m = new a.Ms.FileRemove();
            m.save({
                fileId: n.options.fileId,
                dropBoxId: n.options.dbid,
                studentId: n.options.sid,
                assignmentIndexId: n.options.aiid
            }, {
                error: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    p3.displayError("Error Removing File.")
                },
                success: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    if (n.options.target !== undefined) {
                        var o = n.options.target.closest(".attachment-bucket"),
                            p = n.options.target.siblings(".attached-file-container");
                        n.options.target.remove();
                        if (n.options.view) {
                            n.options.view.fileCount -= 1;
                            $(".dragRegion").show()
                        } else {
                            if (p.length === 0) {
                                o.siblings("hr").remove();
                                o.remove()
                            }
                        }
                    }
                    a.Data.DropBoxItems.fetch({
                        data: {
                            schoolYear: a.Data.SchoolYear,
                            assignmentId: a.Data.Aid
                        },
                        error: function(q, s) {
                            p3.displayError("Error loading Drop box items.")
                        }
                    })
                }
            });
            return false
        },
        doCancel: function() {
            $("#site-modal").modal("hide");
            return false
        }
    });
    a.Vs.ResubmitConfirmation = Bb.View.extend({
        template: "assignmentdetails/confirm.template.html",
        events: {
            "click #resubmit-cancel-button": "doCancel",
            "click #resubmit-confirm-button": "doResubmit"
        },
        renderTemplate: function() {
            var l = this;
            p3.fT(l.template, function(m) {
                l.$el.html(m({
                    title: "Allow Resubmit"
                }));
                if (p3.Data.Context.get("UserInfo").UserId === l.options.sid) {
                    p3.Us.InfoMessage.ErrorBox(p3.Us.InfoMessageLibrary.Assignment.AssignmentDetailAllowStudentResubmit, ".modal-body", false)
                } else {
                    p3.Us.InfoMessage.ErrorBox(p3.Us.InfoMessageLibrary.Assignment.AssignmentDetailAllowTeacherResubmit, ".modal-body", false)
                }
            })
        },
        render: function(l) {
            var m = this;
            $(l).append(this.el);
            m.renderTemplate()
        },
        doResubmit: function(l) {
            var n = this,
                m = new a.Ms.DropBoxSave();
            m.save({
                DropBoxId: n.options.dbid,
                StudentUserId: n.options.sid,
                AssignmentIndexId: n.options.aiid,
                ReadyInd: 0,
                Detail: null,
                FileDetail: null
            }, {
                error: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    p3.displayError("Error Allowing Resubmission")
                },
                success: function() {
                    n.trigger("Resubmit");
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    if (p3.Data.Context.get("UserInfo").UserId === n.options.sid) {
                        n.studentRefresh()
                    } else {
                        n.teacherRefresh()
                    }
                }
            });
            return false
        },
        teacherRefresh: function() {
            var l = this;
            if (l.options.collection) {
                l.options.collection.fetch({
                    data: {
                        aiid: a.Data.Aiid,
                        viewerId: p3.Data.Context.get("UserInfo").UserId
                    },
                    error: function(m, n) {
                        p3.displayError("Error loading Drop box items.")
                    }
                })
            }
            a.Data.DropBoxItems.fetch({
                data: {
                    schoolYear: a.Data.SchoolYear,
                    assignmentId: a.Data.Aid
                },
                error: function(m, n) {
                    p3.displayError("Error loading Drop box items.")
                }
            })
        },
        studentRefresh: function() {
            p3.renderMainPage(new a.Vs.LayoutView({
                aid: a.Data.Aid,
                aiid: a.Data.Aiid
            }))
        },
        doCancel: function() {
            $("#site-modal").modal("hide");
            return false
        }
    });
    a.Vs.StudentAssignmentInformation = Bb.View.extend({
        template: "AssignmentDetails/studentassignmentinfo.template.html",
        events: {
            "click #save-button": "doSave",
            "click #sub-button": "doSubmit"
        },
        initialize: function() {
            this.children = {}
        },
        render: function(l) {
            $(l).append(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var l = this;
            p3.fT(l.template, function(n) {
                var m = ((l.model.get("assignmentStatus") === 4 && l.model.get("readyInd")) || l.model.get("assignmentStatus") === 1 || !l.options.assignment.get("DropboxInd"));
                l.$el.html(n({
                    hideFooter: m
                }));
                l.children.header = new a.Vs.StudentInformationHeader({
                    model: l.model,
                    assignment: l.options.assignment
                });
                l.children.files = new a.Vs.StudentFileAttachments({
                    model: l.model,
                    assignment: l.options.assignment,
                    collection: l.options.files
                });
                l.children.textedit = new a.Vs.StudentSubmissionText({
                    model: l.model,
                    assignment: l.options.assignment
                });
                p3.rV(l.children.header, "#assignment-info-header", true);
                p3.rV(l.children.files, "#assignment-info-files", true);
                p3.rV(l.children.textedit, "#assignment-info-textedit", true);
                if (!l.options.onlineSubmit) {
                    $("#assignment-info-files").hide();
                    $("#assignment-info-textedit").hide()
                }
            })
        },
        refreshView: function() {
            var l = this;
            this.options.files.fetch({
                data: {
                    studentId: a.Data.CurrentStudent || p3.Data.Context.get("UserInfo").UserId,
                    AssignmentIndexId: a.Data.Aiid
                },
                success: function(m) {
                    if (m.length > 0) {
                        l.model = m.at(0);
                        l.renderTemplate()
                    }
                }
            })
        },
        doSave: function(m, p) {
            var t = this,
                l = t.children.textedit.getText(),
                s = $("#sub-button"),
                q = $("#save-button"),
                n = $(".assignment-file-attach-box .btn"),
                o = t.children.files.getFiles(),
                r = new a.Ms.DropBoxSave({});
            q.attr("disabled", "disabled");
            s.attr("disabled", "disabled");
            n.attr("disabled", "disabled");
            r.save({
                DropBoxId: t.model.get("dbid") !== undefined ? t.model.get("dbid") : null,
                StudentUserId: p3.Data.Context.get("UserInfo").UserId,
                AssignmentIndexId: a.Data.Aiid,
                ReadyInd: p ? 1 : 0,
                Detail: l,
                Files: o
            }, {
                error: function() {
                    p3.displayError("Error saving Assignment");
                    q.removeAttr("disabled");
                    s.removeAttr("disabled");
                    n.removeAttr("disabled")
                },
                success: function() {
                    p3.renderMainPage(new a.Vs.LayoutView({
                        aid: a.Data.Aid,
                        aiid: a.Data.Aiid
                    }))
                }
            })
        },
        doSubmit: function(m) {
            var n = this;
            var l = new a.Vs.SubmitConfirmation({
                dbid: n.dbid,
                form: n,
                submitCallback: n.doSave
            });
            p3.rV(l, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal)
        }
    });
    a.Vs.StudentInformationHeader = Bb.View.extend({
        template: "",
        tagName: "div",
        className: "assignment-detail-header",
        events: {
            statusChange: "doChangeStatus"
        },
        render: function(l) {
            $(l).html(this.el);
            var m = new a.Vs.HeaderStatusIndicator({
                userManaged: !this.options.assignment.get("DropboxInd"),
                model: this.model,
                assignment: this.options.assignment
            });
            p3.rV(m, this.$el, false);
            if (this.$el.find(".assignment-detail-header-info").length === 0) {
                this.$el.append($("<span>").addClass("assignment-detail-header-info"))
            }
        },
        doChangeStatus: function(q) {
            var r = q.statusCode,
                l = this.$el.find(".assignment-detail-header-info"),
                p = this.model.get("ddate"),
                t = this.model.get("lastSubmitDate"),
                o = p ? e.getDate(p) : undefined,
                s = t ? e.getDate(t) : undefined,
                n = Math.floor(((o.getTime() - e.localDateTime().getTime()) / (24 * 60 * 60 * 1000))),
                m = ["Sun", "Mon", "Tues", "Wed", "Thur", "Fri", "Sat"];
            this.$el.removeClass("todo inprogress overdue completed");
            if (l.length === 0) {
                this.$el.append($("<span>").addClass("assignment-detail-header-info"));
                l = this.$el.find(".assignment-detail-header-info")
            }
            if (n > 0) {
                l.text(n > 1 ? ("Due in " + n + " Days") : "Due Tomorrow")
            } else {
                if (n < 0) {
                    l.text("Overdue by " + Math.abs(n) + " Day" + (n < -1 ? "s" : ""))
                } else {
                    l.text("Due Today")
                }
            }
            switch (r) {
                case -1:
                    this.$el.addClass("todo");
                    break;
                case 0:
                    this.$el.addClass("inprogress");
                    break;
                case 1:
                    this.$el.addClass("completed");
                    if (this.model.get("lastSubmitDate") !== undefined && this.model.get("lastSubmitDate") !== null) {
                        s = e.getDate(this.model.get("lastSubmitDate"));
                        l.text("Submitted on " + m[s.getDay()] + " " + a.Us.DateParse(this.model.get("lastSubmitDate")))
                    } else {
                        l.text("")
                    }
                    break;
                case 2:
                    this.$el.addClass("overdue");
                    break;
                case 3:
                    break;
                case 4:
                    this.$el.addClass("completed");
                    if (this.model.get("readyInd") == 0) {
                        l.text("Not Submitted")
                    } else {
                        if (this.model.get("lastSubmitDate") !== undefined && this.model.get("lastSubmitDate") !== null) {
                            l.text("Submitted on " + m[s.getDay()] + " " + a.Us.DateParse(this.model.get("lastSubmitDate")))
                        } else {
                            l.text("")
                        }
                    }
                    break;
                default:
                    this.$el.addClass("todo");
                    break
            }
        }
    });
    a.Vs.HeaderStatusIndicator = Bb.View.extend({
        template: "",
        tagName: "div",
        className: "indicator-parent",
        events: {
            "click .assignment-status-link": "doStatusChange"
        },
        initialize: function() {
            this.isSelfManaged = this.options.userManaged || false
        },
        render: function(m) {
            var l = $("<div>").addClass("indicator-field p3formWhite");
            if (this.isSelfManaged && !this.model.get("readyInd") && !(this.model.get("assignmentStatus") == 4)) {
                this.$el.addClass("dropdown");
                l.addClass("dropdown-toggle assignment-status-button");
                l.append($("<span>").addClass("caret"));
                l.dropdown()
            } else {
                l.append($("<i>").addClass("iconColor"))
            }
            l.append($("<span>").addClass("assignment-detail-status-label"));
            this.$el.html(l);
            if (this.isSelfManaged && !this.model.get("readyInd") && !(this.model.get("assignmentStatus") == 4)) {
                this.renderStatusMenu(this.el, this.model.get("assignmentStatus"))
            }
            $(m).append(this.el);
            this.setStatus(this.model.get("assignmentStatus"))
        },
        renderStatusMenu: function(l, n) {
            var o = $("<ul>").addClass("dropdown-menu"),
                m = e.getDate(this.model.get("ddate"));
            if (m > e.localDateTime()) {
                o.append($("<li>", {
                    "class": "status-needs-action"
                }).append($("<a>", {
                    "class": "assignment-status-link",
                    href: "#",
                    "data-status": "-1",
                    text: "To Do"
                })))
            } else {
                o.append($("<li>", {
                    "class": "status-overdue"
                }).append($("<a>", {
                    "class": "assignment-status-link",
                    href: "#",
                    "data-status": "2",
                    text: "Overdue"
                })))
            }
            o.append($("<li>", {
                "class": "status-in-progress"
            }).append($("<a>", {
                "class": "assignment-status-link",
                href: "#",
                "data-status": "0",
                text: "In Progress"
            })));
            o.append($("<li>", {
                "class": "status-completed"
            }).append($("<a>", {
                "class": "assignment-status-link",
                href: "#",
                "data-status": "1",
                text: "Completed"
            })));
            $(l).append(o)
        },
        setStatus: function(n) {
            if (typeof n !== "number") {
                n = $(n.currentTarget).data("status")
            }
            var m = this.$el.find(".assignment-detail-status-label"),
                l = this.$el.find("i");
            l.attr("class", "");
            if (this.model.get("pointsEarned") || this.model.get("Letter")) {
                l.attr("class", "p3icon-ok iconColor")
            } else {
                if (this.model.get("readyInd")) {
                    l.attr("class", "p3icon-check iconColor")
                } else {
                    if (this.options.assignment.get("AssessmentInd")) {
                        l.attr("class", "p3icon-notification iconColor")
                    } else {
                        if (this.options.assignment.get("DropboxInd")) {
                            l.attr("class", "p3icon-assignmentUpload iconColor")
                        }
                    }
                }
            }
            switch (n) {
                case -1:
                    if (this.options.assignment.get("DropboxInd")) {
                        m.text(" Submit")
                    } else {
                        m.text(" To Do")
                    }
                    break;
                case 0:
                    m.text(" In Progress");
                    break;
                case 1:
                    m.text(" Completed");
                    l.attr("class", "p3icon-check iconColor");
                    break;
                case 2:
                    m.text(" Overdue");
                    break;
                case 3:
                    break;
                case 4:
                    if (this.model.get("pointsEarned") && this.options.assignment.get("PublishGrade")) {
                        m.text(" Graded: " + this.model.get("pointsEarned") + " of " + this.model.get("maxPoints"))
                    } else {
                        if (this.model.get("Letter") && this.options.assignment.get("PublishGrade")) {
                            m.text(" Graded: " + this.model.get("Letter"))
                        } else {
                            m.text(" Graded")
                        }
                    }
                    l.attr("class", "p3icon-ok iconColor");
                    break
            }
            this.$el.trigger(jQuery.Event("statusChange", {
                statusCode: n
            }))
        },
        doStatusChange: function(m) {
            var l = a.Data.Aiid,
                n = $(m.currentTarget).data("status"),
                p = this;
            if (this.model.get("assignmentStatus") !== n) {
                var o = new a.Ms.AssignmentStatusUpdate();
                o.save({
                    assignmentIndexId: l,
                    assignmentStatus: n
                }, {
                    success: function() {
                        p.model.set("assignmentStatus", n);
                        p.setStatus(n)
                    },
                    error: function() {
                        p3.displayError("Error updating assignment status")
                    }
                })
            }
            m.preventDefault()
        }
    });
    a.Vs.StudentFileAttachments = Bb.View.extend({
        template: "AssignmentDetails/FileAttachment.template.html",
        events: {
            "click .attachment-button": "launchAttachmentBrowser",
            "click .assignment-attachment-remove": "doRemoveFiles",
            "click .file-viewer-button": "showFile"
        },
        initialize: function() {
            var l = this;
            l.attachedFiles = new Bbc();
            if (l.collection !== undefined) {
                l.collection.each(function(m) {
                    if (m.get("dbFileName") !== undefined && m.get("dbFileName") !== null) {
                        l.attachedFiles.push(new Bbm({
                            fileName: m.get("dbFileName"),
                            size: m.get("fileSize"),
                            id: m.get("dbFileId"),
                            googleDocInd: m.get("googleDocInd"),
                            googleExternalId: m.get("googleExternalId"),
                            googleExternalUrl: m.get("googleExternalUrl")
                        }))
                    }
                    m.set("link", "/app/file/DropBoxFile?aiid=" + a.Data.Aiid + "&uTolken=" + m.get("uuid") + "&tolken=" + m.get("tolken"))
                })
            }
            l.attachedFileCount = l.attachedFiles.length;
            l.model.on("change", l.renderTemplate, l);
            _.bindAll(this, "doAttachFiles")
        },
        dispose: function() {
            this.model.off("change")
        },
        render: function(l) {
            $(l).append(this.el);
            this.renderTemplate()
        },
        renderTemplate: function() {
            var l = this;
            p3.fT(l.template, function(r) {
                var n = (l.attachedFileCount > 0 && l.collection !== undefined) ? l.collection.toJSON() : null,
                    p = l.options.assignment !== undefined ? l.attachedFileCount < l.options.assignment.get("DropboxNumFiles") : false,
                    o;
                if (l.model.get("readyInd") && n) {
                    for (o = 0; o < n.length; o++) {
                        n[o].canAnnotate = a.Us.canAnnotate(n[o].dbFileName);
                        n[o].FileSizeDisplay = a.Us.FileSizeDisplay(n[o].fileSize)
                    }
                }
                if (n || p) {
                    var q = l.model.get("readyInd");
                    var m = false;
                    if (!q) {
                        m = l.options.assignment !== undefined ? l.attachedFileCount < l.options.assignment.get("DropboxNumFiles") : false
                    }
                    l.$el.html(r({
                        files: n,
                        attachMore: m,
                        submitted: q,
                        attached: l.attachedFileCount,
                        max: l.options.assignment.get("DropboxNumFiles")
                    }))
                }
            })
        },
        launchAttachmentBrowser: function(l) {
            var o = this,
                m, n;
            n = o.options.assignment.get("DropboxNumFiles") > 0 ? o.options.assignment.get("DropboxNumFiles") : 0;
            n = n - (o.attachedFileCount > 0 ? o.attachedFileCount : 0);
            m = new g.Vs.AttachFilesModal({
                googleDriveAllowed: true,
                googleLinksPermitted: true,
                permittedFileCount: n,
                visibleFileLimit: true,
                receiveFilesCallback: o.doAttachFiles,
                sectionId: a.Data.SectionId
            });
            p3.rV(m, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            p3.initModalHeightTimer(p3.Layout.Containers.Modal)
        },
        getFiles: function() {
            var l = [];
            this.attachedFiles.each(function(m) {
                if (m.get("tempName") && m.get("fileName")) {
                    l.push({
                        Id: m.get("id") || 0,
                        Type: 0,
                        Name: m.get("tempName"),
                        FullPath: m.get("fileName"),
                        Size: m.get("size") || 0,
                        GoogleDocInd: m.get("GoogleDocInd"),
                        GoogleExternalId: m.get("googleExternalId"),
                        GoogleExternalUrl: m.get("googleExternalUrl")
                    })
                } else {
                    l.push({
                        Id: m.get("id") || 0,
                        Type: 0,
                        Name: m.get("fileName"),
                        Size: m.get("size") || 0,
                        GoogleDocInd: m.get("GoogleDocInd"),
                        GoogleExternalId: m.get("googleExternalId"),
                        GoogleExternalUrl: m.get("googleExternalUrl")
                    })
                }
            });
            return l
        },
        getUniqueFileName: function(p) {
            var r = this,
                q = p,
                o = function() {
                    return r.attachedFiles.find(function(s) {
                        return s.get("fileName") === q
                    })
                },
                n = p.substr(0, p.lastIndexOf(".")),
                m = p.substr(p.lastIndexOf(".") + 1, p.length),
                l = 0;
            while (o() && l < 25) {
                l++;
                q = n + " (" + l + ")." + m
            }
            return q
        },
        doAttachFiles: function(l) {
            var q = this,
                p, n, m, o;
            p3.fT("AssignmentDetails/fileattachment.file.detail.template.html", function(r) {
                l.each(function(s) {
                    p = q.getUniqueFileName(s.getFileName());
                    o = s.isGoogleDoc();
                    n = new Bbm({
                        fileName: p,
                        size: s.getFileSize(),
                        tempName: s.getTempFileName(),
                        googleDocInd: o,
                        googleExternalId: (o ? s.getGoogleFileId() : null),
                        googleExternalUrl: (o ? s.getGoogleFileUrl() : null)
                    });
                    q.attachedFiles.push(n);
                    m = r({
                        model: n.toJSON()
                    });
                    $("#online-submission-attached-files").append(m);
                    q.attachedFileCount++
                });
                if (q.attachedFileCount === q.options.assignment.get("DropboxNumFiles")) {
                    $("#assignment-attachment-button").hide()
                }
                $("#assignment-detail-attached-files").show();
                $("#files-attached-count").text(q.attachedFileCount)
            })
        },
        doRemoveFiles: function(m) {
            var p = this,
                n = $(m.currentTarget).data("file"),
                o = this.attachedFiles.find(function(q) {
                    return q.get("fileName") === n
                }),
                l = this.collection.find(function(q) {
                    return q.get("dbFileId") === o.get("id")
                });
            if (o !== undefined && o !== null) {
                if (o.get("id") !== undefined && o.get("id") !== null && o.get("id") > 0) {
                    p3.rV(new a.Vs.FileRemoveConfirmation({
                        model: l,
                        deletedCallback: function() {
                            p.attachedFiles.remove(o);
                            $(m.currentTarget).closest("tr").remove();
                            p.attachedFileCount--;
                            if (p.attachedFileCount < p.options.assignment.get("DropboxNumFiles")) {
                                $("#assignment-attachment-button").show()
                            }
                            if (p.attachedFileCount === 0) {
                                $("#assignment-detail-attached-files").hide()
                            }
                            $("#files-attached-count").text(p.attachedFileCount)
                        },
                        context: p
                    }), p3.Layout.Containers.Modal, true);
                    p3.showModal(p3.Layout.Containers.Modal)
                } else {
                    this.attachedFiles.remove(o);
                    $(m.currentTarget).closest("tr").remove();
                    p.attachedFileCount--;
                    if (p.attachedFileCount < p.options.assignment.get("DropboxNumFiles")) {
                        $("#assignment-attachment-button").show()
                    }
                    if (p.attachedFileCount === 0) {
                        $("#assignment-detail-attached-files").hide()
                    }
                    $("#files-attached-count").text(p.attachedFileCount)
                }
            }
        },
        showFile: function(l) {
            a.Us.showStudentFile(l, this.collection)
        }
    });
    a.Vs.StudentSubmissionText = Bb.View.extend({
        template: "",
        events: {},
        initialize: function() {
            if (this.options.assignment !== undefined) {
                this.editMode = this.options.assignment.get("DropboxInd") && !this.model.get("readyInd")
            } else {
                this.editMode = this.options.editmode || false
            }
        },
        dispose: function() {
            var l = tinyMCE.get("online-submission-text");
            if (l) {
                l.remove();
                l = null
            }
        },
        render: function(l) {
            var n = "online-submission-text",
                m = this.model.get("dbDetail") || "";
            $(l).append(this.el);
            if (this.editMode) {
                this.$el.addClass("online-submission-text-container");
                var o = $("<textarea>", {
                    id: n,
                    "class": "assignment-detail-text-editor",
                    value: m
                });
                this.$el.append($("<h5>", {
                    "class": "muted",
                    text: "Online Submission Text"
                }));
                this.$el.append(o);
                p3.showHtmlEditor(n, p3.Us.Enum.HtmlEditorCategories.LIMITED2LINE, false, function() {
                    tinyMCE.get(n).setContent(m)
                }, p3.Us.Enum.HtmlEditorEncoding.NUMERIC)
            } else {
                if (m !== undefined && m !== null && m !== "") {
                    this.$el.addClass("online-submission-text-container")
                } else {
                    $("#assignment-info-textedit").hide()
                }
                this.$el.html(m)
            }
        },
        getText: function() {
            if (this.editMode) {
                var l = tinyMCE.get("online-submission-text");
                if (l !== undefined && l !== null) {
                    l.save()
                }
                return $("#online-submission-text").val()
            }
            return this.$el.html()
        }
    });
    a.Vs.FileRemoveConfirmation = Bb.View.extend({
        template: "assignmentdetails/confirm.template.html",
        events: {
            "click #resubmit-cancel-button": "doCancel",
            "click #resubmit-confirm-button": "doRemove"
        },
        renderTemplate: function() {
            var l = this;
            p3.fT(l.template, function(m) {
                l.$el.html(m({
                    title: "Remove File"
                }));
                p3.Us.InfoMessage.ErrorBox(p3.Us.InfoMessageLibrary.Assignment.AssignmentDetailRemoveConfirm, ".modal-body", false)
            })
        },
        render: function(l) {
            var m = this;
            $(l).append(this.el);
            m.renderTemplate()
        },
        doRemove: function(l) {
            var n = this;
            var m = new a.Ms.FileRemove();
            m.save({
                fileId: n.model.get("dbFileId"),
                dropBoxId: n.model.get("dbid"),
                studentId: p3.Data.Context.get("UserInfo").UserId,
                assignmentIndexId: a.Data.Aiid
            }, {
                error: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    p3.displayError("Error Removing File.")
                },
                success: function() {
                    p3.showModal(p3.Layout.Containers.Modal, "hide");
                    if (typeof n.options.deletedCallback === "function") {
                        n.options.deletedCallback.call(n.options.context)
                    }
                }
            });
            return false
        },
        doCancel: function() {
            $("#site-modal").modal("hide");
            return false
        }
    });
    a.Vs.GradeEdit = Bb.View.extend({
        template: "assignmentdetails/grade.edit.template.html",
        events: {
            "change #scale-dropdown": "scaleChange",
            "click #exempt-btn": "exemptChange",
            "click #incomplete-btn": "incompleteChange",
            "click #late-button": "lateChange",
            "click #missing-btn": "missingChange",
            "change #days-box": "daysChange",
            "change #points-box": "pointsChange",
            "click .drop-box-remove-file": "doRemoveFile",
            "click #comment-btn": "commentClick",
            "click .file-annotate-btn": "showFile",
            "click #resubmit-button": "resubmitClick",
            "click #rubric-btn": "evaluateClick"
        },
        renderTemplate: function() {
            var m = this,
                l = {};
            m.section = _.find(a.Data.Assignment.get("SectionLinks"), function(n) {
                return n.SectionId == a.Data.SectionId
            });
            if (a.Data.GradeBookIndicator) {
                l.Details = {
                    data: new h.Ms.Detail(),
                    dataParams: {
                        sectionId: a.Data.SectionId,
                        markingPeriodId: m.section.MarkingPeriodId,
                        studentUserId: m.model.get("user_id"),
                        assignmentId: a.Data.Aid
                    }
                }
            }
            j.Us.Fetch(l, function(n, p, o) {
                if (o > 0) {
                    p3.displayError("Error displaying gradebook detail")
                } else {
                    var q = {
                        rosterItem: m.options.model.toJSON(),
                        schoolId: p3.Data.SchoolContext.get("SchoolInfo").SchoolId,
                        scale: a.Data.Scale.toJSON(),
                        dropBox: a.Data.DropBoxIndicator,
                        gradebook: a.Data.GradeBookIndicator,
                        imagePath: p3.Config.CssImagePath,
                        discussionInd: m.options.discussionInd
                    };
                    if (a.Data.GradeBookIndicator) {
                        m.details = n.Details;
                        q.hideGradeBox = a.Data.GradeWithRubric;
                        q.showRubric = a.Data.RubricId > 0;
                        q.details = m.details.toJSON()
                    }
                    p3.fT(m.template, function(r) {
                        m.$el.html(r(q));
                        if (a.Data.GradeBookIndicator) {
                            if (m.details.get("PointsEarned") == null) {
                                m.details.set("PointsEarned", -2)
                            }
                            if (m.details.get("ValueId") == null) {
                                m.details.set("ValueId", -1)
                            }
                            if (m.details.get("Exempt") == null) {
                                m.details.set("Exempt", false)
                            }
                            if (m.details.get("Incomplete") == null) {
                                m.details.set("Incomplete", false)
                            }
                            if (m.details.get("Late") == null) {
                                m.details.set("Late", false)
                            }
                            if (m.details.get("Missing") == null) {
                                m.details.set("Missing", false)
                            }
                            if (m.details.get("DaysLate") == null) {
                                m.details.set("DaysLate", 0)
                            }
                            if (m.details.get("Comment") == null) {
                                m.details.set("Comment", "")
                            }
                            if (m.details.get("ScaleId") == null) {
                                m.details.set("ScaleId", 0)
                            }
                            m.details.set({
                                status: "save",
                                StudentUserId: m.model.get("user_id"),
                                AssignmentId: a.Data.Aid,
                                RubricInd: m.details.get("RubricInd") ? true : false,
                                RubricId: m.details.get("RubricId") || 0,
                                ParentRubricId: m.details.get("ParentRubricId") || 0,
                                RubricPoints: m.details.get("RubricPoints") || 0
                            });
                            if ((m.details.get("PointsEarned") == -2 || m.details.get("PointsEarned") === 0) && (!a.Data.Assignment.get("DropboxResub") || (m.isLateSubmission(a.Data.DueDate) && a.Data.Assignment.get("DropboxResub")))) {
                                $("#resubmit-button").show()
                            }
                        } else {
                            if (m.isLateSubmission(a.Data.DueDate) && a.Data.Assignment.get("DropboxResub")) {
                                $("#resubmit-button").show()
                            }
                        }
                        if (a.Data.EvaluationInd) {
                            p3.rV(new a.Vs.Skills({
                                studentUserId: m.model.get("user_id")
                            }), m.$("#evaluation-tile"), true)
                        }
                    })
                }
            })
        },
        render: function(l) {
            var m = this;
            $(l).append(this.el);
            m.renderTemplate()
        },
        isLateSubmission: function(n) {
            var o, m, l;
            o = new Date();
            m = new Date(n);
            l = m.getTime() - o.getTime();
            if (l > 0) {
                return false
            }
            return true
        },
        scaleChange: function(l) {
            var m = this;
            m.details.set("ValueId", $("#scale-dropdown").val());
            m.saveDetails()
        },
        exemptChange: function(l) {
            var m = this;
            m.details.set("Exempt", !$("#exempt-btn").hasClass("active"));
            m.saveDetails()
        },
        incompleteChange: function(l) {
            var m = this;
            m.details.set("Incomplete", !$("#incomplete-btn").hasClass("active"));
            m.saveDetails()
        },
        lateChange: function(l) {
            var m = this;
            m.details.set("Late", !$("#late-button").hasClass("active"));
            m.saveDetails()
        },
        missingChange: function(l) {
            var m = this;
            m.details.set("Missing", !$("#missing-btn").hasClass("active"));
            m.saveDetails()
        },
        daysChange: function(l) {
            var m = this;
            m.details.set("DaysLate", $("#days-box").val());
            m.saveDetails()
        },
        pointsChange: function(l) {
            var n = this,
                m = $("#points-box").val();
            if (m) {
                n.details.set("PointsEarned", m);
                if (m === "0") {
                    $("#resubmit-button").show()
                } else {
                    $("#resubmit-button").hide()
                }
            } else {
                n.details.set("PointsEarned", -2);
                $("#resubmit-button").show()
            }
            n.saveDetails()
        },
        saveDetails: function() {
            var n = this,
                m = new h.Ms.GradebookSave(),
                l = new Bbc();
            l.add(n.details);
            m.save({
                sectionId: a.Data.SectionId,
                markingPeriodId: n.section.MarkingPeriodId,
                xmlData: JSON.stringify(l)
            }, {
                error: function(o, p) {
                    p3.displayError("Error on Gradebook save")
                },
                success: function() {
                    n.trigger("detailEdited")
                }
            })
        },
        doRemoveFile: function(o) {
            var l = $(o.currentTarget),
                p = l.data("fileId"),
                q = l.data("sid"),
                n = l.data("dbid"),
                m = new a.Vs.RemoveConfirmation({
                    fileId: p,
                    dbid: n,
                    sid: q,
                    aiid: a.Data.Aiid,
                    target: l.closest(".attached-file-container")
                });
            p3.rV(m, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        },
        commentClick: function(l) {
            var r = this,
                o = _.find(a.Data.Assignment.get("SectionLinks"), function(s) {
                    return s.SectionId == a.Data.SectionId
                }),
                n = new Bbc(),
                p = r.model.get("user_id");
            a.Data.Scale.each(function(s) {
                if (s.get("ScaleId") === a.Data.ScaleId) {
                    n.add(s)
                }
            });
            var m = new h.Ms.Gradebook({
                    AssignmentId: a.Data.Aid,
                    StudentUserId: p,
                    ScaleId: a.Data.ScaleId || -1
                }).on("change", function() {
                    if (m.get("status") === "save") {
                        a.Data.SaveCollection.add(m);
                        new h.Ms.GradebookSave().save({
                            sectionId: a.Data.SectionId,
                            markingPeriodId: o.MarkingPeriodId,
                            xmlData: JSON.stringify(a.Data.SaveCollection)
                        }, {
                            success: function(s, t) {
                                a.Data.SaveCollection.reset(null, {
                                    silent: true
                                });
                                p3.showModal(p3.Layout.Containers.Modal, "hide");
                                a.Data.GradedCount += 1;
                                $("#current-graded-count").html(a.Data.GradedCount);
                                r.trigger("detailEdited");
                                r.renderTemplate()
                            },
                            error: function(s, t) {
                                p3.displayError("Error on Gradebook save");
                                a.Data.SaveCollection.reset(null, {
                                    silent: true
                                })
                            }
                        })
                    }
                }, this),
                q = new Bbm({
                    sectionId: a.Data.SectionId,
                    markingPeriodId: o.MarkingPeriodId,
                    scale: n
                });
            p3.rV(new h.Vs.Detail({
                model: m,
                values: q
            }), p3.Layout.Containers.Modal, true);
            p3.Layout.Containers.Modal.on("hide hide.bs.modal", function() {
                $(l.currentTarget).focus();
                $(this).off("hide hide.bs.modal")
            })
        },
        showFile: function(n) {
            var v = this,
                l = $("#processing-message"),
                m = $(n.currentTarget),
                q = m.data("id"),
                r = v.options.model.get("files"),
                p, o = "",
                s, u, t = "";
            l.show();
            for (s = 0; s < r.length; s++) {
                if (r[s].drop_box_file_id == q) {
                    p = r[s];
                    break
                }
            }
            if (p.external_id) {
                o = p.external_id
            }
            u = new a.Ms.DropBoxAnnotate();
            u.fetch({
                async: false,
                data: {
                    fileId: q,
                    externalId: o,
                    dropBoxId: v.options.model.get("dbid"),
                    assignmentIndexId: v.options.model.get("aiid")
                },
                success: function(w, x) {
                    if (x && x.statusMessage) {
                        t = " [" + x.statusMessage + "]"
                    }
                    if (x.TempPreviewToken) {
                        p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.BoxContentPreview, function() {
                            v.options.model.set("files", r);
                            l.hide();
                            var y = new Box.Preview();
                            y.show(x.ExternalId, x.TempPreviewToken, {
                                container: "#box-content",
                                showDownload: true,
                                showAnnotations: true,
                                viewers: {
                                    Image: {
                                        annotations: {
                                            enabled: true,
                                            enabledTypes: ["point"]
                                        }
                                    },
                                    Document: {
                                        annotations: {
                                            enabled: true,
                                            enabledTypes: ["point", "highlight", "draw"]
                                        }
                                    },
                                    Presentation: {
                                        annotations: {
                                            enabled: true,
                                            enabledTypes: ["point", "highlight", "draw"]
                                        }
                                    }
                                }
                            })
                        })
                    } else {
                        l.hide();
                        p3.displayError("Error getting document session" + t)
                    }
                },
                error: function(w, x) {
                    if (x && x.statusMessage) {
                        t = " [" + x.statusMessage + "]"
                    }
                    p3.displayError("Error getting document session" + t);
                    l.hide()
                }
            });
            n.preventDefault()
        },
        resubmitClick: function(m) {
            var n = this;
            var l = new a.Vs.ResubmitConfirmation({
                dbid: n.model.get("dbid"),
                sid: n.model.get("user_id"),
                aiid: a.Data.Aiid,
                collection: n.collection
            });
            p3.rV(l, p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            l.on("Resubmit", function() {
                n.model.set("ready_ind", false);
                n.model.set("files", []);
                n.model.set("detail", "");
                n.renderTemplate()
            });
            return false
        },
        evaluateClick: function(l) {
            var m = this;
            if (a.Data.RubricLocked) {
                m.evaluateWithRubric()
            } else {
                p3.showConfirm("Lock Down Rubric", "You will no longer be able to make edits to the instance of this Rubric once you begin evaluating with it.<br /><br />Are you ready to make a copy of this rubric and begin evaluating?", null, function() {
                    a.Data.AssignmentRubric = new b.Ms.Lock();
                    a.Data.AssignmentRubric.fetch({
                        data: {
                            rubricId: a.Data.ParentRubricId,
                            assignmentId: a.Data.Aid
                        },
                        success: function() {
                            a.Data.RubricId = a.Data.AssignmentRubric.get("Id");
                            a.Data.RubricLocked = true;
                            m.evaluateWithRubric()
                        },
                        error: function() {
                            p3.displayError("Error locking rubric")
                        }
                    })
                })
            }
        },
        evaluateWithRubric: function() {
            var l = this;
            b.Us.EvaluateAssignment(a.Data.RubricId, a.Data.AssignmentRubric, l.model, a.Data.Aiid, a.Data.Assignment.get("MaxPoints"), a.Data.Assignment.get("ShortDescription"), l.collection, false, l.options.parentView)
        }
    });
    a.Vs.Skills = Bb.View.extend({
        template: "AssignmentDetails/evaluation.skills.template.html",
        className: "col-md-12 bb-page-content-tile-column",
        render: function(l) {
            var m = this;
            $(l).html(m.el);
            m.renderData()
        },
        renderData: function() {
            var m = this,
                l;
            l = {
                Skills: {
                    data: new a.Cs.Skills(),
                    dataParams: {
                        sectionId: a.Data.SectionId,
                        studentUserId: m.options.studentUserId,
                        assignmentId: a.Data.Aid,
                        personaId: p3.Data.Context.getSelectedPersona().Id
                    }
                },
                RatingScales: {
                    data: new a.Cs.RatingScales(),
                    dataParams: {
                        sectionId: a.Data.SectionId
                    }
                }
            };
            j.Us.Fetch(l, function(n, p, o) {
                if (o > 0) {
                    p3.displayError("Error displaying evaluation tile")
                } else {
                    m.skills = n.Skills;
                    m.ratingScales = n.RatingScales;
                    _.each(m.ratingScales.models, function(q) {
                        q.set({
                            ratingOutput: q.get("RatingScaleValueId") === -1 ? "Exempt" : q.get("Rating") + " - " + q.get("ShortDecsription")
                        })
                    });
                    p3.fT(m.template, function(q) {
                        m.$el.html(q({
                            formativeInd: a.Data.Assignment.get("FormativeInd")
                        }));
                        _.each(m.skills.models, function(r) {
                            var s = new a.Vs.Skill({
                                model: r,
                                dictionaries: {
                                    RatingScale: _.where(m.ratingScales.toJSON(), {
                                        LevelNum: r.get("LevelNum")
                                    })
                                }
                            });
                            p3.rV(s, m.$(".mastery-table tbody"), false)
                        })
                    })
                }
            })
        }
    });
    a.Vs.Skill = Bb.View.extend({
        tagName: "tr",
        events: {
            "click .view-skill": "viewSkill",
            "click .edit-comment": "editComment",
            'change [name="RatingScaleValueId"]': "updateRating"
        },
        initialize: function() {
            var l = this;
            switch (p3.Data.Context.getSelectedPersona().Id) {
                case 1:
                case 2:
                    l.template = "AssignmentDetails/evaluation.skill.view.template.html";
                    l.formatRatingDisplay();
                    break;
                case 3:
                    l.template = "AssignmentDetails/evaluation.skill.template.html";
                    break;
                default:
                    l.template = "AssignmentDetails/evaluation.skill.view.template.html"
            }
        },
        render: function(l) {
            var m = this;
            $(l).append(m.el);
            m.renderData()
        },
        renderData: function() {
            var l = this;
            p3.fT(l.template, function(m) {
                l.$el.html(m({
                    model: l.model.toJSON(),
                    dictionaries: l.options.dictionaries
                }))
            })
        },
        updateRating: function(n) {
            var q = this,
                l = $(n.currentTarget),
                o = l.attr("name"),
                p = p3.Us.Tools.stringToInt(l.prop("value")),
                m = {};
            m[o] = p;
            if (a.Data.HasCompetencyGrades === 0) {
                q.skillsLockModal(m)
            } else {
                q.skillsLockCheck(_.keys(m)[0], _.values(m)[0]);
                q.model.set(m);
                q.saveSkills()
            }
        },
        viewSkill: function() {
            var m = this,
                l;
            l = k.Vs.Modal2.extend({
                template: "AssignmentDetails/evaluation.skill.detail.template.html",
                model: m.model,
                size: "md"
            });
            k.Us.renderModal(new l())
        },
        editComment: function() {
            var m = this,
                l;
            l = k.Vs.Modal2.extend({
                template: "AssignmentDetails/evaluation.comment.edit.template.html",
                model: m.model,
                size: "md",
                events: {
                    "click .delete": "deleteComment"
                },
                modalRendered: function(o) {
                    var n = this;
                    k.Us.showHtmlEditor(n, "tinyeditor")
                },
                modalSave: function() {
                    var o = this,
                        n = {};
                    $.each(o.$(".tinyeditor"), function() {
                        n[this.id] = tinyMCE.get(this.id).save()
                    });
                    if (a.Data.HasCompetencyGrades === 0) {
                        m.skillsLockModal(n)
                    } else {
                        m.skillsLockCheck(_.keys(n)[0], _.values(n)[0]);
                        o.model.set(n);
                        p3.Layout.Containers.Modal.modal("hide");
                        m.saveSkills()
                    }
                    return false
                },
                deleteComment: function() {
                    var o = this,
                        n = {};
                    n.Comment = "";
                    m.skillsLockCheck("Comment", "");
                    o.model.set(n);
                    p3.Layout.Containers.Modal.modal("hide");
                    m.saveSkills();
                    return false
                }
            });
            k.Us.renderModal(new l())
        },
        saveSkills: function() {
            var m = this,
                l = new a.Ms.SkillsSave();
            l.save({
                sectionId: a.Data.SectionId,
                xmlData: JSON.stringify(m.model.collection)
            }, {
                success: function(n, o) {
                    m.renderData()
                },
                error: function(n, o) {
                    p3.displayError("Error saving skill")
                }
            })
        },
        formatRatingDisplay: function() {
            var m = this,
                l;
            if (m.model.get("RatingScaleValueId") === -1) {
                l = "Exempt"
            } else {
                switch (m.model.get("RatingDisplayFormat")) {
                    case 0:
                        l = m.model.get("Rating") + " " + m.model.get("RatingDesc");
                        break;
                    case 1:
                        l = m.model.get("Rating");
                        break;
                    case 2:
                        l = m.model.get("RatingDesc");
                        break
                }
            }
            m.model.set({
                ratingOutput: l
            })
        },
        skillsLockModal: function(l) {
            var n = this,
                m;
            m = k.Vs.Modal2.extend({
                template: "utilities/utilities.smodal.confirm.html",
                size: "md",
                variables: {
                    title: "Lock Down Skills",
                    errorText: "You will no longer be able to edit skills on this assignment once you enter an evaluation or comment.<br><br>Are you sure you want to continue?",
                    cancelText: "Cancel",
                    confirmText: "Confirm"
                },
                modalSave: function() {
                    n.skillsLockCheck(_.keys(l)[0], _.values(l)[0]);
                    n.model.set(l);
                    p3.Layout.Containers.Modal.modal("hide");
                    n.saveSkills();
                    return false
                },
                modalCancel: function() {
                    n.renderData();
                    return false
                }
            });
            k.Us.renderModal(new m())
        },
        skillsLockCheck: function(o, p) {
            var q = this,
                l, n, m;
            if (o === "RatingScaleValueId") {
                l = !(p3.Us.Tools.isEmpty(q.model.get("RatingScaleValueId")) || q.model.get("RatingScaleValueId") === 0);
                n = !(p3.Us.Tools.isEmpty(p) || p === 0);
                m = !p3.Us.Tools.isEmpty(q.model.get("Comment"))
            }
            if (o === "Comment") {
                l = !p3.Us.Tools.isEmpty(q.model.get("Comment"));
                n = !p3.Us.Tools.isEmpty(p);
                m = !(p3.Us.Tools.isEmpty(q.model.get("RatingScaleValueId")) || q.model.get("RatingScaleValueId") === 0)
            }
            if (!m) {
                if (!l && n) {
                    a.Data.HasCompetencyGrades++
                }
                if (l && !n) {
                    a.Data.HasCompetencyGrades--
                }
            }
        }
    });
    a.Us.RegisterHelpers = function() {
        if (Hb.helpers.OnlineSubmissionDateFormat === undefined) {
            Hb.registerHelper("OnlineSubmissionDateFormat", function(l) {
                var m = "";
                if (l.length) {
                    m += a.Us.DateParse(l)
                }
                return m
            })
        }
        if (Hb.helpers.DetailLinksList === undefined) {
            Hb.registerHelper("DetailLinksList", function(l, o) {
                var p = "",
                    m, n;
                if (l.length) {
                    p += '<div class="well well-sm" style="margin:10px 0px 5px 0px"><h3>Links</h3>';
                    for (m = 0; m < l.length; m++) {
                        n = l[m];
                        p += '<a href="' + n.Url + '" target="_blank">' + n.ShortDescription + "</a>";
                        if (n.Description !== undefined && n.Description !== "" && n.Description !== null) {
                            p += "<p>" + n.Description + "</p>"
                        }
                        if (m < l.length - 1) {
                            p += "<hr>"
                        }
                    }
                    p += "</div>"
                }
                return p
            })
        }
        if (Hb.helpers.DetailDownloadsList === undefined) {
            Hb.registerHelper("DetailDownloadsList", function(l, o) {
                var p = "",
                    m, n;
                if (l.length) {
                    p += '<div class="well well-sm" style="margin:10px 0px 5px 0px"><h3>Downloads</h3>';
                    for (m = 0; m < l.length; m++) {
                        n = l[m];
                        p += '<a href="' + n.DownloadUrl + "?ver=" + e.localDateTime().getTime() + '" target="_blank">' + n.ShortDescription + "</a>";
                        if (n.Description !== undefined && n.Description !== "" && n.Description !== null) {
                            p += "<p>" + n.Description + "</p>"
                        }
                        if (m < l.length - 1) {
                            p += "<hr>"
                        }
                    }
                    p += "</div>"
                }
                return p
            })
        }
        if (Hb.helpers.RubricPointDisplay === undefined) {
            Hb.registerHelper("RubricPointDisplay", function(l) {
                if (!Number.isInteger(l)) {
                    l = l.toFixed(2)
                }
                return l
            })
        }
    };
    a.Us.FileSizeDisplay = function(l, p) {
        var o = l || 0,
            m = p || "",
            q = ["B", "KB", "MB", "GB", "TB", "PB"],
            n = 0;
        if (m) {
            for (n; n < q.indexOf(m); n++) {
                o = (o / 1024)
            }
        } else {
            while (o > 1024) {
                o = (o / 1024);
                n++
            }
            m = q[n]
        }
        o = Math.round(o * 100) / 100;
        return o + " " + m
    };
    a.Us.DateParse = function(p) {
        if (!p) {
            return ""
        }
        if (p.indexOf("AM") > -1 || p.indexOf("PM") > -1) {
            return p
        }
        var r = p.substring(p.indexOf(" ") + 1),
            o = p.substring(0, p.indexOf(" ")),
            m = r.substring(0, r.indexOf(":")),
            n = parseInt(r.substring(r.indexOf(":") + 1), 10),
            l = true;
        if (o.substring(1, 0) === "0") {
            o = o.substring(1)
        }
        if (m.substring(0, 1) === "0") {
            m = parseInt(m.substring(1), 10)
        } else {
            m = parseInt(m, 10)
        }
        if (m > 11) {
            m -= 12;
            l = false
        }
        if (m === 0) {
            m = 12
        }
        var q = o + " at " + m + ":" + (n < 10 ? ("0" + n) : n) + " " + (l === true ? "AM" : "PM");
        return q
    };
    a.Us.getAverageGrade = function(n, m) {
        var l = "--",
            o = 0,
            p = 0;
        m.each(function(q) {
            if (!_.isUndefined(q.get("points_earned")) && q.get("points_earned") !== null) {
                p += n;
                if (!q.get("exempt")) {
                    o += q.get("points_earned")
                }
            } else {
                if (q.get("number_value")) {
                    p += (n + q.get("number_value"))
                }
            }
        });
        if (p > 0) {
            if (o > 0) {
                l = Math.round((o / p) * 100);
                l = l.toString() + "%"
            } else {
                l = "0%"
            }
        }
        return l
    };
    a.Us.buildFilesList = function(r, v) {
        var p;
        r.set("submit_date", a.Us.DateParse(r.get("last_submit_date")).replace(" ", " at "), {
            silent: true
        });
        r.set("aiid", a.Data.Aiid, {
            silent: true
        });
        r.set("urlRoot", p3.Config.FtpImagePath, {
            silent: true
        });
        var t, l = e.localDateTime(),
            s = false;
        if (a.Data.DueDate !== undefined) {
            t = e.getDate(r.get("drop_box_late_time"));
            t = new Date(a.Data.DueDate.getFullYear(), a.Data.DueDate.getMonth(), a.Data.DueDate.getDate(), t.getHours(), t.getMinutes())
        }
        if (r.get("last_submit_date") === null && t !== undefined && l.getTime() > t.getTime()) {
            s = true
        }
        if (r.get("ready_ind") && a.Data.DropBoxItems.length > 0) {
            var q = r.get("user_id"),
                o = a.Data.DropBoxItems.filter(function(w) {
                    return w.get("student_user_id") === q
                }),
                n = [],
                m = 0;
            if (o !== undefined && o.length > 0) {
                _.each(o, function(x) {
                    var w = x.toJSON();
                    if (w.file_size !== undefined) {
                        w.fileSizeKb = w.file_size;
                        w.file_size = a.Us.FileSizeDisplay(w.file_size)
                    }
                    w.canAnnotate = a.Us.canAnnotate(w.file_name);
                    m = w.drop_box_id;
                    if (w.file_name !== null) {
                        n.push(w);
                        $("#download-all-materials-label").hide();
                        $("#download-all-materials-link").show()
                    }
                });
                if (n.length > 0) {
                    r.set("files", n, {
                        silent: true
                    })
                }
                if (m != 0) {
                    r.set("dbid", m, {
                        silent: true
                    })
                }
            } else {
                r.set("files", n, {
                    silent: true
                })
            }
            if (t !== undefined && e.getDate(r.get("last_submit_date")).getTime() < t.getTime()) {
                s = false
            } else {
                if (t !== undefined && e.getDate(r.get("last_submit_date")).getTime() > t.getTime()) {
                    s = true
                }
            }
        }
        r.set("isLate", s, {
            silent: true
        });
        p = a.Data.UserFolders.get(r.get("user_id"));
        if (p) {
            r.set("dbLink", "/ftpimages/" + p3.Data.SchoolContext.get("SchoolInfo").SchoolId + "/dropbox/" + a.Data.Aiid + "/" + p.get("FolderName") + "/");
            if (v) {
                v.renderTemplate()
            }
        } else {
            var u = new a.Ms.UserFolder();
            u.fetch({
                async: false,
                data: {
                    uid: r.get("user_id")
                },
                success: function(x, y) {
                    var w = "/ftpimages/" + p3.Data.SchoolContext.get("SchoolInfo").SchoolId + "/dropbox/" + a.Data.Aiid + "/" + x.get("FolderName") + "/";
                    u.set("user_id", r.get("user_id"));
                    a.Data.UserFolders.add(u);
                    r.set("dbLink", w);
                    if (v) {
                        v.renderTemplate()
                    }
                },
                error: function(w, x) {
                    r.set("dbLink", "");
                    v.renderTemplate()
                }
            })
        }
    };
    a.Us.canAnnotate = function(l) {
        return true
    };
    a.Us.showStudentFile = function(o, n) {
        var m = $(o.currentTarget),
            r = m.data("id"),
            q, p = "",
            l = $("#student-processing-message"),
            s;
        o.preventDefault();
        l.show();
        n.each(function(u) {
            if (u.get("dbFileId") == r) {
                q = u
            }
        });
        if (q.get("externalId")) {
            p = q.get("externalId")
        }
        var t = new a.Ms.DropBoxView();
        t.fetch({
            async: false,
            data: {
                fileId: r,
                externalId: p,
                dropBoxId: q.get("dbid"),
                assignmentIndexId: a.Data.Aiid
            },
            success: function(u, v) {
                if (v && v.statusMessage) {
                    s = " [" + v.statusMessage + "]"
                }
                if (v.TempPreviewToken) {
                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.BoxContentPreview, function() {
                        l.hide();
                        var x = new Box.Preview();
                        var w = $("#box-content");
                        if (!w) {
                            p3.log("Could not find #box-content container")
                        } else {
                            w.height(500)
                        }
                        x.show(v.ExternalId, v.TempPreviewToken, {
                            container: "#box-content",
                            showDownload: true,
                            showAnnotations: true,
                            viewers: {
                                Image: {
                                    annotations: {
                                        enabled: true,
                                        enabledTypes: ["point"]
                                    }
                                },
                                Document: {
                                    annotations: {
                                        enabled: true,
                                        enabledTypes: ["point", "highlight", "draw"]
                                    }
                                },
                                Presentation: {
                                    annotations: {
                                        enabled: true,
                                        enabledTypes: ["point", "highlight", "draw"]
                                    }
                                }
                            }
                        })
                    })
                } else {
                    l.hide();
                    p3.displayError("Error getting document session." + s)
                }
            },
            error: function(u, v) {
                if (v && v.statusMessage) {
                    s = " [" + v.statusMessage + "]"
                }
                l.hide();
                p3.displayError("Error getting document session." + s)
            }
        })
    };
    a.Us.RenderLtiRegion = function(l) {
        var m;
        m = new a.Cs.LtiTools();
        m.fetch({
            data: {
                assignmentIndexId: a.Data.Aiid
            },
            success: function(n, o) {
                a.Data.Assignment.set("Lti", m.toJSON());
                a.Us.DisplayLtiRegion(l)
            },
            error: function(n, o) {
                p3.displayError("Error loading Learning Tools")
            }
        })
    };
    a.Us.DisplayLtiRegion = function(m) {
        var n = a.Data.Assignment.get("Lti"),
            l = $((m ? "#inner-lti-region" : "#outer-lti-region"));
        if (p3.Data.Context.getSelectedPersona().Id === f.AppPersona.STUDENT.Value || p3.Data.Context.getSelectedPersona().Id === f.AppPersona.FACULTY.Value) {
            if (n != null && n.length > 0 && n[0].ToolIndexId) {
                p3.rV(new a.Vs.AssignmentDetailLtiView({
                    lti: n[0],
                    persona: p3.Data.Context.getSelectedPersona().Id,
                    assignmentId: a.Data.Aid,
                    assignmentIndexId: a.Data.Aiid
                }), l, true)
            }
        }
    };
    p3.router().route("assignmentdetail/:aid/:aiid/:print/:back", "Assignmentdetail", function(l, m, o, n) {
        a.Data.Back = n;
        if (o == 1) {
            a.Data.Print = true;
            p3.rV(new a.Vs.LayoutView({
                aid: l,
                aiid: m
            }), $("#app"), true)
        } else {
            a.Data.Print = false;
            p3.renderMainPage(new a.Vs.LayoutView({
                aid: l,
                aiid: m
            }))
        }
    });
    p3.router().route("assignmentdetail/:aid/:aiid/:studentid/:print/:back", "Assignmentdetail", function(l, m, p, o, n) {
        a.Data.Back = n;
        a.Data.CurrentStudent = p;
        if (o == 1) {
            a.Data.Print = true;
            p3.rV(new a.Vs.LayoutView({
                aid: l,
                aiid: m
            }), $("#app"), true)
        } else {
            a.Data.Print = false;
            p3.renderMainPage(new a.Vs.LayoutView({
                aid: l,
                aiid: m
            }))
        }
    })
}(p3.module("LMS/Shared/assignmentdetail")));
(function(a) {
    var c = p3.Us.Enum,
        f = p3.module("utilities/sort"),
        e = p3.module("utilities/smodal"),
        d = p3.module("shared/ltitool"),
        b = p3.Us.Culture,
        g = p3.module("LMS/userTask");
    a.Ms.StudentMissingAssignmentCheck = Bbm.extend({
        url: "datadirect/StudentMissingAssignmentCheck",
        hasMissingAssignments: function() {
            return (this.get("MissingCount") > 0) || false
        }
    });
    a.Ms.AdvisorMissingAssignmentCheck = Bbm.extend({
        url: "datadirect/AdvisorMissingAssignmentCheck",
        hasMissingAssignments: function() {
            return (this.get("MissingCount") > 0) || false
        }
    });
    a.Ms.LtiConfigSummary = Bbm.extend({
        url: "datadirect/LtiConfigSummary",
        initialize: function(h) {
            this.set("IsLtiInstalled", d.Us.IsLtiInstalled());
            this.set("UserId", p3.Data.Context.get("UserInfo").UserId);
            this.set("IsFaculty", (p3.Data.Context.getSelectedPersona().Id === c.AppPersona.FACULTY.Value));
            this.set("NeedsConfigCount", 0);
            this.set("AssignmentIndexId", 0);
            this.set("NeedsConfigInd", 0)
        }
    });
    a.Ms.AssignmentStatusUpdate = Bbm.extend({
        url: function() {
            return aP + "assignment2/assignmentstatusupdate/?format=json&assignmentIndexId=" + this.get("assignmentIndexId") + "&assignmentStatus=" + this.get("assignmentStatus")
        }
    });
    a.Cs.StudentMissingAssignmentList = Bbc.extend({
        url: "DataDirect/StudentMissingAssignmentList",
        initialize: function() {
            _.extend(this, $.extend(true, {}, f.Us.CollectionSort))
        }
    });
    a.Cs.AdvisorMissingAssignmentList = Bbc.extend({
        url: "DataDirect/AdvisorMissingAssignmentList"
    });
    a.Cs.UnconfiguredList = Bbc.extend({
        url: "datadirect/LtiUnconfiguredList"
    });
    a.Data = {};
    a.Vs.StudentMissingModal = Bb.View.extend({
        template: "assignmentcenter/assignmentcenter.missing.layout.template.html",
        listTemplate: "assignmentcenter/assignmentcenter.missing.item.template.html",
        initialize: function() {
            var h = this;
            h.hash = h.options.hash;
            h.columns = [{
                SortName: "DateDue",
                DisplayName: "Due Date",
                Sortable: true,
                Width: "16%"
            }, {
                SortName: "AssignmentTitle",
                DisplayName: "Title",
                Sortable: true,
                Width: "42%"
            }, {
                SortName: "GroupName",
                DisplayName: "Class",
                Sortable: true,
                Width: "42%"
            }]
        },
        events: {
            "click .closeModal": "closeModal",
            "click th.sortable": "sort"
        },
        render: function(h) {
            var i = this;
            $(h).html(i.el);
            i.renderTemplate()
        },
        renderTemplate: function() {
            var j = this,
                i = j.collection.sortDirection === "asc" ? "p3icon-sortDown" : "p3icon-sortUp",
                h;
            p3.fT(j.template, function(k) {
                j.$el.html(k({}));
                p3.fT(j.listTemplate, function(l) {
                    j.$("tbody").html(l({
                        columns: j.columns,
                        entries: j.collection.toJSON(),
                        hash: j.hash
                    }));
                    h = j.$("th[data-sort=" + j.collection.sortProp + "]");
                    h.removeClass("muted");
                    h.find("i").removeClass("p3icon-sortOff").addClass(i);
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                })
            })
        },
        sort: function(i) {
            var k = this,
                j = "",
                h;
            p3.fT(k.listTemplate, function(l) {
                k.collection.setSort($(i.currentTarget).data("sort"));
                k.$("tbody").html(l({
                    columns: k.columns,
                    entries: k.collection.toJSON(),
                    hash: k.hash
                }));
                j = k.collection.sortDirection === "asc" ? "p3icon-sortDown" : "p3icon-sortUp";
                h = k.$("th[data-sort=" + k.collection.sortProp + "]");
                h.removeClass("muted");
                h.find("i").removeClass("p3icon-sortOff").addClass(j)
            })
        }
    });
    a.Vs.AdvisorMissingModal = Bb.View.extend({
        template: "assignmentcenter/assignmentcenter.missing.advisor.layout.template.html",
        listTemplate: "assignmentcenter/assignmentcenter.missing.advisor.item.template.html",
        initialize: function() {
            var h = this;
            h.hash = h.options.hash
        },
        events: {
            "click .closeModal": "closeModal",
            "click .studentToggle": "toggleStudent"
        },
        render: function(h) {
            var i = this;
            $(h).html(i.el);
            i.renderTemplate()
        },
        renderTemplate: function() {
            var h = this;
            p3.fT(h.template, function(i) {
                h.$el.html(i({}));
                p3.fT(h.listTemplate, function(j) {
                    h.$(".form-horizontal").html(j({
                        entries: h.collection.toJSON(),
                        hash: h.hash
                    }));
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                })
            })
        },
        toggleStudent: function(j) {
            var i = $(j.target),
                h;
            $(i.closest("div.student-block").attr("data-target")).slideToggle(0, function() {
                p3.setModalHeight(p3.Layout.Containers.Modal)
            });
            h = i.closest("div.student-block").find(".swaparrow");
            if (h.hasClass("p3icon-sideArrow")) {
                p3.slideArrowS(h)
            } else {
                p3.slideArrowE(h)
            }
        }
    });
    a.Us.isStudentDetailLinkAvailable = function(h, j) {
        var i = false;
        if (h.AssessmentInd) {
            if ((h.PublishGrade || !h.GradeBookInd) && (h.HasGrade || h.ShowReport) && (h.AssignmentStatus === 1 || h.AssignmentStatus === 3 || h.AssignmentStatus === 4) && !h.AssessmentLocked) {
                i = true
            }
        } else {
            if (h.DiscussionInd) {
                i = true
            } else {
                if ((h.AssignmentLongDescription !== undefined && h.AssignmentLongDescription !== null && h.AssignmentLongDescription.length > 0) || h.HasLinks || h.HasDownloads || h.DropBoxInd) {
                    i = true
                } else {
                    if (h.LtiInd && (j === 2 || j === 3)) {
                        i = true
                    } else {
                        if (h.GradeBookInd) {
                            if (j === 3 || j === 5 || j === 20) {
                                i = true
                            } else {
                                if (h.PublishGrade && j < 3) {
                                    i = true
                                }
                            }
                        }
                    }
                }
            }
        }
        return i
    };
    a.Us.GetAssignmentDetailReturnHash = function(h) {
        var i;
        if (h.toString() === "1") {
            i = "X"
        } else {
            i = window.location.hash;
            i = i.split("/").join("--");
            if (i.charAt(0) === "#") {
                i = i.slice(1)
            }
        }
        return encodeURIComponent(i)
    };
    a.Us.BuildAssignmentDetailLink = function(h, i, l, j) {
        var k;
        if (l === null || l === 0) {
            k = "#assignmentdetail/" + h + "/" + i + "/" + j + "/"
        } else {
            k = "#assignmentdetail/" + h + "/" + i + "/" + l + "/" + j + "/"
        }
        if (j.toString() === "1") {
            k = k + "X"
        } else {
            k = k + a.Us.GetAssignmentDetailReturnHash(j)
        }
        return k
    };
    a.Us.showStudentMissingAssignmentList = function(l) {
        var h, i = "X",
            j, k = p3.Data.Context.getSelectedPersona().Id;
        h = new a.Cs.StudentMissingAssignmentList();
        h.fetch({
            data: {
                studentId: l
            },
            cache: false,
            success: function() {
                h.each(function(m) {
                    m.set("ShowLink", a.Us.isStudentDetailLinkAvailable(m.toJSON(), k));
                    m.set("Hash", i)
                });
                j = new a.Vs.StudentMissingModal({
                    collection: h,
                    hash: i
                });
                p3.showModal(p3.Layout.Containers.Modal, {
                    backOnHide: false
                });
                p3.rV(j, p3.Layout.Containers.Modal, true)
            }
        })
    };
    a.Us.showAdvisorMissingAssignmentList = function(n) {
        var h, i = "X",
            k, l = p3.Data.Context.getSelectedPersona().Id,
            j = 0,
            o = 0,
            m = null;
        h = new a.Cs.AdvisorMissingAssignmentList();
        h.fetch({
            data: {
                id: n
            },
            cache: false,
            success: function() {
                h.each(function(p) {
                    o = p.get("StudentUserId");
                    if (o !== j) {
                        p.set("StudentStart", true);
                        if (m !== null) {
                            m.set("StudentEnd", true)
                        }
                        j = o
                    }
                    p.set("ShowLink", a.Us.isStudentDetailLinkAvailable(p.toJSON(), l));
                    p.set("Hash", i);
                    m = p
                });
                if (m !== null) {
                    m.set("StudentEnd", true)
                }
                k = new a.Vs.AdvisorMissingModal({
                    collection: h,
                    hash: i
                });
                p3.showModal(p3.Layout.Containers.Modal, {
                    backOnHide: false
                });
                p3.rV(k, p3.Layout.Containers.Modal, true)
            }
        })
    };
    a.Us.refreshLtiConfigSummary = function(h, i) {
        h = h || 0;
        a.Data.LtiConfigSummary = new a.Ms.LtiConfigSummary();
        if (a.Data.LtiConfigSummary.get("IsFaculty") && a.Data.LtiConfigSummary.get("IsLtiInstalled")) {
            a.Data.LtiConfigSummary.fetch({
                data: {
                    aiid: h
                },
                async: false,
                success: function() {
                    if (i) {
                        i(a.Data.LtiConfigSummary)
                    }
                },
                error: function() {
                    a.Data.LtiConfigSummary = new a.Ms.LtiConfigSummary();
                    if (i) {
                        i(a.Data.LtiConfigSummary)
                    }
                }
            })
        }
    };
    a.Us.showLtiConfigList = function(h, k, j) {
        k.stopPropagation();
        k.preventDefault();
        var i, l, n = p3.Data.Context.get("UserInfo").UserId,
            m;
        h = h || 0;
        l = (j || a.Us.GetAssignmentDetailReturnHash(0));
        i = new a.Cs.UnconfiguredList();
        i.fetch({
            cache: false,
            data: {
                TeacherUserId: n
            },
            success: function() {
                if (i.length > 0) {
                    m = e.Vs.Modal2.extend({
                        template: "lti/lti.tool.unconfig.layout.template.html",
                        collection: i,
                        events: {
                            "click .closeModal": "closeModal"
                        },
                        modalRendered: function() {
                            var p = this,
                                q = p.$("tbody"),
                                o = "lti/lti.tool.unconfig.item.template.html";
                            p3.fT(o, function(r) {
                                q.append(r({
                                    entries: i.toJSON(),
                                    hash: l,
                                    aiid: h
                                }));
                                p3.setModalHeight(p3.Layout.Containers.Modal)
                            })
                        },
                        modalUpdate: function(o) {
                            return false
                        },
                        closeModal: function(o) {
                            o.stopPropagation();
                            o.preventDefault();
                            p3.Layout.Containers.Modal.modal("hide")
                        }
                    });
                    p3.showModal(p3.Layout.Containers.Modal, {
                        backOnHide: false
                    });
                    p3.rV(new m(), p3.Layout.Containers.Modal, true)
                }
            }
        })
    };
    a.Us.GetAssignmentActionLink = function(v, p, i, o, n, r, m, l, h, s, j, k, w) {
        var u = "",
            t = false,
            q;
        if (o) {
            q = b.getDate(b.getDateString(p) + " " + b.getTimeString(b.getDate(o)))
        } else {
            q = b.getDate(b.getDateString(p))
        }
        if (v > q) {
            t = true
        }
        if (h) {
            if (v >= i) {
                switch (l) {
                    case -1:
                        u = '<a class="assignment-status-button" href="#assessment/' + j + "/" + k + '/false">Take</a>';
                        break;
                    case 3:
                        u = '<a class="assignment-status-button" href="#assessment/' + j + "/" + k + '/false">Retake</a>';
                        break;
                    case 6:
                        u = '<a class="assignment-status-button" href="#assessment/' + j + "/" + k + '/true">Resume</a>';
                        break
                }
            }
        } else {
            if (n) {
                if (l === -1) {
                    u = '<a href="' + a.Us.BuildAssignmentDetailLink(j, k, null, 0) + '">Submit</a>'
                }
            } else {
                if (p3.Data.Context.getSelectedPersona().Id === c.AppPersona.STUDENT.Value && !m && !r && !(l === 1 && t)) {
                    u = '<button class="btn btn-link assignment-status-update" data-id="' + j + '" data-index="' + k + '" data-overdue="' + t + '" data-status="' + l + '" data-user-task-ind="' + w + '" style="padding-left:0px;">Change status</a>'
                }
            }
        }
        return u
    };
    a.Us.ShowStatusChange = function(n, h, i, j, m, o) {
        var k = $(".popover"),
            l = "";
        k.each(function(p, q) {
            if (q.previousSibling !== n[0]) {
                $(q.previousSibling).popover("hide")
            }
        });
        p3.fT("classassignment/status.update.template.html", function(p) {
            n.popover({
                content: p({
                    overdue: j,
                    status: m,
                    assignmentId: h,
                    indexId: i,
                    userTaskInd: o
                }),
                trigger: "manual",
                html: true,
                sanitize: false,
                placement: function(r) {
                    var q = $(window);
                    if (n[0].getBoundingClientRect().bottom + 85 > q.innerHeight()) {
                        l = "top"
                    } else {
                        l = "bottom"
                    }
                    return l
                }
            }).popover("toggle");
            $(".assignment-status-dropdown").bind("change", function(t) {
                var s = $(t.currentTarget),
                    x = s.val(),
                    u = s.data("id"),
                    v = s.data("index"),
                    w = $('.assignment-status-update[data-id="' + u + '"]'),
                    y = w.data("status"),
                    A = $('.primary-status[data-id="' + u + '"]'),
                    q, B, r, z, C = s.data("user-task-ind");
                if (x !== y) {
                    z = new a.Ms.AssignmentStatusUpdate({
                        assignmentIndexId: C ? u : v,
                        assignmentStatus: x
                    });
                    z.save({
                        userTaskInd: C
                    }, {
                        success: function(D, E) {
                            w.popover("destroy");
                            w.data("status", x);
                            switch (parseInt(x, 10)) {
                                case -1:
                                    q = "label-todo";
                                    B = "To Do";
                                    r = "#d4f1fa";
                                    break;
                                case 0:
                                    q = "label-warning";
                                    B = "In&nbsp;Progress";
                                    r = "#f9ecd9";
                                    break;
                                case 1:
                                    q = "label-success";
                                    B = "Completed";
                                    r = "#dcf3dc";
                                    break
                            }
                            A.removeClass("label label-todo label-warning label-danger label-success").addClass("label " + q).html(B);
                            w.parents(".fc-event-inner").css("border-color", r).css("background-color", r);
                            w.parents(".fc-event").css("border-color", r).css("background-color", r)
                        },
                        error: function(D, E) {
                            p3.displayError("Error updating assignment status")
                        }
                    })
                }
            });
            if (o) {
                $('[data-value="edit-user-task"]').click(function(q) {
                    var r = $(q.currentTarget).data("id");
                    $('.assignment-status-update[data-id="' + r + '"]').popover("destroy");
                    g.Us.UserTaskModal(new g.Ms.UserTask({
                        UserTaskId: r
                    }).on("save", function(t, u, s) {
                        setTimeout(function() {
                            if (p3.Data.LMS.DisplayCalendar) {
                                $("#calendar-main-view").trigger("updateAssignments")
                            } else {
                                $("#assignment-center-assignment-items").trigger($.Event("listRefresh"))
                            }
                        }, 500)
                    }))
                })
            }
        })
    };
    a.Us.GetAssignmentStatusLabel = function(v, i, o, k, h, s, n, p, r, l, j) {
        var t = '<div class="mt-3">',
            q = "",
            u = "",
            m = true;
        if (l) {
            t = '<div class="mt-10">'
        }
        if (h) {
            if (v < i) {
                m = false
            }
        }
        switch (k) {
            case -1:
                if (h && !m) {
                    u = "Upcoming";
                    q = "label-default"
                } else {
                    u = "To Do";
                    q = "label-todo"
                }
                break;
            case 0:
                if (h) {
                    u = "Incomplete"
                } else {
                    u = "In&nbsp;Progress"
                }
                q = "label-warning";
                break;
            case 1:
            case 4:
                q = "label-success";
                if (o) {
                    u = "Graded"
                } else {
                    u = "Completed"
                }
                break;
            case 2:
                u = "Overdue";
                q = "label-danger";
                break;
            case 3:
                u = "Completed";
                q = "label-success";
                break;
            case 5:
                u = "Upcoming";
                q = "label-default";
                break;
            case 6:
                u = "In&nbsp;Progress";
                q = "label-warning";
                break
        }
        t += a.Us.AddLabel(u, q + " primary-status", l, j);
        if (s) {
            t += a.Us.AddLabel("Missing", "label-danger", l)
        }
        if (p) {
            t += a.Us.AddLabel("Incomplete", "label-danger", l)
        }
        if (r) {
            t += a.Us.AddLabel("Late", "label-danger", l)
        }
        if (n) {
            t += a.Us.AddLabel("Exempt", "label-success", l)
        }
        return t + "</div>"
    };
    a.Us.AddLabel = function(l, k, h, i) {
        var j = '<div class="mb-';
        if (h) {
            j += "15"
        } else {
            j += "10"
        }
        j += '"><span class="label ' + k + '"';
        if (i) {
            j += ' data-id="' + i + '"'
        }
        j += ">" + l + "</span ></div > ";
        return j
    };
    a.Us.AssignmentStatusLabel = function(j, h, i) {
        var k = "";
        if (h) {
            k = a.Us.GetAssignmentStatusLabel(b.getDate(j.local_now), b.getDate(j.assess_assigned), j.has_grade, j.assignment_status, j.assessment_ind, j.missing_ind, j.exempt_ind, j.incomplete_ind, j.late_ind, i, j.assignment_id)
        } else {
            k = a.Us.GetAssignmentStatusLabel(b.getDate(j.LocalNow), b.getDate(j.DateAssigned), j.HasGrade, j.AssignmentStatus, j.AssessmentInd, j.MissingInd, j.ExemptInd, j.IncompleteInd, j.LateInd, i, j.AssignmentId)
        }
        return k
    };
    a.Us.AssignmentActionLink = function(j, h, i) {
        var k = "";
        if (h) {
            k = a.Us.GetAssignmentActionLink(b.getDate(j.local_now), b.getDate(j.date_due), b.getDate(j.assess_assigned), j.drop_box_late_time, j.drop_box_ind, j.has_grade, j.discussion_ind, j.assignment_status, j.assessment_ind, j.inc_grade_book, j.assignment_id, j.assignment_index_id, j.user_task_ind)
        } else {
            k = a.Us.GetAssignmentActionLink(b.getDate(j.LocalNow), b.getDate(j.DateDue), b.getDate(j.DateAssigned), j.DropBoxLateTime, j.DropBoxInd, j.HasGrade, j.DiscussionInd, j.AssignmentStatus, j.AssessmentInd, j.GradeBookInd, j.AssignmentId, j.AssignmentIndexId, false)
        }
        return k
    };
    if (!Hb.helpers.buildAssignmentDetailLink) {
        Hb.registerHelper("buildAssignmentDetailLink", function(h, i, k, j) {
            return a.Us.BuildAssignmentDetailLink(h, i, k, j)
        })
    }
    if (!Hb.helpers.AssignmentStatusLabel) {
        Hb.registerHelper("AssignmentStatusLabel", function(k, h, i, j) {
            return a.Us.AssignmentStatusLabel(k, h, i)
        })
    }
    if (!Hb.helpers.AssignmentActionLink) {
        Hb.registerHelper("AssignmentActionLink", function(k, h, i, j) {
            return a.Us.AssignmentActionLink(k, h, i)
        })
    }
}(p3.module("LMS/Shared/AssignmentTools")));
(function(b) {
    var a = p3.module("LMS/athleticschedule"),
        d = p3.module("LMS/athleticteam"),
        c = p3.module("LMS/Shared/AthleticsLiteScoreBoard");
    b.Ms = {
        SportsTeamsOffer: Bbm.extend({
            url: "athletics/TeamBulkUpdate"
        })
    };
    b.Cs = {
        Content: Bbc.extend({
            initialize: function(e, f) {
                this.sectionId = f.sectionId || 0;
                this.leadSectionId = f.leadSectionId || 0
            },
            url: function() {
                return aP + "datadirect/GroupPossibleContentGet/?format=json&leadSectionId=" + this.sectionId
            }
        }),
        SchoolYears: Bbc.extend({
            url: "DataDirect/SchoolYearsGet?display=0"
        }),
        SportSections: Bbc.extend({
            initialize: function(e, f) {
                f = f || {};
                this.schoolYearLabel = f.schoolYearLabel || ""
            },
            url: function() {
                return aP + "datadirect/SportsTeamsForYearGet/?format=json&schoolYearLabel=" + this.schoolYearLabel
            }
        }),
        SportsTeams: Bbc.extend({
            url: function() {
                return aP + "datadirect/OfferTeamsListGet/?schoolYearLabel=" + this.schoolYearLabel
            }
        }),
        SportsLevels: Bbc.extend({
            url: "datadirect/SchoolLevelGet/?offeringType=9"
        }),
        SportsSeasons: Bbc.extend({
            url: "datadirect/AthleticSeasonGet"
        }),
        Section: Bbc.extend({
            initialize: function(e, f) {
                f = f || {};
                this.sectionId = f.sectionId || b.Data.sectionId || 0
            },
            url: function() {
                return aP + "datadirect/SectionInfoView/?format=json&sectionId=" + this.sectionId + "&associationId=2"
            }
        })
    };
    b.Data = {
        MainViewRendered: false,
        RenderedSectionId: null,
        sectionId: -1,
        leadSectionId: -1,
        content: null,
        durationId: null,
        schoolYear: "",
        FullAccess: true,
        IsOwner: 0,
        isManager: 1,
        currentSection: null
    };
    b.Pages = [{
        Id: 1,
        ContentId: -1,
        Label: "Schedule",
        RoutePage: "schedule",
        IconClass: "p3icon-schedule",
        HTMLID: "schedule-btn",
        LinkId: "schedule-link",
        Display: function(e) {
            p3.rV(new a.Vs.TeamScheduleView({
                sectionId: b.Data.sectionId,
                leadSectionId: b.Data.sectionId,
                durationId: b.Data.durationId,
                content: d.Data.contentTypes,
                userHasFullAccess: b.Data.FullAccess,
                isOwner: b.Data.IsOwner,
                isManager: b.Data.isManager,
                hideCalendar: true,
                hideBulkPractices: true
            }), e, true)
        },
        Active: true
    }, {
        Id: 2,
        ContentId: -1,
        Label: "Scoreboard",
        RoutePage: "scoreboard",
        IconClass: "p3icon-scoreboard",
        HTMLID: "scoreboard-btn",
        LinkId: "scoreboard-link",
        Display: function(e) {
            p3.rV(new c.Vs.Scoreboard({
                section: b.Data.currentSection
            }), e, true)
        },
        Active: false
    }];
    b.Vs = {
        Layout: Bb.View.extend({
            template: "athleticslite/layout.template.html",
            events: {
                emptyyear: "doNoTeams",
                offered: "doOfferedTeams",
                offerCourse: "doOfferCourse",
                refreshTeams: "doRefreshTeamsData",
                detailView: "doDetailView"
            },
            initialize: function(e) {
                var f = this;
                f.Containers = {};
                b.Data.MainViewRendered = true;
                b.Data.RenderedSectionId = b.Data.sectionId = e.SectionId || b.Data.sectionId;
                f.currentTeams = new b.Cs.SportsTeams();
                f.currentTeams.schoolYearLabel = p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel;
                f.currentTeams.comparator = function(g) {
                    return g.get("season") + " - " + g.get("group_name")
                };
                f.schoolYears = new b.Cs.SchoolYears();
                f.teams = new b.Cs.SportsTeams();
                f.teams.schoolYearLabel = p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel;
                f.teams.comparator = function(g) {
                    return g.get("department") + " - " + g.get("group_name")
                };
                f.displayTeams = new b.Cs.SportsTeams();
                f.displayTeams.schoolYearLabel = p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel;
                f.activeView = ""
            },
            dispose: function() {
                b.Data.MainViewRendered = false
            },
            render: function(e) {
                var f = this;
                $(e).html(this.el);
                this.picker = new b.Vs.TeamPicker({
                    schoolYears: f.schoolYears,
                    currentTeams: f.currentTeams
                });
                this.navigation = undefined;
                p3.fT(f.template, function(g) {
                    f.$el.html(g({}));
                    f.Containers.picker = $("#athletics-lite-team-picker");
                    f.Containers.information = $("#athletics-lite-information");
                    f.Containers.content = $("#athletics-lite-content-area");
                    if (!f.currentTeams) {
                        f.currentTeams = new b.Cs.SportSections()
                    }
                    p3.rV(f.picker, f.Containers.picker, true);
                    if (b.Data.sectionId) {
                        f.content = new b.Vs.TeamDetail();
                        p3.rV(f.content, f.Containers.information, true);
                        f.activeView = "TeamDetail"
                    }
                })
            },
            doNoTeams: function(f) {
                this.content = new b.Vs.Empty();
                p3.rV(this.content, this.Containers.content, true);
                this.Containers.information.html("");
                p3.router().navigate("#athleticslite/schedule/0/0");
                this.activeView = "Empty"
            },
            doOfferedTeams: function(f) {
                this.displayTeams.schoolYearLabel = b.Data.schoolYear;
                if (this.activeView !== "TeamListing") {
                    this.content = new b.Vs.TeamListing({
                        collection: this.displayTeams
                    });
                    p3.rV(this.content, this.Containers.content, true);
                    this.content.renderTemplate();
                    if (this.activeView === "Empty" || this.activeView === "OfferedListing") {
                        this.currentTeams.fetch()
                    }
                }
                this.displayTeams.fetch();
                this.Containers.information.html("");
                p3.router().navigate("#athleticslite/schedule/0/0");
                this.activeView = "TeamListing"
            },
            doOfferCourse: function(f) {
                var h = this,
                    g = new b.Vs.OfferedListing({
                        collection: this.teams,
                        schoolYears: this.schoolYears
                    });
                h.activeView = "OfferedListing";
                this.teams.schoolYearLabel = b.Data.schoolYear;
                p3.rV(g, p3.Layout.Containers.Modal, true);
                p3.showModal(p3.Layout.Containers.Modal);
                $(p3.Layout.Containers.Modal).on("refreshTeams", function() {
                    h.doRefreshTeamsData()
                });
                $(p3.Layout.Containers.Modal).on("hide", function() {
                    $(p3.Layout.Containers.Modal).off("refreshTeams");
                    $(p3.Layout.Containers.Modal).off("hide")
                });
                this.teams.fetch()
            },
            doRefreshTeamsData: function() {
                if (this.$el.find(".p3icon-trash").length > 0) {
                    this.$el.trigger("offered")
                } else {
                    this.teams.fetch();
                    this.displayTeams.fetch();
                    this.currentTeams.fetch()
                }
            },
            doDetailView: function() {
                this.content = new b.Vs.TeamDetail();
                p3.rV(this.content, this.Containers.information, true)
            }
        }),
        TeamDetail: Bb.View.extend({
            template: "athleticslite/navigation.template.html",
            events: {},
            initialize: function(e) {
                this.collection = new b.Cs.Section();
                this.collection.on("reset", this.renderTemplate, this)
            },
            dispose: function() {
                this.collection.off("reset")
            },
            render: function(e) {
                $(e).html(this.el);
                this.collection.fetch()
            },
            renderTemplate: function() {
                var g = this,
                    f = g.collection.at(0).toJSON(),
                    e;
                b.Data.currentSection = f;
                f.navigationItems = [];
                if (g.collection.length === 0) {
                    $("#athletics-lite-content-area").html("");
                    return
                }
                for (e = 0; e < b.Pages.length; e++) {
                    f.navigationItems.push({
                        sort: b.Pages[e].Id,
                        title: b.Pages[e].Label,
                        iconClass: b.Pages[e].IconClass,
                        status: b.Pages[e].Active ? "active" : "inactive",
                        link: "#athleticslite/" + b.Pages[e].RoutePage + "/" + b.Data.sectionId + "/0",
                        pId: b.Pages[e].Id,
                        HTMLID: b.Pages[e].HTMLID
                    })
                }
                p3.fT(g.template, function(i) {
                    g.$el.html(i(f));
                    var h = _.find(b.Pages, function(j) {
                        return j.Active
                    });
                    if (h) {
                        h.Display($("#athletics-lite-content-area"))
                    }
                })
            }
        }),
        TeamPicker: Bb.View.extend({
            template: "athleticslite/teampicker.template.html",
            events: {
                "change #athletics-lite-year-ddl": "updateTeamSelector",
                "change #athletics-lite-team-ddl": "updateActiveTeam",
                "click .athletics-lite-offer": "doTeamOffer"
            },
            initialize: function(e) {
                if (e === "undefined" || e.schoolYears === "undefined" || e.currentTeams === "undefined") {
                    throw "The Team Picker must be initialized with a collection for both currentTeams and schoolYears"
                }
                var f = this;
                f.schoolYears = e.schoolYears;
                f.currentTeams = e.currentTeams;
                f.currentTeams.on("reset", f.renderTeams, f);
                f.schoolYears.on("reset", f.renderTemplate, f);
                f.schoolYears.fetch({
                    success: function(g, i, h) {
                        var j;
                        if (b.Data.schoolYear) {
                            j = g.find(function(k) {
                                return k.get("Label") === b.Data.schoolYear
                            })
                        } else {
                            j = g.find(function(k) {
                                return k.get("Current")
                            })
                        }
                        if (j) {
                            f.currentTeams.schoolYearLabel = b.Data.schoolYear = j.get("Label");
                            $("#athletics-lite-year-ddl").val(f.currentTeams.schoolYearLabel);
                            f.currentTeams.fetch()
                        }
                    }
                })
            },
            dispose: function() {
                this.schoolYears.off("reset")
            },
            render: function(e) {
                $(e).html(this.el)
            },
            renderTemplate: function() {
                var e = this;
                p3.fT(e.template, function(f) {
                    e.$el.html(f({
                        years: e.schoolYears.toJSON(),
                        seasons: []
                    }))
                })
            },
            updateTeamSelector: function(f) {
                var g = $(f.currentTarget).val();
                b.Data.sectionId = 0;
                this.currentTeams.schoolYearLabel = b.Data.schoolYear = g;
                this.currentTeams.fetch()
            },
            updateActiveTeam: function(f) {
                var g = $(f.currentTarget).val();
                p3.router().navigate("#athleticslite/schedule/" + (g === "-1" ? "0" : g) + "/0", {
                    trigger: true
                })
            },
            renderTeams: function(f, i, h) {
                var k = this,
                    e, g, j = function(l, n, m) {
                        var p;
                        if (l.length === 0) {
                            this.$el.trigger($.Event("emptyyear"));
                            e = $("#athletics-lite-team-ddl");
                            e.html('<option value="-1"> -- No Teams Available -- </option>')
                        } else {
                            p = new b.Cs.SportsTeams(l.models);
                            p.comparator = function(o) {
                                return o.get("group_name")
                            };
                            p.sort();
                            e = $("#athletics-lite-team-ddl");
                            g = true;
                            e.html('<option value="-1"> -- All Teams -- </option>');
                            p.each(function(o) {
                                if (o.get("team_id") !== "undefined" && o.get("team_id") > 0) {
                                    e.append('<option value="' + o.get("team_id") + '">' + o.get("group_name") + "</option>");
                                    g = false
                                }
                            });
                            if (g) {
                                e.html('<option value="-1"> -- No Teams Available -- </option>');
                                k.$el.trigger($.Event("emptyyear"));
                                return
                            }
                            if (b.Data.sectionId === 0) {
                                k.$el.trigger($.Event("offered", {
                                    schoolYearLabel: l.schoolYearLabel
                                }))
                            } else {
                                e.val(b.Data.sectionId);
                                if (e.val() !== "undefined" && parseInt(e.val(), 10) !== b.Data.sectionId) {
                                    k.$el.trigger($.Event("offered", {
                                        schoolYearLabel: l.schoolYearLabel
                                    }))
                                } else {
                                    k.$el.trigger($.Event("detailView"))
                                }
                            }
                        }
                    };
                if ($("#athletics-lite-team-ddl").length === 0) {
                    if (b._teamPickerTimer) {
                        window.clearInterval(b._teamPickerTimer);
                        b._teamPickerTimer = null
                    }
                    b._teamPickerTimer = window.setInterval(function() {
                        if (k.schoolYears !== "undefined" && k.schoolYears.length > 0) {
                            j(f, i, h);
                            window.clearInterval(b._teamPickerTimer);
                            b._teamPickerTimer = null
                        } else {
                            if (k.schoolYears === "undefined") {
                                window.clearInterval(b._teamPickerTimer);
                                b._teamPickerTimer = null
                            }
                        }
                    }, 100)
                } else {
                    j(f, i, h)
                }
            },
            forcedTeamRender: function(f) {
                var e;
                if (f.length === 0) {
                    this.$el.trigger($.Event("emptyyear"));
                    e = $("#athletics-lite-team-ddl");
                    e.html('<option value="-1"> -- No Teams Available -- </option>')
                } else {
                    e = $("#athletics-lite-team-ddl");
                    e.html('<option value="-1"> -- All Teams -- </option>');
                    f.each(function(g) {
                        if (g.get("team_id") !== "undefined" && g.get("team_id") > 0) {
                            e.append('<option value="' + g.get("team_id") + '">' + g.get("group_name") + "</option>")
                        }
                    });
                    e.val(-1)
                }
            },
            doTeamOffer: function(f) {
                f.preventDefault();
                this.$el.trigger($.Event("offerCourse"))
            }
        }),
        Empty: Bb.View.extend({
            template: "athleticslite/empty.template.html",
            events: {
                "click .btn": "doTeamOffer"
            },
            render: function(e) {
                var f = this;
                $(e).html(this.el);
                p3.fT(f.template, function(g) {
                    f.$el.html(g())
                })
            },
            doTeamOffer: function(f) {
                f.preventDefault();
                this.$el.trigger($.Event("offerCourse"))
            }
        }),
        TeamListing: Bb.View.extend({
            template: "athleticslite/offered.template.html",
            events: {},
            initialize: function(e) {
                if (this.collection.schoolYearLabel === "") {
                    this.collection.schoolYearLabel = p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel
                }
                this.collection.on("reset", this.renderTemplate, this)
            },
            dispose: function() {
                this.collection.off("reset", this.renderTemplate)
            },
            render: function(e) {
                $(e).html(this.el)
            },
            renderTemplate: function() {
                var e = this;
                e.doTeamsSort();
                p3.fT(e.template, function(f) {
                    e.$el.html(f({
                        seasons: e.formattedCollection.toJSON()
                    }))
                })
            },
            doTeamOffer: function(f) {
                f.preventDefault();
                this.$el.trigger($.Event("offerCourse"))
            },
            doTeamsSort: function() {
                var i = this,
                    h, f, g, e;
                i.formattedCollection = new Bbc();
                h = (new Bbc(i.collection.filter(function(j) {
                    return j.get("team_id") !== "undefined" && j.get("team_id") > 0
                }))).groupBy(function(j) {
                    return j.get("season")
                });
                for (f in h) {
                    if (h.hasOwnProperty(f)) {
                        g = new Bbc(h[f], {
                            comparator: "group_name"
                        });
                        e = new Bbm({
                            Label: f,
                            seasonColumnClass: "span4 col-md-4",
                            teams: g.toJSON()
                        });
                        i.formattedCollection.add(e)
                    }
                }
            }
        }),
        OfferedListing: Bb.View.extend({
            template: "athleticslite/offer.modal.template.html",
            events: {
                "click .modal-body .btn": "doButtonClick",
                "change #offering-level-dd": "doLevelFilter",
                "change #offering-season-dd": "doSeasonFilter",
                "change #offering-year-dd": "doYearFilter",
                "click #offering-team-save-button": "doOfferTeamSave"
            },
            initialize: function(e) {
                var f = this;
                e = e || {};
                this.collection.on("reset", f.updateRenderedSports, this);
                this.SportLevels = new b.Cs.SportsLevels();
                this.SportLevels.on("reset", f.renderLevels, this);
                this.Seasons = new b.Cs.SportsSeasons();
                this.Seasons.on("reset", f.renderSeasons, this);
                this.SchoolYears = e.schoolYears;
                this.filters = {
                    levels: undefined,
                    seasons: undefined
                }
            },
            dispose: function() {
                this.$el.find(".collapse").off("hidden");
                this.collection.off("reset", this.updateRenderedSports);
                this.SportLevels.off("reset", this.renderLevels);
                this.Seasons.off("reset", this.renderSeasons)
            },
            render: function(e) {
                $(e).html(this.el)
            },
            renderTemplate: function() {
                var e = this;
                p3.fT(e.template, function(g) {
                    e.$el.html(g({
                        sports: e.formattedCollection.toJSON(),
                        schoolYears: e.SchoolYears.toJSON()
                    }));
                    e.$el.find(".collapse").on("hidden", function(h) {
                        h.stopPropagation()
                    });
                    $("#offering-year-dd").val(e.collection.schoolYearLabel);
                    if ($('button[data-team-button="true"].active').length === $('button[data-team-button="true"]').length) {
                        var f = ($('button[data-team-button="true"].active').length === 0 ? "No teams to offer" : "All teams have been offered");
                        $(".grayContainer > h3").html(f).siblings("button").hide();
                        $('div[data-section="true"]').hide();
                        $("#offering-team-save-button").hide()
                    } else {
                        $(".grayContainer > h3").html("Offer ALL Teams").siblings("button").show();
                        $('div[data-section="true"]').show();
                        $("#offering-team-save-button").show()
                    }
                    e.SportLevels.fetch();
                    e.Seasons.fetch()
                })
            },
            preventClose: function(f) {
                f.stopPropagation()
            },
            doButtonClick: function(g) {
                var f = $(g.currentTarget);
                g.stopPropagation();
                if (f.find(".p3icon-lock").length === 0) {
                    f.toggleClass("active")
                } else {
                    return
                }
                if (f.data("all") !== undefined && f.data("all") === true) {
                    $('button[data-team-button="true"]:has(.p3icon-check)').each(function(e, h) {
                        if ($(h).attr("disabled") === undefined) {
                            if (f.hasClass("active")) {
                                $(h).addClass("active")
                            } else {
                                $(h).removeClass("active")
                            }
                        }
                    });
                    $('div[data-section="true"]').each(function(e, h) {
                        if ($(h).attr("disabled") === undefined) {
                            if (f.hasClass("active")) {
                                $(h).addClass("active")
                            } else {
                                $(h).removeClass("active")
                            }
                        }
                    })
                } else {
                    if (f.data("section") !== undefined && f.data("section") === true && f.data("id") !== undefined && f.data("id") > 0) {
                        $('button[data-sport-id="' + f.data("id") + '"]:has(.p3icon-check)').each(function(e, h) {
                            if ($(h).attr("disabled") === undefined) {
                                if (f.hasClass("active")) {
                                    $(h).addClass("active")
                                } else {
                                    $(h).removeClass("active")
                                }
                            }
                        })
                    } else {
                        if (f.data("sportId") !== undefined && f.data("sportId") > 0 && f.data("id") !== undefined && f.data("id") > 0) {
                            if (f.hasClass("active")) {
                                if ($('button[data-sport-id="' + f.data("sportId") + '"]:not(.active)').length === 0) {
                                    $('div[data-section="true"][data-id="' + f.data("sportId") + '"]').addClass("active")
                                }
                            } else {
                                if ($('button[data-all="true"]').hasClass("active")) {
                                    $('button[data-all="true"]').removeClass("active")
                                }
                                if ($('div[data-id="' + f.data("sportId") + '"]').hasClass("active")) {
                                    $('div[data-id="' + f.data("sportId") + '"]').removeClass("active")
                                }
                            }
                        }
                    }
                }
                if ($('button[data-all="true"]').hasClass("active")) {
                    $('button[data-team-button="true"]').each(function(e, h) {
                        if ($(h).attr("disabled") === undefined) {
                            if (!$(h).hasClass("active")) {
                                $('button[data-all="true"]').removeClass("active")
                            }
                        }
                    })
                }
                if (!$('button[data-team-button="true"]:not(.active)').length && !$('div[data-section="true"]:not(.active)').length) {
                    $('button[data-all="true"]').addClass("active")
                }
            },
            doOfferTeamSave: function(f) {
                var j = this,
                    k = $("#offering-year-dd").val(),
                    i = $('button[data-team-button="true"]:has(.p3icon-check).active'),
                    g = [],
                    h = new b.Ms.SportsTeamsOffer();
                i.each(function(e, l) {
                    g.push(parseInt($(l).data("id"), 10))
                });
                if (g.length > 0) {
                    h.set("offeringIds", g);
                    h.set("schoolYearLabel", k);
                    h.on("sync", function() {
                        j.$el.trigger($.Event("refreshTeams"));
                        $(p3.Layout.Containers.Modal).modal("hide")
                    });
                    h.save({
                        error: function() {
                            p3.displayError("Error Offering teams.")
                        }
                    })
                } else {
                    $(p3.Layout.Containers.Modal).modal("hide")
                }
            },
            renderLevels: function(g) {
                var f = $("#offering-level-dd");
                if (this.SportLevels.length !== 1) {
                    f.html("<option value=-1>All</option>")
                } else {
                    f.html("")
                }
                this.SportLevels.each(function(e) {
                    f.append("<option value=" + e.get("DdId") + ">" + e.get("DdDescription") + "</option>")
                });
                if (this.SportLevels.length !== 1) {
                    f.val(typeof this.filters.levels === "number" ? this.filters.levels : -1)
                }
            },
            renderSeasons: function(g) {
                var f = $("#offering-season-dd").html("<option value=-1>All</option>");
                this.Seasons.each(function(e) {
                    f.append("<option value=" + e.get("DdId") + ">" + e.get("DdDescription") + "</option>")
                });
                f.val(typeof this.filters.seasons === "number" ? this.filters.seasons : -1)
            },
            doLevelFilter: function(f) {
                this.filters.levels = $(f.currentTarget).val();
                if (typeof this.filters.levels === "string") {
                    this.filters.levels = parseInt(this.filters.levels, 10)
                }
                if (this.filters.levels < 1) {
                    this.filters.levels = undefined
                }
                this.updateRenderedSports()
            },
            doSeasonFilter: function(f) {
                this.filters.seasons = $(f.currentTarget).val();
                if (typeof this.filters.seasons === "string") {
                    this.filters.seasons = parseInt(this.filters.seasons, 10)
                }
                if (this.filters.seasons < 1) {
                    this.filters.seasons = undefined
                }
                this.updateRenderedSports()
            },
            doYearFilter: function(f) {
                this.collection.schoolYearLabel = $(f.currentTarget).val();
                this.collection.fetch()
            },
            updateRenderedSports: function() {
                var l = this,
                    f = {},
                    g = false,
                    k, e = 0,
                    i, j, h;
                l.formattedCollection = new Bbc();
                if (l.filters.levels) {
                    f.level_num = l.filters.levels;
                    g = true
                }
                if (l.filters.seasons) {
                    f.season_id = l.filters.seasons;
                    g = true
                }
                if (g) {
                    g = (new Bbc(l.collection.where(f)))
                } else {
                    g = l.collection
                }
                k = g.groupBy(function(m) {
                    return m.get("department")
                });
                for (i in k) {
                    if (k.hasOwnProperty(i)) {
                        j = new Bbc(k[i]);
                        h = new Bbm({
                            Label: i,
                            SportId: j.at(0).get("department_id"),
                            Id: "Sport" + e++,
                            teams: j.toJSON()
                        });
                        l.formattedCollection.add(h)
                    }
                }
                l.renderTemplate();
                l.renderLevels();
                l.renderSeasons();
                p3.initModalHeightTimer(p3.Layout.Containers.Modal)
            }
        }),
        Schedule: Bb.View.extend({
            template: "",
            render: function(e) {
                $(e).html(this.el)
            }
        })
    };
    b.Us = {
        LoadPage: function(h, i, f) {
            var e, g;
            if (typeof i === "string") {
                i = parseInt(i, 10)
            }
            if (typeof f === "string") {
                f = parseInt(f, 10)
            }
            b.Data.durationId = f;
            b.Data.sectionId = i;
            if (!b.Data.content || b.Data.content.length > 1) {
                e = new b.Cs.Content(null, {
                    sectionId: i
                });
                e.fetch({
                    async: false,
                    success: function(j, l, k) {
                        b.Data.content = j
                    }
                })
            }
            p3.loadingIcon("#athletics-lite-content-area");
            _.each(b.Pages, function(j) {
                if (j.RoutePage.toLowerCase() === h.toLowerCase()) {
                    j.Active = true
                } else {
                    j.Active = false
                }
                if (j.Active) {
                    g = j
                }
            });
            if (!b.Data.MainViewRendered || b.Data.RenderedSectionId !== i) {
                p3.renderMainPage(new b.Vs.Layout({
                    SectionId: i
                }))
            } else {
                if (g) {
                    g.Display($("#athletics-lite-content-area"));
                    b.Us.SwitchTabs(g)
                } else {
                    b.Pages[0].Display($("#athletics-lite-content-area"));
                    b.Pages[0].Active = true;
                    b.Us.SwitchTabs(b.Pages[0])
                }
            }
        },
        SwitchTabs: function(e) {
            $(".nav-pills").children().removeClass("active").addClass("inactive");
            $(".nav-pills").children("[data-pid='" + e.Id + "']").removeClass("inactive").addClass("active")
        }
    };
    p3.router().route("athleticslite/:page/:teamId/:durationId", "athleticslite", b.Us.LoadPage)
}(p3.module("LMS/shared/AthleticsLite")));
(function(a) {
    var b = p3.module("LMS/teampage");
    a.Ms = {
        News: Bbm.extend({
            idAttribute: "Id",
            initialize: function(c, d) {
                this.newsId = d.newsId || 0
            },
            url: function() {
                return aP + "news/AthleticLiteDetail/" + this.newsId + "/?format=json"
            }
        })
    };
    a.Cs = {
        Results: Bbc.extend({
            initialize: function(c, d) {
                this.sectionId = d.sectionId || 0
            },
            url: function() {
                return aP + "datadirect/athleticresultsget/?format=json&sectionId=" + this.sectionId
            }
        })
    };
    a.Vs.Scoreboard = Bb.View.extend({
        template: "athleticslite/scoreboard.template.html",
        events: {
            "click button.edit": "doDetailEdit"
        },
        initialize: function(c) {
            c = c || {};
            this.collection = new a.Cs.Results(null, {
                sectionId: this.options.section.Id
            });
            this.collection.on("reset", this.renderTemplate, this);
            this.options.sections = new b.Cs.Sections(null, {
                sectionId: this.options.section.Id
            })
        },
        dispose: function() {
            if (this.collection !== undefined) {
                this.collection.off("reset")
            }
        },
        render: function(c) {
            $(c).html(this.el);
            this.collection.fetch()
        },
        renderTemplate: function() {
            var d = this,
                c = d.processResults();
            p3.fT(d.template, function(e) {
                d.$el.html(e(c))
            })
        },
        processResults: function() {
            var j = this,
                g = {
                    wins: 0,
                    losses: 0,
                    ties: 0,
                    percentage: 0
                },
                h = {
                    wins: 0,
                    losses: 0,
                    ties: 0,
                    percentage: 0
                },
                c = [],
                e = -1,
                f = 0,
                d;
            j.collection.each(function(i) {
                var l = (i.get("result") || i.get("score") || i.get("news_id")),
                    o, p = "",
                    q = "",
                    m, k, r, n;
                m = i.get("league_ind");
                o = i.get("result");
                if (o) {
                    o = o.toUpperCase()
                }
                switch (o) {
                    case "WIN":
                        p = "teamWin";
                        q = "W";
                        if (m) {
                            g.wins += 1
                        } else {
                            h.wins += 1
                        }
                        break;
                    case "LOSS":
                        p = "teamLoss";
                        q = "L";
                        if (m) {
                            g.losses += 1
                        } else {
                            h.losses += 1
                        }
                        break;
                    case "TIE":
                        p = "teamTie";
                        q = "T";
                        if (m) {
                            g.ties += 1
                        } else {
                            h.ties += 1
                        }
                        break
                }
                if (i.get("ath_schedule_id") !== f) {
                    e += 1;
                    f = i.get("ath_schedule_id");
                    k = new Date(i.get("schedule_date"));
                    r = "";
                    n = "";
                    if (i.get("schedule_type") === "Game") {
                        if (i.get("short_description")) {
                            n += "<h4>" + i.get("short_description") + "</h4>"
                        }
                        r = i.get("score");
                        if (i.get("site_ind") === 0) {
                            n += "vs "
                        } else {
                            if (i.get("site_ind") === 1) {
                                n += "@ "
                            }
                        }
                    } else {
                        if (i.get("short_description")) {
                            r = "<br />";
                            n += "<h4>" + i.get("short_description") + "</h4>"
                        }
                        if (i.get("score") !== null) {
                            r += i.get("score")
                        }
                    }
                    if (i.get("opponent_id") !== null || i.get("schedule_type") === "Meet") {
                        n += i.get("name")
                    }
                    c.push({
                        gameId: f,
                        gameDate: k.toString(),
                        resultClass: p,
                        resultText: q,
                        isMeet: (i.get("schedule_type") === "Meet"),
                        score: r,
                        opponent: n,
                        newsId: i.get("news_id"),
                        haveResult: l,
                        siteInd: i.get("site_ind")
                    })
                } else {
                    if (i.get("schedule_type") === "Game") {
                        if (c[e].score && c[e].score.length > 0 && i.get("score") && i.get("score").length > 0) {
                            c[e].score += " - " + i.get("score")
                        }
                        if (o) {
                            c[e].resultClass = p;
                            c[e].resultText = q
                        } else {
                            c[e].opponent += i.get("name")
                        }
                    } else {
                        if (i.get("score") !== null) {
                            c[e].score += "<br />" + i.get("score")
                        }
                        c[e].opponent += "<br />" + i.get("name");
                        if (o) {
                            c[e].resultClass = p;
                            c[e].resultText = q
                        }
                    }
                }
            });
            for (d = 0; d < c.length; d++) {
                c[d].opponent = c[d].opponent.replace(/vs $/, "");
                c[d].opponent = c[d].opponent.replace(/@ $/, "")
            }
            j.setPercentage(g);
            j.setPercentage(h);
            return {
                leagueStats: g,
                nonLeagueStats: h,
                game: c,
                sectionId: j.options.section.Id
            }
        },
        setPercentage: function(c) {
            c.percentage = "-";
            if (c.wins + c.losses + c.ties > 0) {
                if (c.wins === 0) {
                    c.percentage = ".000"
                } else {
                    if (c.losses === 0) {
                        c.percentage = "1.000"
                    } else {
                        c.percentage = (c.wins / (c.wins + c.losses)).toFixed(3).substring(1)
                    }
                }
            }
        },
        doDetailEdit: function(d) {
            var h = this,
                c = $(d.currentTarget),
                f = c.text() === " Edit",
                g = new Bbm({
                    GroupName: h.options.section.GroupName,
                    IsSelected: 1,
                    SectionId: h.options.section.Id,
                    LeadSectionId: h.options.section.Id,
                    ContextLabelId: 3,
                    AssociationId: 2,
                    Association: "Athletics",
                    Primary: true
                });
            h.options.sections = new b.Cs.Sections(null, {
                sectionId: h.options.section.Id
            });
            h.options.sections.add(g);
            h.parentView = {
                newsView: false
            };
            p3.rV(new b.Vs.EditResultsView({
                gameId: c.data("id"),
                existingData: f,
                parentView: h,
                newsId: c.data("newsId"),
                siteInd: c.data("siteInd"),
                isLite: true
            }), p3.Layout.Containers.Modal, true);
            p3.showModal(p3.Layout.Containers.Modal);
            return false
        }
    })
}(p3.module("LMS/Shared/AthleticsLiteScoreBoard")));
(function(a) {
    (function() {
        var i = $("style"),
            h, g = function(l, j, k) {
                if (!l.is(":contains('" + j + "')")) {
                    $("<style>" + j + " { " + k + " }</style>").appendTo("head");
                    h++
                }
            };
        i.each(function(j) {
            var k = $(this);
            h = 0;
            g(k, ".dropdown-toggle.sectionTabSelected", "color:#292a2b; border-color:#c1c1c1;");
            g(k, ".soft-deleted", "font-style:italic;");
            g(k, ".soft-deleted::after", "content: '*';");
            g(k, ".deleted-section-marker.bravo", "display:none;");
            if (h == 0) {
                return false
            }
        })
    }());
    var e = p3.module("report"),
        c = p3.module("shared/datepicker"),
        d = p3.Us.InfoMessageLibrary,
        f = p3.module("shared/task"),
        b = p3.module("shared/customfields");
    a.Cs.SchoolYears = Bbc.extend({
        url: "datadirect/SchoolYearsGet/"
    });
    a.Cs.SchoolLevels = Bbc.extend({
        url: "datadirect/SchoolLevelGet/"
    });
    a.Cs.SchoolSessions = Bbc.extend({
        url: "schoolinfo/SessionsGet/"
    });
    a.Cs.SchoolTerms = Bbc.extend({
        url: "datadirect/DurationGet/"
    });
    a.Cs.CourseSections = Bbc.extend({
        url: "datadirect/OfferCourseSectionGet/"
    });
    a.Cs.BlockListActive = Bbc.extend({
        url: "block/listactive/"
    });
    a.Cs.Rooms = Bbc.extend({
        url: "schedulemaker/roomget/"
    });
    a.Cs.Teachers = Bbc.extend({
        url: "datadirect/employeeget/"
    });
    a.Cs.Roles = Bbc.extend({
        url: "datadirect/FacultyRoleTypeGet/"
    });
    a.Cs.Students = Bbc.extend({
        url: "datadirect/offercoursestudentget/"
    });
    a.Ms.Teacher = Bbm.extend({
        defaults: {
            Role: 0
        },
        validation: {
            FacultyUserId: function(i, g, h) {
                if (!h["delete"] && (!i || i == 0)) {
                    return d.P3.RequiredInfoNotEntered
                }
            },
            Role: function(i, g, h) {
                if (!h["delete"] && (!i || i == 0)) {
                    return d.P3.RequiredInfoNotEntered
                }
            }
        }
    });
    a.Ms.Student = Bbm.extend({
        validation: {
            EnrollDate: {
                required: true,
                msg: d.P3.RequiredInfoNotEntered
            },
            DropDate: function(j, g, h) {
                var i;
                if (h.DeleteInd) {
                    if (h.DropType > 0 && !j) {
                        i = d.P3.RequiredInfoNotEntered
                    } else {
                        if (new Date(j) < new Date(h.EnrollDate)) {
                            i = "Drop Date must fall after the Enroll Date"
                        } else {
                            if (new Date(j) < new Date(h.DurationBeginDate) || new Date(h.DurationEndDate) < new Date(j)) {
                                i = "Drop Date must fall between the begining and end date of the term."
                            }
                        }
                    }
                }
                return i
            }
        }
    });
    a.Ms.ScheduleMakerSection = Bbm.extend({
        idAttribute: "SectionId",
        urlRoot: "Academics/Section/",
        defaults: {
            HasGrades: false,
            CanDelete: true,
            TeacherList: [],
            StudentList: []
        },
        validation: {
            SectionIdentifier: {
                required: true,
                msg: d.P3.RequiredInfoNotEntered
            },
            "TeacherList.FacultyUserId": function(i, g, h) {
                if (!h.DeleteSection && !_.isEmpty(h.TeacherList) && _.isEmpty(_.find(h.TeacherList, function(j) {
                        return j.FacultyUserId > 0
                    }))) {
                    return "false"
                }
            },
            "TeacherList.Role": function(i, g, h) {
                if (!h.DeleteSection && !_.isEmpty(h.TeacherList) && !_.isEmpty(_.find(h.TeacherList, function(j) {
                        return j.Role === 0
                    }))) {
                    return "false"
                }
            },
            "TeacherList.Head": function(i, g, h) {
                if (!h.DeleteSection && !_.isEmpty(h.TeacherList) && _.isEmpty(_.find(h.TeacherList, function(j) {
                        return j.Head
                    }))) {
                    return "false"
                }
            },
            "StudentList.EnrollDate": function(i, g, h) {
                if (!h.DeleteSection && !_.isEmpty(h.StudentList) && _.isEmpty(_.find(h.StudentList, function(j) {
                        return j.EnrollDate
                    }))) {
                    return "false"
                }
            },
            "StudentList.DropDate": function(i, g, h) {
                if (!h.DeleteSection && !_.isEmpty(h.StudentList) && !_.isEmpty(_.find(h.StudentList, function(j) {
                        return j.DeleteInd && j.DropType > 0 && (!j.DropDate || new Date(j.DropDate) < new Date(j.EnrollDate) || new Date(j.DropDate) < new Date(h.DurationBeginDate) || new Date(h.DurationEndDate) < new Date(j.DropDate))
                    }))) {
                    return "false"
                }
            }
        }
    });
    a.Cs.OfferCourseSectionDetailGet = Bbc.extend({
        url: "datadirect/OfferCourseSectionDetailGet/"
    });
    a.Cs.OfferCourseSectionScheduleGet = Bbc.extend({
        url: "academics/OfferSectionScheduleGet/"
    });
    a.Ms.OfferSectionSave = Bbm.extend({
        url: "Academics/OfferSectionSave/"
    });
    a.Cs.DepartmentWithCourse = Bbc.extend({
        url: "department/DepartmentWithOfferdCourse/"
    });
    a.Ms.BulkSectionCreateCheck = Bbm.extend({
        url: "Academics/BulkSectionCreateCheck/"
    });
    a.Ms.BulkSectionCreate = Bbm.extend({
        url: "Academics/BulkSectionCreate/",
        validation: {
            CreateCourseSection: [{
                fn: function(g) {
                    if (_.isNaN(g)) {
                        return "Please select a value"
                    }
                }
            }],
            CalculatedLowerMin: [{
                fn: function(i, g, h) {
                    if (h.CreateCourseSection === 1 && _.isNaN(i)) {
                        return "Please select a value"
                    }
                }
            }],
            CalculatedHigherMax: [{
                fn: function(i, g, h) {
                    if (h.CreateCourseSection === 1 && _.isNaN(i)) {
                        return "Please select a value"
                    }
                }
            }],
            CourseWithoutRequest: [{
                fn: function(i, g, h) {
                    if (_.isNaN(i)) {
                        return "Please select a value"
                    }
                }
            }],
            DepartmentList: [{
                fn: function(i, g, h) {
                    if (!_.isNull(i) && i.length === 0) {
                        return "Please select a value"
                    }
                }
            }]
        }
    });
    a.Vs.LayoutView = Bb.View.extend({
        template: "page/page.1col.wide.header.template.html",
        initialize: function(g) {
            g.settings = new Bbm({
                InactiveInd: -1,
                openDeptList: []
            });
            this.template = "coursesection/coursesection.layout.template.html"
        },
        render: function(g) {
            p3.setTitle("Course Sections");
            var h = this;
            p3.fT(h.template, function(i) {
                h.$el.appendTo(g).html(i());
                h.Containers = {
                    Header: h.$("#header"),
                    MainColumn: h.$("#col-main")
                };
                p3.rV(new a.Vs.Filter(h.options), h.Containers.Header, false);
                p3.rV(new a.Vs.CourseSections(h.options), h.Containers.MainColumn, false)
            })
        },
        dispose: function() {
            this.options.settings.off()
        }
    });
    a.Vs.AlertBox = Bb.View.extend({
        className: "alert alert-error bb-emphasized",
        attributes: {
            style: "background-color: #f7a08f; display: flex; border: 0; border-left: solid 30px; border-color:#ef4044; align-items: center"
        },
        initialize: function(g) {
            g.collection.on("reset", this.renderTemplate, this)
        },
        render: function(g) {
            var h = (p3.Config.IsSmallCollege) ? "<span></span> courses need faculty and/or sections added" : "<span></span> courses need teachers and/or sections added";
            this.$el.appendTo(g).hide().append($("<p>", {
                "class": "pull-left default-black-text"
            }).html(h))
        },
        renderTemplate: function(g) {
            var h = 0;
            if (g.length) {
                h = g.first().get("TotalNumCoursesWithoutTeacherOrSection");
                this.$("span").html(h);
                this.$el.show()
            }
            if (h == 0) {
                this.$el.hide()
            }
        },
        dispose: function() {
            this.collection.off()
        }
    });
    a.Vs.CourseSections = Bb.View.extend({
        className: "accordion",
        events: {},
        initialize: function(g) {
            g.settings.on("change:DurationId", this.fetchCourseSections, this).on("change:InactiveInd", this.fetchCourseSections, this);
            this.collection = new a.Cs.CourseSections().on("reset", this.renderTemplate, this)
        },
        render: function(g) {
            this.Containers = {
                El: this.el,
                Top: $("<div>").appendTo(g)
            };
            if (p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.SCHEDULEMAKER)) {
                p3.rV(new a.Vs.AlertBox({
                    collection: this.collection
                }), this.Containers.Top, false)
            }
            this.$el.appendTo(g)
        },
        renderTemplate: function(g) {
            if (g.length) {
                _.each(_.sortBy(g.groupBy(function(i, h, j) {
                    return i.get("DepartmentId")
                }), function(h) {
                    return _.first(h).get("SortOrder")
                }), function(h) {
                    p3.rV(new a.Vs.Department({
                        model: _.first(h),
                        collection: new Bbc(h),
                        settings: this.options.settings
                    }), this.Containers.El, false)
                }, this)
            } else {
                this.$el.append($("<div>", {
                    style: "margin-left: 20px;"
                }).html("No Courses to display."))
            }
        },
        fetchCourseSections: function(g) {
            if (!g.has("DurationId") || g.hasChanged("InactiveInd")) {
                p3.clearContainer(this.Containers.El)
            }
            if (g.has("DurationId") || g.hasChanged("InactiveInd")) {
                this.collection.fetch({
                    data: {
                        levelNum: g.get("LevelNum"),
                        durationId: isNaN(g.get("DurationId")) ? -1 : g.get("DurationId"),
                        inactiveInd: g.get("InactiveInd")
                    }
                })
            }
        },
        dispose: function() {
            this.collection.off()
        }
    });
    a.Vs.Department = Bb.View.extend({
        className: "accordion-group",
        attributes: {
            style: "border: none;"
        },
        template: "coursesection/coursesection.department.template.html",
        events: {
            "show .collapse": "showCollapse",
            "hide .collapse": "hideCollapse"
        },
        render: function(g) {
            var h = this;
            p3.fT(h.template, function(i) {
                h.$el.appendTo(g).html(i({
                    model: h.model.toJSON(),
                    collection: h.collection.toJSON(),
                    openDept: h.options.settings.get("openDeptList")[h.model.get("DepartmentId")],
                    smInstalled: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.SCHEDULEMAKER),
                    osInstalled: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ONLINESIGNUP)
                }));
                h.Containers = {
                    Tbody: h.$("tbody")
                };
                h.collection.each(function(k, j, l) {
                    p3.rV(new a.Vs.Course({
                        model: k.set({
                            SchoolYearLabel: this.options.settings.get("SchoolYearLabel"),
                            LevelNum: this.options.settings.get("LevelNum"),
                            DurationId: this.options.settings.get("DurationId"),
                            DurationLabel: this.options.settings.get("DurationLabel")
                        }),
                        reload: function(m) {
                            h.reload(m)
                        },
                        sectionList: l
                    }), h.Containers.Tbody, false)
                }, h);
                p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.TableSort, function(j) {
                    j.$("#sort-table").stupidtable()
                }, h)
            })
        },
        showCollapse: function(g) {
            p3.slideArrowS(this.$("I.change-arrow"));
            this.options.settings.get("openDeptList")[this.model.get("DepartmentId")] = true
        },
        hideCollapse: function(g) {
            p3.slideArrowE(this.$("I.change-arrow"));
            this.options.settings.get("openDeptList")[this.model.get("DepartmentId")] = false
        },
        reload: function(g) {
            this.options.settings.unset("DurationId");
            this.options.settings.set({
                DurationId: g
            })
        }
    });
    a.Vs.Course = Bb.View.extend({
        tagName: "TR",
        template: "coursesection/coursesection.course.template.html",
        events: {
            "click button": "manageSections"
        },
        render: function(g) {
            var h = this;
            p3.fT(h.template, function(i) {
                h.$el.appendTo(g).html(i({
                    model: h.model.toJSON(),
                    smInstalled: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.SCHEDULEMAKER),
                    osInstalled: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.ONLINESIGNUP)
                }))
            })
        },
        manageSections: function(g) {
            var h = (p3.Us.Tools.getQuerystringValue("Test881250") === "true") || (p3.Us.Tools.getQuerystringValue("test881250") === "true");
            this.model.bbIsTestMode = h;
            this.showModal(this.model)
        },
        showNext: function(g) {
            this.showModal(g)
        },
        showModal: function(g) {
            var h = this;
            p3.rV(new a.Vs.ManageCourseModal({
                schoolYear: g.get("SchoolYearLabel"),
                levelNum: g.get("LevelNum"),
                durationId: g.get("DurationId"),
                offeringId: g.get("OfferingId"),
                parentSectionId: g.get("ParentSectionId"),
                durationLabel: g.get("DurationLabel"),
                reload: this.options.reload,
                nextSection: this.options.sectionList[_.indexOf(this.options.sectionList, g) + 1],
                showNext: function(i) {
                    h.showNext(i)
                },
                bbIsTestMode: g.bbIsTestMode
            }), p3.Layout.Containers.Modal, true)
        },
        dispose: function() {
            this.model.off()
        }
    });
    a.Vs.ManageCourseModal = Bb.View.extend({
        template: "schedulemaker/courses/courses.modal.template.html",
        attributes: {
            id: "coursesection-modal"
        },
        events: {
            'click [data-action="section"]': "addSection",
            'click [data-action="save"]': "saveAll",
            'click [data-action="save-tab"]': "saveTab",
            'click [data-action="save-next"]': "saveAll",
            'click [data-toggle="tab"]': "switchManagedSectionTabContextMenuButton",
            "click #ActionsMenu": "controlActionMenuHeight"
        },
        initialize: function(g) {
            this.collection = new Bbc().on("add", this.addTab, this).on("remove", this.removeTab, this);
            if (g.bbIsTestMode) {
                g.section = new a.Cs.OfferCourseSectionDetailGet().once("reset", this.loadSchedule, this);
                g.schedule = new a.Cs.OfferCourseSectionScheduleGet()
            } else {
                g.section = new a.Cs.OfferCourseSectionDetailGet().once("reset", this.renderTemplate, this)
            }
            g.blocks = new a.Cs.BlockListActive();
            g.rooms = new a.Cs.Rooms();
            g.teachers = new a.Cs.Teachers();
            g.roles = new a.Cs.Roles();
            g.students = new a.Cs.Students();
            g.section.fetch({
                data: {
                    durationId: g.durationId,
                    offeringId: g.offeringId,
                    parentSectionId: g.parentSectionId
                }
            });
            g.blocks.fetch({
                data: {
                    offeringType: 1,
                    levelNum: g.levelNum
                }
            });
            g.teachers.fetch({
                data: {
                    offeringType: 1,
                    durationId: g.durationId,
                    schoolYearLabel: g.schoolYear,
                    limitLevel: false
                }
            });
            g.rooms.fetch({
                data: {
                    offeringType: 1
                }
            });
            g.roles.fetch({
                data: {
                    offeringType: 1
                }
            });
            g.students.fetch({
                data: {
                    schoolYearLabel: g.schoolYear,
                    termId: g.durationId
                }
            });
            Bb.Validation.bind(this);
            if (p3.Data.Context.findByTaskId(53441)) {
                this.useAdminFields = true
            } else {
                this.useAdminFields = false
            }
        },
        loadSchedule: function(g) {
            var k = this,
                i = k.options.durationId,
                h = 0,
                j;
            if (k.options.bbIsTestMode) {
                _.each(g.models, function(n, l, m) {
                    j = n.attributes.SectionId;
                    k.options.schedule.fetch({
                        data: {
                            sectionId: j,
                            durationId: i
                        },
                        success: function(o) {
                            n.set({
                                Schedule: o.models
                            });
                            h++;
                            if (h == _.size(g.models)) {
                                k.renderTemplate(g)
                            }
                        },
                        error: function(o, p) {
                            h++;
                            if (h == _.size(g.models)) {
                                k.renderTemplate(g)
                            }
                        }
                    })
                })
            }
        },
        render: function(g) {
            this.$el.appendTo(g)
        },
        renderTemplate: function(g) {
            var h = this;
            p3.fT(h.template, function(k) {
                var i = g.first(),
                    j;
                if (i) {
                    h.options.courseGender = i.get("CourseGender");
                    j = {
                        CourseTitle: i.get("CourseTitle"),
                        CourseLength: i.get("CourseLength")
                    };
                    if (!!h.options.bbIsTestMode) {
                        j.bbIsTestMode = h.options.bbIsTestMode
                    }
                    switch (i.get("WarningColorInd")) {
                        case 2:
                            j.warningClass = "progress-warning progress-bar-warning";
                            break;
                        case 1:
                            j.warningClass = "progress-success progress-bar-success";
                            break;
                        default:
                            j.warningClass = "progress-danger progress-bar-danger";
                            break
                    }
                    if (!i.get("SectionId") && !i.get("SectionIdentifier") && g.length === 1) {
                        i.set("SectionIdentifier", 1)
                    }
                    j.warningText = i.get("WarningText");
                    h.$el.html(k({
                        model: j,
                        blockColor: h.options.blockColor,
                        canCreate: i.get("CanCreate"),
                        term: h.options.durationLabel,
                        smInstalled: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.SCHEDULEMAKER),
                        hasNext: !_.isEmpty(h.options.nextSection)
                    }));
                    h.Containers = {
                        Tabs: h.$("#add-section"),
                        TabContent: h.$(".tab-content")
                    };
                    _.each(_.sortBy(g.groupBy(function(l) {
                        return l.get("SectionId")
                    }), function(l) {
                        var m = parseInt(_.first(l).get("SectionIdentifier"), 10);
                        if (_.isNaN(m)) {
                            m = _.first(l).get("SectionIdentifier")
                        } else {
                            m = (m + 100000).toString()
                        }
                        return m
                    }), function(o, l, m) {
                        if (l !== "null") {
                            var n = _.first(o);
                            this.collection.add(new a.Ms.ScheduleMakerSection(n.toJSON()).set({
                                TeacherList: _.map(_.groupBy(_.filter(o, function(p) {
                                    return p.has("FacultyUserId")
                                }), function(p) {
                                    return p.get("FacultyUserId")
                                }), function(r, p, q) {
                                    return _.first(r)
                                }),
                                StudentList: _.map(_.groupBy(_.filter(o, function(p) {
                                    return p.has("StudentUserId")
                                }), function(p) {
                                    return p.get("StudentUserId")
                                }), function(r, p, q) {
                                    return _.first(r)
                                })
                            }), {
                                active: (_.isUndefined(this.options.openSection)) ? this.collection.length === 0 : parseInt(n.get("SectionId"), 10) === this.options.openSection
                            })
                        }
                    }, h);
                    if (!!h.options.bbIsTestMode) {
                        h.activateSectionTabContextMenuButton(h.getActiveSectionTabButton())
                    }
                    p3.showModal(p3.Layout.Containers.Modal)
                }
            })
        },
        addTab: function(h, g, i) {
            var j = this;
            if (j.options.bbIsTestMode) {
                h.bbIsTestMode = j.options.bbIsTestMode;
                h.attributes.bbIsTestMode = j.options.bbIsTestMode;
                this.deactivateSectionTabContextMenuButton()
            }
            p3.rV(new a.Vs.SectionTab({
                model: h,
                collection: g
            }), this.Containers.Tabs, false);
            p3.rV(new a.Vs.SectionTabContent({
                model: h,
                attributes: {
                    id: h.cid
                },
                blocks: this.options.blocks,
                rooms: this.options.rooms,
                teachers: this.options.teachers,
                students: this.options.students,
                roles: this.options.roles,
                useAdminFields: this.useAdminFields
            }), this.Containers.TabContent, false);
            if (i.active) {
                if (j.options.bbIsTestMode) {
                    this.$(".nav.nav-tabs li > div + a").eq(g.indexOf(h)).tab("show");
                    this.activateSectionTabContextMenuButton($(".nav-tabs.nav-stacked-modal li").last().find("button"))
                } else {
                    this.$(".nav.nav-tabs a").eq(g.indexOf(h)).tab("show")
                }
            }
        },
        addSection: function(g) {
            this.collection.add(new a.Ms.ScheduleMakerSection({
                showTab: true,
                SectionIdentifier: this.setIdentifier(),
                Gender: this.options.courseGender
            }), {
                active: true
            })
        },
        removeTab: function(h, g, i) {
            if (h.bbIsTestMode) {
                this.deactivateSectionTabContextMenuButton();
                this.$(".nav.nav-tabs li > div + a").eq((i.index == 0) ? 0 : i.index - 1).tab("show");
                this.activateSectionTabContextMenuButton(this.getActiveSectionTabButton())
            } else {
                this.$(".nav.nav-tabs a").eq((i.index == 0) ? 0 : i.index - 1).tab("show")
            }
            if (g.length === 0) {
                this.$(".tab-pane").addClass("active")
            }
        },
        setIdentifier: function(g) {
            g = (g || this.collection.length) + 1;
            return _.contains(this.collection.pluck("SectionIdentifier"), g.toString()) ? this.setIdentifier(g) : g.toString()
        },
        saveAll: function(h) {
            var i = true,
                k = this,
                g, j = false;
            this.collection.each(function(l) {
                if (!l.isValid(true)) {
                    i = false
                }
                if (k.useAdminFields) {
                    g = l.adminView;
                    if (!g.validateFields()) {
                        i = false;
                        if (!j) {
                            j = true;
                            k.$(".nav.nav-tabs a").eq(k.collection.indexOf(l)).tab("show")
                        }
                    } else {
                        l.set("CustomFields", g.saveModel.get("Fields"))
                    }
                }
            });
            if (i) {
                this.saveModal(false, h, this.collection, ($(h.currentTarget).attr("data-action") === "save-next"))
            }
        },
        saveTab: function(h) {
            var i = true,
                j = new Bbc(this.collection.filter(function(l) {
                    return l.get("showTab")
                })),
                k = this,
                g;
            j.each(function(l) {
                if (!l.isValid(true)) {
                    i = false
                }
                if (k.useAdminFields) {
                    g = l.adminView;
                    if (!g.validateFields()) {
                        i = false
                    } else {
                        l.set("CustomFields", g.saveModel.get("Fields"))
                    }
                }
            });
            if (i) {
                this.saveModal(true, h, j)
            }
        },
        buildSectionList: function(g) {
            var h = [];
            _.each(g, function(i) {
                var j = {
                    SectionId: i.SectionId,
                    LeadSectionId: i.LeadSectionId,
                    SectionIdentifier: i.SectionIdentifier,
                    BlockId: i.BlockId,
                    RoomId: i.RoomId,
                    Gender: i.Gender,
                    SectionIdentifier_UpdateInd: !!i.SectionIdentifier_UpdateInd,
                    BlockId_UpdateInd: !!i.BlockId_UpdateInd,
                    RoomId_UpdateInd: !!i.RoomId_UpdateInd,
                    DeleteSection: i.DeleteSection
                };
                if (i.TeacherList_UpdateInd) {
                    if (i.TeacherList && !i.TeacherList.length) {
                        j.ClearTeachers = true
                    } else {
                        j.TeacherList = i.TeacherList
                    }
                }
                if (i.StudentList_UpdateInd) {
                    j.StudentList = i.StudentList
                }
                if (!i.CustomFields) {
                    i.CustomFields = []
                }
                if (i.CustomFields && !i.CustomFields.length) {
                    j.ClearCustomFields = true
                } else {
                    j.CustomFields = i.CustomFields
                }
                h.push(j)
            });
            return h
        },
        saveModal: function(j, g, h, i) {
            var k = this;
            new a.Ms.OfferSectionSave().save({
                durationId: this.options.durationId,
                offeringId: this.options.offeringId,
                parentSectionId: this.options.parentSectionId,
                sectionList: k.buildSectionList(h.toJSON()),
                singleSave: j
            }, {
                wait: true,
                section: h.first(),
                courses: k.options.section,
                reload: k.options.reload,
                reloadSingleSave: k.options.reloadSingleSave,
                showNext: k.options.showNext,
                nextSection: k.options.nextSection,
                beforeSend: function(l, n, m) {
                    $(g.currentTarget).button("loading")
                },
                success: function(n, o, l) {
                    p3.displaySiteMessage("Changes made will be applied to this and all future terms.", "alert-success");
                    if (n.get("singleSave")) {
                        $(g.currentTarget).button("reset");
                        if (l.section === undefined) {
                            l.section = new Bbm()
                        }
                        if (l.section.get("DeleteSection")) {
                            if (l.reload) {
                                l.reload(n.get("durationId"))
                            }
                            l.section.collection.remove(l.section)
                        } else {
                            var m = l.section.has("SectionId");
                            l.section.set({
                                SectionId: parseInt(o, 10)
                            });
                            l.courses.fetch({
                                data: {
                                    durationId: n.get("durationId"),
                                    offeringId: n.get("offeringId"),
                                    parentSectionId: n.get("parentSectionId")
                                },
                                success: function(p) {
                                    var s = p.filter(function(t) {
                                            return t.get("SectionId") == o
                                        }),
                                        r = l.section.get("TeacherList_UpdateInd"),
                                        q = l.section.get("StudentList_UpdateInd");
                                    l.section.set({
                                        TeacherList: _.map(_.groupBy(_.filter(s, function(t) {
                                            return t.has("FacultyUserId")
                                        }), function(t) {
                                            return t.get("FacultyUserId")
                                        }), function(v, t, u) {
                                            return _.first(v)
                                        }),
                                        StudentList: _.map(_.groupBy(_.filter(s, function(t) {
                                            return t.has("StudentUserId")
                                        }), function(t) {
                                            return t.get("StudentUserId")
                                        }), function(v, t, u) {
                                            return _.first(v)
                                        })
                                    });
                                    l.section.set({
                                        TeacherList_UpdateInd: r,
                                        StudentList_UpdateInd: q
                                    });
                                    if (l.reloadSingleSave || !m) {
                                        l.reload(n.get("durationId"))
                                    }
                                }
                            })
                        }
                    } else {
                        if (l.reload) {
                            l.reload(n.get("durationId"))
                        }
                        p3.showModal(p3.Layout.Containers.Modal, "hide");
                        if (i) {
                            l.showNext(l.nextSection)
                        }
                    }
                }
            })
        },
        getActiveSectionTabButton: function() {
            return $(".nav-tabs.nav-stacked-modal li.active button").last()
        },
        activateSectionTabContextMenuButton: function(g) {
            if (!!g) {
                g.addClass("sectionTabSelected")
            }
        },
        deactivateSectionTabContextMenuButton: function() {
            var g = this.getActiveSectionTabButton();
            if (!!g) {
                g.removeClass("sectionTabSelected")
            }
        },
        switchManagedSectionTabContextMenuButton: function(g) {
            g.preventDefault();
            var h = $(g.currentTarget),
                i = h.parent().find("button");
            this.deactivateSectionTabContextMenuButton();
            this.activateSectionTabContextMenuButton(i)
        },
        controlActionMenuHeight: function(j) {
            var i = $(j.target),
                h = i.closest("div.btn-group"),
                k = 0,
                g = h.closest(".ui-jqgrid");
            if (h.hasClass("open")) {
                g.css("padding-bottom", "0px")
            } else {
                $(".btn-group").removeClass("open");
                k = (h.position().top + h.height() + h.find("ul.dropdown-menu").height() + 15) - g.height();
                if (k > 0) {
                    g.css("padding-bottom", k + "px")
                } else {
                    g.css("padding-bottom", "0px")
                }
            }
        },
        dispose: function() {
            this.collection.off();
            Bb.Validation.unbind(this)
        }
    });
    a.Vs.SectionTab = Bb.View.extend({
        template: "schedulemaker/courses/courses.model.section.navtab.template.html",
        tagName: "LI",
        events: {
            "show a": "showTab",
            "shown.bs.tab a": "showTab",
            'click [data-action="section-remove"]': "removeSection",
            'click [data-action="section-delete"]': "deleteSavedSection"
        },
        initialize: function(g) {
            this.model.on("change:SectionIdentifier", this.changeLabel, this).on("remove", this.deleteSection, this).on("validated", this.validateSection, this)
        },
        render: function(g) {
            var l = $("<div>", {
                    "class": "btn-group",
                    style: "display:inline"
                }),
                i = $("<button>", {
                    id: "ActionsMenu",
                    "class": "manage-sections dropdown-toggle btn bb-context-menu-btn bb-btn-secondary ",
                    "data-toggle": "dropdown",
                    style: "margin-left: 5px; margin-right: 5px"
                }),
                m = $("<i>", {
                    "class": "fa fa-ellipsis-h"
                }),
                h = $("<ul>", {
                    "class": "dropdown-menu"
                }),
                j = $("<li>"),
                k = $("<a>", {
                    "class": "any-row-action action-delete",
                    "data-id": this.model.cid,
                    href: "#",
                    "data-action": (!!this.model.attributes.CanDelete) ? ((!!this.model.attributes.SectionId) ? "section-delete" : "section-remove") : "none",
                    text: "Delete"
                }),
                n = $("<a>", {
                    href: "#".concat(this.model.cid),
                    "data-toggle": "tab",
                    "data-bypass": "1",
                    style: "display:inline"
                });
            if (this.model.attributes.bbIsTestMode) {
                if (!this.model.attributes.CanDelete) {
                    i.css("display", "none");
                    n.css("margin-left", "34px")
                }
                g.before(this.$el.append(l.append(i.append(m)).append(h.append(j.append(k))).add(n)));
                this.model.SectionTabLink = n;
                this.model.SectionTabContextMenuLink = k
            } else {
                g.before(this.$el.append(n))
            }
            this.changeLabel(this.model)
        },
        changeLabel: function(h) {
            var g = (h.get("SectionIdentifier") || "---");
            if (h.get("SectionLinked")) {
                g += '<div class="pull-right" style="margin:0px"><i class="p3icon-topicLink iconColor"></i></div>'
            }
            if (h.bbIsTestMode) {
                this.$el.find("a[data-toggle]").html(g)
            } else {
                this.$("a").html(g)
            }
        },
        deleteSection: function() {
            this.remove()
        },
        deleteSavedSection: function(h) {
            var g = $(h.currentTarget),
                k = g.closest("div").next(),
                i = k.is(".soft-deleted"),
                j = !k.is(".soft-deleted");
            h.preventDefault();
            if (i) {
                k.removeClass("soft-deleted");
                g.text("Delete")
            } else {
                k.addClass("soft-deleted");
                g.text("Restore")
            }
            this.updateDeleteSectionStatus(j);
            this.model.set({
                DeleteSection: j
            }, {
                silten: true
            })
        },
        removeSection: function(g) {
            g.preventDefault();
            g.stopPropagation();
            var h = this;
            h.model.destroy()
        },
        validateSection: function(j, i, h) {
            var g = this.$("a");
            if (_.isEmpty(h)) {
                g.removeClass("alert alert-danger").find("i.fa").remove()
            } else {
                g.addClass("alert alert-danger");
                if (g.find("i").length === 0) {
                    g.append('<i class="fa fa-exclamation-triangle"></i>')
                }
            }
        },
        showTab: function(h, g) {
            var i = $(h.currentTarget);
            _.each(this.collection.where({
                showTab: true
            }), function(j) {
                j.set("showTab", false)
            }, this);
            this.updateDeleteSectionStatus(i.is(".soft-deleted"));
            this.model.set("showTab", true)
        },
        updateDeleteSectionStatus: function(g) {
            if (!!this.model.DeleteSectionButton) {
                if (g) {
                    this.model.DeleteSectionButton.addClass("active")
                } else {
                    this.model.DeleteSectionButton.removeClass("active")
                }
            }
            if (!!this.model.DeletedSectionMarker) {
                this.model.DeletedSectionMarker.find(".alpha").toggle(!g);
                this.model.DeletedSectionMarker.find(".bravo").toggle(g)
            }
        },
        changeModel: function(g, i, h) {
            return null
        },
        dispose: function() {
            this.model.off()
        }
    });
    a.Vs.SectionTabContent = Bb.View.extend({
        className: "tab-pane tab-pane-tiles",
        template: "schedulemaker/courses/courses.model.section.template.html",
        events: {
            'change [name="SectionIdentifier"]': "changeInput",
            'keyup [name="SectionIdentifier"]': "changeInput",
            'change [name="Gender"]': "changeGender",
            'click [data-action="section-remove"]': "clickRemove",
            'click [data-action="section-delete"]': "clickDelete"
        },
        initialize: function(g) {
            this.model.on("remove", this.deleteSection, this).on("validated", this.validateSection, this).on("change:SectionId", this.setDelete, this)
        },
        render: function(h) {
            var i = this,
                g;
            p3.fT(i.template, function(m) {
                i.$el.html(m({
                    model: i.model.toJSON()
                }));
                i.model.DeleteSectionButton = i.$el.find("button[data-action='section-delete']");
                i.model.DeletedSectionMarker = i.$el.find("div.deleted-section-marker");
                if (i.model.bbIsTestMode) {
                    i.Containers = {
                        Form: i.$("div.bb-tile-content-section"),
                        Rooms: i.$("#rooms"),
                        Blocks: i.$("#blocks")
                    }
                } else {
                    i.Containers = {
                        Form: i.$("form"),
                        Rooms: i.$("#rooms"),
                        Blocks: i.$("#blocks")
                    }
                }
                p3.rV(new a.Vs.SelectOptions({
                    collection: i.options.blocks,
                    model: i.model,
                    value: "BlockId",
                    label: "BlockName",
                    updateInd: "BlockId_UpdateInd"
                }), i.Containers.Blocks, false);
                p3.rV(new a.Vs.SelectOptions({
                    collection: i.options.rooms,
                    model: i.model,
                    value: "RoomId",
                    label: "Fullname",
                    updateInd: "RoomId_UpdateInd"
                }), i.Containers.Rooms, false);
                var j = $("<hr/>"),
                    k = $("<hr/>"),
                    l = $("<hr/>");
                if (i.model.bbIsTestMode) {
                    j = $("<hr style='border-top: solid 3px gray;' />");
                    k = $("<hr style='border-top: solid 3px gray;' />");
                    l = $("<hr style='border-top: solid 3px gray;' />")
                }
                i.Containers.Form.append(j);
                p3.rV(new a.Vs.Teachers(i.options), i.Containers.Form, false);
                i.Containers.Form.append(k);
                p3.rV(new a.Vs.Students(i.options), i.Containers.Form, false);
                if (i.options.useAdminFields) {
                    i.Containers.Form.append(l);
                    i.getAdminFields(function() {
                        var n = {
                            locationIndexId: 10,
                            adminData: i.adminFields,
                            usageId: i.model.get("SectionId") || 0
                        };
                        if (i.model.bbIsTestMode) {
                            n.useTileStyles = i.model.bbIsTestMode
                        }
                        g = new b.Vs.EditDataView(n);
                        i.model.adminView = g;
                        p3.rV(g, i.Containers.Form, false);
                        p3.setModalHeight(p3.Layout.Containers.Modal)
                    })
                }
            });
            this.$el.appendTo(h)
        },
        changeInput: function(g) {
            this.model.set("SectionIdentifier", $(g.currentTarget).val());
            this.model.set("SectionIdentifier_UpdateInd", true)
        },
        changeGender: function(g) {
            this.model.set("Gender", $(g.currentTarget).val())
        },
        clickDelete: function(g) {
            this.model.set({
                DeleteSection: !$(g.currentTarget).is(".active")
            }, {
                silten: true
            });
            if (this.model.bbIsTestMode) {
                if (!!this.model.SectionTabLink) {
                    if (this.model.SectionTabLink.is(".soft-deleted")) {
                        this.model.SectionTabLink.removeClass("soft-deleted");
                        this.model.SectionTabContextMenuLink.text("Delete")
                    } else {
                        this.model.SectionTabLink.addClass("soft-deleted");
                        this.model.SectionTabContextMenuLink.text("Restore")
                    }
                }
            }
        },
        clickRemove: function(g) {
            this.model.destroy()
        },
        deleteSection: function() {
            this.remove()
        },
        validateSection: function(j, i, h) {
            var k = this,
                g = k.$("a");
            k.$("#infomessage-error").remove();
            if (_.isEmpty(h) || h.SectionIdentifier) {
                g.removeClass("alert alert-danger").find("i.fa").remove()
            } else {
                g.addClass("alert alert-danger");
                if (g.find("i").length === 0) {
                    g.append('<i class="fa fa-exclamation-triangle"></i>')
                }
                p3.Us.InfoMessage.ErrorBox("Please complete all required fields.", k.$el, false);
                p3.setModalHeight(p3.Layout.Containers.Modal)
            }
            if (h.SectionIdentifier) {
                k.$('[name="SectionIdentifier"]').addClass("box-validate").tooltip({
                    title: h.SectionIdentifier
                }).tooltip("enable").closest(".control-group").addClass("error")
            } else {
                k.$('[name="SectionIdentifier"]').removeClass("box-validate").tooltip("disable").closest(".control-group").removeClass("error")
            }
        },
        setDelete: function(g) {
            if (g.has("SectionId")) {
                this.$('[data-action="section-remove"]').attr("data-action", "section-delete")
            }
        },
        dispose: function() {
            this.model.off()
        },
        getAdminFields: function(g) {
            var h = this;
            h.adminFields = new b.Cs.UserFieldData();
            if (h.model.get("SectionId") > 0) {
                h.adminFields.fetch({
                    data: {
                        locationIndexId: 10,
                        usageId: h.model.get("SectionId")
                    },
                    success: g,
                    error: function() {
                        p3.displayError("Error loading admin fields")
                    }
                })
            } else {
                g()
            }
        }
    });
    a.Vs.Teachers = Bb.View.extend({
        tagName: "fieldset",
        initialize: function(h) {
            var g = (p3.Config.IsSmallCollege) ? "There are currently no faculty in this section." : "There are currently no teachers in this section.";
            this.Containers = {
                Table: $("<table>", {
                    "class": "table table-striped table-condensed"
                }).hide(),
                El: this.$el,
                Message: $("<h6>").html(g)
            };
            this.model.on("validated", this.validateTeacher, this).on("change:TeacherList", this.changeTeacherList, this);
            this.collection = new Bbc().on("add", this.addTeacherRow, this).on("remove", this.removeTeacherRow, this).on("change:Head", this.changeTeacher, this).on("change:delete", this.changeTeacher, this).on("change:Role", this.changeTeacher, this);
            this.teachers = new Bbc([], {
                comparator: "FacultyName"
            }).on("change:Selected", this.selectTeacher, this);
            if (h.teachers.length > 0) {
                this.renderTeachers(h.teachers)
            } else {
                h.teachers.once("reset", this.renderTeachers, this)
            }
        },
        render: function(g) {
            this.$el.appendTo(g).append(this.Containers.Message, this.Containers.Table.append(this.Containers.Tbody))
        },
        renderTeachers: function(g, i) {
            var j = this,
                h = {
                    collection: j.teachers,
                    Label: "FacultyName",
                    Value: "FacultyUserId",
                    Header: (p3.Config.IsSmallCollege) ? "Faculty" : "Teacher"
                };
            j.teachers.reset(g.toJSON());
            if (j.model.bbIsTestMode) {
                h.bbIsTestMode = j.model.bbIsTestMode
            }
            p3.rV(new a.Vs.PeopleSearch(h), j.Containers.El, false);
            j.changeTeacherList(j.model);
            j.collection.on("change add remove reset", function() {
                j.model.set("TeacherList_UpdateInd", true)
            });
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        changeTeacherList: function(g) {
            this.collection.update(_.map(g.get("TeacherList"), function(h, k, i) {
                var j = _.first(this.teachers.where({
                    FacultyUserId: h.get("FacultyUserId")
                }));
                return new a.Ms.Teacher({
                    FacultyUserId: h.get("FacultyUserId"),
                    bbIsTestMode: g.attributes.bbIsTestMode,
                    FacultyName: j ? j.set({
                        Selected: true
                    }, {
                        silent: true
                    }).get("FacultyName") : "???",
                    Head: h.get("Head"),
                    Role: h.get("Role")
                })
            }, this), {
                show: true
            })
        },
        addTeacherRow: function(h, g, i) {
            if (i.show) {
                this.Containers.Message.hide();
                this.Containers.Table.show()
            }
            this.setTeacherList();
            p3.rV(new a.Vs.TeacherRow({
                model: h,
                roles: this.options.roles
            }), this.Containers.Table, false)
        },
        removeTeacherRow: function(h, g) {
            if (g.length === 0) {
                this.Containers.Message.show();
                this.Containers.Table.hide()
            }
            _.first(this.teachers.where({
                FacultyUserId: h.get("FacultyUserId")
            })).unset("Selected", {
                silent: true
            });
            this.setTeacherList()
        },
        changeTeacher: function(g) {
            if (g.get("Head") && g.hasChanged("Head")) {
                _.each(this.collection.reject(function(h) {
                    return !(h.get("Head") && g.cid != h.cid)
                }), function(h) {
                    h.set({
                        Head: false
                    })
                })
            }
            this.setTeacherList()
        },
        setTeacherList: function() {
            this.model.set({
                TeacherList: _.filter(this.collection.toJSON(), function(g) {
                    return !g["delete"]
                })
            }, {
                silent: true
            })
        },
        selectTeacher: function(g) {
            if (g.get("Selected")) {
                this.collection.add(new a.Ms.Teacher({
                    FacultyUserId: g.get("FacultyUserId"),
                    FacultyName: g.get("FacultyName"),
                    Head: (this.collection.length === 0) ? true : false,
                    canRemove: true
                }), {
                    show: this.collection.length === 0
                })
            }
        },
        validateTeacher: function(i, h, g) {
            this.collection.each(function(j) {
                j.isValid(true)
            });
            if (g["TeacherList.Head"] == "false") {
                this.$('[data-action="head"]').addClass("box-validate").css("background-image", "none")
            } else {
                this.$('[data-action="head"]').removeClass("box-validate").css("background-image", "initial")
            }
            if (g.hasTeacherList) {
                this.$('[name="Teacher"]').addClass("box-validate").tooltip({
                    title: g.hasTeacherList
                }).tooltip("enable")
            } else {
                this.$('[name="Teacher"]').removeClass("box-validate").tooltip("disable")
            }
        },
        dispose: function() {
            this.model.off();
            this.collection.off();
            this.teachers.off()
        }
    });
    a.Vs.TeacherRow = Bb.View.extend({
        tagName: "TR",
        template: "schedulemaker/courses/courses.model.addsectionteacher.row.template.html",
        events: {
            'click [data-action="remove"]': "removeTeacher",
            'click [data-action="delete"]': "deleteTeacher",
            'click [data-action="head"]:not(.active)': "headTeacherOn"
        },
        initialize: function(g) {
            Bb.Validation.bind(this);
            this.model.on("remove", this.removeRow, this).on("change:Head", this.markHead, this).on("validated", this.validateTeacher, this)
        },
        render: function(g) {
            var h = this;
            p3.fT(h.template, function(i) {
                h.$el.appendTo(g).html(i({
                    model: h.model.toJSON()
                }));
                h.Containers = {
                    Roles: h.$("#select-role")
                };
                p3.rV(new a.Vs.SelectOptions({
                    collection: h.options.roles,
                    model: h.model,
                    value: "Role",
                    label: "RoleType"
                }), h.Containers.Roles, false)
            })
        },
        deleteTeacher: function(g) {
            this.model.set({
                "delete": !$(g.currentTarget).is(".active")
            })
        },
        removeTeacher: function(g) {
            this.model.destroy()
        },
        removeRow: function(g) {
            this.remove()
        },
        headTeacherOn: function(g) {
            this.model.set({
                Head: true
            })
        },
        markHead: function(g) {
            if (g.get("Head")) {
                this.$('[data-action="head"]').addClass("active").removeClass("box-validate").css("background-image", "initial")
            } else {
                this.$('[data-action="head"]').removeClass("active")
            }
        },
        dispose: function() {
            this.model.off();
            Bb.Validation.unbind(this)
        }
    });
    a.Vs.Students = Bb.View.extend({
        tagName: "fieldset",
        initialize: function(g) {
            this.Containers = {
                Table: $("<table>", {
                    "class": "table table-striped table-condensed"
                }).hide(),
                El: this.$el,
                Message: $("<h6>").html("There are currently no students in this section.")
            };
            this.model.on("validated", this.validateStudent, this).on("change:StudentList", this.changeStudentList, this);
            this.collection = new Bbc().on("add", this.addStudentRow, this).on("remove", this.removeStudentRow, this).on("change:EnrollDate", this.changeStudent, this).on("change:DeleteInd", this.changeStudent, this).on("change:DropType", this.changeStudent, this).on("change:DropDate", this.changeStudent, this);
            this.students = new Bbc([], {
                comparator: "StudentName"
            }).on("change:Selected", this.selectStudent, this);
            if (g.students.length > 0) {
                this.renderStudents(g.students)
            } else {
                g.students.once("reset", this.renderStudents, this)
            }
        },
        render: function(g) {
            this.$el.appendTo(g).append(this.Containers.Message, this.Containers.Table.append(this.Containers.Tbody))
        },
        renderStudents: function(g) {
            var i = this,
                h = {
                    collection: this.students,
                    Label: "StudentName",
                    Value: "StudentUserId",
                    Header: "Student"
                };
            i.students.reset(g.toJSON());
            if (i.model.bbIsTestMode) {
                h.bbIsTestMode = i.model.bbIsTestMode
            }
            p3.rV(new a.Vs.PeopleSearch(h), i.Containers.El, false);
            i.changeStudentList(i.model);
            i.collection.on("change add remove reset", function() {
                i.model.set("StudentList_UpdateInd", true)
            });
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        changeStudentList: function(g) {
            this.collection.update(_.map(_.sortBy(g.get("StudentList"), function(h) {
                return h.get("StudentName")
            }), function(h) {
                var i = _.first(this.students.where({
                        StudentUserId: h.get("StudentUserId")
                    })),
                    j = {
                        StudentUserId: h.get("StudentUserId"),
                        StudentName: h.get("StudentName"),
                        EnrollDate: p3.Us.DateTime.format(h.get("BeginDate"), "M/d/yyyy"),
                        DropDate: p3.Us.DateTime.format(p3.Us.DateTime.localDateTime(), "M/d/yyyy"),
                        HasGrades: h.get("HasGrades"),
                        DurationBeginDate: h.get("DurationBeginDate"),
                        DurationEndDate: h.get("DurationEndDate")
                    };
                if (i) {
                    i.set({
                        Selected: true
                    }, {
                        silent: true
                    })
                }
                if (this.model.attributes.bbIsTestMode) {
                    j.bbIsTestMode = this.model.attributes.bbIsTestMode
                }
                return new a.Ms.Student(j)
            }, this), {
                show: true
            })
        },
        changeStudent: function() {
            this.model.set({
                StudentList: this.collection.toJSON()
            }, {
                silent: true
            })
        },
        addStudentRow: function(h, g, i) {
            if (i.show) {
                this.Containers.Message.hide();
                this.Containers.Table.show()
            }
            this.changeStudent();
            p3.rV(new a.Vs.StudentRow({
                model: h
            }), this.Containers.Table, false)
        },
        removeStudentRow: function(h, g) {
            if (g.length === 0) {
                this.Containers.Message.show();
                this.Containers.Table.hide()
            }
            var i = this.students.find(function(j) {
                return j.get("StudentUserId") == h.get("StudentUserId")
            });
            if (i) {
                i.unset("Selected", {
                    silent: true
                })
            }
        },
        selectStudent: function(g) {
            if (g.get("Selected")) {
                this.collection.add(new a.Ms.Student({
                    StudentUserId: g.get("StudentUserId"),
                    StudentName: g.get("StudentName"),
                    EnrollDate: p3.Us.DateTime.format(p3.Us.DateTime.localDateTime(), "M/d/yyyy"),
                    canRemove: true
                }), {
                    show: this.collection.length === 0
                })
            }
        },
        validateStudent: function(i, h, g) {
            this.collection.each(function(j) {
                j.isValid(true)
            })
        },
        dispose: function() {
            this.model.off();
            this.collection.off();
            this.students.off()
        }
    });
    a.Vs.StudentRow = Bb.View.extend({
        tagName: "TR",
        template: "schedulemaker/courses/courses.model.addsectionstudent.row.template.html",
        events: {
            'click [data-action="remove"]': "removeStudent",
            'click [data-action="drop"].active': "keepStudent",
            'click [data-action="drop"]:not(.active):not(.disabled)': "dropStudent",
            "hidden .collapse": "hideCollapse",
            "shown .collapse": "hideCollapse",
            'blur [name="DropDate"]': "changeDropDate"
        },
        initialize: function(g) {
            Bb.Validation.bind(this);
            this.model.on("remove", this.removeRow, this)
        },
        render: function(g) {
            var h = this;
            p3.fT(h.template, function(i) {
                h.$el.appendTo(g).html(i({
                    model: h.model.toJSON()
                }));
                h.Containers = {
                    StartDate: h.$(".span7,.col-md-7")
                };
                if (h.model.get("canRemove")) {
                    h.editDate()
                } else {
                    h.editDisplay()
                }
                c.Us.initialize(h.$('[name="DropDate"]'), {
                    numberOfMonths: 1,
                    stepMonths: 1,
                    dateFormat: "m/d/yy",
                    minDate: h.model.get("DurationBeginDate"),
                    maxDate: h.model.get("DurationEndDate")
                }, h.model.get("DropDate"))
            })
        },
        removeStudent: function(g) {
            this.model.destroy()
        },
        removeRow: function(g) {
            this.remove()
        },
        changeDropDate: function(g) {
            var h = $(g.currentTarget).datepicker("getDate");
            this.model.set({
                DropDate: h ? p3.Us.DateTime.format(h, "M/d/yyyy") : null
            })
        },
        dropStudent: function(h) {
            var g = $(h.currentTarget);
            this.$('[data-action="drop"]').removeClass("active");
            g.addClass("active");
            this.$(".collapse:not(.in)").collapse("show");
            this.model.set({
                DeleteInd: true,
                DropType: g.val()
            });
            if (g.val() == "0") {
                this.$('[name="DropDate"]').attr("disabled", "disabled")
            } else {
                this.$('[name="DropDate"]').removeAttr("disabled")
            }
        },
        keepStudent: function(g) {
            $(g.currentTarget).removeClass("active");
            this.$(".collapse").collapse("hide");
            this.model.set({
                DeleteInd: false
            })
        },
        hideCollapse: function(g) {
            g.stopPropagation()
        },
        editDate: function(g) {
            p3.rV(new a.Vs.StartDateEdit({
                model: this.model
            }), this.Containers.StartDate, true)
        },
        editDisplay: function(g) {
            p3.rV(new a.Vs.StartDateDisplay({
                model: this.model
            }), this.Containers.StartDate, true)
        },
        dispose: function() {
            this.model.off();
            Bb.Validation.unbind(this)
        }
    });
    a.Vs.StartDateDisplay = Bb.View.extend({
        tagName: "UL",
        className: "inline mb-0 list-inline",
        render: function(g) {
            this.$el.appendTo(g).append($("<li>", {
                "class": "pl-0 pr-0"
            }).html(this.model.get("EnrollDate")))
        }
    });
    a.Vs.StartDateEdit = Bb.View.extend({
        tagName: "UL",
        className: "inline mb-0 list-inline",
        events: {
            "blur input": "changeEnrollDate"
        },
        render: function(g) {
            this.$el.appendTo(g).append($("<li>", {
                "class": "pl-0 pr-0"
            }).append($("<input>", {
                type: "text",
                "class": "input-mini",
                name: "EnrollDate"
            })));
            c.Us.initialize(this.$("input"), {
                numberOfMonths: 1,
                stepMonths: 1,
                dateFormat: "m/d/yy"
            }, this.model.get("EnrollDate"))
        },
        changeEnrollDate: function(g) {
            var h = $(g.currentTarget).datepicker("getDate");
            this.model.set({
                EnrollDate: h ? p3.Us.DateTime.format(h, "M/d/yyyy") : null
            })
        }
    });
    a.Vs.SelectOptions = Bb.View.extend({
        tagName: "select",
        className: "input-medium input-sm",
        events: {
            change: "changeSelect"
        },
        initialize: function(g) {
            this.collection.once("reset", this.setOptions, this)
        },
        render: function(g) {
            this.$el.appendTo(g).attr("name", this.options.value).append($("<option>", {
                value: 0
            }).html("--Not set--"));
            this.setOptions(this.collection)
        },
        setOptions: function(g) {
            g.each(function(h) {
                this.$el.append($("<option>", {
                    value: h.get(this.options.value)
                }).html(h.get(this.options.label)))
            }, this);
            this.$el.val(this.model.get(this.options.value))
        },
        changeSelect: function(g) {
            this.model.set(this.options.value, parseInt($(g.currentTarget).val(), 10));
            this.model.set(this.options.updateInd, true)
        },
        dispose: function() {
            this.collection.off()
        }
    });
    a.Vs.PeopleSearch = Bb.View.extend({
        className: "clearfix",
        template: "schedulemaker/courses/courses.model.addsectionteacher.template.html",
        events: {
            'click [data-action="search"]': "searchAll"
        },
        render: function(g) {
            var h = this;
            p3.fT(h.template, function(j) {
                var i = {
                    Header: h.options.Header
                };
                if (h.options.bbIsTestMode) {
                    i.bbIsTestMode = h.options.bbIsTestMode
                }
                h.$el.prependTo(g).html(j(i));
                _.defer(function() {
                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, a.Us.initializeAutoComplete, h)
                })
            })
        },
        searchAll: function(g) {
            this.$("input").focus().val("").autocomplete("search", "display-all")
        }
    });
    a.Us.initializeAutoComplete = function(g) {
        g.$("input").autocomplete({
            delay: 0,
            appendTo: g.$(".input-append"),
            source: function(h, i) {
                i(_.map($.grep(_.reject(g.collection.toJSON(), function(j) {
                    return j.Selected
                }), function(j) {
                    return new RegExp($.ui.autocomplete.escapeRegex((h.term === "display-all") ? "" : h.term), "i").test(j[g.options.Label])
                }), function(j) {
                    return {
                        label: j[g.options.Label],
                        id: j[g.options.Value]
                    }
                }, this))
            },
            select: function(h, i) {
                $(h.target).val("");
                g.collection.find(function(j) {
                    return j.get(g.options.Value) == i.item.id
                }).set({
                    Selected: true
                });
                return false
            },
            change: function(h, i) {
                $(h.target).val("")
            }
        })
    };
    a.Vs.Filter = Bb.View.extend({
        className: "",
        template: "coursesection/coursesection.filter.template.html",
        events: {
            'change [name="SchoolYearLabel"]': "changeSchoolYear",
            'change [name="InactiveInd"]': "changeInactiveInd",
            'click [value="bluk-section-add"]': "clickBulkSectionAdd"
        },
        initialize: function(g) {
            this.collection = new a.Cs.SchoolYears().once("reset", this.renderTemplate);
            if (p3.Config.IsSmallCollege) {
                this.loadSessions()
            } else {
                this.loadSchoolYears()
            }
            this.listenTo(g.settings, "change:DurationId", this.setDuration)
        },
        loadSessions: function() {
            var g = this;
            g.options.sessions = new a.Cs.SchoolSessions();
            g.options.sessions.fetch({
                success: function() {
                    g.loadSchoolYears()
                }
            })
        },
        loadSchoolYears: function() {
            this.collection.fetch({
                data: {
                    display: 2
                },
                view: this,
                success: function(g, i, h) {
                    if (!p3.getSessionState("SMLoadMenu")) {
                        if (g.length) {
                            h.view.setSchoolYear(_.findWhere(i, {
                                Current: true
                            }).Id)
                        }
                    }
                }
            })
        },
        render: function(g) {
            this.$el.appendTo(g)
        },
        renderTemplate: function(g, h) {
            var i = p3.getSessionState("SMLoadMenu");
            if (i) {
                if (g.length > 0) {
                    _.first(g.where({
                        Id: p3.getSessionState("SMSchoolYearId")
                    })).set({
                        Selected: true
                    });
                    h.view.setSchoolYear(p3.getSessionState("SMSchoolYearId"))
                }
            } else {
                _.first(g.where({
                    Current: true
                })).set({
                    Selected: true
                })
            }
            p3.fT(h.view.template, function(j) {
                h.view.$el.html(j({
                    collection: g.toJSON(),
                    hasSchedule: p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.SCHEDULE),
                    isSmallCollege: p3.Config.IsSmallCollege
                }));
                h.view.setDuration(h.view.options.settings);
                h.view.Containers = {
                    SchoolLevel: h.view.$("#school-level"),
                    SchoolSession: h.view.$("#school-session"),
                    SchoolTerm: h.view.$("#school-term"),
                    Report: h.view.$(".report-container")
                };
                p3.rV(new a.Vs.FilterSchoolLevel(h.view.options), h.view.Containers.SchoolLevel, false);
                if (p3.Config.IsSmallCollege) {
                    p3.rV(new a.Vs.FilterSchoolSession(h.view.options), h.view.Containers.SchoolSession, false)
                }
                p3.rV(new a.Vs.FilterSchoolTerm(h.view.options), h.view.Containers.SchoolTerm, false);
                p3.rV(new a.Vs.Reports(h.view.options), h.view.Containers.Report, false)
            })
        },
        changeSchoolYear: function(g) {
            this.setSchoolYear($(g.currentTarget).val())
        },
        setSchoolYear: function(g) {
            this.options.settings.set("SchoolYearLabel", g)
        },
        changeInactiveInd: function(g) {
            this.options.settings.set("InactiveInd", parseInt($(g.currentTarget).val(), 10))
        },
        clickBulkSectionAdd: function() {
            p3.rV(new a.Vs.BulkSectionAddModal(this.options), p3.Layout.Containers.Modal, true)
        },
        setDuration: function(g) {
            if (g.has("DurationId")) {
                this.$('[value="bluk-section-add"]').removeAttr("disabled")
            } else {
                this.$('[value="bluk-section-add"]').attr("disabled", "disabled")
            }
        }
    });
    a.Vs.BulkSectionAddModal = Bb.View.extend({
        template: "coursesection/coursesection.modal.bulksectionadd.template.html",
        events: {
            'change [name="SelectDepartment"]': "changeDepartment",
            'click [data-action="save"]': "clickSave",
            'change [name="CreateCourseSection"]': "changeCreateCourseSection"
        },
        initialize: function() {
            this.model = new a.Ms.BulkSectionCreate();
            this.collection = new a.Cs.DepartmentWithCourse();
            this.listenTo(this.collection, "change:Selected", this.selectDepartment);
            this.listenTo(this.model, "validated:valid", this.saveValid);
            Bb.Validation.bind(this)
        },
        render: function(g) {
            var h = this;
            p3.fT(h.template, function(i) {
                h.$el.html(i({
                    schoolYear: h.options.settings.get("SchoolYearLabel"),
                    schoolLevel: h.options.settings.get("schoolLevelLabel"),
                    term: h.options.settings.get("DurationLabel")
                }));
                h.Containers = {
                    SelectDepartment: h.$("#select-department"),
                    Modal: h.$("#modal-modal")
                };
                h.collection.fetch({
                    data: {
                        levelNum: h.options.settings.get("LevelNum"),
                        durationId: h.options.settings.get("DurationId")
                    },
                    success: function() {
                        h.selectDepartment(undefined, undefined, {
                            addNew: true
                        });
                        h.$('[name="CreateCourseSection"]').change();
                        h.$('[value="all"]').click()
                    }
                });
                p3.showModal(p3.Layout.Containers.Modal)
            });
            this.$el.appendTo(g)
        },
        selectDepartment: function(g, i, h) {
            if (h.addNew) {
                p3.rV(new a.Vs.SelectDepartment({
                    collection: this.collection
                }), this.Containers.SelectDepartment, false)
            }
        },
        changeDepartment: function(g) {
            if ($(g.currentTarget).val() === "all") {
                this.$("#select-department > select").attr("disabled", "disabled")
            } else {
                this.$("#select-department > select").removeAttr("disabled")
            }
        },
        changeCreateCourseSection: function(g) {
            if ($(g.currentTarget).val() === "1") {
                this.$('select[name^="Calculated"]').removeAttr("disabled")
            } else {
                this.$('select[name^="Calculated"]').attr("disabled", "disabled")
            }
        },
        clickSave: function() {
            this.model.set({
                CreateCourseSection: parseInt(this.$('[name="CreateCourseSection"]').val(), 10),
                CalculatedLowerMin: parseInt(this.$('[name="CalculatedLowerMin"]').val(), 10),
                CalculatedHigherMax: parseInt(this.$('[name="CalculatedHigherMax"]').val(), 10),
                CourseWithoutRequest: parseInt(this.$('[name="CourseWithoutRequest"]').val(), 10),
                ClearExisting: this.$('[name="ClearExisting"]').is(":checked"),
                DepartmentList: this.$('[value="select-dept"]').is(":checked") ? this.collection.where({
                    Selected: true
                }) : null
            }, {
                validate: true
            })
        },
        runBulkSection: function() {
            var h = this,
                g = this.$('[data-action="save"]');
            g.button("loading");
            this.model.save({
                LevelNum: this.options.settings.get("LevelNum"),
                SchoolYearLabel: this.options.settings.get("SchoolYearLabel")
            }, {
                validate: false,
                success: function(j) {
                    var i = h.options.settings.get("DurationId");
                    h.options.settings.unset("DurationId");
                    h.options.settings.set({
                        DurationId: i
                    });
                    p3.Layout.Containers.Modal.modal("hide")
                },
                error: function(j, i) {
                    g.button("reset");
                    h.$("#infomessage-error").remove();
                    if (i.responseText.indexOf("ERR_CLEAR_COURSE_HAS_GRADE") > -1 || i.responseText.indexOf("ERR_CLEAR_COURSE_HAS_ATTENDANCE") > -1) {
                        p3.Us.InfoMessage.ErrorBox("Existing sections can not be cleared because attendance and/or grades have been recorded.", ".modal-body", false);
                        p3.setModalHeight(p3.Layout.Containers.Modal)
                    }
                }
            })
        },
        saveValid: function(i) {
            var j = this,
                g = this.$('[data-action="save"]'),
                h = (p3.Config.IsSmallCollege) ? "Faculty<br>" : "Teachers<br>";
            if (i.get("ClearExisting")) {
                g.button("loading");
                new a.Ms.BulkSectionCreateCheck().fetch({
                    data: {
                        levelNum: this.options.settings.get("LevelNum"),
                        schoolYearLabel: this.options.settings.get("SchoolYearLabel"),
                        departments: JSON.stringify(_.map(i.get("DepartmentList"), function(k) {
                            return {
                                DepartmentId: k.get("DepartmentId")
                            }
                        }))
                    },
                    success: function(l) {
                        g.button("reset");
                        var m = "Clearing sections will remove the following data:<br>",
                            k = false;
                        if (l.get("HasFaculty")) {
                            m += h;
                            k = true
                        }
                        if (l.get("HasEnrollment")) {
                            m += "Students<br>";
                            k = true
                        }
                        if (l.get("HasMeetingTime")) {
                            m += "Meeting Times<br>";
                            k = true
                        }
                        if (l.get("HasCustomFields")) {
                            m += "Custom Fields<br>";
                            k = true
                        }
                        if (l.get("HasRooms")) {
                            m += "Rooms<br>";
                            k = true
                        }
                        if (!k) {
                            j.runBulkSection()
                        } else {
                            p3.showConfirm("Are you sure you want to clear existing sections?", m, null, function() {
                                j.runBulkSection()
                            }, j.Containers.Modal);
                            p3.setModalHeight(j.Containers.Modal)
                        }
                    }
                })
            } else {
                this.runBulkSection()
            }
        },
        dispose: function() {
            Bb.Validation.unbind(this)
        }
    });
    a.Vs.SelectDepartment = Bb.View.extend({
        tagName: "select",
        className: "input-xlarge mb-10 form-control",
        attributes: {
            name: "DepartmentList"
        },
        events: {
            change: "changeDepartment"
        },
        initialize: function() {
            this.selectDepartment();
            this.listenTo(this.collection, "change:Selected", this.selectDepartment)
        },
        render: function(g) {
            this.$el.appendTo(g);
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        changeDepartment: function(g) {
            var i = parseInt($(g.currentTarget).val(), 10),
                h = !_.isUndefined(this.departmentId),
                j = this.collection.filter(function(k) {
                    return !k.get("Selected") || k.get("Selected") === false
                });
            if (h) {
                this.collection.findWhere({
                    DepartmentId: this.departmentId
                }).set({
                    Selected: false
                }, {
                    silent: !_.isNaN(i),
                    addNew: _.isEmpty(j)
                })
            }
            if (!_.isNaN(i)) {
                this.departmentId = i;
                this.collection.findWhere({
                    DepartmentId: i
                }).set({
                    Selected: true
                }, {
                    addNew: !h && j.length > 1
                })
            } else {
                this.remove();
                p3.setModalHeight(p3.Layout.Containers.Modal)
            }
        },
        selectDepartment: function() {
            this.$el.empty();
            this.$el.append($("<option>").html("Select a value"));
            this.collection.each(function(g) {
                if (!g.get("Selected") || this.departmentId === g.get("DepartmentId")) {
                    this.$el.append($("<option>", {
                        value: g.get("DepartmentId")
                    }).html(g.get("ShortDescription")))
                }
            }, this);
            if (this.departmentId) {
                this.$el.val(this.departmentId)
            }
        }
    });
    a.Vs.FilterSchoolLevel = Bb.View.extend({
        tagName: "select",
        className: "input-medium input-sm",
        events: {
            change: "changeSchoolLevel"
        },
        initialize: function(g) {
            this.listenTo(g.settings, "change:LevelNum", this.setSchoolLevelLabel);
            this.collection = new a.Cs.SchoolLevels().on("add", this.renderOption, this);
            this.collection.fetch({
                view: this,
                update: true,
                success: function(h, j, i) {
                    if (h.length) {
                        i.view.container.html(i.view.el);
                        i.view.setSchoolLevel(_.first(j).LevelNum)
                    }
                }
            })
        },
        render: function(g) {
            this.container = g;
            if (p3.getSessionState("SMLoadMenu")) {
                this.$el.attr("disabled", false)
            }
        },
        renderOption: function(g) {
            this.$el.append($("<option>", {
                value: g.get("LevelNum")
            }).html(g.get("DdDescription")))
        },
        changeSchoolLevel: function(g) {
            this.levelChange = true;
            this.setSchoolLevel(parseInt($(g.currentTarget).val(), 10))
        },
        setSchoolLevel: function(g) {
            if (p3.getSessionState("SMLoadMenu") && !this.levelChange) {
                this.options.settings.set("LevelNum", p3.getSessionState("SMSchoolLevelId"));
                this.$el.find("[value='" + p3.getSessionState("SMSchoolLevelId") + "']").attr("selected", "selected")
            } else {
                this.options.settings.set("LevelNum", g)
            }
        },
        setSchoolLevelLabel: function(g, h) {
            g.set({
                schoolLevelLabel: this.collection.findWhere({
                    LevelNum: parseInt(h, 10)
                }).get("DdDescription")
            })
        },
        dispose: function() {
            this.collection.off()
        }
    });
    a.Vs.FilterSchoolSession = Bb.View.extend({
        tagName: "span",
        events: {
            "change select": "changeSchoolSession"
        },
        initialize: function(g) {
            g.settings.on("change:SchoolYearLabel", this.filterSessions, this).on("change:LevelNum", this.filterSessions, this);
            this.collection = new a.Cs.SchoolSessions().on("add", this.renderOption, this)
        },
        render: function(g) {
            this.$el.appendTo(g).append($("<div>", {
                style: "display: inline-block;",
                "class": "input-medium"
            }).append($("<label>", {
                "class": "pull-left mr-5 mt-5"
            }).append($("<em>").html("No Sessions")), $("<select>", {
                "class": "input-medium input-sm"
            }).hide()))
        },
        renderOption: function(h) {
            var g = {
                value: h.get("Id")
            };
            if (h.get("Current")) {
                g.selected = "selected"
            }
            this.$("select").append($("<option>", g).html(h.get("Name")))
        },
        filterSessions: function(j) {
            var k = this,
                i, h = k.$("select"),
                g = k.$("label");
            k.collection.reset();
            h.empty().hide();
            g.show();
            if (j.has("SchoolYearLabel") && j.has("LevelNum")) {
                k.collection.add(k.options.sessions.where({
                    SchoolYearLabel: j.get("SchoolYearLabel"),
                    LevelNum: j.get("LevelNum")
                }));
                if (k.collection.length) {
                    h.show();
                    g.hide();
                    i = k.collection.where({
                        Current: true
                    });
                    if (_.isEmpty(i)) {
                        k.setSchoolSessions(k.collection.at(0).get("Id"))
                    } else {
                        k.setSchoolSessions(_.first(i).get("Id"))
                    }
                } else {
                    k.unsetSchoolSessions()
                }
            }
        },
        changeSchoolSession: function(g) {
            this.unsetSchoolSessions();
            this.setSchoolSessions(parseInt($(g.currentTarget).val(), 10), true)
        },
        setSchoolSessions: function(h, g) {
            if (!g && p3.getSessionState("SMLoadMenu") && !isNaN(p3.getSessionState("SMSessionId"))) {
                this.options.settings.set("SessionId", p3.getSessionState("SMSessionId"));
                this.$("select").val(p3.getSessionState("SMSessionId"))
            } else {
                this.options.settings.set("SessionId", h)
            }
        },
        unsetSchoolSessions: function() {
            if (this.options.settings.has("SessionId")) {
                this.options.settings.unset("SessionId")
            }
        },
        dispose: function() {
            this.collection.off()
        }
    });
    a.Vs.FilterSchoolTerm = Bb.View.extend({
        tagName: "span",
        events: {
            "change select": "changeSchoolTerm"
        },
        initialize: function(g) {
            if (p3.Config.IsSmallCollege) {
                g.settings.on("change:SessionId", this.fetchTerms, this)
            } else {
                g.settings.on("change:SchoolYearLabel", this.fetchTerms, this).on("change:LevelNum", this.fetchTerms, this)
            }
            this.collection = new a.Cs.SchoolTerms().on("add", this.renderOption, this)
        },
        render: function(g) {
            this.$el.appendTo(g).append($("<div>", {
                style: "display: inline-block;",
                "class": "input-medium"
            }).append($("<label>", {
                "class": "pull-left mr-5 mt-5"
            }).append($("<em>").html("No Terms")), $("<select>", {
                "class": "input-medium input-sm"
            }).hide()))
        },
        renderOption: function(h) {
            var g = {
                value: h.get("DdId")
            };
            if (!p3.Config.IsSmallCollege || h.get("SessionId") === this.options.settings.get("SessionId")) {
                if (h.get("CurrentDuration")) {
                    g.selected = "selected"
                }
                this.$("select").append($("<option>", g).html(h.get("DdDescription")))
            }
        },
        fetchTerms: function(i) {
            var j = this,
                h = j.$("select"),
                g = j.$("label");
            h.empty().hide();
            g.show();
            this.unsetSchoolTerms();
            if (i.has("SchoolYearLabel") && i.has("LevelNum") && (!p3.Config.IsSmallCollege || i.has("SessionId"))) {
                this.collection.fetch({
                    view: this,
                    update: true,
                    data: {
                        schoolYearLabel: i.get("SchoolYearLabel"),
                        levelNum: i.get("LevelNum"),
                        offeringType: 1
                    },
                    success: function(k, n, m) {
                        if (p3.Config.IsSmallCollege) {
                            k = new a.Cs.SchoolTerms(k.where({
                                SessionId: i.get("SessionId")
                            }))
                        }
                        if (k.length) {
                            h.show();
                            g.hide();
                            var l = k.where({
                                CurrentDuration: true
                            });
                            if (_.isEmpty(l)) {
                                m.view.setSchoolTerms(k.at(0).get("DdId"))
                            } else {
                                m.view.setSchoolTerms(_.first(l).get("DdId"))
                            }
                        }
                    }
                })
            }
        },
        changeSchoolTerm: function(g) {
            this.unsetSchoolTerms();
            this.setSchoolTerms($(g.currentTarget).val(), true)
        },
        setSchoolTerms: function(h, g) {
            if (!g && p3.getSessionState("SMLoadMenu") && !isNaN(p3.getSessionState("SMTermId"))) {
                this.options.settings.set("DurationId", p3.getSessionState("SMTermId"));
                this.$("select").val(p3.getSessionState("SMTermId"))
            } else {
                this.options.settings.set("DurationId", h)
            }
            this.options.settings.set("DurationLabel", _.first(this.collection.where({
                DdId: parseInt(this.options.settings.get("DurationId"), 10)
            })).get("DdDescription"))
        },
        unsetSchoolTerms: function() {
            if (this.options.settings.has("DurationId")) {
                this.options.settings.unset("DurationId");
                this.options.settings.unset("DurationLabel")
            }
        },
        dispose: function() {
            this.collection.off()
        }
    });
    a.Vs.Reports = Bb.View.extend({
        template: "ScheduleMaker/reports.template.html",
        attributes: {
            "class": "pull-right",
            id: "report-ddlb"
        },
        render: function(g) {
            $(g).append(this.el);
            var h = this;
            if (!p3.Data.ReportList) {
                e.loadReportList({
                    success: function(i, j) {
                        h.renderTemplate()
                    }
                })
            } else {
                h.renderTemplate()
            }
        },
        renderTemplate: function() {
            var h = new e.Cs.ReportList(),
                i = this,
                g;
            if (e.hasAccessToReportId(126)) {
                h.add(new e.Ms.ReportList({
                    ReportName: "Free Rooms by Block (Manager)",
                    Link: f.Us.getUrlById(1691, "__pd=gm_fv&pk=126")
                }))
            }
            if (e.hasAccessToReportId(127)) {
                g = (p3.Config.IsSmallCollege) ? "Free Faculty by Block (Manager)" : "Free Teachers by Block (Manager)";
                h.add(new e.Ms.ReportList({
                    ReportName: g,
                    Link: f.Us.getUrlById(1691, "__pd=gm_fv&pk=127")
                }))
            }
            if (e.hasAccessToReportId(216)) {
                g = (p3.Config.IsSmallCollege) ? "Course Roster by Faculty" : "Course Roster by Teacher";
                h.add(new e.Ms.ReportList({
                    ReportName: g,
                    Link: f.Us.getUrlById(1691, "__pd=gm_fv&pk=216")
                }))
            }
            if (e.hasAccessToReportId(240)) {
                h.add(new e.Ms.ReportList({
                    ReportName: "Course Sections by School Year",
                    Link: f.Us.getUrlById(1691, "__pd=gm_fv&pk=240")
                }))
            }
            if (e.hasAccessToReportId(345)) {
                h.add(new e.Ms.ReportList({
                    ReportName: "Parent Contact Information by Section",
                    Link: f.Us.getUrlById(1691, "__pd=gm_fv&pk=345")
                }))
            }
            if (e.hasAccessToReportId(236)) {
                h.add(new e.Ms.ReportList({
                    ReportName: "Course Enrollments",
                    Link: f.Us.getUrlById(1691, "__pd=gm_fv&pk=236")
                }))
            }
            if (e.hasAccessToReportId(233)) {
                h.add(new e.Ms.ReportList({
                    ReportName: "Course Enrollments by Gender",
                    Link: f.Us.getUrlById(1691, "__pd=gm_fv&pk=233")
                }))
            }
            p3.fT(i.template, function(j) {
                i.$el.html(j({
                    collection: h.toJSON()
                }))
            })
        },
        slideContent: function(h) {
            var g = $(h.target).closest("a").next("div.data-box");
            g.slideToggle(500)
        }
    });
    p3.router().route("coursesections", "coursesections", function() {
        p3.renderMainPage(new a.Vs.LayoutView({}))
    })
}(p3.module("LMS/Shared/coursesections")));
(function(a) {
    var e = p3.module("shared/task"),
        c = p3.module("LMS/groupPageEdit"),
        f = p3.module("LMS/topic"),
        b = p3.module("grading"),
        d = p3.module("LMS/roster");
    a.Pages = [{
        Id: 1,
        ContentId: 433,
        Label: "Bulletin Board",
        RoutePage: "bulletinboard",
        IconClass: "p3icon-page",
        Display: function(g) {
            var h = new c.Vs.LayoutView({
                sectionId: a.Data.sectionId,
                leadSectionId: a.Data.leadSectionId,
                content: a.Data.contentTypes,
                userHasFullAccess: a.Data.userHasFullAccess,
                isOwner: a.Data.IsOwner,
                isManager: a.Data.isManager,
                associationId: 7,
                contextLabelId: 23,
                preview: false,
                layoutId: a.Data.layoutId,
                pendingInd: false
            });
            p3.rV(h, g, true)
        },
        Active: true
    }, {
        Id: 2,
        ContentId: 386,
        Label: "Topics",
        RoutePage: "topics",
        IconClass: "p3icon-topics",
        HTMLID: "topics-btn",
        LinkId: "topics-link",
        Display: function(g) {
            p3.rV(new f.Vs.TopicManageView({
                sectionId: a.Data.sectionId,
                leadSectionId: a.Data.leadSectionId,
                active: true,
                future: false,
                expired: false,
                userHasFullAccess: a.Data.userHasFullAccess,
                isOwner: a.Data.IsOwner,
                isManager: a.Data.isManager,
                content: a.Data.contentTypes,
                levelNum: a.Data.levelNum || -1,
                durationId: a.Data.durationId,
                schoolYearLabel: a.Data.schoolYear,
                contextLabelId: 23
            }), g, true)
        },
        Active: false
    }, {
        Id: 6,
        ContentId: 120,
        Label: "Grading",
        RoutePage: "grading",
        IconClass: "p3icon-grading",
        HTMLID: "grading-btn",
        LinkId: "grading-link",
        Display: function(g) {
            p3.rV(new b.Vs.LayoutView({
                sectionId: a.Data.leadSectionId,
                nonLeadsectionId: a.Data.sectionId
            }), g, true)
        },
        Active: false
    }, {
        Id: 8,
        ContentId: 434,
        Label: "Residents",
        RoutePage: "residents",
        IconClass: "p3icon-roster",
        Display: function(g) {
            p3.rV(new d.Vs.RosterView({
                sectionId: a.Data.sectionId,
                leadSectionId: a.Data.leadSectionId,
                durationId: a.Data.durationId,
                associationId: 7,
                enableSearch: true,
                isOwner: a.Data.IsOwner,
                buildingId: a.Data.buildingId
            }), g, true)
        },
        Active: false
    }];
    a.Data = {};
    a.Ms.Section = Bbm.extend({
        url: function() {
            return ""
        }
    });
    a.Cs.Section = Bbc.extend({
        model: a.Ms.Section,
        initialize: function(g, h) {
            this.sectionId = h.sectionId || 0
        },
        url: function() {
            return aP + "datadirect/SectionInfoView/?format=json&sectionId=" + this.sectionId + "&associationId=7"
        }
    });
    a.Ms.Content = Bbm.extend({
        idAttribute: "ContentId",
        url: function() {
            return ""
        }
    });
    a.Cs.Content = Bbc.extend({
        model: a.Ms.Content,
        initialize: function(g, h) {
            this.sectionId = h.sectionId || 0;
            this.leadSectionId = h.leadSectionId || 0
        },
        url: function() {
            return aP + "datadirect/GroupPossibleContentGet/?format=json&leadSectionId=" + this.leadSectionId
        }
    });
    a.Data = {};
    a.Data.leadSectionId = 0;
    a.Data.durationId = 0;
    a.Data.sectionId = 0;
    a.Data.contentTypes = null;
    a.Data.MainViewRendered = false;
    a.Data.RenderedSectionId = 0;
    a.Data.teacherId = 0;
    a.Vs.MainClassView = Bb.View.extend({
        template: "GroupPage/grouppage.mainview.template.html",
        initialize: function(g) {
            this.Containers = {};
            if (g) {
                a.Data.sectionId = a.Data.RenderedSectionId = this.SectionId = g.SectionId
            } else {
                a.Data.sectionId = a.Data.RenderedSectionId = this.SectionId = 0
            }
            a.Data.MainViewRendered = true
        },
        dispose: function() {
            a.Data.MainViewRendered = false
        },
        render: function(g) {
            var h = this;
            p3.fT(h.template, function(j) {
                h.$el.html(j({}));
                $(g).html(h.el);
                h.Containers.Navigation = $("#grouppagenavmenu");
                h.Containers.MainContent = $("#grouppagemaincontainer");
                var i = new a.Cs.Section({}, {
                    sectionId: h.SectionId
                });
                p3.rV(new a.Vs.NavigationView({
                    ParentView: h,
                    collection: i
                }), h.Containers.Navigation, false);
                i.fetch({
                    error: function() {
                        p3.displayError("Error loading section information")
                    }
                })
            })
        }
    });
    a.Vs.NavigationView = Bb.View.extend({
        template: "DormGroup/navigationmenu.template.html",
        initialize: function(g) {
            this.collection.bind("reset change", this.renderTemplate, this);
            this.Containers = {};
            if (g) {
                this.ParentView = g.ParentView
            }
            this.enableScrollNav()
        },
        dispose: function() {
            this.disableScrollNav()
        },
        renderTemplate: function() {
            var B = this,
                z, o, p, g, y, m, v, u, t, n, A, h, r, l, q, s, k, x, j = false,
                i, w = [];
            k = new Bbc(B.collection.filter(function(C) {
                return C.get("Current") === 1
            }));
            B.collection.each(function(C) {
                if ((C.get("Current") === 1) || ((k.length < 1) && (C.get("LeadSectionId") === C.get("Id")))) {
                    z = C.get("Teacher");
                    o = C.get("GroupName");
                    p = C.get("Identifier");
                    g = C.get("Block");
                    y = C.get("Room");
                    m = C.get("Duration");
                    n = C.get("DurationId");
                    l = C.get("Description");
                    v = C.get("Level");
                    if (C.get("Length") === 1) {
                        u = "1 Term"
                    } else {
                        u = C.get("Length") + " Terms"
                    }
                    t = C.get("LeadSectionId");
                    r = C.get("IsOwner");
                    q = C.get("IsManager");
                    A = C.get("TeacherId");
                    s = C.get("LayoutId");
                    h = C.get("building_id")
                }
            });
            a.Data.IsOwner = r;
            a.Data.isManager = q;
            a.Data.leadSectionId = t;
            a.Data.durationId = n;
            a.Data.teacherId = A;
            x = p3.Data.Context.getSelectedPersona().Id;
            a.Data.userHasFullAccess = (x === 3 && a.Data.IsOwner) || a.Data.isManager;
            a.Data.layoutId = s;
            a.Data.buildingId = h;
            if (z !== "" || p || g || y || m || n || l || v || u) {
                j = true
            }
            i = new a.Cs.Content({}, {
                sectionId: a.Data.sectionId,
                leadSectionId: a.Data.leadSectionId
            });
            i.fetch({
                error: function() {
                    p3.displayError("Error loading available content")
                },
                success: function() {
                    a.Data.contentTypes = i;
                    i.each(function(E) {
                        var D = E.get("ContentId"),
                            G, F = true,
                            H;
                        G = _.find(a.Pages, function(I) {
                            return I.ContentId === D
                        });
                        F = E.get("ShowContentType");
                        if (F & D === 386) {
                            F = a.Data.userHasFullAccess || E.get("EditorAccess");
                            if (!F) {
                                H = new f.Cs.Topic({}, {
                                    sectionId: 0,
                                    leadSectionId: a.Data.leadSectionId,
                                    active: true,
                                    future: false,
                                    expired: false
                                });
                                H.fetch({
                                    async: false,
                                    success: function() {
                                        if (H.length > 0) {
                                            F = true
                                        }
                                    },
                                    error: function() {
                                        p3.displayError("Error loading topics")
                                    }
                                })
                            }
                        }
                        if (G && F) {
                            w.push({
                                sort: G.Id,
                                title: G.Label,
                                iconClass: G.IconClass,
                                status: G.Active ? "active" : "inactive",
                                link: e.Us.getUrlById(23110, a.Data.sectionId + "/" + G.RoutePage),
                                pId: G.Id
                            });
                            G.Enabled = true
                        } else {
                            if (G) {
                                G.Enabled = false
                            }
                        }
                    });
                    w = _.sortBy(w, "sort");
                    p3.fT(B.template, function(D) {
                        B.$el.html(D({
                            Info: j,
                            Teacher: z,
                            GroupName: o,
                            Identifier: p,
                            Block: g,
                            Room: y,
                            Duration: m,
                            Level: v,
                            Length: u,
                            Description: l,
                            navigationItems: w
                        }))
                    });
                    var C = _.find(a.Pages, function(D) {
                        return D.Active
                    });
                    if (C && C.Enabled) {
                        C.Display($("#grouppagemaincontainer"))
                    }
                }
            });
            return this
        },
        events: {
            "click #section-description-toggle": "toggleDescription",
            "click [data-pid]": "switchTab"
        },
        render: function(g) {
            $(g).append(this.el);
            return this
        },
        toggleDescription: function(h) {
            var g = $("#section-description-content");
            if (g && g.filter(":visible").length) {
                g.hide(400)
            } else {
                g.show(400)
            }
            return false
        },
        switchTab: function(g) {
            if ($(g.currentTarget).attr("data-pid") === "4") {
                _.find(a.Pages, function(h) {
                    return h.Id === 4
                }).Display();
                return false
            }
        },
        enableScrollNav: function(i) {
            var h = $(document),
                g = $(".subnavbar"),
                j = g.length && g.offset().top - 120;

            function k() {
                if (g.length === 0) {
                    g = $(".subnavbar");
                    j = g.length && g.offset().top - 120
                }
                var m = h.scrollTop(),
                    l = g.hasClass("subnavbar-fixed");
                if (m >= j && !l) {
                    g.addClass("subnavbar-fixed")
                } else {
                    if (m <= j && l) {
                        g.removeClass("subnavbar-fixed")
                    }
                }
            }
            h.on("scroll", k)
        },
        disableScrollNav: function(h) {
            var g = $(document);
            g.off("scroll")
        }
    });
    a.Us.LoadPage = function(g, i) {
        a.Data.studentId = undefined;
        p3.loadingIcon("#grouppagemaincontainer");
        var h;
        _.each(a.Pages, function(j) {
            if (j.RoutePage.toLowerCase() === i.toLowerCase()) {
                j.Active = true;
                h = j
            } else {
                j.Active = false
            }
        });
        if (!a.Data.MainViewRendered || a.Data.RenderedSectionId !== g) {
            p3.renderMainPage(new a.Vs.MainClassView({
                SectionId: g
            }))
        } else {
            if (h) {
                h.Display($("#grouppagemaincontainer"));
                a.Us.SwitchTabs(h)
            } else {
                if (h && h.Enabled) {
                    h.Display($("#grouppagemaincontainer"));
                    a.Us.SwitchTabs(h)
                }
            }
        }
    };
    a.Us.SwitchTabs = function(h) {
        var g = $(".nav-tabs").children();
        $.each(g, function() {
            var i = $(this);
            if (i.data("pid") === h.Id) {
                i.removeClass("inactive");
                i.addClass("active")
            } else {
                if (i.hasClass("active")) {
                    i.removeClass("active");
                    i.addClass("inactive")
                }
            }
        })
    };
    p3.router().route("dormpage/:id/:page", "dormpage", a.Us.LoadPage)
}(p3.module("dormpage")));
(function(a) {
    var b = p3.module("shared/task");
    a.Cs.GroupsByYear = Bbc.extend({
        url: "datadirect/GroupFinderByYear"
    });
    a.Cs.SchoolYears = Bbc.extend({
        url: "datadirect/SchoolYearsGet"
    });
    a.Data = {
        selectedSchoolYear: "",
        selectedMode: "",
        yearSuffix: " groups",
        yearSuffixCurrent: " groups (current term)",
        yearSuffixAll: " groups (all terms)"
    };
    a.Vs.Layout = Bb.View.extend({
        template: "GroupFinder/groupfinder.layout.template.html",
        itemTemplate: "GroupFinder/groupfinder.item.template.html",
        className: "group-finder-ch",
        events: {
            click: "preventClickHandlers",
            "change #group-finder-year-selector": "setYear"
        },
        initialize: function() {
            var c = this;
            a.Data.selectedSchoolYear = p3.Data.SchoolContext.get("CurrentSchoolYear").SchoolYearLabel;
            a.Data.selectedMode = "current";
            c.SchoolYears = new a.Cs.SchoolYears();
            c.collection = new a.Cs.GroupsByYear()
        },
        render: function(c) {
            var d = this;
            $(c).html(d.el);
            d.SchoolYears.fetch({
                success: function() {
                    d.collection.fetch({
                        data: {
                            schoolYearLabel: a.Data.selectedSchoolYear
                        },
                        success: function() {
                            d.renderTemplate()
                        }
                    })
                }
            })
        },
        renderTemplate: function() {
            var e = this,
                d, c = b.Us.getUrlById(53549, "");
            p3.fT(e.itemTemplate, function(f) {
                e.itemTmpl = f;
                p3.fT(e.template, function(g) {
                    e.$el.html(g({
                        years: e.SchoolYears.toJSON(),
                        yearSuffix: a.Data.yearSuffix,
                        yearSuffixCurrent: a.Data.yearSuffixCurrent,
                        yearSuffixAll: a.Data.yearSuffixAll,
                        listHash: c
                    }));
                    p3.Us.PluginManager.Load(p3.Us.PluginManager.Plugins.jQueryUI, function() {
                        e.initializeAutoComplete();
                        d = (a.Data.selectedMode === "current") ? a.Data.selectedSchoolYear + a.Data.yearSuffixCurrent : ((a.Data.selectedMode === "all") ? a.Data.selectedSchoolYear + a.Data.yearSuffixAll : a.Data.selectedSchoolYear + a.Data.yearSuffix);
                        e.$("#group-finder-year-selector").val(d)
                    })
                })
            })
        },
        initializeAutoComplete: function() {
            var d = this,
                c = d.$("#group-finder-search-box");
            if (c.length < 1) {
                if (a._autocompleteTimer) {
                    window.clearInterval(a._autocompleteTimer);
                    a._autocompleteTimer = null
                }
                a._autocompleteTimer = window.setInterval(function() {
                    if (c.length > 0) {
                        d.OnReadyAutoComplete();
                        window.clearInterval(a._autocompleteTimer);
                        a._autocompleteTimer = null
                    }
                }, 100)
            } else {
                d.OnReadyAutoComplete()
            }
        },
        OnReadyAutoComplete: function() {
            var e = this,
                f, d = "#group-finder-search-box",
                c = e.$(d);
            c.autocomplete({
                appendTo: c.parent(),
                userAll: null,
                minLength: 2,
                previousSearch: "",
                source: function(i, j) {
                    var h = new RegExp($.ui.autocomplete.escapeRegex(this.term), "i"),
                        g = -1;
                    j($.map(e.collection.toJSON(), function(k) {
                        if (k.group_name.match(h) && ((a.Data.selectedMode !== "current") || (a.Data.selectedMode === "current" && k.current_ind === 1))) {
                            if (k.association_id !== g) {
                                k.showHeader = true;
                                g = k.association_id
                            }
                            return {
                                value: k.group_name,
                                object: k
                            }
                        }
                    }))
                },
                select: function(g, h) {
                    a.Us.accessGroupPage(h.item.object.current_pk, h.item.object.association_id);
                    c.val("");
                    return false
                }
            });
            f = c.autocomplete({}).data("ui-autocomplete");
            if (f) {
                f._renderItem = function(h, g) {
                    return $("<li>").attr("data-value", g.value).append(e.itemTmpl({
                        item: g
                    })).appendTo(h)
                };
                f._resizeMenu = function() {
                    var l = e.$(d).width(),
                        g = e.$("#GroupFinderContainer li"),
                        k = 8,
                        m = (g.length < k) ? g.length : k,
                        j = 0,
                        h;
                    if (m > 0) {
                        for (h = 0; h < m; h++) {
                            j = j + e.$(g[h]).height()
                        }
                        this.menu.element.css({
                            minWidth: l + "px",
                            minHeight: j + "px"
                        })
                    } else {
                        this.menu.element.css({
                            minWidth: l + "px"
                        })
                    }
                }
            }
        },
        preventClickHandlers: function(c) {
            var d = this;
            if (!d.$(c.target).closest("ul").hasClass("ui-autocomplete") && d.$(c.curretTarget).find(c.target).length === 0) {
                c.stopPropagation()
            }
        },
        setYear: function(f) {
            var h = this,
                d = h.$(f.currentTarget),
                c, g;
            c = h.$("option:selected", d);
            g = c.data("label");
            a.Data.selectedMode = c.data("mode");
            if (g !== a.Data.selectedSchoolYear) {
                a.Data.selectedSchoolYear = g;
                a.Us.getCurrentGroups(this.collection)
            }
        }
    });
    a.Us.getCurrentGroups = function(c) {
        c.fetch({
            data: {
                schoolYearLabel: a.Data.selectedSchoolYear
            }
        })
    };
    a.Us.accessGroupPage = function(d, c) {
        var e, g = p3.Config.AppMode === p3.Us.Enum.AppModes.WEBAPP,
            f;
        if (c === 2) {
            e = {
                id: 4,
                name: "Team Page",
                type: "route",
                method: undefined,
                route: "teampage"
            }
        } else {
            e = {
                id: 2,
                name: "Bulletin Board",
                type: "route",
                method: undefined,
                route: "bulletinboard"
            }
        }
        switch (c) {
            case 1:
                if (g) {
                    p3.router().navigate("academicclass/" + d + "/0/" + e.route, true)
                } else {
                    window.location.href = p3.Config.RootPath + "#academicclass/" + d + "/0/" + e.route
                }
                break;
            case 2:
                if (g) {
                    p3.router().navigate("athleticteam/" + d + "/" + e.route, true)
                } else {
                    window.location.href = p3.Config.RootPath + "#athleticteam/" + d + "/" + e.route
                }
                break;
            case 9:
                if (e.route === "roster") {
                    e.route = "advisees"
                }
                if (g) {
                    p3.router().navigate("advisorypage/" + d + "/" + e.route, true)
                } else {
                    window.location.href = p3.Config.RootPath + "#advisorypage/" + d + "/" + e.route
                }
                break;
            case 3:
                if (g) {
                    p3.router().navigate("communitypage/" + d + "/" + e.route, true)
                } else {
                    window.location.href = p3.Config.RootPath + "#communitypage/" + d + "/" + e.route
                }
                break;
            case 8:
                if (g) {
                    p3.router().navigate("activitypage/" + d + "/" + e.route, true)
                } else {
                    window.location.href = p3.Config.RootPath + "#activitypage/" + d + "/" + e.route
                }
                break;
            case 7:
                if (e.route === "roster") {
                    e.route = "residents"
                }
                if (g) {
                    p3.router().navigate("dormpage/" + d + "/" + e.route, true)
                } else {
                    window.location.href = p3.Config.RootPath + "#dormpage/" + d + "/" + e.route
                }
                break;
            default:
                f = 247;
                if (c === 4) {
                    f = 250
                } else {
                    if (c === 5) {
                        f = 456
                    } else {
                        if (c === 3) {
                            f = 247
                        } else {
                            if (c === 8) {
                                f = 23139
                            }
                        }
                    }
                }
                window.location = b.Us.getUrlById(f) + "&pk=" + d + "&cs=1&glt=0&cuid=0&cid=-1";
                break
        }
    }
}(p3.module("LMS/shared/GroupFinder")));
(function(c) {
    var a = p3.Us.Enum,
        b = p3.Us.InfoMessageLibrary,
        d = p3.module("utilities/smodal");
    c.Ms.Tool = Bbm.extend({
        idAttribute: "ToolId",
        urlRoot: "LtiTool/Edit/",
        defaults: {
            ToolTitle: "",
            ToolDescription: "",
            LaunchUrl: null,
            ConsumerKey: null,
            SharedSecret: null,
            ProviderId: 0,
            ConsentScreenInd: null,
            OutcomesInd: null,
            MessagesInd: null,
            SendUserName: null,
            SendUserEmail: null,
            SendUserRole: null,
            SendUserImage: null,
            PresentationTarget: null,
            PresentationHeight: null,
            PresentationWidth: null
        },
        validation: {
            ProviderId: [{
                min: 1,
                msg: b.P3.RequiredInfoNotEntered
            }],
            ToolTitle: [{
                required: true,
                msg: b.P3.RequiredInfoNotEntered
            }],
            LaunchUrl: [{
                required: function(g, e, f) {
                    return !(this.determineCredentialsTypeId(f).toString() === a.LtiCredentialsType.FIXED.toString())
                },
                msg: b.P3.RequiredInfoNotEntered
            }],
            ConsumerKey: [{
                required: function(g, e, f) {
                    return this.determineCredentialsTypeId(f).toString() === a.LtiCredentialsType.PERLINK.toString()
                },
                msg: b.P3.RequiredInfoNotEntered
            }]
        },
        determineCredentialsTypeId: function(e) {
            var f = -1;
            if (e.CredentialsTypeId !== null && e.CredentialsTypeId !== undefined) {
                f = e.CredentialsTypeId
            }
            return f
        },
        modifyLaunchUrl: function() {
            var e = true,
                f;
            f = this.get("CredentialsTypeId");
            if (f !== null && f !== undefined) {
                e = f.toString() !== a.LtiCredentialsType.FIXED.toString()
            }
            return e
        },
        changeProvider: function(e) {
            var f = this;
            f.set("ProviderId", null);
            f.set("ToolTitle", null);
            f.set("ToolDescription", null);
            f.set("LtiVersionId", null);
            f.set("LaunchUrl", null);
            f.set("ConsumerKey", null);
            f.set("SharedSecret", null);
            f.set("ConsentScreenInd", null);
            f.set("OutcomesInd", null);
            f.set("MessagesInd", null);
            f.set("SendUserName", null);
            f.set("SendUserEmail", null);
            f.set("SendUserRole", null);
            f.set("SendUserImage", null);
            f.set("PresentationTarget", null);
            f.set("PresentationHeight", null);
            f.set("PresentationWidth", null);
            f.set("CredentialsTypeId", null);
            if (e) {
                f.set("ProviderId", e.get("ProviderId"));
                this.syncWithProvider(e)
            }
        },
        syncWithProvider: function(e) {
            var f = this;
            if (e && e.get("ProviderId")) {
                f.set("CredentialsTypeId", e.get("CredentialsTypeId"));
                f.syncProperty(e, "ChangePresentationFlag", "PresentationTarget");
                f.syncProperty(e, "ChangePresentationFlag", "PresentationHeight");
                f.syncProperty(e, "ChangePresentationFlag", "PresentationWidth");
                f.syncProperty(e, "ChangeMessagesFlag", "MessagesInd");
                f.syncProperty(e, "ChangeConsentScreenFlag", "ConsentScreenInd");
                f.syncProperty(e, "ChangePrivacyFlag", "SendUserName");
                f.syncProperty(e, "ChangePrivacyFlag", "SendUserEmail");
                f.syncProperty(e, "ChangePrivacyFlag", "SendUserRole");
                f.syncProperty(e, "ChangePrivacyFlag", "SendUserImage");
                f.syncProperty(e, "ChangeParameterFlag", "ParameterInd");
                f.syncProperty(e, "ChangeXmlFlag", "XmlInd")
            }
        },
        syncProperty: function(h, e, g) {
            var i = this,
                f;
            f = (h.get(e).toString() === a.LtiChangeFlag.TOOLLEVEL.toString());
            if (!f) {
                i.set(g, null)
            } else {
                if (this.get(g) === null) {
                    i.set(g, h.get(g))
                }
            }
        },
        processXml: function(p, j) {
            var k = this,
                q, f, g, m = [],
                n, h, o, l = false;
            if (p) {
                try {
                    q = $.parseXML(p);
                    if (q) {
                        f = $(q).find("cartridge_basiclti_link");
                        if (f.length > 0) {
                            f.each(function(e, r) {
                                if (!l) {
                                    k.set("ToolTitle", $(r).find("blti\\:title, title").text());
                                    k.set("ToolDescription", $(r).find("blti\\:description, description").text());
                                    if (k.modifyLaunchUrl()) {
                                        k.set("LaunchUrl", $(r).find("blti\\:launch_url, launch_url").text())
                                    }
                                    g = $(r).find("blti\\:custom, custom");
                                    if (g.length > 0) {
                                        g.each(function(s, t) {
                                            h = $(t).find("lticm\\:property, property");
                                            o = h.text();
                                            n = h.attr("name");
                                            if (o && n) {
                                                m.push({
                                                    PName: n,
                                                    PVal: o
                                                })
                                            }
                                        })
                                    }
                                    k.set("Parameters", m);
                                    l = true
                                }
                            })
                        } else {
                            p3.displayError("Cannot locate Learning Tool in XML")
                        }
                    }
                } catch (i) {
                    p3.displayError("Cannot parse the XML")
                }
            }
            return l
        }
    });
    c.Ms.Provider = Bbm.extend({
        placementsHaveEditableLaunchUrl: function() {
            var e = this;
            return (e.get("CredentialsTypeId") === 0 || e.get("CredentialsTypeId") === 1)
        },
        placementsHaveEditableConsumerKey: function() {
            var e = this;
            return (e.get("CredentialsTypeId") === 0)
        },
        placementsHaveEditableSharedSecret: function() {
            var e = this;
            return (e.get("CredentialsTypeId") === 0)
        },
        placementsHaveEditableParameters: function() {
            var e = this;
            return (e.get("ParameterInd") || false)
        }
    });
    c.Cs.ltiProviderPicklist = Bbc.extend({
        model: c.Ms.Provider,
        url: "LtiTool/ProviderList/",
        createPickList: function(e) {
            e = e || 0;
            var f = new c.Cs.ltiProviderPicklist(this.filter(function(g) {
                return (g.get("ActiveInd") === true || g.get("ProviderId") === e)
            }));
            return [{
                ProviderName: "-- select a provider --",
                ProviderId: 0,
                ActiveInd: true
            }].concat(f.toJSON())
        },
        locateProvider: function(g) {
            var f, e;
            e = parseInt(g, 10);
            f = _.first(this.where({
                ProviderId: e
            }));
            if (!f) {
                f = new Bbm()
            }
            return f
        },
        firstActiveProvider: function() {
            var e;
            e = _.first(this.where({
                ActiveInd: true
            }));
            if (!e) {
                e = new Bbm()
            }
            return e
        },
        ltiProvidersAvailableCount: function(e) {
            e = e || 0;
            var f = new c.Cs.ltiProviderPicklist(this.filter(function(g) {
                return (g.get("ActiveInd") === true || g.get("ProviderId") === e)
            }));
            return (f.length)
        }
    });
    c.Vs.EditTool = d.Vs.Modal2.extend({
        template: "lti/lti.tool.edit.layout.template.html",
        selector: "id",
        loadedId: 0,
        modalRendered: function() {
            var f = this,
                e;
            switch (f.model.get("ContextLabelId")) {
                case 27:
                    e = a.LtiProviderScope.TOPIC;
                    break;
                case 5:
                    e = a.LtiProviderScope.ASSIGNMENT;
                    break;
                default:
                    e = a.LtiProviderScope.ALL;
                    break
            }
            f.ltiProviders = new c.Cs.ltiProviderPicklist();
            f.ltiProviders.fetch({
                data: {
                    scope: e
                },
                success: function() {
                    f.selectedProvider = f.ltiProviders.locateProvider(f.model.get("ProviderId"));
                    f.model.syncWithProvider(f.selectedProvider);
                    f.renderTemplate()
                },
                error: function() {
                    p3.displayError("Error loading the provider list")
                }
            })
        },
        renderTemplate: function() {
            var e = this;
            e.generalView = new c.Vs.EditToolGeneral({
                parentView: e,
                model: e.model
            });
            p3.rV(e.generalView, e.$("#general"), true);
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        modalUpdate: function(g) {
            var j = this,
                e = $(g.eventCurrentTarget),
                h, k, f, i = true;
            f = e.attr(j.selector);
            if (f === "ProviderId") {
                h = parseInt(e.val(), 10);
                j.selectedProvider = j.ltiProviders.locateProvider(h);
                $(".tooltip").remove();
                j.model.changeProvider(j.selectedProvider);
                j.renderTemplate();
                i = false
            } else {
                if (f === "XmlValue") {
                    k = e.val();
                    if (k.length > 0) {
                        if (j.model.processXml(k, j.ltiProviders) === true) {
                            $(".tooltip").remove();
                            j.renderTemplate()
                        }
                    }
                }
            }
            return i
        },
        modalSave: function() {
            var f = this,
                e;
            e = f.model.isValid(true);
            e = c.Us.ValidateParameterList(f, f.model, "Parameters", e);
            return e
        },
        modalSavedError: function(e) {
            p3.displayError("There was an error saving the Learning Tool. (" + e.error.responseText + ")")
        },
        modalSavedSuccess: function(e) {
            var f = this;
            f.trigger("ltiToolSaved")
        }
    });
    c.Vs.EditToolGeneral = Bb.View.extend({
        template: "lti/lti.tool.edit.general.template.html",
        initialize: function(e) {
            var f = this;
            f.parentView = f.options.parentView
        },
        render: function(e) {
            var f = this;
            $(e).html(f.el);
            f.renderData()
        },
        renderData: function() {
            var f = this,
                e;
            e = c.Us.PresentationTargetPickList(f.parentView.selectedProvider.get("PresentationTargetOptions"));
            p3.fT(f.template, function(g) {
                f.$el.html(g({
                    model: f.model.toJSON(),
                    provider: f.parentView.selectedProvider.toJSON(),
                    providerlist: f.parentView.ltiProviders.createPickList(f.model.get("ProviderId")),
                    targets: e.toJSON()
                }));
                if (f.parentView.selectedProvider.get("ChangeParameterFlag") === 2) {
                    f.listView = new c.Vs.EditToolGeneralList({
                        model: f.model
                    });
                    p3.rV(f.listView, f.$("#param-list-area"), true);
                    p3.setModalHeight(p3.Layout.Containers.Modal)
                }
            })
        }
    });
    c.Vs.EditToolGeneralList = Bb.View.extend({
        id: "param-list",
        initialize: function() {
            this.paramList = this.model.get("Parameters")
        },
        events: {
            "blur .param-input-field": "appendEmptyListItemIfNeeded"
        },
        render: function(e) {
            var f = this;
            $(e).html(f.el);
            f.renderData()
        },
        renderData: function() {
            var f = this,
                e;
            _.each(f.paramList, function(g) {
                e = new c.Vs.EditToolGeneralListItem({
                    model: g
                });
                p3.rV(e, f.$el, false)
            });
            f.appendEmptyListItem();
            p3.setModalHeight(p3.Layout.Containers.Modal)
        },
        appendEmptyListItemIfNeeded: function(g) {
            var m = this,
                f = m.$el,
                h = $(f).children(":last"),
                j, l, i, k;
            if (h) {
                j = $(h).find("input.pname-field");
                l = $(h).find("input.pval-field");
                i = j ? j.val() : null;
                k = l ? l.val() : null;
                if (i.length > 0 || k.length > 0) {
                    $(h).find(".param-delete-button").show();
                    m.appendEmptyListItem()
                }
            }
        },
        appendEmptyListItem: function() {
            var f = this,
                e;
            e = new c.Vs.EditToolGeneralListItem();
            p3.rV(e, f.$el, false)
        }
    });
    c.Vs.EditToolGeneralListItem = Bb.View.extend({
        template: "lti/lti.tool.edit.general.param.template.html",
        className: "param-entry",
        events: {
            "click .param-delete-button": "removeListItem"
        },
        render: function(e) {
            var f = this;
            $(e).append(f.el);
            f.renderData()
        },
        renderData: function() {
            var e = this;
            p3.fT(e.template, function(f) {
                e.$el.html(f({
                    model: (e.model || null)
                }));
                p3.setModalHeight(p3.Layout.Containers.Modal)
            })
        },
        removeListItem: function(f) {
            f.preventDefault();
            this.unbind();
            this.remove();
            p3.setModalHeight(p3.Layout.Containers.Modal)
        }
    });
    c.Us.IsLtiInstalled = function() {
        return p3.Data.SchoolContext.hasAppCategory(p3.Us.Enum.AppCategories.LTI)
    };
    c.Us.ValidateParameterList = function(m, h, f, g) {
        var e, k, l, i = [],
            j = true;
        m.$el.find("#param-area").removeClass("error");
        m.$el.find(".pname-field").removeClass("box-validate");
        m.$el.find(".pval-field").removeClass("box-validate");
        e = $(".param-entry");
        if (e.length > 0) {
            _.each(e, function(n) {
                k = $(n).find(".pname-field").val();
                l = $(n).find(".pval-field").val();
                if (k || l) {
                    if (k && l) {
                        i.push(new Bbm({
                            PName: k,
                            PVal: l
                        }))
                    } else {
                        if (!k) {
                            $(n).find(".pname-field").addClass("box-validate")
                        }
                        if (!l) {
                            $(n).find(".pval-field").addClass("box-validate")
                        }
                        j = false
                    }
                }
            })
        }
        if (!j) {
            m.$el.find("#param-area").addClass("error")
        }
        h.set(f, i);
        return (g && j)
    };
    c.Us.BuildLaunchUrl = function(i, h, e, f) {
        var g;
        g = window.location.protocol + "//" + window.location.host + "/App/Lti/Launch";
        g = g + "?tid=" + encodeURIComponent(i);
        g = g + "&pt=" + encodeURIComponent(h);
        g = g + "&cid=" + encodeURIComponent(e);
        g = g + "&cvl=" + encodeURIComponent(f);
        return g
    };
    c.Us.PresentationTargetPickList = function(f) {
        var e = new Bbc();
        if (!(f > 0)) {
            f = 0
        }
        if ((f & 8) > 0) {
            e.push(new Bbm({
                targetId: a.LtiPresentationTargets.Embed.id,
                targetTitle: a.LtiPresentationTargets.Embed.name
            }))
        }
        if ((f & 2) > 0) {
            e.push(new Bbm({
                targetId: a.LtiPresentationTargets.New.id,
                targetTitle: a.LtiPresentationTargets.New.name
            }))
        }
        if ((f & 4) > 0) {
            e.push(new Bbm({
                targetId: a.LtiPresentationTargets.Popup.id,
                targetTitle: a.LtiPresentationTargets.Popup.name
            }))
        }
        if ((f & 1) > 0) {
            e.push(new Bbm({
                targetId: a.LtiPresentationTargets.Redirect.id,
                targetTitle: a.LtiPresentationTargets.Redirect.name
            }))
        }
        return e
    };
    c.Us.OpenToolModal = function(j, l, f, g, h, e) {
        var k, i;
        if ((j === "Add" || j === "Edit") && f > 0 && g > 0) {
            if (j === "Add") {
                k = new c.Ms.Tool({
                    ContextLabelId: f,
                    ContextValue: g,
                    Gradeable: h
                });
                i = new c.Vs.EditTool({
                    model: k
                });
                p3.rV(i, p3.Layout.Containers.Modal, true);
                p3.showModal(p3.Layout.Containers.Modal, {});
                if (e) {
                    e(i)
                }
            } else {
                k = new c.Ms.Tool();
                k.fetch({
                    data: {
                        id: l
                    },
                    success: function() {
                        k.set("ContextLabelId", f);
                        k.set("ContextValue", g);
                        k.set("Gradeable", h);
                        i = new c.Vs.EditTool({
                            model: k
                        });
                        p3.rV(i, p3.Layout.Containers.Modal, true);
                        p3.showModal(p3.Layout.Containers.Modal, {});
                        if (e) {
                            e(i)
                        }
                    },
                    error: function() {
                        p3.displayError("Error loading the learning tool")
                    }
                })
            }
        } else {
            p3.displayError("Error opening the learning tool")
        }
    }
}(p3.module("shared/ltitool")));
(function(b) {
    var c = p3.module("shared/filterableviews/worklist"),
        a = p3.Us.Enum.FilterableViewListType.ListUserGroup;
    c.FilterableViewOptions[a] = {
        ListType: a,
        DefinitionUrl: "FilterableViews/UserGroupListDefintion/",
        ResultUrl: "FilterableViews/UserGroupListGet/",
        CanExport: true,
        Title: "group"
    };
    c.PageData[a] = {
        ListPageHash: "#usergrouplist",
        ListPageView: b.Vs.LayoutView
    };
    b.Vs.Layout = c.Vs.LayoutView.extend({
        filterableViewOptions: c.FilterableViewOptions[a],
        title: "Group finder",
        HideTitle: true,
        Header: "Group finder"
    });
    p3.router().route("usergrouplist", "usergrouplist", function() {
        p3.setTitle("Groups List");
        p3.renderMainPage(new b.Vs.Layout())
    })
}(p3.module("LMS/shared/UserGroupList")));
var podiumApp = p3,
    aP = p3.Config.ApiRootPath;
p3.Utilities = p3.Us;
